<chapter id="graphics">
   <title>Graphics</title>

<para>
&PRODUCTNAME; provides both traditional and extended &GENERICNAME; turtle graphics.
Multiple turtles are supported but dynamic turtles and collision detection are not supported.
</para>

<para>
The center of the graphics surface (which may not be the center of the screen window, depending on how it is scrolled) is turtle location [0 0].
Positive X is to the right; positive Y is up.
Headings (angles) are measured in degrees clockwise from the positive Y axis.
(This differs from the common mathematical convention of measuring angles counterclockwise from the positive X axis.)
The turtle is represented as an isosceles triangle; the actual turtle position is at the midpoint of the base (the long side).

<!-- not implemented
However, the turtle is drawn one step behind its actual position, so that the display of the base of the turtle's triangle does not obscure a line drawn perpendicular to it (as would happen after drawing a square).
-->
</para>

<para>
&PRODUCTNAME; begins with a white background and black pen.
</para>

<para>
&PRODUCTNAME; supports color-by-index and true color.
When using color-by-index, the index to color mapping is given in the following table.

<informaltable frame='all'>
  <tgroup cols='2'>
    <thead>
      <row><entry>Index</entry> <entry>Color</entry></row>
    </thead>
    <tbody>
      <row><entry>0</entry><entry>black</entry></row>
      <row><entry>1</entry><entry>blue</entry></row>
      <row><entry>2</entry><entry>green</entry></row>
      <row><entry>3</entry><entry>cyan (aqua)</entry></row>
      <row><entry>4</entry><entry>red</entry></row>
      <row><entry>5</entry><entry>magenta (fuchsia)</entry></row>
      <row><entry>6</entry><entry>yellow</entry></row>
      <row><entry>7</entry><entry>white</entry></row>
      <row><entry>8</entry><entry>brown</entry></row>
      <row><entry>9</entry><entry>tan</entry></row>
      <row><entry>10</entry><entry>olive</entry></row>
      <row><entry>11</entry><entry>sky blue</entry></row>
      <row><entry>12</entry><entry>salmon</entry></row>
      <row><entry>13</entry><entry>medium purple</entry></row>
      <row><entry>14</entry><entry>orange</entry></row>
      <row><entry>15</entry><entry>gray</entry></row>
    </tbody>
  </tgroup>
</informaltable>
</para>


   <section id="multiple-turtles">
       <title>Multiple Turtles</title>
      
<para>
&PRODUCTNAME; supports up to 1024 different turtles.
Each turtle maintains its own heading (orientation in 3D), position, and pen control, but not pen color.
Each turtle can be represented as a <link linkend="command-bitmapturtle">BITMAPTURTLE</link>.
Note that turtles start at index 0, which is the default turtle.
Because there is a limit of 1024 turtles, the highest turtle index is 1023.
All turtles between 0 and the highest turtle ever selected will be "activated", so don't choose turtle 100 and 200 if you only need 2 turtles.
Click the "Reset" button or executing <link linkend="command-clearscreen">CLEARSCREEN</link> will select turtle 0 and deactivate all other turtles.
</para>

<para>
In addition to the 1024 turtles that you can create, there are also 3 special turtles used when in <link linkend="command-perspective">PERSPECTIVE</link> mode.

<informaltable frame='all'>
  <tgroup cols='2'>
    <thead>
      <row><entry>Index</entry> <entry>Turtle</entry></row>
    </thead>
    <tbody>
      <row>
        <entry>-1</entry>
        <entry>His position represents where your eye is when viewing a 3D scene (defaults to [400 400 600]).
               His orientation does not matter.
               Changing this turtle's position does not have any effect on the screen until something new is drawn.
        </entry>
      </row>
      <row>
        <entry>-2</entry>
        <entry>Her position represents where your eye is looking when viewing a 3D scene (defaults to [0 0 0]).
               Her orientation represents which direction is "up" on the screen (defaults to [0 0 0], the position Y axis is up).
               Changing this turtle's position does not have any effect on the screen until something new is drawn.
        </entry>
      </row>
      <row>
        <entry>-3</entry>
        <entry>Its position represents where the light source is positioned (defaults to [0 0 1000]).
               Its orientation does not matter.
               This turtle only matters when you're using <link linkend="command-polystart">POLYSTART</link> and <link linkend="command-polyend">POLYEND</link>.</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</para>

<para>
Note that you cannot look in the same direction as "up".
For example, if turtle -2 is in her default position and orientation and you set turtle -1 to somewhere along the position Y axis, say [0 1000 0], you won't be able to see anything.
</para>

<para>
These special turtles are never shown or bitmapped.
Each time you enter <link linkend="command-perspective">PERSPECTIVE</link> mode all special turtles are reset to their default position and orientation.
</para>

        &command-setturtle;
        &command-turtle;
        &command-turtles;
        &command-bitmapturtle;
        &command-nobitmapturtle;

   </section>

   <section id="turtle-motion">
       <title>Turtle Motion</title>
      
        &command-forward;
        &command-back;
        &command-left;
        &command-right;
        &command-leftroll;
        &command-rightroll;
        &command-downpitch;
        &command-uppitch;
        &command-setpos;
        &command-setposxyz;
        &command-setxy;
        &command-setxyz;
        &command-setx;
        &command-sety;
        &command-setz;
        &command-home;
        &command-setheading;
        &command-setroll;
        &command-setpitch;
        &command-setorientation;
        &command-ellipsearc;
        &command-ellipsearc2;
        &command-ellipse;
        &command-ellipse2;
        &command-arc;
        &command-arc2;
        &command-circle;
        &command-circle2;

   </section>

   <section id="turtle-motion-queries">
       <title>Turtle Motion Queries</title>
      
        &command-pos;
        &command-posxyz;
        &command-xcor;
        &command-ycor;
        &command-zcor;
        &command-heading;
        &command-roll;
        &command-pitch;
        &command-orientation;
        &command-towards;
        &command-towardsxyz;
        &command-distance;
        &command-distancexyz;
        &command-pixel;
        &command-scrunch;

   </section>

   <section id="turtle-window-control">
       <title>Turtle and Window Control</title>
        &command-showturtle;
        &command-hideturtle;
        &command-clean;
        &command-clearscreen;
        &command-wrap;
        &command-window;
        &command-fence;
        &command-perspective;
        &command-fill;
        &command-label;
        &command-setpixel;
        &command-fontfacenames;
        &command-setlabelfont;
        &command-labelfont;
        &command-labelsize;
        &command-textscreen;
        &command-fullscreen;
        &command-splitscreen;
        &command-setscrunch;
        &command-refresh;
        &command-norefresh;
        &command-zoom;
        &command-scrollx;
        &command-scrolly;
        &command-setfocus;
        &command-getfocus;
        &command-icon;
        &command-unicon;
        &command-windowset;
   </section>

   <section id="using-color">
       <title>Using Color</title>

<para>
Several commands (<link linkend="command-setpencolor">SETPENCOLOR</link>, <link linkend="command-setfloodcolor">SETFLOODCOLOR</link>, <link linkend="command-setscreencolor">SETSCREENCOLOR</link>) exist in &GENERICNAME; to specify red, green, and blue intensities of color.
Each input represents how much red, green, and blue you want in the color.
Each input has a range of 0-255.
You can create 16.7 million different colors by mixing different amounts of red, green, and blue.
</para>

<para>
If you're running with a 256 color Windows Driver for your monitor you will get "real" colors.
The colors are stored in a table called a palette.
The palette has room for 256 colors (chosen from 16.7 possibilities).
You can tell if you are running in 256 color mode (have a palette) by popping up the <link linkend="command-status">STATUS</link> window and looking at the palette usage.
If it shows "N/A" (Not Applicable) you are not running a 256 (or more) Windows driver.
See the <link linkend="command-clearpalette">CLEARPALETTE</link> command for more details about managing the palette.
</para>


<para>
If you are running with 16 (or less) color Windows Driver for your monitor Windows will simulate all the colors by mixing (dithering) the 16 (or less) colors.
If the <link linkend="command-setpensize">SETPENSIZE</link> is too narrow (if it equals 1) Windows cannot mix (dither) colors.
Windows does not mix (dither) colors on Fonts either.
If your hardware can support a 256 Windows Driver you should look into loading the appropriate Driver.
The Documentation with your Graphics card explains the capabilities and how to load new Drivers.
&PRODUCTNAME; is fun in any mode but it's even more fun in 256 color mode.
You can load 256 color bitmaps and do some incredible things with them.
</para>


<para>
Example of instructions that set some common pen colors:

<informaltable frame='all'>
  <tgroup cols='2'>
    <thead>
      <row><entry>Instruction</entry> <entry>Color</entry></row>
    </thead>
    <tbody>
      <row><entry>SETPENCOLOR [000 000 000]</entry><entry>black</entry></row>
      <row><entry>SETPENCOLOR [255 255 255]</entry><entry>white</entry></row>
      <row><entry>SETPENCOLOR [128 128 128]</entry><entry>gray</entry></row>
      <row><entry>SETPENCOLOR [255 000 000]</entry><entry>red</entry></row>
      <row><entry>SETPENCOLOR [000 255 000]</entry><entry>green</entry></row>
      <row><entry>SETPENCOLOR [000 000 255]</entry><entry>blue</entry></row>
    </tbody>
  </tgroup>
</informaltable>
</para>

<para>
Note that when running 256 color mode with a palette that several advantages and disadvantages occur:
</para>

<para>
Printing a 256 color image on a mono printer will be less pleasing than printing in 16 color mode.
This is because no "dithering" (mixing dots) is used in 256 color mode.
</para>

<para>
Running in 256 color mode is slower and takes more memory and may not be possible on some smaller machines or machines with limited video capabilities.
</para>

<para>
Running in 256 color does give much more pleasant colors and even allows manipulation of 256 color bitmap files.
</para>

<para>
For compatibility with other &GENERICNAME; implementations and simplicity for young programmers, &PRODUCTNAME; also supports single index colors.
If you set any color with an 16 color index, &PRODUCTNAME; will output all colors as a 16 color index.
If you set any color with an [red green blue] color vector, &PRODUCTNAME; will output all colors as [red green blue] color vectors.
</para>


<variablelist>
<varlistentry><term>Example</term>
<listitem>
    <programlisting><userinput>SHOW PENCOLOR</userinput>
[0 0 0]
<userinput>SETPENCOLOR 5
SHOW PENCOLOR</userinput>
5
<userinput>SETPENCOLOR [255 0 0]
SHOW PENCOLOR</userinput>
[255 0 0]
</programlisting>
</listitem>
</varlistentry>

</variablelist>

<para>
&PRODUCTNAME; supports color-by-index and true color.
When using color-by-index, the index to color mapping is given in the following table.

<informaltable frame='all'>
  <tgroup cols='3'>
    <thead>
      <row> <entry>Index</entry> <entry>Color Vector</entry> <entry>Color</entry>           </row>
    </thead>
    <tbody>
      <row> <entry>0</entry>  <entry>[0 0 0]</entry>       <entry>Black</entry>             </row>
      <row> <entry>1</entry>  <entry>[0 0 255]</entry>     <entry>Blue</entry>              </row>
      <row> <entry>2</entry>  <entry>[0 255 0]</entry>     <entry>Green</entry>             </row>
      <row> <entry>3</entry>  <entry>[0 255 255]</entry>   <entry>Cyan (Aqua)</entry>       </row>
      <row> <entry>4</entry>  <entry>[255 0 0]</entry>     <entry>Red</entry>               </row>
      <row> <entry>5</entry>  <entry>[255 0 255]</entry>   <entry>Magenta (Fuchsia)</entry> </row>
      <row> <entry>6</entry>  <entry>[255 255 0]</entry>   <entry>Yellow</entry>            </row>
      <row> <entry>7</entry>  <entry>[255 255 255]</entry> <entry>White</entry>             </row>
      <row> <entry>8</entry>  <entry>[155 96 59]</entry>   <entry>Brown</entry>             </row>
      <row> <entry>9</entry>  <entry>[197 136 18]</entry>  <entry>Tan</entry>               </row>
      <row> <entry>10</entry> <entry>[100 162 64]</entry>  <entry>Olive</entry>             </row>
      <row> <entry>11</entry> <entry>[120 187 187]</entry> <entry>Sky Blue</entry>          </row>
      <row> <entry>12</entry> <entry>[255 149 119]</entry> <entry>Salmon</entry>            </row>
      <row> <entry>13</entry> <entry>[144 113 208]</entry> <entry>Medium Purple</entry>     </row>
      <row> <entry>14</entry> <entry>[255 163 0]</entry>   <entry>Orange</entry>            </row>
      <row> <entry>15</entry> <entry>[183 183 183]</entry> <entry>Gray</entry>              </row>
    </tbody>
  </tgroup>
</informaltable>
</para>


   </section>

   <section id="understand-your-orientation-in-3D">
       <title>Understand Your Orientation in 3D</title>

<para>
In 2D life is simple:
<itemizedlist>
  <listitem>
    <para>
      <link linkend="command-heading">HEADING</link> is affected by <link linkend="command-left">LEFT</link>, <link linkend="command-right">RIGHT</link>, and <link linkend="command-setheading">SETHEADING</link>.
    </para>
  </listitem>
</itemizedlist>
</para>

<para>
In 3D, (<link linkend="command-perspective">PERSPECTIVE</link>) mode things are bit more complicated:

<itemizedlist>
  <listitem>
    <para>
      <link linkend="command-heading">HEADING</link> is affected by <link linkend="command-left">LEFT</link>, <link linkend="command-right">RIGHT</link>, and <link linkend="command-setheading">SETHEADING</link>.
    </para>
  </listitem>

  <listitem>
    <para>
      <link linkend="command-roll">ROLL</link> is affected by <link linkend="command-leftroll">LEFTROLL</link>, <link linkend="command-rightroll">RIGHTROLL</link>, and <link linkend="command-setroll">SETROLL</link>.
    </para>
  </listitem>

  <listitem>
    <para>
      <link linkend="command-pitch">PITCH</link> is affected by <link linkend="command-uppitch">UPPITCH</link>, <link linkend="command-downpitch">DOWNPITCH</link>, and <link linkend="command-setpitch">SETPITCH</link>.
    </para>
  </listitem>
</itemizedlist>
</para>

<para>
However, there is more to it than that.
ROLL can also affect your HEADING.
PITCH can also affect your ROLL, and so on.
They all interact with one another.
The easiest way to understand this is with an example:

<programlisting><userinput>PERSPECTIVE
RIGHT 90
(SHOW ROUND ROLL ROUND PITCH ROUND HEADING)</userinput>
0 0 90
<userinput>CLEARSCREEN
DOWNPITCH 90
RIGHTROLL 90
UPPITCH 90
(SHOW ROUND ROLL ROUND PITCH ROUND HEADING)</userinput>
0 0 90
</programlisting>

</para>

<para>
The example above only uses rolls and pitches but the heading changed.
But it is correct, think about the maneuvers I made and where the turtle should be pointing.
</para>

<para>
But don't worry, &PRODUCTNAME; makes it easy, you just need to understand some basic rules so that you don't get lost in 3D space.
The turtle controls ROLL, PITCH, and HEADING do affect one another but in a certain way which is important.
The most important is that a change in HEADING (with RIGHT, LEFT or SETHEADING) will not effect your ROLL or PITCH.
This is what allows you to use a lot of your existing 2D code in 3D.
</para>

<para>
There is also another rule to understand, you cannot simply say:

<programlisting><userinput>PERSPECTIVE
SETROLL 45
SETPITCH 45
SETHEADING 45
(SHOW ROUND ROLL ROUND PITCH ROUND HEADING)</userinput>
45 45 45
</programlisting>

And expect to be at an absolute orientation of 45, 45, 45.
</para>

<para>
<programlisting><userinput>CLEARSCREEN
RIGHT 45
RIGHTROLL 30
UPPITCH 30
; Now try to set your self up to 45,45,45 again
SETROLL 45
SETPITCH 45
SETHEADING 45
(SHOW ROUND ROLL ROUND PITCH ROUND HEADING)</userinput>
248 29 45
</programlisting>
</para>

<para>
But don't worry there is an easy solution, the <link linkend="command-setorientation">SETORIENTATION</link> command.
</para>

<para>
<programlisting><userinput>CLEARSCREEN
RIGHT 45
RIGHTROLL 30
UPPITCH 30
; Now try to set your self up to 45,45,45 again
SETORIENTATION [45 45 45]
(SHOW ROUND ROLL ROUND PITCH ROUND HEADING)</userinput>
45 45 45
</programlisting>
</para>

<para>
SETORIENTATION understands the interactions between ROLL, PITCH and HEADING.
All SETORIENTATION knows is that it has to do things in the correct order.
It basically backs out your current orientation and applies the requested one.
It does this in a very specific order.
Your current orientation can also be reported or saved using the <link linkend="command-orientation">ORIENTATION</link> command.
</para>

<programlisting><userinput>CLEARSCREEN
RIGHT 45
SHOW ORIENTATION</userinput>
[0 0 45]
<userinput>MAKE "saveit ORIENTATION
RIGHT 90
UPPITCH 180
SETORIENTATION :saveit
SHOW ORIENTATION</userinput>
[0 0 45]
</programlisting>

<para>
There is also another command that knows about your ORIENTATION and that is <link linkend="command-towardsxyz">TOWARDSXYZ</link>.
TOWARDSXYZ will output an orientation that is compatible with SETORIENTATION.
</para>


<programlisting><userinput>SETORIENTATION TOWARDSXYZ [100 100 0]
SHOW ORIENTATION</userinput>
[0 0 45]
<userinput>FORWARD DISTANCEXYZ [100 100 0]
SHOW POSXYZ</userinput>
[100 100 0]
</programlisting>

<para>
Having said all that, you don't really need to think in terms of absolute ORIENTATION.
ORIENTATION and SETORIENTATION will be used mostly to save, report and restore your ORIENTATION (just like you do with HEADING and SETHEADING in 2D).
And like explained earlier changes in your heading with RIGHT, LEFT and SETHEADING only effect what they effected in 2D (your HEADING).
</para>

<para>
You should also be thinking the same way you do in 2D.
You don't often worry about your absolute HEADING in 2D, it's most often a turn relative to your current HEADING.
It's no different in 3D except you have more ways to turn.
Think like you're an airplane and that you're in the cockpit of the turtle 
Then decide where you want to go next.
</para>

   </section>


   <section id="drawing-3d-solids">
       <title>Drawing 3D Solids</title>

<para>
3D Solids in &PRODUCTNAME; uses all the standard 3D commands and a few additional commands to help &PRODUCTNAME; understand what you're drawing.
In order to do hidden line removal or hidden surface removal, you must define surfaces, not just vectors.
Surfaces are simply filled polygons.
You just need to tell &PRODUCTNAME; when you're starting a surface and when you're done.
If you used only vectors to draw a box, &PRODUCTNAME; would not know if it's a 6-sided closed box (solid cube) or a 4-sided box with an open top and bottom.
Vectors alone are ambiguous with respect to surfaces.
</para>

<para>
&GENERICNAME; programmers are used to dealing with filled polygons, you do it all the time so it should not be a strange new concept.
But &PRODUCTNAME; in 3D mode will take care of the correct filling of that polygon with respect to the color you should see based on your eye view, light source, obstructions, and the color of the surface.
</para>

<para>
Here are the new commands:

<informaltable frame='all'>
  <tgroup cols='2'>
    <thead>
      <row><entry>Command</entry> <entry>Description</entry></row>
    </thead>
    <tbody>
      <row><entry>POLYSTART</entry>     <entry>Start a new polygon (a surface of PENCOLOR)</entry></row>
      <row><entry>POLYEND</entry>       <entry>End the definition of the polygon and display it.</entry></row>
      <row><entry>POLYVIEW</entry>      <entry>Shade and view all polygons that have been defined.</entry></row>
      <row><entry>SETTURTLE -3</entry>  <entry>Use this turtle to position light source.</entry></row>
      <row><entry>SETLIGHT</entry>      <entry>Use to set how objects should be illuminated.</entry></row>
    </tbody>
  </tgroup>
</informaltable>
</para>

<para>
The PEN color when drawing 3D surfaces is the color of the surface.
If you drew a box in 3D (6 Polygons) that all were drawn the same color, all you'd see is a FILLed octagon looking thing.
Color is affected by the angle of the surface between your eye (turtle -1) and the light source (turtle -3).
</para>

<para>
The 3D lighting model in &PRODUCTNAME; uses some modern techniques, but is primarily designed for performance.
It will not do shadows, reflections, etc.
You may see pixel errors sometimes.
This is an expected artifact of the algorithm I chose.
</para>

        &command-polystart;
        &command-polyend;
        &command-polyview;
        &command-setlight;
        &command-light;

   </section>



   <section id="polygon-restrictions">
       <title>Polygon Restrictions</title>

<para>
Polygons in &PRODUCTNAME; have three easy-to-satisfy restrictions:

<orderedlist>
  <listitem><para>A polygon's first 3 vertices must form a triangle.</para></listitem>
  <listitem><para>A polygon must be convex.</para></listitem>
  <listitem><para>A polygon must be planar.</para></listitem>
</orderedlist>

</para>

<section id="polygon-restriction-1">
  <title>Restriction #1: A polygon's first 3 vertices must form a triangle</title>

<para>
The triangle can be extremely shallow.  This is legal:

<programlisting><userinput>POLYSTART
MAKE "savepos POSXYZ
FORWARD 100
RIGHT   0.00000001 ; very small angles are okay
FORWARD 100
SETPOS :saveposxyz
POLYEND</userinput></programlisting>
</para>

<para>
This is NOT legal (even though it produces a convex polygon):

<programlisting><userinput>POLYSTART
MAKE "savepos POSXYZ
FORWARD 50
FORWARD 50 ; error can't have straight angles
RIGHT   90
FORWARD 100
SETPOS :saveposxyz
POLYEND</userinput></programlisting>
</para>
   </section>

<section id="polygon-restriction-2">
  <title>Restriction #2: A polygon must be convex</title>

<para>
Being "convex" means that if you pick any 2 points within the polygon and connect them with a straight line, the line will never go outside the polygon.
Triangles, squares, and circles are all convex.
The letter "E" (as a polygon) is not convex.
</para>


<para>
This is legal:
<programlisting><userinput>POLYSTART
REPEAT 4 [FORWARD 150 RIGHT 90] ; a square is convex
POLYEND</userinput></programlisting>
</para>

<para>
This is NOT legal:


<programlisting><userinput>POLYSTART
REPEAT 3 [
  FORWARD 150
  RIGHT   90
]
FORWARD 50
RIGHT   90  ; error: these instruction 
FORWARD 50  ;        add a cavity to the
LEFT    90  ;        polygon
FORWARD 50  ;
LEFT    90  ;
FORWARD 50  ;
RIGHT   90  ;
FORWARD 50  
RIGHT   90 
POLYEND</userinput></programlisting>
</para>

<para>
You can always break a convex polygon up into simpler concave polygons.
</para>

</section>


<section id="polygon-restriction-3">
  <title>Restriction #3: A polygon must be planar</title>

<para>
Being "planar" means that a polygon must be flat.
This is easy to do if you never use UPPITCH, DOWNPITCH, RIGHTROLL, or LEFTROLL between POLYSTART and POLYEND.
</para>

<para>
This is legal:
<programlisting><userinput>POLYSTART
REPEAT 4 [FORWARD 100 RIGHT 90] ; a square is planar
POLYEND</userinput></programlisting>
</para>

<para>
This is NOT legal:

<programlisting><userinput>POLYSTART
REPEAT 3 [
  FORWARD   100 
  RIGHT     90
]
FORWARD   50
UPPITCH   90  ; error: these instruction move
FORWARD   50  ;        out of the polygon's plane
DOWNPITCH 90  ;
FORWARD   50  ;
DOWNPITCH 90  ;
FORWARD   50  ;
UPPITCH   90  ;
FORWARD   50  
RIGHT     90 
POLYEND</userinput></programlisting>
</para>

<para>
If you want to create a polygon with a "bend" in it that leaves the plane, you can break up your polygon into simpler polygons that are coplanar.
</para>

</section>

<section id="polygon-samples">
   <title>Polygon Samples</title>

<para>
An example polygon using CIRCLE.

<programlisting><userinput>PERSPECTIVE
REPEAT 36 [
  POLYSTART
  CIRCLE 100
  POLYEND
  RIGHTROLL 10
]
POLYVIEW</userinput></programlisting>
</para>


<para>
An example polygon using ARC.

<programlisting><userinput>PERSPECTIVE
REPEAT 36 [
  POLYSTART
  ARC2 180 100
  RIGHT   90
  FORWARD 200
  RIGHT   90
  POLYEND
  RIGHTROLL 10
]
POLYVIEW
</userinput></programlisting>
</para>

</section> <!-- Polygon Samples -->
</section> <!-- Polygon Restrictions -->

   <section id="turtle-and-window-queries">
       <title>Turtle And Window Queries</title>
      
        &command-shownp;
   </section>

   <section id="pen-control">
       <title>Pen Control</title>
      
<para>
The turtle carries a pen that can draw pictures.
At any time the pen can be "up" (in which case moving the turtle does not change what's on the graphics screen) or "down" (in which case the turtle leaves a trace).
If the pen is down, it can operate in one of three modes: "paint" (so that it draws lines when the turtle moves), "erase" (so that it erases any lines that might have been drawn on or through that path earlier), or "reverse" (so that it inverts the color of each point along the turtle's path).
</para>

        &command-pendown;
        &command-penup;
        &command-penpaint;
        &command-penerase;
        &command-penreverse;
        &command-pennormal;
        &command-setpencolor;
        &command-setfloodcolor;
        &command-setscreencolor;
        &command-setpensize;
        &command-setpenpattern;
        &command-setpen;
        &command-clearpalette;
   </section>

   <section id="pen-queries">
       <title>Pen Queries</title>
      
        &command-pendownp;
        &command-penmode;
        &command-pencolor;
        &command-floodcolor;
        &command-screencolor;
        &command-pensize;
        &command-penpattern;
        &command-pen;
   </section>

</chapter>
