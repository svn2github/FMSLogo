
<preface id="preface">
   <title>Introducción</title>
   <indexterm><primary>Introducción</primary></indexterm>

   <section id="tutorial">
      <title>¿Por qué &GENERICNAME;?</title>
      <indexterm><primary>¿Por qué &GENERICNAME;?</primary></indexterm>

<para>
Cuando hay tantos lenguajes de programación de que uno se puede eligir, ¿por qué elegiría alguien &GENERICNAME;?
Cuando &GENERICNAME; fue creado en 1967, era al menos tan poderoso como cualquier de sus contemporáneos.
El mundo de los computadoras ha cambiado mucho hasta hoy y las exigencias de la industria han engendrado muchas nuevos lenguajes que ofrecen nuevas funcionalidades poderosas.
Durante ese tiempo, &GENERICNAME; no cambiaba mucho.
Hoy por hoy, &GENERICNAME; carece de muchas funcionalidades que son necesarias en la industria y, por lo tanto, no es utilizado por los programadores profesionales salvo para proyectos pequeños.
</para>

<para>
Entonces, si &GENERICNAME; no es utilizado por programadores profesionales, ¿por qué usarlo en absoluto?
</para>

<para>
Primero, &GENERICNAME; no fue diseñado para crear software de grado industrial, sino fue diseñado como herramienta para ayudar a los niños aprender una habilidad importante, una que es tan importante hoy como la era en 1967: la habilidad de aprender como aprender.
Las nuevas funciones de lenguaje que se exige la industria son irrelevantes para ayudar a la gente aprender como aprender.
Mientras que las otras lenguajes son diseñadas sobre conceptos abstractos de la ciencia de la computación, &GENERICNAME; es diseñado alrededor de la manera en que la gente aprende.
La filosofía básica de &GENERICNAME; es que la educación debe enfocar en aprendizaje, no enseñanza, y que aprendizaje ocurre mejor cuando el aprendedor es comprometido mentalmente en un proyecto constructivo.
El programador desempeña el papel de "profesor" y aprende por "enseñar" a una computadora a hacer cosas.
&GENERICNAME; no es, por sí mismo, la materia por aprender, sino es una herramienta para explorar ideas tal como el arte, la música, las matemáticas, la inteligencia, y el lenguaje.
</para>

<para>
En un sentido, la carencia de funcionalidades en &GENERICNAME; es uno de sus mejores funcionalidades.
Muchos lenguajes de programación que tienen las últimas funcionalidades requiere una configuración complejo.
Antes de que uno se puede comenzar a programar, uno debe primero aprender sobre cosas como compiladores, sintaxis, máquinas virtuales, clases, y puntos de entrada.
Cosas así son importantes para profesionales, pero son obstáculos innecesarios para los principiantes.
Con &GENERICNAME;, estás listo a empezar a programar en cuanto el entorno de &GENERICNAME; aparece en la pantalla.
Cada instrucción que tecleas es ejecutada de inmediato.
Esto te da resultados instantáneos de tus instrucciones, sea que funcionen como esperabas o no.
</para>

<para>
Otra ventaja de &GENERICNAME; es su apoyo de «Gráficas tortuga».
Gráficas tortuga son un simple y poderoso conjunto de comandos usados para manipular un elemento de pantalla que se lama «la tortuga».
La idea detrás de gráficas tortuga es que programas por dar instrucciones a una "tortuga" (representado en &PRODUCTNAME; por un triángulo) y esas instrucciones hacen que la tortuga camina en la pantalla, dibujando una línea por donde va.
Con solo unos pocos tecleos, puedes programar la computadora a dibujar una línea en la pantalla.
Por ejemplo <userinput>AV 100</userinput> quiere decir «tortuga, camina 100 pasos adelante».
Añadiendo más instrucciones, puedes programar la computadora a dibujar imágenes completas.
</para>

<para>
Gráficas tortuga aportan la programación‎ informática dentro del mundo familiar a los niños, uno de colores, formas, y arte.
Habilitan a un niño a empezar a programar en una etapa de su desarrollo cognitivo antes de que pueda entender razonamiento simbólico.
</para>

<para>
&GENERICNAME; tiene un sintaxis sencillo que requiere menos tecleando que otras lenguajes, algo que es especialmente importante para los niños quienes aun no pueden teclear fácilmente.
Como has visto, puedes dibujar una línea en la pantalla por escribir <userinput>AV 100</userinput>.
En otras lenguajes, una instrucción equivalente tal vez sería <userinput>Tortuga.Avanzar(100);</userinput> y si olvides uno del los elementos de sintaxis, como el punto y coma al fin, conseguirás un mensaje de error críptico (y probablemente en inglés), como «syntax error: unterminated statement».
Tales mensajes no tienen sentido para los principiantes.
</para>

<para>
Aunque &GENERICNAME; no es para la programación profesional, esto no significa que es solamente para niños.
Muchos adultos se equivocan pensando que la programación es como la aritmética y que programar debe de ser tan aburrido como haciendo impuestos o balanceando un talonario de cheques.
En verdad, la programación es más como carpintería y arte.
Mezcla la emoción y satisfacción de crear algo con un sentido artístico de hacerlo bella en su expresión.
Esto puede sonar descabellado, pero más que programas, más que acabarás de entenderlo como verdad.
Además, programar es un pasatiempo intelectualmente gratificante que vale la pena para un adulto, sea un programador profesional o no.
En la misma manera de que intentando demostrar el último teorema de Fermat vale la pena por alguien quien no es matemático profesional, o pintando vale la pena por alguien quien nunca va a ser artista profesional, o aprendiendo tocar el piano vale la pena por alguien quien nunca va a interpretar para una audiencia más allá de sus amigos y familia, la programación aficionada puede enriquecer tu vida.
Si no vas a crear software para la industria, entonces no necesitas usar ninguna de los lenguajes que son utilizado por la industria.
&GENERICNAME; es un buen lugar por donde empezar.
</para>

    </section>

    <section id="where-to-start">
      <title>Where to Start</title>
      <indexterm><primary>Where to Start</primary></indexterm>

<para>
Novices can start in &GENERICNAME; without having to program at all by just learning how to command the turtle.
Learning turtle graphics teaches the user about geometry.
It's amazing how soon you can introduce the concept of programming once they grasp the turtle concept.
Let's look at some simple examples:
</para>


<para>
Draw a square using the turtle.
</para>

<programlisting>FORWARD 100
RIGHT 90
FORWARD 100
RIGHT 90
FORWARD 100
RIGHT 90
FORWARD 100
RIGHT 90</programlisting>

<para>
That was easy but too much typing, let's try again.
</para>

<programlisting>REPEAT 4 [FD 100 RT 90]</programlisting>

<para>
That's it?
Yes, that's the same square.
We did two things.
We noticed a lot of repeated instructions in our first example, so we asked &GENERICNAME; to repeat the same sequence 4 times.
We also used abbreviated forms of the same commands.
But we can still do better.
Wouldn't it be more useful just to say "square" when you wanted a square?
</para>

<programlisting>EDIT "SQUARE
&lt;Editor pops up>
TO SQUARE
  REPEAT 4 [FORWARD 100 RIGHT 90]
END
&lt;Exit Editor and save>

SQUARE</programlisting>

<para>
What are the TO and END for?
They define a procedure (a small program) for the square.
The TO can be thought of as "to do something", the END terminates the TO.
Once SQUARE was "defined" we then called it.
That's all you need to get a square now, just type SQUARE.
There is a problem, however.
SQUARE only draws squares of 100 by 100.
What about square of other sizes?
</para>

<programlisting>EDIT "SQUARE

TO SQUARE :length
  REPEAT 4 [FORWARD :length RIGHT 90]
END

SQUARE 100
SQUARE 200</programlisting>

<para>
Note all we did is replace 100 with a variable name called :length.
Now when we call square we must specify how big we want it.
Above we asked &GENERICNAME; to draw one square at 100x100 and another at 200x200.
Note the ":" in front of the word length tells &GENERICNAME; that length is a variable.
However, we can still do better.
Wouldn't it be nice if we could draw something other than a square, like a triangle?
</para>

<programlisting>TO TRIANGLE :length
  REPEAT 3 [FORWARD :length RIGHT 120]
END

TO SQUARE :length
  REPEAT 4 [FORWARD :length RIGHT 90]
END

TO PENTAGON :length
  REPEAT 5 [FORWARD :length RIGHT 72]
END

TRIANGLE 100
SQUARE 100
PENTAGON 100</programlisting>

<para>
That works, but it's more typing than we need to do.
Worse, the different procedures are mostly the same and we need to define a different procedure for every shape.
Let's try again.
</para>

<programlisting>TO POLYGON :length :sides
  REPEAT :sides [FORWARD :length RIGHT 360/:sides]
END

POLYGON 100 3
POLYGON 100 4
POLYGON 100 5
</programlisting>

<para>
What happened to TRIANGLE, SQUARE and PENTAGON?
We don't need them because POLYGON can draw every equal-sided polygon possible and with only one line of code.
We now repeat the sequence based on how many :sides the caller asked for and we turn (RIGHT) the amount of degrees appropriate for that shape.
You may not realize it but this is <emphasis>programming</emphasis>.
</para>

<para>
Now that we have a program, it's a good idea to save it to a file.
The edits you've made so far are all in &GENERICNAME;'s memory and not on the disk.
How do you save your work?
It's easy.
</para>

<programlisting>SAVE "SHAPES.LGO
BYE
</programlisting>

<para>
If you ever want to use these definitions again you'll have to load them.
How do you load you work from disk?
</para>

<programlisting>LOAD "SHAPES.LGO</programlisting>

<para>
I could go on forever, yes forever, even to the point of writing &GENERICNAME; within &GENERICNAME;.
</para>

<para>
That's a quick introduction.
Do you want to learn more?
Almost every command in this help file has a simple example that shows how to use it.
Also check out the examples that come with &PRODUCTNAME; (see the Help Menu).  These examples show how to combine several procedures to perform a simple task.
You can search for some tutorials on the Web, like <ulink url="http://fmslogo.sourceforge.net/workshop/">The Logo Workshop</ulink>.
Jim Muller's book "The Great Logo Adventure" is based on MSWLogo, but should be applicable to &PRODUCTNAME;.
For more advanced topics, see Brian Harvey's three volume <ulink url="https://people.eecs.berkeley.edu/~bh/v1-toc2.html">Computer Science Logo Style</ulink> from the MIT Press.
</para>

<para>
However you choose to learn more, make sure that you have <emphasis>fun</emphasis> learning it.
</para>

    </section>
</preface>

