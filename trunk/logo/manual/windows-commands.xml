<chapter id="windows-commands">
   <title>Windows Commands</title>

<para>
This chapter describes how to create Graphical User Interfaces (GUIs) in MSWLogo.
</para>

<para>
The term "window" is very broad and includes simple windows, push buttons, dialog boxes, list boxes, combo boxes, scroll bars, buttons, static text, group boxes, checkboxes, and radio buttons.
Using these elementary units, you can build up complex GUIs.
Each window maintains a parent-child relationship with the windows that are placed on it.
The way you program GUIs is modelled after how they are displayed, you create each individual sub-window and set up the parent-child relationships.
</para>

<para>
Each time a window is created, you must specify the parent that "owns" the window.
You must also specify a "name" so that the new window may be referenced by other instructions.
Most other commands will use this name to identify the Window or control you wish to communicate with.
When a parent window is deleted, its "child" Windows and controls are also deleted.
</para>

<para>
When controls are in windows the coordinates used in all the Windows functions are in Windows coordinate system (NOT the turtle coordinate system).
That is the Y axis is upside down (positive numbers are down).
The origin is NOT the middle of the screen, it is the upper left hand corner of the window.
</para>

<para>
When controls are in the graphics window the coordinates will be in the turtle coordinate system.
</para>

   <section id="window-commands">
      <title>Window Commands</title>

<para>
Windows are one of two types of basic "canvas" types.
A window has a title bar, frames, and a grey client area upon which other window control are places.
Unlike dialogs, windows are modeless, which means that MSWLogo will continue to run instructions while the window is displayed.
</para>

      &command-windowcreate;
      &command-windowdelete;
      &command-windowenable;
   </section>

   <section id="dialog-commands">
      <title>Dialog Commands</title>

<para>
Dialogs are one of two types of basic "canvas" types.
A dialog has a title bar, frames, and a grey client area upon which other window control are places.
Unlike windows, dialogs are modal, which means that MSWLogo won't run any instructions until the dialog is closed.
Because of this, dialogs are used when to present the user with a question that must be answered before the program can continue.
</para>

      &command-dialogcreate;
      &command-dialogdelete;
      &command-dialogenable;
   </section>

   <section id="listbox-commands">
      <title>Listbox Commands</title>

<para>
Listboxes are a type of control that presents the user with a pre-determined choice of items.
The items are represented as text and displayed vertically, one per line.
</para>

      &command-listboxcreate;
      &command-listboxdelete;
      &command-listboxenable;
      &command-listboxgetselect;
      &command-listboxaddstring;
      &command-listboxdeletestring;
   </section>


   <section id="combobox-commands">
      <title>Combobox Commands</title>

<para>
Comboboxes are a type of control that presents the user with a pre-determined choice of items
as well as a free-form text input.
The items are represented as text and displayed vertically, one per line.
</para>

<para>
Comboboxes get their name by being a combination of a listbox control and an edit control.
</para>

<para>
Comboboxes can also be used to create a pure edit control by setting the height such that the listbox is hidden.
</para>

      &command-comboboxcreate;
      &command-comboboxdelete;
      &command-comboboxenable;
      &command-comboboxgettext;
      &command-comboboxsettext;
      &command-comboboxaddstring;
      &command-comboboxdeletestring;
   </section>


   <section id="scrollbar-commands">
      <title>Scrollbar Commands</title>

<para>
Scrollbars let the user select a value by sliding a "scoller" along a bar that represents a range of possible values.
For example, if you wanted the user to enter a number from 1 to 100, you could use a scrollbar.
</para>

<para>
In many GUI frameworks, scrollbars are used to fit a large window into a small space by displaying only a small portion of the window and allowing the user to scroll which portion is visible.
However, that is NOT the kind of scrollbar that MSWLogo lets you create; the scrollbars that you create with MSWLogo are often associated with a "slider" control.
</para>

      &command-scrollbarcreate;
      &command-scrollbardelete;
      &command-scrollbarenable;
      &command-scrollbarset;
      &command-scrollbarget;
   </section>


   <section id="button-commands">
      <title>Button Commands</title>

<para>
Buttons let the user choose when an event happens.
The only function of a button is to run an instruction list when it is pressed.
</para>

      &command-buttoncreate;
      &command-buttondelete;
      &command-buttonenable;
      &command-buttonupdate;
   </section>


   <section id="static-commands">
      <title>Static Commands</title>

<para>
Static controls are simply a way of displaying text.
Static controls are called "static" because the user can't interact with them.
However, you can update the text, so the term "static" is somewhat misleading.
</para>

      &command-staticcreate;
      &command-staticdelete;
      &command-staticupdate;
   </section>


   <section id="groupbox-commands">
      <title>Group Box Commands</title>

<para>
A group box control is used to group radio button controls and checkbox controls both graphically and logically.
Radio buttons and checkboxes must belong to a group box.
Note that radio buttons and checkboxes which are placed in a group box still use the parent's origin NOT the group box's origin.
</para>

      &command-groupboxcreate;
      &command-groupboxdelete;
   </section>

   <section id="checkbox-commands">
      <title>Checkbox Commands</title>

<para>
Checkbox controls are used to ask the user yes/no questions.
A checkbox control has two components: a checkbox and a text label that indicates what putting a check in the checkbox means.
</para>

<para>
For multiple choice questions, use <link linkend="radiobutton-commands">radio button</link> control.
</para>

      &command-checkboxcreate;
      &command-checkboxdelete;
      &command-checkboxenable;
      &command-checkboxset;
      &command-checkboxget;
   </section>


   <section id="radiobutton-commands">
      <title>Radio Button Commands</title>

<para>
Radio buttons controls are used to ask the user a multiple choice question.
Each radio button two components: a round button and a text label that indicates what pressing the button means.
</para>

<para>
Radio buttons are grouped using a <link linkend="groupbox-commands">groupbox</link> control.
When the user presses a radio button, it is selected and all other radio buttons in the group are unselected.
As a result, only one item in the group may be selected at any time.
</para>

<para>
For yes/no questions, a <link linkend="checkbox-commands">checkbox</link> control may be more intuitivie.
</para>

<para>
The term "radio button" comes from car radios that have mechincal preset buttons.
When you press one of these real radio buttons, it gets pushed in, the tuner changes to your selection, and all other buttons pop out.
</para>

      &command-radiobuttoncreate;
      &command-radiobuttondelete;
      &command-radiobuttonenable;
      &command-radiobuttonset;
      &command-radiobuttonget;
   </section>

   <section id="debug-commands">
      <title>Debug Commands</title>

      &command-debugwindows;
   </section>

</chapter>
