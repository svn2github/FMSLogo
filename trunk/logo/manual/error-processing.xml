<chapter id="error-processing">
   <title>Error Processing</title>

<para>
If an error occurs, Logo takes the following steps.
First, if there is an available variable named <link linkend="command-erract">ERRACT</link>, Logo takes its value as an instructionlist and runs the instructions.
The operation <link linkend="command-error">ERROR</link> may be used within the instructions (once) to examine the error condition.
If the instructionlist invokes <link linkend="command-pause">PAUSE</link>, the error message is printed before the pause happens.
Certain errors are "recoverable"; for one of those errors, if the instructionlist outputs a value, that value is used in place of the expression that caused the error.
(If ERRACT invokes PAUSE and the user then invokes <link linkend="command-continue">CONTINUE</link> with an input, that input becomes the output from PAUSE and therefore the output from the ERRACT instructionlist.)
</para>

<para>
It is possible for an ERRACT instructionlist to produce an inappropriate value or no value where one is needed.
As a result, the same error condition could recur forever.
To avoid that danger, if the same error condition occurs twice in a row from an ERRACT instructionlist without user interaction, the message "Erract loop" is printed and control returns to toplevel.
"Without user interaction" means that if ERRACT invokes PAUSE and the user provides an incorrect value, this loop prevention mechanism does not take effect and the user gets to try again.
</para>

<para>
During the running of the ERRACT instructionlist, ERRACT is locally unbound, so an error in the ERRACT instructions themselves will not cause a loop.
In particular, an error during a pause will not cause a pause-within-a-pause unless the user reassigns the value [PAUSE] to ERRACT during the pause.
Such an error will not return to toplevel; it will remain within the original pause loop.
</para>

<para>
If ERRACT has no value, Logo handles the error by generating an internal <userinput>THROW "ERROR</userinput>.
If this <link linkend="command-throw">THROW</link> is not caught by a <userinput>CATCH "ERROR</userinput> in the user program, it is eventually caught either by the toplevel instruction loop or by a pause loop, which prints the error message.
An invocation of <userinput>CATCH "ERROR</userinput> in a user program locally unbinds ERRACT, so the effect is that whichever of ERRACT and CATCH "ERROR is more local will take precedence.
</para>

<para>
If a floating point overflow occurs during an arithmetic operation, or a two-input mathematical function (like <link linkend="command-power">POWER</link>) is invoked with an illegal combination of inputs, the "doesn't like" message refers to the second operand, but should be taken as meaning the combination.
</para>

   <section id="error-codes">
      <title>Error Codes</title>

<para>
Here are the numeric codes that appear as the first element of the list output by ERROR when an error is caught, with the corresponding messages.
Some messages may have two different codes depending on whether the error is recoverable (that is, a substitute value can be provided through the ERRACT mechanism) in the specific context.
Some messages are warnings rather than errors; these will not be caught.
The first two are so bad that Logo exits immediately.

<informaltable frame='all'>
  <tgroup cols='2'>
    <thead>
      <row><entry>Error Code</entry> <entry>Error Message</entry></row>
    </thead>
    <tbody>
      <row><entry>0</entry><entry>Fatal internal error (can't be caught)</entry></row>
      <row><entry>1</entry><entry>Out of memory (can't be caught)</entry></row>
      <row><entry>2</entry><entry>PROC doesn't like DATUM as input (not recoverable)</entry></row>
      <row><entry>3</entry><entry>PROC didn't output to PROC</entry></row>
      <row><entry>4</entry><entry>Not enough inputs to PROC</entry></row>
      <row><entry>5</entry><entry>PROC doesn't like DATUM as input (recoverable)</entry></row>
      <row><entry>6</entry><entry>Too much inside ( )'s</entry></row>
      <row><entry>7</entry><entry>I don't know what to do with DATUM</entry></row>
      <row><entry>8</entry><entry>')' not found</entry></row>
      <row><entry>9</entry><entry>VAR has no value</entry></row>
      <row><entry>10</entry><entry>Unexpected ')'</entry></row>
      <row><entry>11</entry><entry>I don't know how to PROC (recoverable)</entry></row>
      <row><entry>12</entry><entry>Can't find catch tag for THROWTAG</entry></row>
      <row><entry>13</entry><entry>PROC is already defined</entry></row>
      <row><entry>14</entry><entry>Stopped</entry></row>
      <row><entry>15</entry><entry>Already dribbling</entry></row>
      <row><entry>16</entry><entry>File system error</entry></row>
      <row><entry>17</entry><entry>Assuming you mean <link linkend="command-ifelse">IFELSE</link>, not <link linkend="command-if">IF</link> (warning only)</entry></row>
      <row><entry>18</entry><entry>VAR shadowed by local in procedure call (warning only)</entry></row>
      <row><entry>19</entry><entry>Throw "Error</entry></row>
      <row><entry>20</entry><entry>PROC is a primitive</entry></row>
      <row><entry>21</entry><entry>Can't use <link linkend="command-to">TO</link> inside a procedure</entry></row>
      <row><entry>22</entry><entry>I don't know how to PROC (not recoverable)</entry></row>
      <row><entry>23</entry><entry><link linkend="command-iftrue">IFTRUE</link>/<link linkend="command-iffalse">IFFALSE</link> without <link linkend="command-test">TEST</link></entry></row>
      <row><entry>24</entry><entry>Unexpected ']'</entry></row>
      <row><entry>25</entry><entry>Unexpected '}'</entry></row>
      <row><entry>26</entry><entry>Couldn't initialize graphics</entry></row>
      <row><entry>27</entry><entry>Macro returned VALUE instead of a list</entry></row>
      <row><entry>28</entry><entry>I don't know what to do with VALUE</entry></row>
      <row><entry>29</entry><entry>Can only use <link linkend="command-stop">STOP</link> or <link linkend="command-output">OUTPUT</link> inside a procedure</entry></row>
    </tbody>
  </tgroup>
</informaltable>

</para>


   </section>


</chapter>
