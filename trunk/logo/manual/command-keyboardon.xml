<section id="command-keyboardon">
    <title>KEYBOARDON</title>

<variablelist>

<varlistentry><term>Synopsis</term>
<listitem>
<synopsis><command>KEYBOARDON</command> <parameter>keydown</parameter>
(<command>KEYBOARDON</command> <parameter>keydown</parameter> <parameter>keyup</parameter>)</synopsis>
</listitem>
</varlistentry>

<varlistentry><term>Description</term>
<listitem>

<para>
Starts trapping keyboard events and sending them to <parameter>keydown</parameter> and <parameter>keyup</parameter>.
When a key is pressed down, <parameter>keydown</parameter> is called.
When a key is released, <parameter>keyup</parameter> is called.
You can determine the key that was pressed or released by calling <link linkend="command-keyboardvalue">KEYBOARDVALUE</link> in your <parameter>keydown</parameter> or <parameter>keyup</parameter> procedure.
</para>

<para>
<parameter>keydown</parameter> or <parameter>keyup</parameter> may either be a word that is the name of a Logo procedure to call, or a list of commands.
</para>

<para>
Note the "Screen" must have focus (NOT the commander) to catch the key events.
You can force this by calling <userinput>SETFOCUS [MSWLogo Screen]</userinput> after you call KEYBOARDON.
All the "callbacks" for the keyboard are automatically run in <link linkend="command-noyield">NOYIELD</link> mode.
</para>

</listitem>
</varlistentry>

<varlistentry><term>Example</term>
<listitem>
    <programlisting><userinput>KEYBOARDON [PRINT CHAR KEYBOARDVALUE]
SETFOCUS [MSWLogo Screen]
a</userinput>
a
<userinput>b</userinput>
b
KEYBOARDOFF
</programlisting>
</listitem>
</varlistentry>

</variablelist>

</section>
