LOAD "testlib.lgo

TO WINDOWSTEST.SETUP :toplevelwindow

  make "width 100
  make "xpos  10
  make "ypos  0

  STATICCREATE :toplevelwindow "statictext [This is static text] :xpos :ypos :width 10
  make "ypos :ypos + 15

  COMBOBOXCREATE :toplevelwindow "combobox  :xpos :ypos :width 40
  COMBOBOXADDSTRING "combobox [banana]
  COMBOBOXADDSTRING "combobox [apple]
  COMBOBOXADDSTRING "combobox [orange]
  make "ypos :ypos + 50

  LISTBOXCREATE     :toplevelwindow "listbox :xpos :ypos :width 50
  LISTBOXADDSTRING  "listbox [option C]
  LISTBOXADDSTRING  "listbox [option B]
  LISTBOXADDSTRING  "listbox [option A]
  make "ypos :ypos + 55

  SCROLLBARCREATE :toplevelwindow "horziontalscrollbar :xpos :ypos :width 20 []
  make "ypos :ypos + 25

  SCROLLBARCREATE :toplevelwindow "verticalscrollbar1 :xpos + 10 :ypos 20 80 []
  SCROLLBARCREATE :toplevelwindow "verticalscrollbar2 :xpos + 70 :ypos 20 80 []
  make "ypos :ypos + 100

  ; create a group box for some radio buttons
  GROUPBOXCREATE :toplevelwindow "radiogroupbox :xpos :ypos 80 60
  make "ypos :ypos + 10

  RADIOBUTTONCREATE :toplevelwindow "radiogroupbox "radiooptiona [Choice A] :xpos + 10 :ypos 60 20
  make "ypos :ypos + 20

  RADIOBUTTONCREATE :toplevelwindow "radiogroupbox "radiooptionb [Choice B] :xpos + 10 :ypos 60 20
  make "ypos :ypos + 20

  RADIOBUTTONSET "radiooptiona "true
  RADIOBUTTONSET "radiooptionb "false
  make "ypos :ypos + 10

  ; create a group box for some checkboxes
  GROUPBOXCREATE :toplevelwindow "checkboxgroupbox :xpos :ypos 80 60
  make "ypos :ypos + 10

  CHECKBOXCREATE :toplevelwindow "checkboxgroupbox "checkboxa [Checkbox A] :xpos + 10 :ypos 60 20
  make "ypos :ypos + 20

  CHECKBOXCREATE :toplevelwindow "checkboxgroupbox "checkboxb [Checkbox B] :xpos + 10 :ypos 60 20
  make "ypos :ypos + 20

  CHECKBOXSET "checkboxa "true
  CHECKBOXSET "checkboxb "false
  make "ypos :ypos + 10


  ; make this an exit button for dialogs, just in case
  BUTTONCREATE :toplevelwindow "button "button :xpos :ypos :width 20 (list "dialogdelete quoted :toplevelwindow)
  make "ypos :ypos + 25

END

TO WINDOWSTEST.WINDOW.SMOKETEST

  ; create a root window, add a widget of each type 
  windowcreate "root "testwindow [window smoke test] 0 0 120 400 [WINDOWSTEST.SETUP "testwindow]

  wait 60

  ; delete the root window
  windowdelete "testwindow

END


TO WINDOWSTEST.WINDOW.BADINPUT

  ; note: all text inputs accept anything (lists, array, numbers, etc.)

  ;
  ; bad input for WINDOWCREATE
  ;
  RUNNOTENOUGHINPUTSTEST [(windowcreate "main "name [caption] 0 0 120 400)]
  RUNTOOMANYINPUTSTEST   [(windowcreate "main "name [caption] 0 0 120 400 [] "toomany)]

  RUNBADINPUTTEST  [windowcreate "main "name10 [caption] [0]  0   120  400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name20 [caption] {0}  0   120  400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name25 [caption] 10.5 0   120  400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name30 [caption]  0  [0]  120  400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name40 [caption]  0  {0}  120  400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name45 [caption]  0  10.5 120  400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name50 [caption]  0   0  [120] 400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name60 [caption]  0   0  {120} 400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name70 [caption]  0   0  -120  400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name75 [caption]  0   0   10.5 400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name80 [caption]  0   0   120 [400] [] ]
  RUNBADINPUTTEST  [windowcreate "main "name90 [caption]  0   0   120 {400} [] ]
  RUNBADINPUTTEST  [windowcreate "main "name00 [caption]  0   0   120 -400  [] ]
  RUNBADINPUTTEST  [windowcreate "main "name05 [caption]  0   0   120  10.5 [] ]


  ; create a good window for the rest of the tests
  TRACEINSTRUCTION [ windowcreate "main "goodwindow [caption] 0 0 100 100 [] ]

  ; already exists
  RUNBADINPUTTEST  [ windowcreate "main "goodwindow [newcaption] 0 0 100 100 [] ]


  ;
  ; bad input for WINDOWENABLE
  ;
  RUNNOTENOUGHINPUTSTEST [ (windowenable "goodwindow) ]
  RUNTOOMANYINPUTSTEST   [ (windowenable "goodwindow "true "toomany) ]

  RUNBADINPUTTEST  [ windowenable "nonexistent "true  ]
  RUNBADINPUTTEST  [ windowenable "goodwindow  1      ]
  RUNBADINPUTTEST  [ windowenable "goodwindow  [true] ]
  RUNBADINPUTTEST  [ windowenable "goodwindow  {true} ]


  ;
  ; bad input for WINDOWDELETE
  ;
  RUNNOTENOUGHINPUTSTEST [ (windowdelete) ]
  RUNTOOMANYINPUTSTEST   [ (windowdelete "goodwindow "toomany) ]

  windowdelete "goodwindow

END

TO WINDOWSTEST.DIALOG.SMOKETEST

  ; create a root dialog, add a widget of each type, then delete the dialog
  dialogcreate "root "testdialog [dialog smoke test] 0 0 120 400 [
    WINDOWSTEST.SETUP "testdialog 
    wait 60 
    dialogdelete "testdialog
  ]

END

TO WINDOWSTEST.DIALOG.BADINPUT.FROMCALLBACK

  ; create something that is not a dialog control for bad input tests
  TRACEINSTRUCTION [ listboxcreate "main "notadialog 0 100 100 100 ]

  ; already exists
  RUNBADINPUTTEST  [ dialogcreate "main "gooddialog [newcaption] 0 0 100 100 [] ]

  ;
  ; bad input for DIALOGENABLE
  ;
  RUNNOTENOUGHINPUTSTEST [ (dialogenable "gooddialog) ]
  RUNTOOMANYINPUTSTEST   [ (dialogenable "gooddialog "true "toomany) ]

  RUNBADINPUTTEST  [ dialogenable "nonexistent "true  ]
  RUNBADINPUTTEST  [ dialogenable "notadialog  "true  ]
  RUNBADINPUTTEST  [ dialogenable "gooddialog  1      ]
  RUNBADINPUTTEST  [ dialogenable "gooddialog  [true] ]
  RUNBADINPUTTEST  [ dialogenable "gooddialog  {true} ]

  ;
  ; bad input for DIALOGDELETE
  ;
  RUNNOTENOUGHINPUTSTEST [ (dialogdelete) ]
  RUNTOOMANYINPUTSTEST   [ (dialogdelete "gooddialog "toomany) ]

  RUNBADINPUTTEST [ dialogdelete "nonexistent ]
  RUNBADINPUTTEST [ dialogdelete "notadialog  ]

  TRACEINSTRUCTION [ dialogdelete  "gooddialog ]
  TRACEINSTRUCTION [ listboxdelete "notadialog ]

END

TO WINDOWSTEST.DIALOG.BADINPUT

  ; note: all text inputs accept anything (lists, array, numbers, etc.)

  ;
  ; bad input for DIALOGCREATE
  ;
  RUNNOTENOUGHINPUTSTEST [(dialogcreate "main "name [caption] 0 0 120 400)]
  RUNTOOMANYINPUTSTEST   [(dialogcreate "main "name [caption] 0 0 120 400 [] "toomany)]

  RUNBADINPUTTEST  [dialogcreate "main "name10 [caption] [0]  0   120   400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name20 [caption] {0}  0   120   400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name25 [caption] 10.5 0   120   400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name30 [caption]  0  [0]  120   400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name40 [caption]  0  {0}  120   400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name45 [caption]  0  10.5 120   400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name50 [caption]  0   0  [120]  400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name60 [caption]  0   0  {120}  400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name70 [caption]  0   0  -120   400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name75 [caption]  0   0   10.5  400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name80 [caption]  0   0   120  [400] [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name90 [caption]  0   0   120  {400} [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name00 [caption]  0   0   120  -400  [] ]
  RUNBADINPUTTEST  [dialogcreate "main "name05 [caption]  0   0   120  400.5 [] ]

  ; Create a good dialog for the rest of the tests
  ; Note that, because dialogs are modal, the rest of the tests must be run from
  ; the dialog box's callback routine.
  TRACEINSTRUCTION [ dialogcreate "main "gooddialog [caption] 0 0 100 100 [WINDOWSTEST.DIALOG.BADINPUT.FROMCALLBACK] ]

END

TO WINDOWSTEST.MAINWINDOW.SMOKETEST

  ; pull a widget of each type onto the screen window
  WINDOWSTEST.SETUP "main

  wait 60

  ; delete all of the windows
  windowdelete "main

END


TO WINDOWSTEST.STATIC

  TRACEINSTRUCTION [ WINDOWCREATE "main "windowstest.static "mytitle 0 0 100 100 []      ]

  TRACEINSTRUCTION [ STATICCREATE "windowstest.static "static [Initial Value] 0 0 100 20 ]

  ; the second static goes on the main window, because the first static is not a window
  TRACEINSTRUCTION [ STATICCREATE "static "static2 [Initial Value] 0 0 100 20 ]

  TRACEINSTRUCTION [ STATICUPDATE "static [New Value] ]
  TRACEINSTRUCTION [ STATICDELETE "static  ]
  TRACEINSTRUCTION [ STATICDELETE "static2 ]

  TRACEINSTRUCTION [ WINDOWDELETE "windowtest.static ]

END


TO WINDOWSTEST.STATIC.BADINPUT

  ;
  ; bad input for STATICCREATE
  ;
  RUNNOTENOUGHINPUTSTEST [(staticcreate "main "name [caption] 0 0 120)]
  RUNTOOMANYINPUTSTEST   [(staticcreate "main "name [caption] 0 0 120 400 "toomany)]

  RUNBADINPUTTEST  [staticcreate "main "name10 [caption] [0]  0   120  400  ]
  RUNBADINPUTTEST  [staticcreate "main "name20 [caption] {0}  0   120  400  ]
  RUNBADINPUTTEST  [staticcreate "main "name25 [caption] 10.5 0   120  400  ]
  RUNBADINPUTTEST  [staticcreate "main "name30 [caption]  0  [0]  120  400  ]
  RUNBADINPUTTEST  [staticcreate "main "name40 [caption]  0  {0}  120  400  ]
  RUNBADINPUTTEST  [staticcreate "main "name45 [caption]  0  10.5 120  400  ]
  RUNBADINPUTTEST  [staticcreate "main "name50 [caption]  0   0  [120] 400  ]
  RUNBADINPUTTEST  [staticcreate "main "name60 [caption]  0   0  {120} 400  ]
  RUNBADINPUTTEST  [staticcreate "main "name70 [caption]  0   0  -120  400  ]
  RUNBADINPUTTEST  [staticcreate "main "name75 [caption]  0   0   10.5 400  ]
  RUNBADINPUTTEST  [staticcreate "main "name80 [caption]  0   0   120 [400] ]
  RUNBADINPUTTEST  [staticcreate "main "name90 [caption]  0   0   120 {400} ]
  RUNBADINPUTTEST  [staticcreate "main "name00 [caption]  0   0   120 -400  ]
  RUNBADINPUTTEST  [staticcreate "main "name05 [caption]  0   0   120  10.5 ]

  ; already exists
  TRACEINSTRUCTION [ staticcreate "main "goodstatic [newcaption] 0 0 100 100 ]
  RUNBADINPUTTEST  [ staticcreate "main "goodstatic [newcaption] 0 0 100 100 ]

  ; create something that is not a static control for bad input tests
  TRACEINSTRUCTION [ listboxcreate "main "notastatic 0 100 100 100 ]

  ;
  ; bad input for STATICUPDATE
  ;
  RUNNOTENOUGHINPUTSTEST [ (staticupdate "goodstatic) ]
  RUNTOOMANYINPUTSTEST   [ (staticupdate "goodstatic "newtext "toomany) ]

  RUNBADINPUTTEST  [ staticupdate "nonexistent "newtext ]
  RUNBADINPUTTEST  [ staticupdate "notastatic  "newtext ]


  ;
  ; bad input for STATICDELETE
  ;
  RUNNOTENOUGHINPUTSTEST [ (staticdelete) ]
  RUNTOOMANYINPUTSTEST   [ (staticdelete "goodstatic "toomany) ]

  RUNBADINPUTTEST [ staticdelete "nonexistent ]
  RUNBADINPUTTEST [ staticdelete "notastatic  ]

  ; cleanup
  TRACEINSTRUCTION [ staticdelete  "goodstatic ]
  TRACEINSTRUCTION [ listboxdelete "notastatic ]

END


TO WINDOWSTEST.LISTBOX

  TRACEINSTRUCTION [ WINDOWCREATE "main "windowstest.listbox "mytitle 0 0 100 100 []      ]

  LISTBOXCREATE "windowstest.listbox "testlist 5 5 90 90

  ; add, get, and remove a string
  TRACEINSTRUCTION [ LISTBOXADDSTRING    "testlist "firststring ]
  SIMPLEREPORTTEST [ LISTBOXGETSELECT    "testlist ] [firststring]
  TRACEINSTRUCTION [ LISTBOXDELETESTRING "testlist 0 ]

  ; deleteing a non-existing item is okay
  TRACEINSTRUCTION [ LISTBOXDELETESTRING "testlist 100 ]

  ; add a different string and get it
  TRACEINSTRUCTION [ LISTBOXADDSTRING    "testlist [secondstring] ]
  SIMPLEREPORTTEST [ LISTBOXGETSELECT    "testlist ] [secondstring]

  ; make sure we can add a lot of items
  repeat 100 [
    LISTBOXADDSTRING "testlist word "option repcount
  ]

  TRACEINSTRUCTION [ LISTBOXENABLE "testlist "false ]
  TRACEINSTRUCTION [ LISTBOXENABLE "testlist "true  ]

  LISTBOXDELETE "testlist
  WINDOWDELETE  "windowstest.listbox

END


TO WINDOWSTEST.LISTBOX.BADINPUT

  ;
  ; bad input for LISTBOXCREATE
  ;
  RUNNOTENOUGHINPUTSTEST [(listboxcreate "main "name 0 0 120)]
  RUNTOOMANYINPUTSTEST   [(listboxcreate "main "name 0 0 120 400 "toomany)]

  RUNBADINPUTTEST  [listboxcreate "main "name10 [0]  0  120  400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name20 {0}  0  120  400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name25 10.5 0  120  400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name30 0  [0]  120  400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name40 0  {0}  120  400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name45 0  10.5 120  400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name50 0   0  [120] 400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name60 0   0  {120} 400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name70 0   0  -120  400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name75 0   0   10.5 400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name80 0   0   120 [400] ]
  RUNBADINPUTTEST  [listboxcreate "main "name90 0   0   120 {400} ]
  RUNBADINPUTTEST  [listboxcreate "main "name00 0   0   120 -400  ]
  RUNBADINPUTTEST  [listboxcreate "main "name05 0   0   120  10.5 ]

  ; already exists
  TRACEINSTRUCTION [ listboxcreate "main "goodlistbox 0 0 100 100 ]
  RUNBADINPUTTEST  [ listboxcreate "main "goodlistbox 0 0 100 100 ]

  ; create something that is not a listbox for bad input tests
  TRACEINSTRUCTION [ staticcreate  "main "notalistbox [text] 0 100 100 100 ]

  ;
  ; bad input for LISTBOXENABLE
  ;
  RUNNOTENOUGHINPUTSTEST [ (listboxenable "goodlistbox) ]
  RUNTOOMANYINPUTSTEST   [ (listboxenable "goodlistbox "true "toomany) ]

  RUNBADINPUTTEST  [ listboxenable "doesnotexist "true  ]
  RUNBADINPUTTEST  [ listboxenable "notalistbox  "true  ]
  RUNBADINPUTTEST  [ listboxenable "goodlistbox  1      ]
  RUNBADINPUTTEST  [ listboxenable "goodlistbox  [true] ]
  RUNBADINPUTTEST  [ listboxenable "goodlistbox  {true} ]


  ;
  ; bad input for LISTBOXADDSTRING
  ;
  RUNNOTENOUGHINPUTSTEST [ (listboxaddstring) ]
  RUNTOOMANYINPUTSTEST   [ (listboxaddstring "goodlistbox "item "toomany) ]

  RUNBADINPUTTEST [ listboxaddstring "nonexistent "item ]
  RUNBADINPUTTEST [ listboxaddstring "notalistbox "item ]


  ;
  ; bad input for LISTBOXDELETESTRING
  ;
  RUNNOTENOUGHINPUTSTEST [ (listboxdeletestring "goodlistbox) ]
  RUNTOOMANYINPUTSTEST   [ (listboxdeletestring "goodlistbox 0 "toomany) ]

  RUNBADINPUTTEST [ listboxdeletestring "doesnotexist 0 ]
  RUNBADINPUTTEST [ listboxdeletestring "notalistbox  0 ]

  RUNBADINPUTTEST [ listboxdeletestring "goodlistbox  -1    ]
  RUNBADINPUTTEST [ listboxdeletestring "goodlistbox  10.5  ]
  RUNBADINPUTTEST [ listboxdeletestring "goodlistbox  [0]   ]
  RUNBADINPUTTEST [ listboxdeletestring "goodlistbox  {0}   ]
  RUNBADINPUTTEST [ listboxdeletestring "goodlistbox  "zero ]

  ;
  ; bad input for LISTBOXGETSELECT
  ;
  RUNNOTENOUGHINPUTSTEST [ (listboxgetselect) ]
  RUNTOOMANYINPUTSTEST   [ (listboxgetselect "goodlistbox "toomany) ]

  RUNBADINPUTTEST   [ ignore listboxgetselect "doesnotexist ]
  RUNBADINPUTTEST   [ ignore listboxgetselect "notalistbox  ]

 

  ;
  ; bad input for LISTBOXDELETE
  ;

  ; LISTBOXDELETE on a widget that is not a listbox control
  RUNNOTENOUGHINPUTSTEST [ (listboxdelete) ]
  RUNTOOMANYINPUTSTEST   [ (listboxdelete "goodlistbox "toomany) ]

  RUNBADINPUTTEST  [ listboxdelete "notalistbox ]
  RUNBADINPUTTEST  [ listboxdelete "doesnotexist ]

  ; cleanup
  TRACEINSTRUCTION [ listboxdelete "goodlistbox ]
  TRACEINSTRUCTION [ staticdelete  "notalistbox ]

END


TO WINDOWSTEST.GROUPBOX

  WINDOWCREATE "main "windowstest.groupbox "mytitle 0 0 100 100 []
  GROUPBOXCREATE "windowstest.groupbox "mygroupbox 10 5 80 60
  GROUPBOXDELETE "mygroupbox
  WINDOWDELETE "windowstest.groupbox
END


TO WINDOWSTEST.GROUPBOX.BADINPUT

  ;
  ; bad input for GROUPBOXCREATE
  ;
  RUNNOTENOUGHINPUTSTEST [(groupboxcreate "main "name 0 0 120)]
  RUNTOOMANYINPUTSTEST   [(groupboxcreate "main "name 0 0 120 400 "toomany)]

  RUNBADINPUTTEST  [groupboxcreate "main "name10 [0]  0  120  400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name20 {0}  0  120  400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name25 10.5 0  120  400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name30 0  [0]  120  400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name40 0  {0}  120  400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name45 0  10.5 120  400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name50 0   0  [120] 400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name60 0   0  {120} 400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name70 0   0  -120  400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name75 0   0   10.5 400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name80 0   0   120 [400] ]
  RUNBADINPUTTEST  [groupboxcreate "main "name90 0   0   120 {400} ]
  RUNBADINPUTTEST  [groupboxcreate "main "name00 0   0   120 -400  ]
  RUNBADINPUTTEST  [groupboxcreate "main "name05 0   0   120  10.5 ]

  ; already exists
  TRACEINSTRUCTION [ groupboxcreate "main "goodgroupbox 0 0 100 100 ]
  RUNBADINPUTTEST  [ groupboxcreate "main "goodgroupbox 0 0 100 100 ]


  TRACEINSTRUCTION [ listboxcreate  "main "notagroupbox 0 100 100 100 ]

  ;
  ; bad input for GROUPBOXDELETE
  ;

  ; GROUPBOXDELETE on a widget that is not a groupbox control
  RUNNOTENOUGHINPUTSTEST [(groupboxdelete)]
  RUNTOOMANYINPUTSTEST   [(groupboxdelete "groupbox "toomany)]

  RUNBADINPUTTEST  [ groupboxdelete "notagroupbox ]
  RUNBADINPUTTEST  [ groupboxdelete "doesnotexist ]

  ; cleanup
  TRACEINSTRUCTION [ listboxdelete  "notagroupbox ]
  TRACEINSTRUCTION [ groupboxdelete "goodgroupbox ]

END


TO WINDOWSTEST.RADIOBUTTON

  WINDOWCREATE "main "windowstest.radiobutton "mytitle 0 0 100 100 []
  GROUPBOXCREATE    "windowstest.radiobutton "mygroupbox 10 5 80 60
  RADIOBUTTONCREATE "windowstest.radiobutton "mygroupbox "radio1 [Radio #1] 20 15 60 20
  RADIOBUTTONCREATE "windowstest.radiobutton "mygroupbox "radio2 [Radio #2] 20 35 60 20

  RADIOBUTTONSET "radio1 "true
  RADIOBUTTONSET "radio2 "false

  SIMPLEREPORTTEST [ RADIOBUTTONGET "radio1 ] "true
  SIMPLEREPORTTEST [ RADIOBUTTONGET "radio2 ] "false

  TRACEINSTRUCTION [ RADIOBUTTONSET "radio1 "false ]
  SIMPLEREPORTTEST [ RADIOBUTTONGET "radio1 ] "false

  TRACEINSTRUCTION [ RADIOBUTTONSET "radio2 "true  ]
  SIMPLEREPORTTEST [ RADIOBUTTONGET "radio2 ] "true

  TRACEINSTRUCTION [ RADIOBUTTONENABLE "radio1 "false ]
  TRACEINSTRUCTION [ RADIOBUTTONENABLE "radio1 "true ]

  TRACEINSTRUCTION [ RADIOBUTTONDELETE "radio1 ]
  TRACEINSTRUCTION [ RADIOBUTTONDELETE "radio2 ]

  WINDOWDELETE "windowstest.radiobutton
END


TO WINDOWSTEST.RADIOBUTTON.BADINPUT

  TRACEINSTRUCTION [ GROUPBOXCREATE "main "groupbox 10 5 80 60 ]

  ;
  ; bad input for RADIOBUTTONCREATE
  ;
  RUNNOTENOUGHINPUTSTEST [(radiobuttoncreate "main "groupbox "name "label 0 0 10)]
  RUNTOOMANYINPUTSTEST   [(radiobuttoncreate "main "groupbox "name "label 0 0 10 80 "toomany)]

  RUNBADINPUTTEST  [radiobuttoncreate "main "notfound "name01 "label [10]  10   80   20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name10 "label [10]  10   80   20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name20 "label {10}  10   80   20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name25 "label 10.5  10   80   20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name30 "label  10   [10] 80   20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name40 "label  10   {10} 80   20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name45 "label  10  10.5  80   20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name50 "label  10   10  [80]  20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name60 "label  10   10  {80}  20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name70 "label  10   10  -80   20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name75 "label  10   10   8.5  20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name80 "label  10   10   80  [20]  ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name90 "label  10   10   80  {20}  ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name00 "label  10   10   80  -20   ]
  RUNBADINPUTTEST  [radiobuttoncreate "main "groupbox "name05 "label  10   10   80  20.5  ]

  ; already exists
  TRACEINSTRUCTION [ radiobuttoncreate "main "groupbox "goodradiobutton "label 10 10 80 20 ]
  RUNBADINPUTTEST  [ radiobuttoncreate "main "groupbox "goodradiobutton "label 10 10 80 20 ]

  ; create something that is not a radiobutton for bad input tests
  TRACEINSTRUCTION [ staticcreate  "main "notaradiobutton [text] 0 100 100 100 ]

  ;
  ; bad input for RADIOBUTTONENABLE
  ;
  RUNNOTENOUGHINPUTSTEST [ (radiobuttonenable "goodradiobutton) ]
  RUNTOOMANYINPUTSTEST   [ (radiobuttonenable "goodradiobutton "true "toomany) ]

  RUNBADINPUTTEST  [ radiobuttonenable "doesnotexist     "true  ]
  RUNBADINPUTTEST  [ radiobuttonenable "notaradiobutton  "true  ]

  RUNBADINPUTTEST  [ radiobuttonenable "goodradiobutton  1      ]
  RUNBADINPUTTEST  [ radiobuttonenable "goodradiobutton  [true] ]
  RUNBADINPUTTEST  [ radiobuttonenable "goodradiobutton  {true} ]


  ;
  ; bad input for RADIOBUTTONGET
  ;
  RUNNOTENOUGHINPUTSTEST [ (radiobuttonget) ]
  RUNTOOMANYINPUTSTEST   [ (radiobuttonget "goodradiobutton "toomany) ]

  RUNBADINPUTTEST [ radiobuttonget "doesnotexist    "item ]
  RUNBADINPUTTEST [ radiobuttonget "notaradiobutton "item ]


  ;
  ; bad input for RADIOBUTTONSET
  ;
  RUNNOTENOUGHINPUTSTEST [ (radiobuttonset "goodradiobutton) ]
  RUNTOOMANYINPUTSTEST   [ (radiobuttonset "goodradiobutton "true "toomany) ]

  RUNBADINPUTTEST [ radiobuttonset "doesnotexist     "true ]
  RUNBADINPUTTEST [ radiobuttonset "notaradiobutton  "true ]

  RUNBADINPUTTEST [ radiobuttonset "goodradiobutton  1      ]
  RUNBADINPUTTEST [ radiobuttonset "goodradiobutton  [true] ]
  RUNBADINPUTTEST [ radiobuttonset "goodradiobutton  {true} ]


  ;
  ; bad input for RADIOBUTTONDELETE
  ;

  ; RADIOBUTTONDELETE on a widget that is not a radiobutton control
  RUNNOTENOUGHINPUTSTEST [ (radiobuttondelete) ]
  RUNTOOMANYINPUTSTEST   [ (radiobuttondelete "goodradiobutton "toomany) ]

  RUNBADINPUTTEST  [ radiobuttondelete "notaradiobutton ]
  RUNBADINPUTTEST  [ radiobuttondelete "doesnotexist    ]

  ; cleanup
  TRACEINSTRUCTION [ radiobuttondelete "goodradiobutton ]
  TRACEINSTRUCTION [ groupboxdelete    "groupbox        ]
  TRACEINSTRUCTION [ staticdelete      "notaradiobutton ]

END


TO WINDOWSTEST.CHECKBOX

  WINDOWCREATE "main "windowstest.checkbox "mytitle 0 0 100 100 []
  GROUPBOXCREATE "windowstest.checkbox "mygroupbox 10 5 80 60
  CHECKBOXCREATE "windowstest.checkbox "mygroupbox "checkbox1 [Checkbox #1] 20 15 60 20
  CHECKBOXCREATE "windowstest.checkbox "mygroupbox "checkbox2 [Checkbox #2] 20 35 60 20

  TRACEINSTRUCTION [ CHECKBOXSET "checkbox1 "true  ]
  TRACEINSTRUCTION [ CHECKBOXSET "checkbox2 "false ]

  SIMPLEREPORTTEST [ CHECKBOXGET "checkbox1 ] "true
  SIMPLEREPORTTEST [ CHECKBOXGET "checkbox2 ] "false

  TRACEINSTRUCTION [ CHECKBOXSET "checkbox1 "false ]
  SIMPLEREPORTTEST [ CHECKBOXGET "checkbox1 ] "false
  SIMPLEREPORTTEST [ CHECKBOXGET "checkbox2 ] "false

  TRACEINSTRUCTION [ CHECKBOXENABLE "checkbox1 "false ]
  TRACEINSTRUCTION [ CHECKBOXENABLE "checkbox1 "true ]

  TRACEINSTRUCTION [ CHECKBOXDELETE "checkbox1 ]
  TRACEINSTRUCTION [ CHECKBOXDELETE "checkbox2 ]

  WINDOWDELETE "windowstest.checkbox
END


TO WINDOWSTEST.CHECKBOX.BADINPUT

  TRACEINSTRUCTION [ GROUPBOXCREATE "main "groupbox 10 5 80 60 ]

  ;
  ; bad input for CHECKBOXCREATE
  ;
  RUNNOTENOUGHINPUTSTEST [(checkboxcreate "main "groupbox "name "label 0 0 10)]
  RUNTOOMANYINPUTSTEST   [(checkboxcreate "main "groupbox "name "label 0 0 10 80 "toomany)]

  RUNBADINPUTTEST  [checkboxcreate "main "notfound "name01 "label [10]  10   80   20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name10 "label [10]  10   80   20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name20 "label {10}  10   80   20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name25 "label 10.5  10   80   20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name30 "label  10   [10] 80   20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name40 "label  10   {10} 80   20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name45 "label  10  10.5  80   20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name50 "label  10   10  [80]  20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name60 "label  10   10  {80}  20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name70 "label  10   10  -80   20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name75 "label  10   10   8.5  20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name80 "label  10   10   80  [20]  ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name90 "label  10   10   80  {20}  ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name00 "label  10   10   80  -20   ]
  RUNBADINPUTTEST  [checkboxcreate "main "groupbox "name05 "label  10   10   80  20.5  ]

  ; already exists
  TRACEINSTRUCTION [ checkboxcreate "main "groupbox "goodcheckbox "label 10 10 80 20 ]
  RUNBADINPUTTEST  [ checkboxcreate "main "groupbox "goodcheckbox "label 10 10 80 20 ]

  ; create something that is not a checkbox for bad input tests
  TRACEINSTRUCTION [ staticcreate  "main "notacheckbox [text] 0 100 100 100 ]

  ;
  ; bad input for CHECKBOXENABLE
  ;
  RUNNOTENOUGHINPUTSTEST [ (checkboxenable "goodcheckbox) ]
  RUNTOOMANYINPUTSTEST   [ (checkboxenable "goodcheckbox "true "toomany) ]

  RUNBADINPUTTEST  [ checkboxenable "doesnotexist  "true  ]
  RUNBADINPUTTEST  [ checkboxenable "notacheckbox  "true  ]

  RUNBADINPUTTEST  [ checkboxenable "goodcheckbox  1      ]
  RUNBADINPUTTEST  [ checkboxenable "goodcheckbox  [true] ]
  RUNBADINPUTTEST  [ checkboxenable "goodcheckbox  {true} ]


  ;
  ; bad input for CHECKBOXGET
  ;
  RUNNOTENOUGHINPUTSTEST [ (checkboxget) ]
  RUNTOOMANYINPUTSTEST   [ (checkboxget "goodcheckbox "toomany) ]

  RUNBADINPUTTEST [ checkboxget "doesnotexist "item ]
  RUNBADINPUTTEST [ checkboxget "notacheckbox "item ]


  ;
  ; bad input for CHECKBOXSET
  ;
  RUNNOTENOUGHINPUTSTEST [ (checkboxset "goodcheckbox) ]
  RUNTOOMANYINPUTSTEST   [ (checkboxset "goodcheckbox "true "toomany) ]

  RUNBADINPUTTEST [ checkboxset "doesnotexist  "true ]
  RUNBADINPUTTEST [ checkboxset "notacheckbox  "true ]

  RUNBADINPUTTEST [ checkboxset "goodcheckbox  1      ]
  RUNBADINPUTTEST [ checkboxset "goodcheckbox  [true] ]
  RUNBADINPUTTEST [ checkboxset "goodcheckbox  {true} ]


  ;
  ; bad input for CHECKBOXDELETE
  ;

  ; CHECKBOXDELETE on a widget that is not a checkbox control
  RUNNOTENOUGHINPUTSTEST [ (checkboxdelete) ]
  RUNTOOMANYINPUTSTEST   [ (checkboxdelete "goodcheckbox "toomany) ]

  RUNBADINPUTTEST  [ checkboxdelete "notacheckbox ]
  RUNBADINPUTTEST  [ checkboxdelete "doesnotexist ]

  ; cleanup
  TRACEINSTRUCTION [ checkboxdelete "goodcheckbox ]
  TRACEINSTRUCTION [ groupboxdelete "groupbox     ]
  TRACEINSTRUCTION [ staticdelete   "notacheckbox ]

END

TO WINDOWSTEST.SCROLLBAR

  TRACEINSTRUCTION [ WINDOWCREATE "main "windowstest.scrollbar "mytitle 0 0 100 100 []   ]
  TRACEINSTRUCTION [ SCROLLBARCREATE "windowstest.scrollbar "horizontal 0  90 100 20  [] ]
  TRACEINSTRUCTION [ SCROLLBARCREATE "windowstest.scrollbar "vertical   90 0  20  100 [] ]

  ; Change the position of the horizontal scrollbar
  TRACEINSTRUCTION [ SCROLLBARSET "horizontal  0  100 27 ]
  SIMPLEREPORTTEST [ SCROLLBARGET "horizontal ] 27

  TRACEINSTRUCTION [ SCROLLBARSET "horizontal  0  100 91 ]
  SIMPLEREPORTTEST [ SCROLLBARGET "horizontal ] 91

  TRACEINSTRUCTION [ SCROLLBARSET "horizontal -10  10  0   ]
  SIMPLEREPORTTEST [ SCROLLBARGET "horizontal ] 10 

  TRACEINSTRUCTION [ SCROLLBARSET "horizontal -20 -10  -10 ]
  SIMPLEREPORTTEST [ SCROLLBARGET "horizontal ] -10

  ; verify that the horizontal scrollbar's position doesn't 
  ; change when the vertical position changes
  TRACEINSTRUCTION [ SCROLLBARSET "vertical 50 60 55 ]
  SIMPLEREPORTTEST [ SCROLLBARGET "vertical ] 55
  SIMPLEREPORTTEST [ SCROLLBARGET "horizontal ] 91

  ; test enabling/disabling the scrollbar
  TRACEINSTRUCTION [ SCROLLBARENABLE "horizontal  "false ]
  TRACEINSTRUCTION [ SCROLLBARENABLE "horizontal  "false ]
  TRACEINSTRUCTION [ SCROLLBARENABLE "horizontal  "true  ]

  TRACEINSTRUCTION [ SCROLLBARDELETE "horizontal ]
  TRACEINSTRUCTION [ SCROLLBARDELETE "vertical   ]
  TRACEINSTRUCTION [ WINDOWDELETE "windowstest.scrollbar ]
END

TO WINDOWSTEST.SCROLLBAR.BADINPUT

  ;
  ; bad input for SCROLLBARCREATE
  ;
  RUNNOTENOUGHINPUTSTEST [(scrollbarcreate "main "name 0 0 100 10)]
  RUNTOOMANYINPUTSTEST   [(scrollbarcreate "main "name 0 0 100 10 [] "toomany)]

  RUNBADINPUTTEST  [scrollbarcreate "main "name10 [0]  0  120  10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name20 {0}  0  120  10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name25 10.5 0  120  10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name30 0  [0]  120  10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name40 0  {0}  120  10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name45 0  10.5 120  10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name50 0   0  [120] 10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name60 0   0  {120} 10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name70 0   0  -120  10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name75 0   0   10.5 10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name80 0   0   120 [10]  [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name90 0   0   120 {10}  [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name00 0   0   120 -10   [] ]
  RUNBADINPUTTEST  [scrollbarcreate "main "name05 0   0   120  10.5 [] ]

  ; already exists
  TRACEINSTRUCTION [ scrollbarcreate "main "goodscrollbar 0 0 100 10 [] ]
  RUNBADINPUTTEST  [ scrollbarcreate "main "goodscrollbar 0 0 100 10 [] ]

  ; create something that isn't a scrollbar
  TRACEINSTRUCTION [ staticcreate  "main "notascrollbar [text] 0 100 100 100 ]

  ;
  ; bad input for SCROLLBARENABLE
  ;
  RUNNOTENOUGHINPUTSTEST [ (scrollbarenable "goodscrollbar) ]
  RUNTOOMANYINPUTSTEST   [ (scrollbarenable "goodscrollbar "true "toomany) ]

  RUNBADINPUTTEST [ scrollbarenable "doesnotexist  "true  ]
  RUNBADINPUTTEST [ scrollbarenable "notascrollbar "true  ]
  RUNBADINPUTTEST [ scrollbarenable "goodscrollbar 1      ]
  RUNBADINPUTTEST [ scrollbarenable "goodscrollbar [true] ]
  RUNBADINPUTTEST [ scrollbarenable "goodscrollbar {true} ]


  ;
  ; bad input for SCROLLBARGET
  ;
  RUNNOTENOUGHINPUTSTEST [ (scrollbarget) ]
  RUNTOOMANYINPUTSTEST   [ (scrollbarget "goodscrollbar "toomany) ]

  RUNBADINPUTTEST [ ignore scrollbarget "nonexistent   ]
  RUNBADINPUTTEST [ ignore scrollbarget "notascrollbar ]


  ;
  ; bad input for SCROLLBARSET
  ;
  RUNNOTENOUGHINPUTSTEST [ (scrollbarset "goodscrollbar 0 100) ]
  RUNTOOMANYINPUTSTEST   [ (scrollbarset "goodscrollbar 0 100 50 "toomany) ]

  RUNBADINPUTTEST [ scrollbarset "doesnotexist  0 100 50 ]
  RUNBADINPUTTEST [ scrollbarset "notascrollbar 0 100 50 ]

  RUNBADINPUTTEST [ scrollbarset "goodscrollbar  [0]  10   5    ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar  {0}  10   5    ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar  0.5  10   5    ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar "zero 10   5    ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar   0  [10]  5    ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar   0  {10}  5    ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar   0  10.5  5    ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar   0  "ten [5]   ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar   0   10  {5}   ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar   0   10  5.5   ]
  RUNBADINPUTTEST [ scrollbarset "goodscrollbar   0   10  "five ]

  RUNBADINPUTTEST [ scrollbarset "goodscrollbar   10   0  5   ]



  ;
  ; bad input for SCROLLBARDELETE
  ;
  RUNNOTENOUGHINPUTSTEST [ (scrollbardelete) ]
  RUNTOOMANYINPUTSTEST   [ (scrollbardelete "goodscrollbar "toomany) ]

  RUNBADINPUTTEST  [ scrollbardelete "notascrollbar ]
  RUNBADINPUTTEST  [ scrollbardelete "doesnotexist  ]

  ; cleanup
  TRACEINSTRUCTION [ staticdelete    "notascrollbar ]
  TRACEINSTRUCTION [ scrollbardelete "goodscrollbar ]

END


TO WINDOWSTEST.BUTTON

  TRACEINSTRUCTION [ WINDOWCREATE "main "windowstest.button "mytitle 0 0 100 100 [] ]
  TRACEINSTRUCTION [ BUTTONCREATE "windowstest.button "button [initial text] 10 40 20 80 [] ]

  ; Replace the text on the button
  TRACEINSTRUCTION [ BUTTONUPDATE "button [new text] ]

  ; test enabling/disabling the button
  TRACEINSTRUCTION [ BUTTONENABLE "button  "false ]
  TRACEINSTRUCTION [ BUTTONENABLE "button  "false ]
  TRACEINSTRUCTION [ BUTTONENABLE "button  "true  ]

  TRACEINSTRUCTION [ BUTTONDELETE "button ]
  TRACEINSTRUCTION [ WINDOWDELETE "windowstest.button ]
END

TO WINDOWSTEST.BUTTON.BADINPUT

  ;
  ; bad input for BUTTONCREATE
  ;
  RUNNOTENOUGHINPUTSTEST [(buttoncreate "main "name "label 0 0 100 10)]
  RUNTOOMANYINPUTSTEST   [(buttoncreate "main "name "label 0 0 100 10 [] "toomany)]

  RUNBADINPUTTEST  [buttoncreate "main "name10 "label [0]  0  120  10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name20 "label {0}  0  120  10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name25 "label 10.5 0  120  10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name30 "label 0  [0]  120  10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name40 "label 0  {0}  120  10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name45 "label 0  10.5 120  10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name50 "label 0   0  [120] 10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name60 "label 0   0  {120} 10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name70 "label 0   0  -120  10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name75 "label 0   0   10.5 10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name80 "label 0   0   120 [10]  [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name90 "label 0   0   120 {10}  [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name00 "label 0   0   120 -10   [] ]
  RUNBADINPUTTEST  [buttoncreate "main "name05 "label 0   0   120  10.5 [] ]

  ; already exists
  TRACEINSTRUCTION [ buttoncreate "main "goodbutton "label 0 0 100 10 [] ]
  RUNBADINPUTTEST  [ buttoncreate "main "goodbutton "label 0 0 100 10 [] ]

  ; create something that isn't a button
  TRACEINSTRUCTION [ staticcreate  "main "notabutton [text] 0 100 100 100 ]

  ;
  ; bad input for BUTTONENABLE
  ;
  RUNNOTENOUGHINPUTSTEST [ (buttonenable "goodbutton) ]
  RUNTOOMANYINPUTSTEST   [ (buttonenable "goodbutton "true "toomany) ]

  RUNBADINPUTTEST [ buttonenable "doesnotexist  "true  ]
  RUNBADINPUTTEST [ buttonenable "notabutton    "true  ]
  RUNBADINPUTTEST [ buttonenable "goodbutton    1      ]
  RUNBADINPUTTEST [ buttonenable "goodbutton    [true] ]
  RUNBADINPUTTEST [ buttonenable "goodbutton    {true} ]


  ;
  ; bad input for BUTTONUPDATE
  ;
  RUNNOTENOUGHINPUTSTEST [ (buttonupdate "goodbutton) ]
  RUNTOOMANYINPUTSTEST   [ (buttonupdate "goodbutton "newlabel "toomany) ]

  RUNBADINPUTTEST [ buttonupdate "nonexistent "newlabel ]
  RUNBADINPUTTEST [ buttonupdate "notabutton  "newlabel ]



  ;
  ; bad input for BUTTONDELETE
  ;

  ; BUTTONDELETE on a widget that is not a button control
  RUNNOTENOUGHINPUTSTEST [ (buttondelete) ]
  RUNTOOMANYINPUTSTEST   [ (buttondelete "goodbutton "toomany) ]

  RUNBADINPUTTEST  [ buttondelete "notabutton   ]
  RUNBADINPUTTEST  [ buttondelete "doesnotexist ]

  ; cleanup
  TRACEINSTRUCTION [ staticdelete "notabutton ]
  TRACEINSTRUCTION [ buttondelete "goodbutton ]

END

TO WINDOWSTEST.DEBUGWINDOWS

  ; call DEBUGWINDOWS
  TRACEINSTRUCTION [ windowdelete "all ]
  TRACEINSTRUCTION [ debugwindows ]

  ; create a root window, add a widget of each type 
  TRACEINSTRUCTION [ windowcreate "root "testwindow [window smoke test] 0 0 120 400 [] ]
  TRACEINSTRUCTION [ windowstest.setup "testwindow ]

  TRACEINSTRUCTION [ debugwindows ]

  TRACEINSTRUCTION [ windowdelete "testwindow ]

END

TO WINDOWSTEST.DEBUGWINDOWS.STRESS

  ; create a window with a long caption
  LOCALMAKE "longname "||
  REPEAT 252 [ MAKE "longname word :longname "A ]

  ; create several top-level windows that contain widgets with very long names
  repeat 20 [
    localmake "parentname (word repcount :longname)
    TRACEINSTRUCTION [ windowcreate "root :parentname "caption 0 0 100 200 [] ]
    TRACEINSTRUCTION [   staticcreate      :parentname (word "s :parentname) "text 10 10 80 20 ]
    TRACEINSTRUCTION [   groupboxcreate    :parentname (word "g :parentname) 10 30 80 40 ]
    TRACEINSTRUCTION [   radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20 ]
  ]

  ; print out heirarchy for all windows
  TRACEINSTRUCTION [ debugwindows ]

  ; print heirarchy for a single window
  TRACEINSTRUCTION [ (debugwindows word 15 :longname) ]

  repeat 20 [
    TRACEINSTRUCTION [ WINDOWDELETE (word repcount :longname) ]
  ]

END

TO WINDOWSTEST.DEBUGWINDOWS.BADINPUT
  TRACEINSTRUCTION     [ WINDOWCREATE "root "window "caption 0 0 120 400 [] ]
  RUNTOOMANYINPUTSTEST [(DEBUGWINDOWS "window "toomany)]
  TRACEINSTRUCTION     [ WINDOWDELETE "window ]
END

TO WINDOWSTEST.REGRESSIONTEST

  ; this is a regression test for a crashing bug 
  ; caused by an inconsistent dialog list

  windowcreate "root "regresiontestwindow [window regression test] 0 0 120 400 []
  WINDOWSTEST.SETUP "root
  windowdelete "regresiontestwindow
  windowcreate "root "newwindow [window regression test] 0 0 120 400 []

  windowdelete "all

  REPORTTESTPASSED [The regression test for an inconsistent dialogthing list did not crash.]

END

TO WINDOWSTEST

   WINDOWSTEST.WINDOW.SMOKETEST
   WINDOWSTEST.WINDOW.BADINPUT

   WINDOWSTEST.DIALOG.SMOKETEST
   WINDOWSTEST.DIALOG.BADINPUT

   WINDOWSTEST.MAINWINDOW.SMOKETEST

   WINDOWSTEST.STATIC
   WINDOWSTEST.STATIC.BADINPUT

   WINDOWSTEST.LISTBOX
   WINDOWSTEST.LISTBOX.BADINPUT

   WINDOWSTEST.GROUPBOX
   WINDOWSTEST.GROUPBOX.BADINPUT

   WINDOWSTEST.RADIOBUTTON
   WINDOWSTEST.RADIOBUTTON.BADINPUT

   WINDOWSTEST.CHECKBOX
   WINDOWSTEST.CHECKBOX.BADINPUT

   WINDOWSTEST.SCROLLBAR
   WINDOWSTEST.SCROLLBAR.BADINPUT

   WINDOWSTEST.BUTTON
   WINDOWSTEST.BUTTON.BADINPUT

   WINDOWSTEST.DEBUGWINDOWS
   ; WINDOWSTEST.DEBUGWINDOWS.STRESS
   WINDOWSTEST.DEBUGWINDOWS.BADINPUT

   WINDOWSTEST.REGRESSIONTEST
END
