LOAD "testlib.lgo

TO FILETEST.SMOKETEST

   LOCALMAKE "filename "smoketest.txt

   ; erase the file, just in case
   ERASEFILE :filename

   ;
   ; Write some simple data to a test file
   ;
   OPENWRITE :filename
   SETWRITE  :filename
   SIMPLEREPORTTEST [WRITER] :filename
   SIMPLEREPORTTEST [WRITEPOS] 0
   PRINT "Hello
   SIMPLEREPORTTEST [WRITEPOS] 7
   PRINT [Good Bye]
   SIMPLEREPORTTEST [WRITEPOS] 17

   SETWRITE []
   SIMPLEREPORTTEST [WRITER] []
   CLOSE :filename

   ;
   ; Now, read the file
   ;
   OPENREAD :filename
   SETREAD  :filename
   SIMPLEREPORTTEST [READER] :filename

   SIMPLEREPORTTEST [READPOS] 0
   SIMPLEREPORTTEST [EOFP] "false

   SIMPLEREPORTTEST [READLIST] [Hello]
   SIMPLEREPORTTEST [READPOS] 7
   SIMPLEREPORTTEST [EOFP] "false

   SIMPLEREPORTTEST [READLIST] [Good Bye]
   SIMPLEREPORTTEST [READPOS] 17
   SIMPLEREPORTTEST [EOFP] "true

   SETREAD []
   SIMPLEREPORTTEST [READER] []

   CLOSE :filename

   ERASEFILE :filename
END


TO FILETEST.SETREADPOS

   LOCALMAKE "filename "setreadpostest.txt
 
   OPENWRITE :filename
   SETWRITE  :filename
   PRINT "Hello
   PRINT [Good Bye]
   SETWRITE []
   CLOSE :filename

   OPENREAD :filename
   SETREAD :filename
   SIMPLEREPORTTEST [READLIST] [Hello]

   SETREADPOS 0

   SIMPLEREPORTTEST [READLIST] [Hello]
   SETREAD []
   CLOSE :filename

   ERASEFILE :filename
END

TO FILETEST.SETWRITEPOS

   LOCALMAKE "filename "setwritepostest.txt
 
   OPENWRITE :filename
   SETWRITE  :filename
   PRINT "Hello
   SETWRITEPOS 0
   TYPE "J
   SETWRITE []
   CLOSE :filename

   OPENREAD :filename
   SETREAD :filename
   SIMPLEREPORTTEST [READLIST] [Jello]
   SETREAD []
   CLOSE :filename

   ERASEFILE :filename
END


TO FILETEST.ALLOPEN
   LOCALMAKE "filename1 "filealltest-1.txt
   LOCALMAKE "filename2 "filealltest-2.txt

   OPENWRITE :filename1
   OPENWRITE :filename2

   ; make sure that ALLOPEN returns both open files
   LOCALMAKE "allopenfilenames ALLOPEN

   LOCALMAKE "filename1found "false
   LOCALMAKE "filename2found "false
   FOREACH :allopenfilenames [ 
      if ? = :filename1 [MAKE "filename1found "true]
      if ? = :filename2 [MAKE "filename2found "true]
   ]

   REPORTTEST ~
      AND :filename1found :filename2found ~
      (sentence "|ALLOPEN returned| :allopenfilenames) ~
      (sentence "|a list that contains both| :filename1 "and :filename2)

   CLOSE     :filename1
   ERASEFILE :filename1

   CLOSE     :filename2
   ERASEFILE :filename2
END

TO FILETEST.OPENAPPEND

   LOCALMAKE "filename "openappendtest.txt
 
   ; delete the file, in case it exists
   ERASEFILE :filename
 
   OPENWRITE :filename
   SETWRITE  :filename
   PRINT "Hello
   SETWRITE []
   CLOSE :filename
 
   OPENAPPEND :filename
   SETWRITE  :filename
   PRINT [Good Bye]
   SETWRITE []
   CLOSE :filename

   OPENREAD :filename
   SETREAD :filename
   SIMPLEREPORTTEST [READLIST] [Hello]
   SIMPLEREPORTTEST [READLIST] [Good Bye]
   SETREAD []
   CLOSE :filename

   ERASEFILE :filename

   ; shouldn't be able to open a file that was erased
   RUNBADINPUTTEST [OPENREAD :filename]
END


TO FILETEST.OPENUPDATE

   LOCALMAKE "filename "openupdatetest.txt

   ; delete the file, in case it exists
   ERASEFILE :filename
 
   OPENWRITE :filename
   SETWRITE  :filename
   PRINT "Hello
   PRINT [Good Bye]
   SETWRITE []
   CLOSE :filename
 
   OPENUPDATE :filename
   SETREAD :filename
   SETREADPOS 0
   SIMPLEREPORTTEST [READLIST] [Hello]
   SETWRITE :filename
   SETWRITEPOS 7
   PRINT [And how are you today]
   SETWRITE []
   SETREAD :filename

   SETREADPOS 0
   SIMPLEREPORTTEST [READLIST] [Hello]
   SIMPLEREPORTTEST [READLIST] [And how are you today]

   CLOSE :filename

   ERASEFILE :filename
END

TO FILETEST.DRIBBLE

   LOCALMAKE "filename "dribbletest.txt
 
   ; ask the user to dribble some commands
   DRIBBLE :filename
   PRINT "Hello
   PRINT [Good Bye]
   
   ; TODO: have the user type something at the keyboard
   NODRIBBLE

   ; validate the dribble file
   OPENREAD :filename
   SETREAD  :filename
   SIMPLEREPORTTEST [READLIST] [Hello]
   SIMPLEREPORTTEST [READLIST] [Good Bye]
   SETREAD []
   CLOSE :filename

   ERASEFILE :filename
END


TO FILETEST.BADINPUT

   ; a long file name used to overflow an internal buffer
   LOCALMAKE "longfilename "||
   REPEAT 5000 [ MAKE "longfilename word :longfilename "A ]

   ; bad value for "binary parameter"
   RUNBADINPUTTEST [(OPENREAD   "testfile.txt 1)]
   RUNBADINPUTTEST [(OPENWRITE  "testfile.txt 1)]
   RUNBADINPUTTEST [(OPENAPPEND "testfile.txt 1)]
   RUNBADINPUTTEST [(OPENUPDATE "testfile.txt 1)]
   
   ; not enough inputs
   RUNNOTENOUGHINPUTSTEST [(OPENREAD)]
   RUNNOTENOUGHINPUTSTEST [(OPENWRITE)]
   RUNNOTENOUGHINPUTSTEST [(OPENAPPEND)]
   RUNNOTENOUGHINPUTSTEST [(OPENUPDATE)]

   ; too many inputs
   RUNTOOMANYINPUTSTEST [(OPENREAD   "testfile.txt "true "toomany)]
   RUNTOOMANYINPUTSTEST [(OPENWRITE  "testfile.txt "true "toomany)]
   RUNTOOMANYINPUTSTEST [(OPENAPPEND "testfile.txt "true "toomany)]
   RUNTOOMANYINPUTSTEST [(OPENUPDATE "testfile.txt "true "toomany)]

   ; try to overflow an internal buffer
   RUNBADINPUTTEST [OPENREAD   :longfilename]
   RUNBADINPUTTEST [OPENWRITE  :longfilename]
   RUNBADINPUTTEST [OPENAPPEND :longfilename]
   RUNBADINPUTTEST [OPENUPDATE :longfilename]

   ; test CLOSE
   RUNBADINPUTTEST        [CLOSE :longfilename]
   RUNBADINPUTTEST        [CLOSE "nonexistent.txt]
   RUNNOTENOUGHINPUTSTEST [(CLOSE)]
   RUNTOOMANYINPUTSTEST   [(CLOSE "testfile.txt "many)]

   ; test ERASEFILE
   RUNNOTENOUGHINPUTSTEST [(ERASEFILE)]
   RUNTOOMANYINPUTSTEST   [(ERASEFILE "too "many)]

END

TO FILETEST.ERASEFILE

   ; try to erase a non-existent file (should fail silently)
   ERASEFILE "nonexistent

   ; try to erase a file that doesn't exist (should fail silently)
   OPENWRITE "mytestfile
   ERASEFILE "mytestfile
   SIMPLEREPORTTEST [MEMBERP "mytestfile FILES] "true
   CLOSE     "mytestfile
   ERASEFILE "mytestfile
   SIMPLEREPORTTEST [MEMBERP "mytestfile FILES] "false

   ; erase a device (should fail silently)
   ERASEFILE "NUL

   ; erase a directory (should fail silently)
   MKDIR "mytestdir
   POPDIR
   ERASEFILE "mytestdir
   SIMPLEREPORTTEST [MEMBERP "mytestdir DIRECTORIES] "true
   RMDIR     "mytestdir

   ; erase a long file name to overflow an internal buffer
   LOCALMAKE "longfilename "||
   REPEAT 5000 [ MAKE "longfilename word :longfilename "A ]
   ERASEFILE :longfilename
END

TO FILETEST.OPENOPENFILE

   ; can't open a file that is already open for writing 
   OPENWRITE  "mytestfile
   RUNBADINPUTTEST [OPENREAD   "mytestfile]
   RUNBADINPUTTEST [OPENWRITE  "mytestfile]
   RUNBADINPUTTEST [OPENAPPEND "mytestfile]
   RUNBADINPUTTEST [OPENUPDATE "mytestfile]
   CLOSE     "mytestfile

   ; can't open a file that is already open for reading
   OPENREAD "mytestfile
   RUNBADINPUTTEST [OPENREAD   "mytestfile]
   RUNBADINPUTTEST [OPENWRITE  "mytestfile]
   RUNBADINPUTTEST [OPENAPPEND "mytestfile]
   RUNBADINPUTTEST [OPENUPDATE "mytestfile]
   CLOSE     "mytestfile

   ERASEFILE "mytestfile
   SIMPLEREPORTTEST [MEMBERP "mytestfile FILES] "false

END

TO FILETEST.OPENDIRECTORYASFILE

   ; can't open a directory as file
   MKDIR  "testdir
   POPDIR

   RUNBADINPUTTEST [OPENREAD   "testdir]
   RUNBADINPUTTEST [OPENWRITE  "testdir]
   RUNBADINPUTTEST [OPENAPPEND "testdir]
   RUNBADINPUTTEST [OPENUPDATE "testdir]

   RMDIR "testdir
   SIMPLEREPORTTEST [MEMBERP "mytestfile DIRECTORIES] "false
END


TO FILETEST

  ; This tests the basic functionality of the following functions
  ; OPENWRITE, SETWRITE, WRITER, WRITEPOS, READER, READPOS, and EOFP

  FILETEST.SMOKETEST

  FILETEST.SETREADPOS
  FILETEST.SETWRITEPOS

  FILETEST.ALLOPEN

  FILETEST.OPENAPPEND
  FILETEST.OPENUPDATE

  FILETEST.DRIBBLE

  FILETEST.ERASEFILE
  FILETEST.OPENOPENFILE
  FILETEST.OPENDIRECTORYASFILE

  FILETEST.BADINPUT
END

