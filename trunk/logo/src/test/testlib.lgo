
TO REPORTTESTINFO :message

  ; backup the current writer
  LOCALMAKE "previouswriter WRITER
  SETWRITE :testlog

  PRINT (SENTENCE "INFO: :message)

  ; restore the current writer
  SETWRITE :previouswriter
END
BURY [REPORTTESTINFO]


TO REPORTTESTPASSED :message

  ; backup the current writer
  LOCALMAKE "previouswriter WRITER
  SETWRITE :testlog

  PRINT (SENTENCE "PASS: :message)

  ; restore the current writer
  SETWRITE :previouswriter
END
BURY [REPORTTESTPASSED]


TO REPORTTESTFAILED :message

  ; backup the current writer
  LOCALMAKE "previouswriter WRITER
  SETWRITE :testlog

  LOCALMAKE "result (SENTENCE "FAIL: :message)
  PRINT :result
  MESSAGEBOX [Test Failed] :result

  ; restore the current writer
  SETWRITE :previouswriter
END
BURY [REPORTTESTFAILED]


TO REPORTTEST :testpassed :result :expected
  IFELSE :testpassed [
    REPORTTESTPASSED (sentence :result "|, as expected.|)
  ] [
    REPORTTESTFAILED (sentence :result "|. We expected| :expected)
  ]
END
BURY [REPORTTEST]


TO TRACEINSTRUCTION :instruction

  ; backup the current writer
  LOCALMAKE "previouswriter WRITER
  SETWRITE :testlog

  PRINT (SENTENCE "CALL: :instruction)

  ; restore the current writer
  SETWRITE :previouswriter

  ; run the instructions
  CATCH "ERROR [IGNORE RUNRESULT :instruction]

  ; make sure that the instruction didn't throw an error
  LOCALMAKE "lasterror ERROR
  IF NOT EMPTY? :lasterror [
    REPORTTESTFAILED (LIST :instruction "|threw error.  code=| (ITEM 1 :lasterror) ". (ITEM 2 :lasterror)) 
    STOP
  ]
END
BURY [TRACEINSTRUCTION]

TO SIMPLEREPORTTEST :instruction :expectedresult
  LOCAL "result

  ; clear the last error
  IGNORE ERROR

  ; run the instruction inside a CATCH so 
  ; that throwing an error just fails 
  ; (instead of halt the tests)
  CATCH "ERROR [MAKE "result RUN :instruction]

  LOCALMAKE "lasterror ERROR
  IF NOT EMPTY? :lasterror [
    REPORTTESTFAILED (LIST :instruction "|threw error.  code=| (ITEM 1 :lasterror) ". (ITEM 2 :lasterror)) 
    STOP
  ]

  IF NOT EQUAL? :result :expectedresult [
    REPORTTESTFAILED (LIST :instruction "returned :result "|. We expected| :expectedresult)
    STOP
  ]

  REPORTTESTPASSED (LIST :instruction "returned :result "|, as expected.|)
END
BURY [SIMPLEREPORTTEST]


TO REPORTTESTINITIALIZE

  MAKE "testlog  "testlog.baseline.txt

  ; close the test log, if it is already open
  CATCH "ERROR [ CLOSE :testlog ]

  ; open (and truncate) the test log
  OPENWRITE :testlog
END
BURY [REPORTTESTINITIALIZE]


TO REPORTTESTUNINITIALIZE
  CLOSE    :testlog
  MAKE     :testlog []
END
BURY [REPORTTESTUNINITIALIZE]


TO CHECKERRORITEM :item :lasterror :expectedvalue :description

  LOCALMAKE "lastitem ITEM :item :lasterror
  IFELSE EQUALP :lastitem :expectedvalue [
    REPORTTESTPASSED (LIST "Running :instructions "set "error :description "to :expectedvalue "|, as expected.|)
  ] [
    REPORTTESTFAILED (LIST "ITEM :item "|ERROR output| :lastitem "|.  We expected| :expectedvalue ".)
  ]

END
BURY [CHECKERRORITEM]

TO CHECKERROR :instructions :expectederror :expectedtext :expectedprocedure :expectedline

   ; TODO: allow [] as inputs to mean "don't care".
   ; then rewrite bad input tests to use this procedture

  LOCALMAKE "lasterror ERROR
  IF EMPTYP :lasterror [
    REPORTTESTFAILED (LIST "Executing :instructions "|did not change ERROR.|)
    STOP
  ]

  IF NOT LISTP :lasterror [
    REPORTTESTFAILED [ERROR did not return a list.]
    STOP
  ]

  IF NOT EQUALP (COUNT :lasterror) 4 [
    REPORTTESTFAILED [ERROR did not return a list of four values.]
    STOP
  ]

  CHECKERRORITEM 1 :lasterror :expectederror     "code
  CHECKERRORITEM 2 :lasterror :expectedtext      "text
  CHECKERRORITEM 3 :lasterror :expectedprocedure "procedure
  CHECKERRORITEM 4 :lasterror :expectedline      "line

END
BURY [CHECKERROR]

TO RUNBADINPUTTEST :instructions

  REPORTTESTINFO (LIST "|Executing invalid instruction:| :instructions )

  ; clear the value of ERROR
  IGNORE ERROR

  CATCH "ERROR [ 
    IGNORE RUNRESULT :instructions 
    REPORTTESTFAILED (LIST "Executing :instructions "|did not throw an error|)
    STOP
  ]

  LOCALMAKE "lasterror ERROR
  IF EMPTYP :lasterror [
    REPORTTESTFAILED (LIST "Executing :instructions "|did not change ERROR.|)
    STOP
  ]

  IF NOT EQUALP (COUNT :lasterror) 4 [
    REPORTTESTFAILED (LIST "|ERROR did not return a list of four values.|)
    STOP
  ]

  REPORTTESTPASSED (LIST "Executing :instructions "|set error code to|   (ITEM 1 :lasterror) )
  REPORTTESTINFO   (LIST "Executing :instructions "|set error string to| (ITEM 2 :lasterror) )

END
BURY [RUNBADINPUTTEST]

TO RUNEXPECTERRORTEST :instructions :expectederror

  REPORTTESTINFO (LIST "|Executing invalid instruction:| :instructions)

  ; clear the value of ERROR
  IGNORE ERROR

  CATCH "ERROR [ 
    IGNORE RUNRESULT :instructions 
    REPORTTESTFAILED (LIST "Executing :instructions "|did not throw an error.|)
  ]

  LOCALMAKE "lasterror ERROR
  IF EMPTYP :lasterror [
    REPORTTESTFAILED (LIST "Executing :instructions "|did not change ERROR.|)
    STOP
  ]

  IF NOT EQUALP (COUNT :lasterror) 4 [
    REPORTTESTFAILED (LIST "|ERROR did not return a list of four values.|)
    STOP
  ]

  IF NOT EQUALP (ITEM 1 :lasterror) :expectederror [
    REPORTTESTFAILED (LIST "|ITEM 1 ERROR returned | (ITEM 1 :lasterror) "|, we expected| :expectederror)
    STOP
  ]
  REPORTTESTPASSED (LIST "Executing :instructions "|set error code to|   (ITEM 1 :lasterror) "|, as expected|)
  REPORTTESTINFO   (LIST "Executing :instructions "|set error string to| (ITEM 2 :lasterror) )
END
BURY [RUNEXPECTERRORTEST]


TO RUNNOTENOUGHINPUTSTEST :instructions
  RUNEXPECTERRORTEST :instructions 6
END
BURY [RUNNOTENOUGHINPUTSTEST]

TO RUNTOOMANYINPUTSTEST :instructions
  RUNEXPECTERRORTEST :instructions 8
END
BURY [RUNTOOMANYINPUTSTEST]

TO RUNHASNOVALUETEST :instructions
  RUNEXPECTERRORTEST :instructions 11
END
BURY [RUNHASNOVALUETEST]

TO RUNIDONTKNOWHOWTOTEST :instructions
  RUNEXPECTERRORTEST :instructions 13
END
BURY [RUNIDONTKNOWHOWTOTEST]

TO RUNNONRECOVERABLEIDONTKNOWHOWTOTEST :instructions
  RUNEXPECTERRORTEST :instructions 24
END
BURY [RUNNONRECOVERABLEIDONTKNOWHOWTOTEST]

TO RUNFILESYSTEMERRORTEST :instructions
  RUNEXPECTERRORTEST :instructions 18
END
BURY [RUNFILESYSTEMERRORTEST]

TO RUNISAPRIMITIVETEST :instructions
  RUNEXPECTERRORTEST :instructions 22
END
BURY [RUNISAPRIMITIVETEST]


TO TIMECOMMAND :instructions
  ; Outputs how long it takes to execute given instructions

  LOCALMAKE "beforetime TIMEMILLI
  IGNORE RUNRESULT :instructions
  LOCALMAKE "aftertime TIMEMILLI

  LOCALMAKE "deltatime :aftertime - :beforetime

  REPORTTESTINFO (list :instructions "took :deltatime "|ms to execute|)

  OUTPUT :deltatime
END
BURY [TIMECOMMAND]

; protect against loading the file twice
if not name? "testlog [
  MAKE "testlog []
]

