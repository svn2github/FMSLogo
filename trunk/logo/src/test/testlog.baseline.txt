PASS: [-0] returned 0 , as expected.
PASS: [-0.0] returned 0 , as expected.
PASS: [.00] returned 0 , as expected.
PASS: [0e10] returned 0 , as expected.
PASS: [0e+10] returned 0 , as expected.
PASS: [0e-10] returned 0 , as expected.
PASS: [1e3] returned 1000 , as expected.
PASS: [1.234e3] returned 1234 , as expected.
PASS: [1.234e+3] returned 1234 , as expected.
PASS: [1.23e-1] returned 0.123 , as expected.
PASS: [.5] returned 0.5 , as expected.
PASS: [-.5] returned -0.5 , as expected.
PASS: ["WORD] returned WORD , as expected.
PASS: ["A B] returned A B , as expected.
PASS: [DIFFICULTCOMMENTS] returned 1 , as expected.
FAIL: [~IGNOREMEWASCALLED] returned true . We expected false
INFO: Executing invalid instruction
PASS: Executing [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] threw an error
INFO: Executing invalid instruction: [(RUN)]
INFO: Executing [(RUN)] set error code to 6 , as expected
INFO: Executing [(RUN)] set error string to [not enough inputs to RUN]
INFO: Executing invalid instruction: [RUN {"FD 100}]
PASS: Executing [RUN {"FD 100}] threw an error
INFO: Executing invalid instruction: [(RUN [FD 100] "toomany)]
INFO: Executing [(RUN [FD 100] "toomany)] set error code to 8 , as expected
INFO: Executing [(RUN [FD 100] "toomany)] set error string to [too much inside ()'s]
PASS: [.EQ 1000 1000] returned false , as expected.
PASS: [.EQ :x :y] returned false , as expected.
PASS: [.EQ :x :x] returned true , as expected.
PASS: [.EQ " "] returned true , as expected.
PASS: [.EQ "false "false] returned true , as expected.
PASS: [.EQ "true "true] returned true , as expected.
PASS: [.EQ [] []] returned true , as expected.
INFO: Executing invalid instruction: [(.EQ)]
INFO: Executing [(.EQ)] set error code to 6 , as expected
INFO: Executing [(.EQ)] set error string to [not enough inputs to .EQ]
INFO: Executing invalid instruction: [(.EQ 1)]
INFO: Executing [(.EQ 1)] set error code to 6 , as expected
INFO: Executing [(.EQ 1)] set error string to [not enough inputs to .EQ]
INFO: Executing invalid instruction: [(.EQ 1 1 "toomany)]
INFO: Executing [(.EQ 1 1 "toomany)] set error code to 8 , as expected
INFO: Executing [(.EQ 1 1 "toomany)] set error string to [too much inside ()'s]
PASS: [EQUALP 1 1] returned true , as expected.
PASS: [EQUALP 0 0] returned true , as expected.
PASS: [EQUALP 3.14 3.14] returned true , as expected.
PASS: [EQUALP "hi "hi] returned true , as expected.
PASS: [EQUAL? ["a 1 "ab] ["a 1 "ab]] returned true , as expected.
PASS: [EQUAL? [[1 2 3] [1]] [[1 2 3] [1]]] returned true , as expected.
PASS: [EQUAL? 0 0] returned true , as expected.
PASS: [EQUALP " "] returned true , as expected.
PASS: [EQUALP "true "TRUE] returned true , as expected.
PASS: [EQUALP "false "FALSE] returned true , as expected.
PASS: [EQUAL? :myarray :myarray] returned true , as expected.
PASS: [EQUAL? :myarray :myarray] returned true , as expected.
PASS: [EQUAL? {} {}] returned false , as expected.
PASS: [EQUAL? {1 2 3} {1 2 3}] returned false , as expected.
PASS: [EQUALP 1 1.1] returned false , as expected.
PASS: [EQUALP 0 1] returned false , as expected.
PASS: [EQUALP "hi "hil] returned false , as expected.
PASS: [EQUALP "hil "hi] returned false , as expected.
PASS: [EQUALP "true "false] returned false , as expected.
INFO: Executing invalid instruction: [(EQUAL?)]
INFO: Executing [(EQUAL?)] set error code to 6 , as expected
INFO: Executing [(EQUAL?)] set error string to [not enough inputs to EQUAL?]
INFO: Executing invalid instruction: [(EQUAL? 1)]
INFO: Executing [(EQUAL? 1)] set error code to 6 , as expected
INFO: Executing [(EQUAL? 1)] set error string to [not enough inputs to EQUAL?]
INFO: Executing invalid instruction: [(EQUAL? 1 1 "toomany)]
INFO: Executing [(EQUAL? 1 1 "toomany)] set error code to 8 , as expected
INFO: Executing [(EQUAL? 1 1 "toomany)] set error string to [too much inside ()'s]
PASS: [EMPTYP []] returned true , as expected.
PASS: [EMPTY? []] returned true , as expected.
PASS: [EMPTY? [1]] returned false , as expected.
PASS: [EMPTY? [0]] returned false , as expected.
PASS: [EMPTY? 0] returned false , as expected.
PASS: [EMPTY? "] returned true , as expected.
PASS: [EMPTY? " ] returned false , as expected.
PASS: [EMPTY? {}] returned false , as expected.
INFO: Executing invalid instruction: [(EMPTY?)]
INFO: Executing [(EMPTY?)] set error code to 6 , as expected
INFO: Executing [(EMPTY?)] set error string to [not enough inputs to EMPTY?]
INFO: Executing invalid instruction: [(EMPTY? [] "toomany)]
INFO: Executing [(EMPTY? [] "toomany)] set error code to 8 , as expected
INFO: Executing [(EMPTY? [] "toomany)] set error string to [too much inside ()'s]
PASS: [NUMBERP 1] returned true , as expected.
PASS: [NUMBER? 1] returned true , as expected.
PASS: [NUMBER? 0] returned true , as expected.
PASS: [NUMBER? -1] returned true , as expected.
PASS: [NUMBER? 3.14] returned true , as expected.
PASS: [NUMBER? "1] returned true , as expected.
PASS: [NUMBER? "-1] returned true , as expected.
PASS: [NUMBER? "3.14] returned true , as expected.
PASS: [NUMBER? {}] returned false , as expected.
PASS: [NUMBER? {2}] returned false , as expected.
PASS: [NUMBER? []] returned false , as expected.
PASS: [NUMBER? [1]] returned false , as expected.
PASS: [NUMBER? "one] returned false , as expected.
PASS: [NUMBER? "1A] returned false , as expected.
PASS: [NUMBER? "] returned false , as expected.
INFO: Executing invalid instruction: [(NUMBER?)]
INFO: Executing [(NUMBER?)] set error code to 6 , as expected
INFO: Executing [(NUMBER?)] set error string to [not enough inputs to NUMBER?]
INFO: Executing invalid instruction: [(NUMBER? 1 "toomany)]
INFO: Executing [(NUMBER? 1 "toomany)] set error code to 8 , as expected
INFO: Executing [(NUMBER? 1 "toomany)] set error string to [too much inside ()'s]
PASS: [LISTP [1 2 3]] returned true , as expected.
PASS: [LIST? [1 2 3]] returned true , as expected.
PASS: [LIST? []] returned true , as expected.
PASS: [LIST? "list] returned false , as expected.
PASS: [LIST? "[1]] returned false , as expected.
PASS: [LIST? 1] returned false , as expected.
PASS: [LIST? 3.14] returned false , as expected.
PASS: [LIST? {1}] returned false , as expected.
PASS: [LIST? {}] returned false , as expected.
PASS: [LIST? "] returned false , as expected.
INFO: Executing invalid instruction: [(LIST?)]
INFO: Executing [(LIST?)] set error code to 6 , as expected
INFO: Executing [(LIST?)] set error string to [not enough inputs to LIST?]
INFO: Executing invalid instruction: [(LIST? [] "toomany)]
INFO: Executing [(LIST? [] "toomany)] set error code to 8 , as expected
INFO: Executing [(LIST? [] "toomany)] set error string to [too much inside ()'s]
PASS: [WORDP "hello] returned true , as expected.
PASS: [WORD? "hello] returned true , as expected.
PASS: [WORD? 123] returned true , as expected.
PASS: [WORD? 3.14] returned true , as expected.
PASS: [WORD? "] returned true , as expected.
PASS: [WORD? "[1]] returned true , as expected.
PASS: [WORD? []] returned false , as expected.
PASS: [WORD? ["hello]] returned false , as expected.
PASS: [WORD? {}] returned false , as expected.
PASS: [WORD? {"hello}] returned false , as expected.
INFO: Executing invalid instruction: [(WORD?)]
INFO: Executing [(WORD?)] set error code to 6 , as expected
INFO: Executing [(WORD?)] set error string to [not enough inputs to WORD?]
INFO: Executing invalid instruction: [(WORD? [] "toomany)]
INFO: Executing [(WORD? [] "toomany)] set error code to 8 , as expected
INFO: Executing [(WORD? [] "toomany)] set error string to [too much inside ()'s]
PASS: [ARRAYP {1 2 3}] returned true , as expected.
PASS: [ARRAY? {1 2 3}] returned true , as expected.
PASS: [ARRAY? {}] returned true , as expected.
PASS: [ARRAY? "word] returned false , as expected.
PASS: [ARRAY? "{}] returned false , as expected.
PASS: [ARRAY? 1] returned false , as expected.
PASS: [ARRAY? 3.14] returned false , as expected.
PASS: [ARRAY? [1]] returned false , as expected.
PASS: [ARRAY? []] returned false , as expected.
PASS: [ARRAY? "] returned false , as expected.
INFO: Executing invalid instruction: [(ARRAY?)]
INFO: Executing [(ARRAY?)] set error code to 6 , as expected
INFO: Executing [(ARRAY?)] set error string to [not enough inputs to ARRAY?]
INFO: Executing invalid instruction: [(ARRAY? {1} "toomany)]
INFO: Executing [(ARRAY? {1} "toomany)] set error code to 8 , as expected
INFO: Executing [(ARRAY? {1} "toomany)] set error string to [too much inside ()'s]
PASS: [MEMBERP 2 [1 2 3]] returned true , as expected.
PASS: [MEMBER? 2 [1 2 3]] returned true , as expected.
PASS: [MEMBER? 1 [1]] returned true , as expected.
PASS: [MEMBER? 1 [1 1 1]] returned true , as expected.
PASS: [MEMBER? 0 [1 2 3]] returned false , as expected.
PASS: [MEMBER? [2] [[1] [2] [3]]] returned true , as expected.
PASS: [MEMBER? 2 [[1] [2] [3]]] returned false , as expected.
PASS: [MEMBER? [2] [1 2 3]] returned false , as expected.
PASS: [MEMBER? 1 []] returned false , as expected.
PASS: [MEMBER? 1 {1}] returned true , as expected.
PASS: [MEMBER? 1 {1 1 1}] returned true , as expected.
PASS: [MEMBER? 12 {11 12 13}] returned true , as expected.
PASS: [MEMBER? 12 {}] returned false , as expected.
PASS: [MEMBER? 1 123] returned true , as expected.
PASS: [MEMBER? 4 123] returned false , as expected.
PASS: [MEMBER? 23 123] returned false , as expected.
PASS: [MEMBER? 1 "] returned false , as expected.
PASS: [MEMBER? [1] "123] returned false , as expected.
PASS: [MEMBER? " "hello] returned false , as expected.
FAIL: [MEMBER? " ["]] returned false . We expected true
FAIL: [MEMBER? " {"}] returned false . We expected true
INFO: Executing invalid instruction: [(MEMBER?)]
INFO: Executing [(MEMBER?)] set error code to 6 , as expected
INFO: Executing [(MEMBER?)] set error string to [not enough inputs to MEMBER?]
INFO: Executing invalid instruction: [(MEMBER? 1)]
INFO: Executing [(MEMBER? 1)] set error code to 6 , as expected
INFO: Executing [(MEMBER? 1)] set error string to [not enough inputs to MEMBER?]
INFO: Executing invalid instruction: [(MEMBER? 2 [1 2 3] "toomany)]
INFO: Executing [(MEMBER? 2 [1 2 3] "toomany)] set error code to 8 , as expected
INFO: Executing [(MEMBER? 2 [1 2 3] "toomany)] set error string to [too much inside ()'s]
PASS: [BEFOREP "ABC "ABD] returned true , as expected.
PASS: [BEFORE? "ABC "ABD] returned true , as expected.
PASS: [BEFORE? "ABD "ABC] returned false , as expected.
PASS: [BEFORE? "ABC "ABC] returned false , as expected.
PASS: [BEFORE? "ABC "ABCD] returned true , as expected.
PASS: [BEFORE? "ABCD "ABC] returned false , as expected.
PASS: [BEFORE? " "A] returned true , as expected.
PASS: [BEFORE? "Z "] returned false , as expected.
INFO: Executing invalid instruction: [(BEFORE?)]
INFO: Executing [(BEFORE?)] set error code to 6 , as expected
INFO: Executing [(BEFORE?)] set error string to [not enough inputs to BEFORE?]
INFO: Executing invalid instruction: [(BEFORE? "ABC)]
INFO: Executing [(BEFORE? "ABC)] set error code to 6 , as expected
INFO: Executing [(BEFORE? "ABC)] set error string to [not enough inputs to BEFORE?]
INFO: Executing invalid instruction: [(BEFORE? "ABC [] )]
PASS: Executing [(BEFORE? "ABC [] )] threw an error
INFO: Executing invalid instruction: [(BEFORE? [] "ABC)]
PASS: Executing [(BEFORE? [] "ABC)] threw an error
INFO: Executing invalid instruction: [(BEFORE? "ABC "ABC "toomany)]
INFO: Executing [(BEFORE? "ABC "ABC "toomany)] set error code to 8 , as expected
INFO: Executing [(BEFORE? "ABC "ABC "toomany)] set error string to [too much inside ()'s]
PASS: [WORD "o "k] returned ok , as expected.
PASS: [WORD "4 "2] returned 42 , as expected.
PASS: [(WORD)] returned  , as expected.
PASS: [(WORD "o)] returned o , as expected.
PASS: [(WORD "o "k "ay)] returned okay , as expected.
PASS: [(WORD " ")] returned  , as expected.
PASS: [(WORD " "a ")] returned a , as expected.
INFO: Executing invalid instruction: [WORD [] "a]
PASS: Executing [WORD [] "a] threw an error
INFO: Executing invalid instruction: [WORD "a []]
PASS: Executing [WORD "a []] threw an error
INFO: Executing invalid instruction: [WORD "a {}]
PASS: Executing [WORD "a {}] threw an error
INFO: Executing invalid instruction: [WORD {} "a]
PASS: Executing [WORD {} "a] threw an error
PASS: [ASCII "a] returned 97 , as expected.
PASS: [ASCII "A] returned 65 , as expected.
PASS: [ASCII 1] returned 49 , as expected.
PASS: [ASCII "(] returned 40 , as expected.
INFO: Executing invalid instruction: [(ASCII)]
INFO: Executing [(ASCII)] set error code to 6 , as expected
INFO: Executing [(ASCII)] set error string to [not enough inputs to ASCII]
INFO: Executing invalid instruction: [(ASCII "a "b)]
INFO: Executing [(ASCII "a "b)] set error code to 8 , as expected
INFO: Executing [(ASCII "a "b)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ASCII [a]]
PASS: Executing [ASCII [a]] threw an error
INFO: Executing invalid instruction: [ASCII {a}]
PASS: Executing [ASCII {a}] threw an error
INFO: Executing invalid instruction: [ASCII "ab]
PASS: Executing [ASCII "ab] threw an error
INFO: Executing invalid instruction: [ASCII 1.2]
PASS: Executing [ASCII 1.2] threw an error
PASS: [RAWASCII "a] returned 97 , as expected.
PASS: [RAWASCII "A] returned 65 , as expected.
PASS: [RAWASCII 1] returned 49 , as expected.
PASS: [RAWASCII CHAR 0] returned 0 , as expected.
PASS: [RAWASCII CHAR 5] returned 5 , as expected.
PASS: [RAWASCII CHAR 192] returned 192 , as expected.
INFO: Executing invalid instruction: [(RAWASCII)]
INFO: Executing [(RAWASCII)] set error code to 6 , as expected
INFO: Executing [(RAWASCII)] set error string to [not enough inputs to RAWASCII]
INFO: Executing invalid instruction: [(RAWASCII "a "b)]
INFO: Executing [(RAWASCII "a "b)] set error code to 8 , as expected
INFO: Executing [(RAWASCII "a "b)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RAWASCII [a]]
PASS: Executing [RAWASCII [a]] threw an error
INFO: Executing invalid instruction: [RAWASCII {a}]
PASS: Executing [RAWASCII {a}] threw an error
INFO: Executing invalid instruction: [RAWASCII "ab]
PASS: Executing [RAWASCII "ab] threw an error
INFO: Executing invalid instruction: [RAWASCII 1.2]
PASS: Executing [RAWASCII 1.2] threw an error
PASS: [BF [1 2 3]] returned [2 3] , as expected.
PASS: [BUTFIRST [1 2 3]] returned [2 3] , as expected.
PASS: [BUTFIRST [1]] returned [] , as expected.
PASS: [BUTFIRST "hello] returned ello , as expected.
PASS: [BUTFIRST "h] returned  , as expected.
INFO: Executing invalid instruction: [(BUTFIRST)]
INFO: Executing [(BUTFIRST)] set error code to 6 , as expected
INFO: Executing [(BUTFIRST)] set error string to [not enough inputs to BUTFIRST]
INFO: Executing invalid instruction: [(BUTFIRST "word "toomany)]
INFO: Executing [(BUTFIRST "word "toomany)] set error code to 8 , as expected
INFO: Executing [(BUTFIRST "word "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [BUTFIRST []]
PASS: Executing [BUTFIRST []] threw an error
INFO: Executing invalid instruction: [BUTFIRST "]
PASS: Executing [BUTFIRST "] threw an error
INFO: Executing invalid instruction: [BUTFIRST {1}]
PASS: Executing [BUTFIRST {1}] threw an error
PASS: [BL [1 2 3]] returned [1 2] , as expected.
PASS: [BUTLAST [1 2 3]] returned [1 2] , as expected.
PASS: [BUTLAST [1]] returned [] , as expected.
PASS: [BUTLAST "hello] returned hell , as expected.
PASS: [BUTLAST "h] returned  , as expected.
INFO: Executing invalid instruction: [(BUTLAST)]
INFO: Executing [(BUTLAST)] set error code to 6 , as expected
INFO: Executing [(BUTLAST)] set error string to [not enough inputs to BUTLAST]
INFO: Executing invalid instruction: [(BUTLAST "word "toomany)]
INFO: Executing [(BUTLAST "word "toomany)] set error code to 8 , as expected
INFO: Executing [(BUTLAST "word "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [BUTLAST []]
PASS: Executing [BUTLAST []] threw an error
INFO: Executing invalid instruction: [BUTLAST "]
PASS: Executing [BUTLAST "] threw an error
INFO: Executing invalid instruction: [BUTLAST {1}]
PASS: Executing [BUTLAST {1}] threw an error
PASS: [LAST [1 2 3]] returned 3 , as expected.
PASS: [LAST [1 2]] returned 2 , as expected.
PASS: [LAST [1]] returned 1 , as expected.
PASS: [LAST "hello] returned o , as expected.
PASS: [LAST "h] returned h , as expected.
INFO: Executing invalid instruction: [(LAST)]
INFO: Executing [(LAST)] set error code to 6 , as expected
INFO: Executing [(LAST)] set error string to [not enough inputs to LAST]
INFO: Executing invalid instruction: [(LAST "word "toomany)]
INFO: Executing [(LAST "word "toomany)] set error code to 8 , as expected
INFO: Executing [(LAST "word "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [LAST []]
PASS: Executing [LAST []] threw an error
INFO: Executing invalid instruction: [LAST "]
PASS: Executing [LAST "] threw an error
INFO: Executing invalid instruction: [LAST {1}]
PASS: Executing [LAST {1}] threw an error
PASS: [COUNT :myarray] returned 4 , as expected.
PASS: [ITEM 1 :myarray] returned [] , as expected.
PASS: [ITEM 2 :myarray] returned [] , as expected.
PASS: [ITEM 3 :myarray] returned [] , as expected.
PASS: [ITEM 4 :myarray] returned [] , as expected.
PASS: [ITEM 1 :myarray] returned 42 , as expected.
PASS: [ITEM 2 :myarray] returned hi , as expected.
PASS: [ITEM 3 :myarray] returned [list] , as expected.
PASS: [ITEM 1 :myarray] returned 1 , as expected.
PASS: [ITEM 2 :myarray] returned 2 , as expected.
PASS: [ITEM 3 :myarray] returned 3 , as expected.
PASS: [ITEM 4 :myarray] returned 4 , as expected.
PASS: [COUNT :newarray] returned 4 , as expected.
PASS: [ITEM 1 :newarray] returned 1 , as expected.
PASS: [ITEM 2 :newarray] returned 2 , as expected.
PASS: [ITEM 3 :newarray] returned 3 , as expected.
PASS: [ITEM 4 :newarray] returned 4 , as expected.
PASS: [COUNT :myarray] returned 3 , as expected.
PASS: [ITEM 0 :myarray] returned [] , as expected.
PASS: [ITEM 1 :myarray] returned [] , as expected.
PASS: [ITEM 2 :myarray] returned [] , as expected.
PASS: [ITEM 0 :myarray] returned 0 , as expected.
PASS: [ITEM 1 :myarray] returned 1 , as expected.
PASS: [ITEM 2 :myarray] returned 2 , as expected.
PASS: [ITEM 0 :myarray] returned [0] , as expected.
PASS: [ITEM 1 :myarray] returned [1] , as expected.
PASS: [ITEM 2 :myarray] returned [2] , as expected.
PASS: [COUNT :myarray] returned 3 , as expected.
PASS: [ITEM -100 :myarray] returned 0 , as expected.
PASS: [ITEM -99 :myarray] returned 1 , as expected.
PASS: [ITEM -98 :myarray] returned 2 , as expected.
PASS: [COUNT :myarray] returned 4 , as expected.
PASS: [ITEM 2 :myarray] returned 1 , as expected.
PASS: [ITEM 3 :myarray] returned 2 , as expected.
PASS: [ITEM 4 :myarray] returned 3 , as expected.
PASS: [ITEM 5 :myarray] returned 4 , as expected.
PASS: [COUNT :myarray] returned 4 , as expected.
PASS: [ITEM -2 :myarray] returned 1 , as expected.
PASS: [ITEM -1 :myarray] returned 2 , as expected.
PASS: [ITEM 0 :myarray] returned 3 , as expected.
PASS: [ITEM 1 :myarray] returned 4 , as expected.
INFO: Executing invalid instruction: [ARRAY -1]
PASS: Executing [ARRAY -1] threw an error
INFO: Executing invalid instruction: [ARRAY 1.23]
PASS: Executing [ARRAY 1.23] threw an error
INFO: Executing invalid instruction: [ARRAY "two]
PASS: Executing [ARRAY "two] threw an error
INFO: Executing invalid instruction: [ARRAY {}]
PASS: Executing [ARRAY {}] threw an error
INFO: Executing invalid instruction: [ARRAY []]
PASS: Executing [ARRAY []] threw an error
INFO: Executing invalid instruction: [(ARRAY 5 "origin)]
PASS: Executing [(ARRAY 5 "origin)] threw an error
INFO: Executing invalid instruction: [(ARRAY 5 1.23)]
PASS: Executing [(ARRAY 5 1.23)] threw an error
INFO: Executing invalid instruction: [(ARRAY 5 {5} )]
PASS: Executing [(ARRAY 5 {5} )] threw an error
INFO: Executing invalid instruction: [(ARRAY 5 [5] )]
PASS: Executing [(ARRAY 5 [5] )] threw an error
INFO: Creating an empty array (regression test for bug #1349374)
INFO: Executing invalid instruction: [(SETITEM)]
INFO: Executing [(SETITEM)] set error code to 6 , as expected
INFO: Executing [(SETITEM)] set error string to [not enough inputs to SETITEM]
INFO: Executing invalid instruction: [(SETITEM 1)]
INFO: Executing [(SETITEM 1)] set error code to 6 , as expected
INFO: Executing [(SETITEM 1)] set error string to [not enough inputs to SETITEM]
INFO: Executing invalid instruction: [(SETITEM 1 {1 2 3} )]
INFO: Executing [(SETITEM 1 {1 2 3} )] set error code to 6 , as expected
INFO: Executing [(SETITEM 1 {1 2 3} )] set error string to [not enough inputs to SETITEM]
INFO: Executing invalid instruction: [(SETITEM 1 {1 2 3} "value "toomany)]
INFO: Executing [(SETITEM 1 {1 2 3} "value "toomany)] set error code to 8 , as expected
INFO: Executing [(SETITEM 1 {1 2 3} "value "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SETITEM "one {1 2 3} "value]
PASS: Executing [SETITEM "one {1 2 3} "value] threw an error
INFO: Executing invalid instruction: [SETITEM 1 [1 2 3] "value]
PASS: Executing [SETITEM 1 [1 2 3] "value] threw an error
INFO: Executing invalid instruction: [SETITEM 1 "string "value]
PASS: Executing [SETITEM 1 "string "value] threw an error
INFO: Executing invalid instruction: [SETITEM 5 {1} "value]
PASS: Executing [SETITEM 5 {1} "value] threw an error
INFO: Executing invalid instruction: [SETITEM 1 :myarray :myarray]
PASS: Executing [SETITEM 1 :myarray :myarray] threw an error
PASS: [(OR)] returned false , as expected.
PASS: [(OR "true)] returned true , as expected.
PASS: [(OR "false)] returned false , as expected.
PASS: [(OR "false "false)] returned false , as expected.
PASS: [(OR "true "false)] returned true , as expected.
PASS: [(OR "false "true)] returned true , as expected.
PASS: [(OR "true "true)] returned true , as expected.
PASS: [(OR "false "FALSE "false "FALSE)] returned false , as expected.
PASS: [(OR "false "FALSE "false "TRUE)] returned true , as expected.
INFO: Executing invalid instruction: [(OR 1)]
PASS: Executing [(OR 1)] threw an error
INFO: Executing invalid instruction: [(OR 0)]
PASS: Executing [(OR 0)] threw an error
INFO: Executing invalid instruction: [(OR "truex)]
PASS: Executing [(OR "truex)] threw an error
INFO: Executing invalid instruction: [(OR "falsex)]
PASS: Executing [(OR "falsex)] threw an error
INFO: Executing invalid instruction: [(OR "true 1)]
FAIL: Executing [(OR "true 1)] did not throw an error
INFO: Executing invalid instruction: [(OR 1 "true)]
PASS: Executing [(OR 1 "true)] threw an error
INFO: Executing invalid instruction: [(OR "false 0)]
PASS: Executing [(OR "false 0)] threw an error
INFO: Executing invalid instruction: [(OR 0 "false)]
PASS: Executing [(OR 0 "false)] threw an error
PASS: [(AND)] returned true , as expected.
PASS: [(AND "true)] returned true , as expected.
PASS: [(AND "false)] returned false , as expected.
PASS: [(AND "false "false)] returned false , as expected.
PASS: [(AND "true "false)] returned false , as expected.
PASS: [(AND "false "true)] returned false , as expected.
PASS: [(AND "true "true)] returned true , as expected.
PASS: [(AND "TRUE "true "TRUE "false)] returned false , as expected.
PASS: [(AND "TRUE "true "TRUE "true)] returned true , as expected.
INFO: Executing invalid instruction: [(AND 1)]
PASS: Executing [(AND 1)] threw an error
INFO: Executing invalid instruction: [(AND 0)]
PASS: Executing [(AND 0)] threw an error
INFO: Executing invalid instruction: [(AND "truex)]
PASS: Executing [(AND "truex)] threw an error
INFO: Executing invalid instruction: [(AND "falsex)]
PASS: Executing [(AND "falsex)] threw an error
INFO: Executing invalid instruction: [(AND "true 1)]
PASS: Executing [(AND "true 1)] threw an error
INFO: Executing invalid instruction: [(AND 1 "true)]
PASS: Executing [(AND 1 "true)] threw an error
INFO: Executing invalid instruction: [(AND "false 0)]
FAIL: Executing [(AND "false 0)] did not throw an error
INFO: Executing invalid instruction: [(AND 0 "false)]
PASS: Executing [(AND 0 "false)] threw an error
PASS: [(NOT "true)] returned false , as expected.
PASS: [(NOT "false)] returned true , as expected.
INFO: Executing invalid instruction: [(NOT)]
INFO: Executing [(NOT)] set error code to 6 , as expected
INFO: Executing [(NOT)] set error string to [not enough inputs to NOT]
INFO: Executing invalid instruction: [(NOT 0)]
PASS: Executing [(NOT 0)] threw an error
INFO: Executing invalid instruction: [(NOT "truex)]
PASS: Executing [(NOT "truex)] threw an error
INFO: Executing invalid instruction: [(NOT "true "true)]
INFO: Executing [(NOT "true "true)] set error code to 8 , as expected
INFO: Executing [(NOT "true "true)] set error string to [too much inside ()'s]
PASS: [0 + 0] returned 0 , as expected.
PASS: [0 + 1] returned 1 , as expected.
PASS: [0 + -1] returned -1 , as expected.
PASS: [5 + 0] returned 5 , as expected.
PASS: [5 + 1] returned 6 , as expected.
PASS: [5 + -1] returned 4 , as expected.
PASS: [-5 + 0] returned -5 , as expected.
PASS: [-5 + 1] returned -4 , as expected.
PASS: [-5 + -1] returned -6 , as expected.
PASS: [SUM 0 0] returned 0 , as expected.
PASS: [SUM 0 1] returned 1 , as expected.
PASS: [SUM 0 -1] returned -1 , as expected.
PASS: [SUM 5 0] returned 5 , as expected.
PASS: [SUM 5 1] returned 6 , as expected.
PASS: [SUM 5 -1] returned 4 , as expected.
PASS: [SUM "1 "2] returned 3 , as expected.
PASS: [SUM 1e40 2e39] returned 1.2e+40 , as expected.
PASS: [(SUM)] returned 0 , as expected.
PASS: [(SUM 5)] returned 5 , as expected.
PASS: [(SUM 1 2 3 4 5)] returned 15 , as expected.
PASS: [(SUM 1 2.5 3 4.5 5)] returned 16 , as expected.
INFO: Executing invalid instruction: [[] + 2]
PASS: Executing [[] + 2] threw an error
INFO: Executing invalid instruction: [[1] + 2]
PASS: Executing [[1] + 2] threw an error
INFO: Executing invalid instruction: [{} + 2]
PASS: Executing [{} + 2] threw an error
INFO: Executing invalid instruction: [{1} + 2]
PASS: Executing [{1} + 2] threw an error
INFO: Executing invalid instruction: ["one + 2]
PASS: Executing ["one + 2] threw an error
INFO: Executing invalid instruction: ["1a + 2]
PASS: Executing ["1a + 2] threw an error
INFO: Executing invalid instruction: [1 + []]
PASS: Executing [1 + []] threw an error
INFO: Executing invalid instruction: [1 + [2]]
PASS: Executing [1 + [2]] threw an error
INFO: Executing invalid instruction: [1 + {}]
PASS: Executing [1 + {}] threw an error
INFO: Executing invalid instruction: [1 + {2}]
PASS: Executing [1 + {2}] threw an error
INFO: Executing invalid instruction: [1 + "two]
PASS: Executing [1 + "two] threw an error
INFO: Executing invalid instruction: [1 + "2a]
PASS: Executing [1 + "2a] threw an error
INFO: Executing invalid instruction: [SUM [] 2]
PASS: Executing [SUM [] 2] threw an error
INFO: Executing invalid instruction: [SUM [1] 2]
PASS: Executing [SUM [1] 2] threw an error
INFO: Executing invalid instruction: [SUM {} 2]
PASS: Executing [SUM {} 2] threw an error
INFO: Executing invalid instruction: [SUM {1} 2]
PASS: Executing [SUM {1} 2] threw an error
INFO: Executing invalid instruction: [SUM "one 2]
PASS: Executing [SUM "one 2] threw an error
INFO: Executing invalid instruction: [SUM "1a 2]
PASS: Executing [SUM "1a 2] threw an error
INFO: Executing invalid instruction: [SUM 1 []]
PASS: Executing [SUM 1 []] threw an error
INFO: Executing invalid instruction: [SUM 1 [2]]
PASS: Executing [SUM 1 [2]] threw an error
INFO: Executing invalid instruction: [SUM 1 {}]
PASS: Executing [SUM 1 {}] threw an error
INFO: Executing invalid instruction: [SUM 1 {2}]
PASS: Executing [SUM 1 {2}] threw an error
INFO: Executing invalid instruction: [SUM 1 "two]
PASS: Executing [SUM 1 "two] threw an error
INFO: Executing invalid instruction: [SUM 1 "2a]
PASS: Executing [SUM 1 "2a] threw an error
INFO: Executing invalid instruction: [(SUM 1 2 [] )]
PASS: Executing [(SUM 1 2 [] )] threw an error
INFO: Executing invalid instruction: [(SUM 1 2 [3] )]
PASS: Executing [(SUM 1 2 [3] )] threw an error
INFO: Executing invalid instruction: [(SUM 1 2 {} )]
PASS: Executing [(SUM 1 2 {} )] threw an error
INFO: Executing invalid instruction: [(SUM 1 2 {3} )]
PASS: Executing [(SUM 1 2 {3} )] threw an error
INFO: Executing invalid instruction: [(SUM 1 2 "three)]
PASS: Executing [(SUM 1 2 "three)] threw an error
INFO: Executing invalid instruction: [(SUM 1 2 "3a)]
PASS: Executing [(SUM 1 2 "3a)] threw an error
PASS: [0 - 0] returned 0 , as expected.
PASS: [0 - 1] returned -1 , as expected.
PASS: [0 - -1] returned 1 , as expected.
PASS: [5 - 0] returned 5 , as expected.
PASS: [5 - 1] returned 4 , as expected.
PASS: [5 - -1] returned 6 , as expected.
PASS: [-5 - 0] returned -5 , as expected.
PASS: [-5 - 1] returned -6 , as expected.
PASS: [-5 - -1] returned -4 , as expected.
PASS: [DIFFERENCE 0 0] returned 0 , as expected.
PASS: [DIFFERENCE 0 1] returned -1 , as expected.
PASS: [DIFFERENCE 0 -1] returned 1 , as expected.
PASS: [DIFFERENCE 5 0] returned 5 , as expected.
PASS: [DIFFERENCE 5 1] returned 4 , as expected.
PASS: [DIFFERENCE 5 -1] returned 6 , as expected.
PASS: [DIFFERENCE "3 "2] returned 1 , as expected.
PASS: [DIFFERENCE 1.2e40 2e39] returned 1e+40 , as expected.
INFO: Executing invalid instruction: [(DIFFERENCE)]
INFO: Executing [(DIFFERENCE)] set error code to 6 , as expected
INFO: Executing [(DIFFERENCE)] set error string to [not enough inputs to DIFFERENCE]
INFO: Executing invalid instruction: [(DIFFERENCE 5)]
INFO: Executing [(DIFFERENCE 5)] set error code to 6 , as expected
INFO: Executing [(DIFFERENCE 5)] set error string to [not enough inputs to DIFFERENCE]
INFO: Executing invalid instruction: [(DIFFERENCE 5 6 7)]
INFO: Executing [(DIFFERENCE 5 6 7)] set error code to 8 , as expected
INFO: Executing [(DIFFERENCE 5 6 7)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [[] - 2]
PASS: Executing [[] - 2] threw an error
INFO: Executing invalid instruction: [[1] - 2]
PASS: Executing [[1] - 2] threw an error
INFO: Executing invalid instruction: [{} - 2]
PASS: Executing [{} - 2] threw an error
INFO: Executing invalid instruction: [{1} - 2]
PASS: Executing [{1} - 2] threw an error
INFO: Executing invalid instruction: ["one - 2]
PASS: Executing ["one - 2] threw an error
INFO: Executing invalid instruction: ["1a - 2]
PASS: Executing ["1a - 2] threw an error
INFO: Executing invalid instruction: [1 - []]
PASS: Executing [1 - []] threw an error
INFO: Executing invalid instruction: [1 - [2]]
PASS: Executing [1 - [2]] threw an error
INFO: Executing invalid instruction: [1 - {}]
PASS: Executing [1 - {}] threw an error
INFO: Executing invalid instruction: [1 - {2}]
PASS: Executing [1 - {2}] threw an error
INFO: Executing invalid instruction: [1 - "two]
PASS: Executing [1 - "two] threw an error
INFO: Executing invalid instruction: [1 - "2a]
PASS: Executing [1 - "2a] threw an error
INFO: Executing invalid instruction: [DIFFERENCE [] 2]
PASS: Executing [DIFFERENCE [] 2] threw an error
INFO: Executing invalid instruction: [DIFFERENCE [1] 2]
PASS: Executing [DIFFERENCE [1] 2] threw an error
INFO: Executing invalid instruction: [DIFFERENCE {} 2]
PASS: Executing [DIFFERENCE {} 2] threw an error
INFO: Executing invalid instruction: [DIFFERENCE {1} 2]
PASS: Executing [DIFFERENCE {1} 2] threw an error
INFO: Executing invalid instruction: [DIFFERENCE "one 2]
PASS: Executing [DIFFERENCE "one 2] threw an error
INFO: Executing invalid instruction: [DIFFERENCE "1a 2]
PASS: Executing [DIFFERENCE "1a 2] threw an error
INFO: Executing invalid instruction: [DIFFERENCE 1 []]
PASS: Executing [DIFFERENCE 1 []] threw an error
INFO: Executing invalid instruction: [DIFFERENCE 1 [2]]
PASS: Executing [DIFFERENCE 1 [2]] threw an error
INFO: Executing invalid instruction: [DIFFERENCE 1 {}]
PASS: Executing [DIFFERENCE 1 {}] threw an error
INFO: Executing invalid instruction: [DIFFERENCE 1 {2}]
PASS: Executing [DIFFERENCE 1 {2}] threw an error
INFO: Executing invalid instruction: [DIFFERENCE 1 "two]
PASS: Executing [DIFFERENCE 1 "two] threw an error
INFO: Executing invalid instruction: [DIFFERENCE 1 "2a]
PASS: Executing [DIFFERENCE 1 "2a] threw an error
PASS: [-0] returned 0 , as expected.
PASS: [MINUS 0] returned 0 , as expected.
PASS: [MINUS 0] returned 0 , as expected.
PASS: [MINUS 2] returned -2 , as expected.
PASS: [MINUS -2] returned 2 , as expected.
PASS: [MINUS -2e20] returned 2e+20 , as expected.
INFO: Executing invalid instruction: [MINUS []]
PASS: Executing [MINUS []] threw an error
INFO: Executing invalid instruction: [MINUS [1]]
PASS: Executing [MINUS [1]] threw an error
INFO: Executing invalid instruction: [MINUS {}]
PASS: Executing [MINUS {}] threw an error
INFO: Executing invalid instruction: [MINUS {1}]
PASS: Executing [MINUS {1}] threw an error
INFO: Executing invalid instruction: [MINUS "one]
PASS: Executing [MINUS "one] threw an error
INFO: Executing invalid instruction: [MINUS "1a]
PASS: Executing [MINUS "1a] threw an error
INFO: Executing invalid instruction: [(MINUS)]
INFO: Executing [(MINUS)] set error code to 6 , as expected
INFO: Executing [(MINUS)] set error string to [not enough inputs to MINUS]
INFO: Executing invalid instruction: [(MINUS 1 1)]
INFO: Executing [(MINUS 1 1)] set error code to 8 , as expected
INFO: Executing [(MINUS 1 1)] set error string to [too much inside ()'s]
PASS: [0 * 0] returned 0 , as expected.
PASS: [0 * 1] returned 0 , as expected.
PASS: [1 * 0] returned 0 , as expected.
PASS: [2 * 4] returned 8 , as expected.
PASS: [4 * 2] returned 8 , as expected.
PASS: [-2 * 4] returned -8 , as expected.
PASS: [2 * -4] returned -8 , as expected.
PASS: [-2 * -4] returned 8 , as expected.
PASS: ["2 * "4] returned 8 , as expected.
PASS: [1e10 * 2e20] returned 2e+30 , as expected.
PASS: [1e200 * 1e200] returned +INF , as expected.
PASS: [1e200 * -1e200] returned -INF , as expected.
PASS: [-1e200 * -1e200] returned +INF , as expected.
PASS: [1e200 * 1e-200] returned 1 , as expected.
PASS: [PRODUCT 0 0] returned 0 , as expected.
PASS: [PRODUCT 0 1] returned 0 , as expected.
PASS: [PRODUCT 1 0] returned 0 , as expected.
PASS: [PRODUCT 2 4] returned 8 , as expected.
PASS: [PRODUCT 4 2] returned 8 , as expected.
PASS: [PRODUCT -2 4] returned -8 , as expected.
PASS: [PRODUCT 2 -4] returned -8 , as expected.
PASS: [PRODUCT -2 -4] returned 8 , as expected.
PASS: [PRODUCT "2 "4] returned 8 , as expected.
PASS: [PRODUCT 1e10 2e20] returned 2e+30 , as expected.
PASS: [PRODUCT 1e200 1e200] returned +INF , as expected.
PASS: [PRODUCT 1e200 -1e200] returned -INF , as expected.
PASS: [PRODUCT -1e200 -1e200] returned +INF , as expected.
PASS: [PRODUCT 1e200 1e-200] returned 1 , as expected.
PASS: [(PRODUCT)] returned 1 , as expected.
PASS: [(PRODUCT 5)] returned 5 , as expected.
PASS: [(PRODUCT 1 2 3 4 5)] returned 120 , as expected.
PASS: [(PRODUCT 1 2 3 4 5 0.5)] returned 60 , as expected.
PASS: [(PRODUCT 1.10 1 2 3 4 5)] returned 132 , as expected.
FAIL: [(PRODUCT 1.01 1 2 3 4 5)] returned 121.2 . We expected 121.2
INFO: Executing invalid instruction: [[] * 2]
PASS: Executing [[] * 2] threw an error
INFO: Executing invalid instruction: [[1] * 2]
PASS: Executing [[1] * 2] threw an error
INFO: Executing invalid instruction: [{} * 2]
PASS: Executing [{} * 2] threw an error
INFO: Executing invalid instruction: [{1} * 2]
PASS: Executing [{1} * 2] threw an error
INFO: Executing invalid instruction: ["one * 2]
PASS: Executing ["one * 2] threw an error
INFO: Executing invalid instruction: ["1a * 2]
PASS: Executing ["1a * 2] threw an error
INFO: Executing invalid instruction: [1 * []]
PASS: Executing [1 * []] threw an error
INFO: Executing invalid instruction: [1 * [2]]
PASS: Executing [1 * [2]] threw an error
INFO: Executing invalid instruction: [1 * {}]
PASS: Executing [1 * {}] threw an error
INFO: Executing invalid instruction: [1 * {2}]
PASS: Executing [1 * {2}] threw an error
INFO: Executing invalid instruction: [1 * "two]
PASS: Executing [1 * "two] threw an error
INFO: Executing invalid instruction: [1 * "2a]
PASS: Executing [1 * "2a] threw an error
INFO: Executing invalid instruction: [PRODUCT [] 2]
PASS: Executing [PRODUCT [] 2] threw an error
INFO: Executing invalid instruction: [PRODUCT [1] 2]
PASS: Executing [PRODUCT [1] 2] threw an error
INFO: Executing invalid instruction: [PRODUCT {} 2]
PASS: Executing [PRODUCT {} 2] threw an error
INFO: Executing invalid instruction: [PRODUCT {1} 2]
PASS: Executing [PRODUCT {1} 2] threw an error
INFO: Executing invalid instruction: [PRODUCT "one 2]
PASS: Executing [PRODUCT "one 2] threw an error
INFO: Executing invalid instruction: [PRODUCT "1a 2]
PASS: Executing [PRODUCT "1a 2] threw an error
INFO: Executing invalid instruction: [PRODUCT 1 []]
PASS: Executing [PRODUCT 1 []] threw an error
INFO: Executing invalid instruction: [PRODUCT 1 [2]]
PASS: Executing [PRODUCT 1 [2]] threw an error
INFO: Executing invalid instruction: [PRODUCT 1 {}]
PASS: Executing [PRODUCT 1 {}] threw an error
INFO: Executing invalid instruction: [PRODUCT 1 {2}]
PASS: Executing [PRODUCT 1 {2}] threw an error
INFO: Executing invalid instruction: [PRODUCT 1 "two]
PASS: Executing [PRODUCT 1 "two] threw an error
INFO: Executing invalid instruction: [PRODUCT 1 "2a]
PASS: Executing [PRODUCT 1 "2a] threw an error
INFO: Executing invalid instruction: [(PRODUCT 1 2 [] )]
PASS: Executing [(PRODUCT 1 2 [] )] threw an error
INFO: Executing invalid instruction: [(PRODUCT 1 2 [3] )]
PASS: Executing [(PRODUCT 1 2 [3] )] threw an error
INFO: Executing invalid instruction: [(PRODUCT 1 2 {} )]
PASS: Executing [(PRODUCT 1 2 {} )] threw an error
INFO: Executing invalid instruction: [(PRODUCT 1 2 {3} )]
PASS: Executing [(PRODUCT 1 2 {3} )] threw an error
INFO: Executing invalid instruction: [(PRODUCT 1 2 "three)]
PASS: Executing [(PRODUCT 1 2 "three)] threw an error
INFO: Executing invalid instruction: [(PRODUCT 1 2 "3a)]
PASS: Executing [(PRODUCT 1 2 "3a)] threw an error
PASS: [5 / 2] returned 2.5 , as expected.
PASS: [5 / -2] returned -2.5 , as expected.
PASS: [-5 / 2] returned -2.5 , as expected.
PASS: [-5 / -2] returned 2.5 , as expected.
PASS: [4 / 2] returned 2 , as expected.
PASS: [0 / 2] returned 0 , as expected.
PASS: [2.2 / 2] returned 1.1 , as expected.
FAIL: [6.6 / 2.2] returned 3 . We expected 3
PASS: [2e40 / 2e20] returned 1e+20 , as expected.
PASS: [QUOTIENT 5 2] returned 2.5 , as expected.
PASS: [QUOTIENT 5 -2] returned -2.5 , as expected.
PASS: [QUOTIENT -5 2] returned -2.5 , as expected.
PASS: [QUOTIENT -5 -2] returned 2.5 , as expected.
PASS: [QUOTIENT 4 2] returned 2 , as expected.
PASS: [QUOTIENT 0 2] returned 0 , as expected.
PASS: [QUOTIENT 2.2 2] returned 1.1 , as expected.
FAIL: [QUOTIENT 6.6 2.2] returned 3 . We expected 3
PASS: [QUOTIENT "5 "2] returned 2.5 , as expected.
PASS: [QUOTIENT 2e40 2e20] returned 1e+20 , as expected.
PASS: [(QUOTIENT 1)] returned 1 , as expected.
PASS: [(QUOTIENT 10)] returned 0.1 , as expected.
PASS: [(QUOTIENT 0.5)] returned 2 , as expected.
PASS: [(QUOTIENT 1e40)] returned 1e-40 , as expected.
INFO: Executing invalid instruction: [(QUOTIENT)]
INFO: Executing [(QUOTIENT)] set error code to 6 , as expected
INFO: Executing [(QUOTIENT)] set error string to [not enough inputs to QUOTIENT]
INFO: Executing invalid instruction: [(QUOTIENT 5 6 7)]
INFO: Executing [(QUOTIENT 5 6 7)] set error code to 8 , as expected
INFO: Executing [(QUOTIENT 5 6 7)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [[] / 2]
PASS: Executing [[] / 2] threw an error
INFO: Executing invalid instruction: [[1] / 2]
PASS: Executing [[1] / 2] threw an error
INFO: Executing invalid instruction: [{} / 2]
PASS: Executing [{} / 2] threw an error
INFO: Executing invalid instruction: [{1} / 2]
PASS: Executing [{1} / 2] threw an error
INFO: Executing invalid instruction: ["one / 2]
PASS: Executing ["one / 2] threw an error
INFO: Executing invalid instruction: ["1a / 2]
PASS: Executing ["1a / 2] threw an error
INFO: Executing invalid instruction: [1 / 0]
PASS: Executing [1 / 0] threw an error
INFO: Executing invalid instruction: [1 / []]
PASS: Executing [1 / []] threw an error
INFO: Executing invalid instruction: [1 / [2]]
PASS: Executing [1 / [2]] threw an error
INFO: Executing invalid instruction: [1 / {}]
PASS: Executing [1 / {}] threw an error
INFO: Executing invalid instruction: [1 / {2}]
PASS: Executing [1 / {2}] threw an error
INFO: Executing invalid instruction: [1 / "two]
PASS: Executing [1 / "two] threw an error
INFO: Executing invalid instruction: [1 / "2a]
PASS: Executing [1 / "2a] threw an error
INFO: Executing invalid instruction: [QUOTIENT 0]
PASS: Executing [QUOTIENT 0] threw an error
INFO: Executing invalid instruction: [QUOTIENT []]
PASS: Executing [QUOTIENT []] threw an error
INFO: Executing invalid instruction: [QUOTIENT [1]]
PASS: Executing [QUOTIENT [1]] threw an error
INFO: Executing invalid instruction: [QUOTIENT {}]
PASS: Executing [QUOTIENT {}] threw an error
INFO: Executing invalid instruction: [QUOTIENT {1}]
PASS: Executing [QUOTIENT {1}] threw an error
INFO: Executing invalid instruction: [QUOTIENT "one]
PASS: Executing [QUOTIENT "one] threw an error
INFO: Executing invalid instruction: [QUOTIENT "1a]
PASS: Executing [QUOTIENT "1a] threw an error
INFO: Executing invalid instruction: [QUOTIENT [] 2]
PASS: Executing [QUOTIENT [] 2] threw an error
INFO: Executing invalid instruction: [QUOTIENT [1] 2]
PASS: Executing [QUOTIENT [1] 2] threw an error
INFO: Executing invalid instruction: [QUOTIENT {} 2]
PASS: Executing [QUOTIENT {} 2] threw an error
INFO: Executing invalid instruction: [QUOTIENT {1} 2]
PASS: Executing [QUOTIENT {1} 2] threw an error
INFO: Executing invalid instruction: [QUOTIENT "one 2]
PASS: Executing [QUOTIENT "one 2] threw an error
INFO: Executing invalid instruction: [QUOTIENT "1a 2]
PASS: Executing [QUOTIENT "1a 2] threw an error
INFO: Executing invalid instruction: [QUOTIENT 1 0]
PASS: Executing [QUOTIENT 1 0] threw an error
INFO: Executing invalid instruction: [QUOTIENT 1 []]
PASS: Executing [QUOTIENT 1 []] threw an error
INFO: Executing invalid instruction: [QUOTIENT 1 [2]]
PASS: Executing [QUOTIENT 1 [2]] threw an error
INFO: Executing invalid instruction: [QUOTIENT 1 {}]
PASS: Executing [QUOTIENT 1 {}] threw an error
INFO: Executing invalid instruction: [QUOTIENT 1 {2}]
PASS: Executing [QUOTIENT 1 {2}] threw an error
INFO: Executing invalid instruction: [QUOTIENT 1 "two]
PASS: Executing [QUOTIENT 1 "two] threw an error
INFO: Executing invalid instruction: [QUOTIENT 1 "2a]
PASS: Executing [QUOTIENT 1 "2a] threw an error
INFO: Executing invalid instruction: [QUOTIENT 0 "2a]
PASS: Executing [QUOTIENT 0 "2a] threw an error
PASS: [REMAINDER 5 6] returned 5 , as expected.
PASS: [REMAINDER 6 2] returned 0 , as expected.
PASS: [REMAINDER 0 2] returned 0 , as expected.
PASS: [REMAINDER 5 5] returned 0 , as expected.
PASS: [REMAINDER 6 4] returned 2 , as expected.
PASS: [REMAINDER -6 4] returned -2 , as expected.
PASS: [REMAINDER 6 -4] returned 2 , as expected.
PASS: [REMAINDER -6 -4] returned -2 , as expected.
PASS: [REMAINDER "5 "2] returned 1 , as expected.
INFO: Executing invalid instruction: [(REMAINDER)]
INFO: Executing [(REMAINDER)] set error code to 6 , as expected
INFO: Executing [(REMAINDER)] set error string to [not enough inputs to REMAINDER]
INFO: Executing invalid instruction: [(REMAINDER 1)]
INFO: Executing [(REMAINDER 1)] set error code to 6 , as expected
INFO: Executing [(REMAINDER 1)] set error string to [not enough inputs to REMAINDER]
INFO: Executing invalid instruction: [(REMAINDER 5 6 7)]
INFO: Executing [(REMAINDER 5 6 7)] set error code to 8 , as expected
INFO: Executing [(REMAINDER 5 6 7)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [REMAINDER [] 2]
PASS: Executing [REMAINDER [] 2] threw an error
INFO: Executing invalid instruction: [REMAINDER [1] 2]
PASS: Executing [REMAINDER [1] 2] threw an error
INFO: Executing invalid instruction: [REMAINDER {} 2]
PASS: Executing [REMAINDER {} 2] threw an error
INFO: Executing invalid instruction: [REMAINDER {1} 2]
PASS: Executing [REMAINDER {1} 2] threw an error
INFO: Executing invalid instruction: [REMAINDER "one 2]
PASS: Executing [REMAINDER "one 2] threw an error
INFO: Executing invalid instruction: [REMAINDER "1a 2]
PASS: Executing [REMAINDER "1a 2] threw an error
INFO: Executing invalid instruction: [REMAINDER 1 0]
PASS: Executing [REMAINDER 1 0] threw an error
INFO: Executing invalid instruction: [REMAINDER 1 []]
PASS: Executing [REMAINDER 1 []] threw an error
INFO: Executing invalid instruction: [REMAINDER 1 [2]]
PASS: Executing [REMAINDER 1 [2]] threw an error
INFO: Executing invalid instruction: [REMAINDER 1 {}]
PASS: Executing [REMAINDER 1 {}] threw an error
INFO: Executing invalid instruction: [REMAINDER 1 {2}]
PASS: Executing [REMAINDER 1 {2}] threw an error
INFO: Executing invalid instruction: [REMAINDER 1 "two]
PASS: Executing [REMAINDER 1 "two] threw an error
INFO: Executing invalid instruction: [REMAINDER 1 "2a]
PASS: Executing [REMAINDER 1 "2a] threw an error
INFO: Executing invalid instruction: [REMAINDER 0 "2a]
PASS: Executing [REMAINDER 0 "2a] threw an error
PASS: [MODULO 5 6] returned 5 , as expected.
PASS: [MODULO 6 2] returned 0 , as expected.
PASS: [MODULO 0 2] returned 0 , as expected.
PASS: [MODULO 5 5] returned 0 , as expected.
PASS: [MODULO 6 4] returned 2 , as expected.
PASS: [MODULO 6 -4] returned -2 , as expected.
PASS: [MODULO -6 4] returned 2 , as expected.
PASS: [MODULO -6 -4] returned -2 , as expected.
PASS: [MODULO "5 "2] returned 1 , as expected.
INFO: Executing invalid instruction: [(MODULO)]
INFO: Executing [(MODULO)] set error code to 6 , as expected
INFO: Executing [(MODULO)] set error string to [not enough inputs to MODULO]
INFO: Executing invalid instruction: [(MODULO 1)]
INFO: Executing [(MODULO 1)] set error code to 6 , as expected
INFO: Executing [(MODULO 1)] set error string to [not enough inputs to MODULO]
INFO: Executing invalid instruction: [(MODULO 5 6 7)]
INFO: Executing [(MODULO 5 6 7)] set error code to 8 , as expected
INFO: Executing [(MODULO 5 6 7)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [MODULO [] 2]
PASS: Executing [MODULO [] 2] threw an error
INFO: Executing invalid instruction: [MODULO [1] 2]
PASS: Executing [MODULO [1] 2] threw an error
INFO: Executing invalid instruction: [MODULO {} 2]
PASS: Executing [MODULO {} 2] threw an error
INFO: Executing invalid instruction: [MODULO {1} 2]
PASS: Executing [MODULO {1} 2] threw an error
INFO: Executing invalid instruction: [MODULO "one 2]
PASS: Executing [MODULO "one 2] threw an error
INFO: Executing invalid instruction: [MODULO "1a 2]
PASS: Executing [MODULO "1a 2] threw an error
INFO: Executing invalid instruction: [MODULO 1 0]
PASS: Executing [MODULO 1 0] threw an error
INFO: Executing invalid instruction: [MODULO 1 []]
PASS: Executing [MODULO 1 []] threw an error
INFO: Executing invalid instruction: [MODULO 1 [2]]
PASS: Executing [MODULO 1 [2]] threw an error
INFO: Executing invalid instruction: [MODULO 1 {}]
PASS: Executing [MODULO 1 {}] threw an error
INFO: Executing invalid instruction: [MODULO 1 {2}]
PASS: Executing [MODULO 1 {2}] threw an error
INFO: Executing invalid instruction: [MODULO 1 "two]
PASS: Executing [MODULO 1 "two] threw an error
INFO: Executing invalid instruction: [MODULO 1 "2a]
PASS: Executing [MODULO 1 "2a] threw an error
INFO: Executing invalid instruction: [MODULO 0 "2a]
PASS: Executing [MODULO 0 "2a] threw an error
PASS: [INT 0] returned 0 , as expected.
PASS: [INT 8] returned 8 , as expected.
PASS: [INT -8] returned -8 , as expected.
PASS: [INT 8.9] returned 8 , as expected.
PASS: [INT 8.1] returned 8 , as expected.
PASS: [INT 8.9999999] returned 8 , as expected.
PASS: [INT -8.9999999] returned -8 , as expected.
PASS: [INT 2.3e40] returned 2.3e+40 , as expected.
INFO: Executing invalid instruction: [(INT)]
INFO: Executing [(INT)] set error code to 6 , as expected
INFO: Executing [(INT)] set error string to [not enough inputs to INT]
INFO: Executing invalid instruction: [(INT 1 2)]
INFO: Executing [(INT 1 2)] set error code to 8 , as expected
INFO: Executing [(INT 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [INT []]
PASS: Executing [INT []] threw an error
INFO: Executing invalid instruction: [INT [1]]
PASS: Executing [INT [1]] threw an error
INFO: Executing invalid instruction: [INT {}]
PASS: Executing [INT {}] threw an error
INFO: Executing invalid instruction: [INT {1}]
PASS: Executing [INT {1}] threw an error
INFO: Executing invalid instruction: [INT "one]
PASS: Executing [INT "one] threw an error
INFO: Executing invalid instruction: [INT "1a]
PASS: Executing [INT "1a] threw an error
PASS: [ROUND 0] returned 0 , as expected.
PASS: [ROUND 8] returned 8 , as expected.
PASS: [ROUND -8] returned -8 , as expected.
PASS: [ROUND 8.1] returned 8 , as expected.
PASS: [ROUND 8.9] returned 9 , as expected.
PASS: [ROUND 8.5] returned 9 , as expected.
PASS: [ROUND 8.49] returned 8 , as expected.
PASS: [ROUND -8.9] returned -9 , as expected.
PASS: [ROUND -8.1] returned -8 , as expected.
PASS: [ROUND 2.3e40] returned 2.3e+40 , as expected.
INFO: Executing invalid instruction: [(ROUND)]
INFO: Executing [(ROUND)] set error code to 6 , as expected
INFO: Executing [(ROUND)] set error string to [not enough inputs to ROUND]
INFO: Executing invalid instruction: [(ROUND 1 2)]
INFO: Executing [(ROUND 1 2)] set error code to 8 , as expected
INFO: Executing [(ROUND 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ROUND []]
PASS: Executing [ROUND []] threw an error
INFO: Executing invalid instruction: [ROUND [1]]
PASS: Executing [ROUND [1]] threw an error
INFO: Executing invalid instruction: [ROUND {}]
PASS: Executing [ROUND {}] threw an error
INFO: Executing invalid instruction: [ROUND {1}]
PASS: Executing [ROUND {1}] threw an error
INFO: Executing invalid instruction: [ROUND "one]
PASS: Executing [ROUND "one] threw an error
INFO: Executing invalid instruction: [ROUND "1a]
PASS: Executing [ROUND "1a] threw an error
PASS: [ABS 0] returned 0 , as expected.
PASS: [ABS 8] returned 8 , as expected.
PASS: [ABS -8] returned 8 , as expected.
PASS: [ABS 8.1] returned 8.1 , as expected.
PASS: [ABS -8.1] returned 8.1 , as expected.
PASS: [ABS 2.3e40] returned 2.3e+40 , as expected.
INFO: Executing invalid instruction: [(ABS)]
INFO: Executing [(ABS)] set error code to 6 , as expected
INFO: Executing [(ABS)] set error string to [not enough inputs to ABS]
INFO: Executing invalid instruction: [(ABS 1 2)]
INFO: Executing [(ABS 1 2)] set error code to 8 , as expected
INFO: Executing [(ABS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ABS []]
PASS: Executing [ABS []] threw an error
INFO: Executing invalid instruction: [ABS [1]]
PASS: Executing [ABS [1]] threw an error
INFO: Executing invalid instruction: [ABS {}]
PASS: Executing [ABS {}] threw an error
INFO: Executing invalid instruction: [ABS {1}]
PASS: Executing [ABS {1}] threw an error
INFO: Executing invalid instruction: [ABS "one]
PASS: Executing [ABS "one] threw an error
INFO: Executing invalid instruction: [ABS "1a]
PASS: Executing [ABS "1a] threw an error
PASS: [SIGN 0] returned 0 , as expected.
PASS: [SIGN 8] returned 1 , as expected.
PASS: [SIGN -8] returned -1 , as expected.
PASS: [SIGN 0.01] returned 1 , as expected.
PASS: [SIGN -0.01] returned -1 , as expected.
PASS: [SIGN 98.6] returned 1 , as expected.
PASS: [SIGN -98.6] returned -1 , as expected.
PASS: [SIGN 2.3e40] returned 1 , as expected.
INFO: Executing invalid instruction: [(SIGN)]
INFO: Executing [(SIGN)] set error code to 6 , as expected
INFO: Executing [(SIGN)] set error string to [not enough inputs to SIGN]
INFO: Executing invalid instruction: [(SIGN 1 2)]
INFO: Executing [(SIGN 1 2)] set error code to 8 , as expected
INFO: Executing [(SIGN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SIGN []]
PASS: Executing [SIGN []] threw an error
INFO: Executing invalid instruction: [SIGN [1]]
PASS: Executing [SIGN [1]] threw an error
INFO: Executing invalid instruction: [SIGN {}]
PASS: Executing [SIGN {}] threw an error
INFO: Executing invalid instruction: [SIGN {1}]
PASS: Executing [SIGN {1}] threw an error
INFO: Executing invalid instruction: [SIGN "one]
PASS: Executing [SIGN "one] threw an error
INFO: Executing invalid instruction: [SIGN "1a]
PASS: Executing [SIGN "1a] threw an error
PASS: [SQRT 0] returned 0 , as expected.
PASS: [SQRT 4] returned 2 , as expected.
PASS: [SQRT 9] returned 3 , as expected.
PASS: [SQRT 1.44] returned 1.2 , as expected.
FAIL: [SQRT 2] returned 1.4142135623731 . We expected 1.4142135623731
PASS: [SQRT 1e40] returned 1e+20 , as expected.
INFO: Executing invalid instruction: [(SQRT)]
INFO: Executing [(SQRT)] set error code to 6 , as expected
INFO: Executing [(SQRT)] set error string to [not enough inputs to SQRT]
INFO: Executing invalid instruction: [(SQRT 1 2)]
INFO: Executing [(SQRT 1 2)] set error code to 8 , as expected
INFO: Executing [(SQRT 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SQRT -1]
PASS: Executing [SQRT -1] threw an error
INFO: Executing invalid instruction: [SQRT []]
PASS: Executing [SQRT []] threw an error
INFO: Executing invalid instruction: [SQRT [1]]
PASS: Executing [SQRT [1]] threw an error
INFO: Executing invalid instruction: [SQRT {}]
PASS: Executing [SQRT {}] threw an error
INFO: Executing invalid instruction: [SQRT {1}]
PASS: Executing [SQRT {1}] threw an error
INFO: Executing invalid instruction: [SQRT "one]
PASS: Executing [SQRT "one] threw an error
INFO: Executing invalid instruction: [SQRT "1a]
PASS: Executing [SQRT "1a] threw an error
PASS: [POWER 1 0] returned 1 , as expected.
PASS: [POWER -1 0] returned 1 , as expected.
PASS: [POWER 2 0] returned 1 , as expected.
PASS: [POWER 1.23 0] returned 1 , as expected.
PASS: [POWER 1e40 0] returned 1 , as expected.
PASS: [POWER 0 1] returned 0 , as expected.
PASS: [POWER 1 1] returned 1 , as expected.
PASS: [POWER -1 1] returned -1 , as expected.
PASS: [POWER 2 1] returned 2 , as expected.
PASS: [POWER 1.23 1] returned 1.23 , as expected.
PASS: [POWER 1e40 1] returned 1e+40 , as expected.
PASS: [POWER 0 2] returned 0 , as expected.
PASS: [POWER 1 2] returned 1 , as expected.
PASS: [POWER -1 2] returned 1 , as expected.
PASS: [POWER 2 2] returned 4 , as expected.
PASS: [POWER 1.23 2] returned 1.5129 , as expected.
PASS: [POWER 1e40 2] returned 1e+80 , as expected.
PASS: [POWER 0 5] returned 0 , as expected.
PASS: [POWER 1 5] returned 1 , as expected.
PASS: [POWER -1 5] returned -1 , as expected.
PASS: [POWER 2 5] returned 32 , as expected.
FAIL: [POWER 1.1 5] returned 1.61051 . We expected 1.61051
FAIL: [POWER -1.1 5] returned -1.61051 . We expected -1.61051
PASS: [POWER 1e2 5] returned 10000000000 , as expected.
PASS: [POWER 1e-2 5] returned 1e-10 , as expected.
PASS: [POWER 1 -1] returned 1 , as expected.
PASS: [POWER 2 -1] returned 0.5 , as expected.
PASS: [POWER 0.5 -1] returned 2 , as expected.
PASS: [POWER 1e40 -1] returned 1e-40 , as expected.
PASS: [POWER -1 -1] returned -1 , as expected.
PASS: [POWER 1 2] returned 1 , as expected.
PASS: [POWER 2 2] returned 4 , as expected.
PASS: [POWER 1.23 2] returned 1.5129 , as expected.
PASS: [POWER 1e40 -1] returned 1e-40 , as expected.
PASS: [POWER -1 -1] returned -1 , as expected.
PASS: [POWER 0 0.5] returned 0 , as expected.
PASS: [POWER 4 0.5] returned 2 , as expected.
PASS: [POWER 9 0.5] returned 3 , as expected.
PASS: [POWER 1.44 0.5] returned 1.2 , as expected.
FAIL: [POWER 2 0.5] returned 1.4142135623731 . We expected 1.4142135623731
PASS: [POWER 1e40 0.5] returned 1e+20 , as expected.
INFO: Executing invalid instruction: [POWER 1e100 5]
PASS: Executing [POWER 1e100 5] threw an error
INFO: Executing invalid instruction: [POWER -1e100 5]
PASS: Executing [POWER -1e100 5] threw an error
INFO: Executing invalid instruction: [(POWER)]
PASS: Executing [(POWER)] threw an error
INFO: Executing invalid instruction: [(POWER 5)]
PASS: Executing [(POWER 5)] threw an error
INFO: Executing invalid instruction: [(POWER 5 6 7)]
INFO: Executing [(POWER 5 6 7)] set error code to 8 , as expected
INFO: Executing [(POWER 5 6 7)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [POWER 0 -1]
PASS: Executing [POWER 0 -1] threw an error
INFO: Executing invalid instruction: [POWER -1 0.5]
PASS: Executing [POWER -1 0.5] threw an error
INFO: Executing invalid instruction: [(POWER)]
INFO: Executing [(POWER)] set error code to 6 , as expected
INFO: Executing [(POWER)] set error string to [not enough inputs to POWER]
INFO: Executing invalid instruction: [(POWER 1)]
INFO: Executing [(POWER 1)] set error code to 6 , as expected
INFO: Executing [(POWER 1)] set error string to [not enough inputs to POWER]
INFO: Executing invalid instruction: [(POWER 1 2 3)]
INFO: Executing [(POWER 1 2 3)] set error code to 8 , as expected
INFO: Executing [(POWER 1 2 3)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [POWER [] 2]
PASS: Executing [POWER [] 2] threw an error
INFO: Executing invalid instruction: [POWER [1] 2]
PASS: Executing [POWER [1] 2] threw an error
INFO: Executing invalid instruction: [POWER {} 2]
PASS: Executing [POWER {} 2] threw an error
INFO: Executing invalid instruction: [POWER {1} 2]
PASS: Executing [POWER {1} 2] threw an error
INFO: Executing invalid instruction: [POWER "one 2]
PASS: Executing [POWER "one 2] threw an error
INFO: Executing invalid instruction: [POWER "1a 2]
PASS: Executing [POWER "1a 2] threw an error
INFO: Executing invalid instruction: [POWER 1 []]
PASS: Executing [POWER 1 []] threw an error
INFO: Executing invalid instruction: [POWER 1 [2]]
PASS: Executing [POWER 1 [2]] threw an error
INFO: Executing invalid instruction: [POWER 1 {}]
PASS: Executing [POWER 1 {}] threw an error
INFO: Executing invalid instruction: [POWER 1 {2}]
PASS: Executing [POWER 1 {2}] threw an error
INFO: Executing invalid instruction: [POWER 1 "two]
PASS: Executing [POWER 1 "two] threw an error
INFO: Executing invalid instruction: [POWER 1 "2a]
PASS: Executing [POWER 1 "2a] threw an error
PASS: [EXP 0] returned 1 , as expected.
FAIL: [EXP 1] returned 2.71828182845905 . We expected 2.71828182845905
PASS: [EXP 2] returned 7.38905609893065 , as expected.
FAIL: [EXP -1] returned 0.367879441171442 . We expected 0.367879441171442
INFO: Executing invalid instruction: [EXP 1e40]
PASS: Executing [EXP 1e40] threw an error
INFO: Executing invalid instruction: [(EXP)]
INFO: Executing [(EXP)] set error code to 6 , as expected
INFO: Executing [(EXP)] set error string to [not enough inputs to EXP]
INFO: Executing invalid instruction: [(EXP 1 2)]
INFO: Executing [(EXP 1 2)] set error code to 8 , as expected
INFO: Executing [(EXP 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [EXP []]
PASS: Executing [EXP []] threw an error
INFO: Executing invalid instruction: [EXP [1]]
PASS: Executing [EXP [1]] threw an error
INFO: Executing invalid instruction: [EXP {}]
PASS: Executing [EXP {}] threw an error
INFO: Executing invalid instruction: [EXP {1}]
PASS: Executing [EXP {1}] threw an error
INFO: Executing invalid instruction: [EXP "one]
PASS: Executing [EXP "one] threw an error
INFO: Executing invalid instruction: [EXP "1a]
PASS: Executing [EXP "1a] threw an error
PASS: [LOG10 1] returned 0 , as expected.
PASS: [LOG10 1e1] returned 1 , as expected.
PASS: [LOG10 1e2] returned 2 , as expected.
PASS: [LOG10 1e-2] returned -2 , as expected.
PASS: [LOG10 1e100] returned 100 , as expected.
FAIL: [LOG10 50] returned 1.69897000433602 . We expected 1.69897000433602
INFO: Executing invalid instruction: [(LOG10)]
INFO: Executing [(LOG10)] set error code to 6 , as expected
INFO: Executing [(LOG10)] set error string to [not enough inputs to LOG10]
INFO: Executing invalid instruction: [(LOG10 1 2)]
INFO: Executing [(LOG10 1 2)] set error code to 8 , as expected
INFO: Executing [(LOG10 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [LOG10 0]
PASS: Executing [LOG10 0] threw an error
INFO: Executing invalid instruction: [LOG10 -1]
PASS: Executing [LOG10 -1] threw an error
INFO: Executing invalid instruction: [LOG10 []]
PASS: Executing [LOG10 []] threw an error
INFO: Executing invalid instruction: [LOG10 [1]]
PASS: Executing [LOG10 [1]] threw an error
INFO: Executing invalid instruction: [LOG10 {}]
PASS: Executing [LOG10 {}] threw an error
INFO: Executing invalid instruction: [LOG10 {1}]
PASS: Executing [LOG10 {1}] threw an error
INFO: Executing invalid instruction: [LOG10 "one]
PASS: Executing [LOG10 "one] threw an error
INFO: Executing invalid instruction: [LOG10 "1a]
PASS: Executing [LOG10 "1a] threw an error
PASS: [LN 1] returned 0 , as expected.
FAIL: [LN 2.71828182845905] returned 1 . We expected 1
FAIL: [LN 500] returned 6.21460809842219 . We expected 6.21460809842219
INFO: Executing invalid instruction: [(LN)]
INFO: Executing [(LN)] set error code to 6 , as expected
INFO: Executing [(LN)] set error string to [not enough inputs to LN]
INFO: Executing invalid instruction: [(LN 1 2)]
INFO: Executing [(LN 1 2)] set error code to 8 , as expected
INFO: Executing [(LN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [LN 0]
PASS: Executing [LN 0] threw an error
INFO: Executing invalid instruction: [LN -1]
PASS: Executing [LN -1] threw an error
INFO: Executing invalid instruction: [LN []]
PASS: Executing [LN []] threw an error
INFO: Executing invalid instruction: [LN [1]]
PASS: Executing [LN [1]] threw an error
INFO: Executing invalid instruction: [LN {}]
PASS: Executing [LN {}] threw an error
INFO: Executing invalid instruction: [LN {1}]
PASS: Executing [LN {1}] threw an error
INFO: Executing invalid instruction: [LN "one]
PASS: Executing [LN "one] threw an error
INFO: Executing invalid instruction: [LN "1a]
PASS: Executing [LN "1a] threw an error
PASS: [PI] returned 3.14159265358979 , as expected.
INFO: Executing invalid instruction: [(PI 1)]
INFO: Executing [(PI 1)] set error code to 8 , as expected
INFO: Executing [(PI 1)] set error string to [too much inside ()'s]
PASS: [TAN 0] returned 0 , as expected.
PASS: [TAN 45] returned 1 , as expected.
PASS: [TAN -45] returned -1 , as expected.
FAIL: [TAN 135] returned -1 . We expected -1
FAIL: [TAN 225] returned 1 . We expected 1
PASS: [TAN 180] returned -1.22514845490862e-16 , as expected.
FAIL: [TAN 360] returned -2.45029690981724e-16 . We expected 0
FAIL: [TAN 3600] returned -2.45029690981724e-15 . We expected 0
PASS: [TAN 14.5] returned 0.25861758435589 , as expected.
INFO: Executing invalid instruction: [(TAN)]
INFO: Executing [(TAN)] set error code to 6 , as expected
INFO: Executing [(TAN)] set error string to [not enough inputs to TAN]
INFO: Executing invalid instruction: [(TAN 1 2)]
INFO: Executing [(TAN 1 2)] set error code to 8 , as expected
INFO: Executing [(TAN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [TAN 90]
FAIL: Executing [TAN 90] did not throw an error
INFO: Executing invalid instruction: [TAN -90]
FAIL: Executing [TAN -90] did not throw an error
INFO: Executing invalid instruction: [TAN 270]
FAIL: Executing [TAN 270] did not throw an error
INFO: Executing invalid instruction: [TAN 3690]
FAIL: Executing [TAN 3690] did not throw an error
INFO: Executing invalid instruction: [TAN []]
PASS: Executing [TAN []] threw an error
INFO: Executing invalid instruction: [TAN [1]]
PASS: Executing [TAN [1]] threw an error
INFO: Executing invalid instruction: [TAN {}]
PASS: Executing [TAN {}] threw an error
INFO: Executing invalid instruction: [TAN {1}]
PASS: Executing [TAN {1}] threw an error
INFO: Executing invalid instruction: [TAN "one]
PASS: Executing [TAN "one] threw an error
INFO: Executing invalid instruction: [TAN "1a]
PASS: Executing [TAN "1a] threw an error
PASS: [RADTAN ( 0 )] returned 0 , as expected.
PASS: [RADTAN ( 0.25 * PI)] returned 1 , as expected.
PASS: [RADTAN (-0.25 * PI)] returned -1 , as expected.
FAIL: [RADTAN ( 0.75 * PI)] returned -1 . We expected -1
FAIL: [RADTAN ( 1.25 * PI)] returned 1 . We expected 1
PASS: [RADTAN ( PI )] returned -1.22514845490862e-16 , as expected.
FAIL: [RADTAN ( 2 * PI )] returned -2.45029690981724e-16 . We expected 0
FAIL: [RADTAN ( 10 * PI )] returned -1.22514845490862e-15 . We expected 0
PASS: [RADTAN ( 14.5 )] returned -2.63406913250383 , as expected.
INFO: Executing invalid instruction: [(RADTAN)]
INFO: Executing [(RADTAN)] set error code to 6 , as expected
INFO: Executing [(RADTAN)] set error string to [not enough inputs to RADTAN]
INFO: Executing invalid instruction: [(RADTAN 1 2)]
INFO: Executing [(RADTAN 1 2)] set error code to 8 , as expected
INFO: Executing [(RADTAN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADTAN ( 0.5 * PI)]
FAIL: Executing [RADTAN ( 0.5 * PI)] did not throw an error
INFO: Executing invalid instruction: [RADTAN (-0.5 * PI)]
FAIL: Executing [RADTAN (-0.5 * PI)] did not throw an error
INFO: Executing invalid instruction: [RADTAN ( 1.5 * PI)]
FAIL: Executing [RADTAN ( 1.5 * PI)] did not throw an error
INFO: Executing invalid instruction: [RADTAN ( 100 * PI)]
FAIL: Executing [RADTAN ( 100 * PI)] did not throw an error
INFO: Executing invalid instruction: [RADTAN []]
PASS: Executing [RADTAN []] threw an error
INFO: Executing invalid instruction: [RADTAN [1]]
PASS: Executing [RADTAN [1]] threw an error
INFO: Executing invalid instruction: [RADTAN {}]
PASS: Executing [RADTAN {}] threw an error
INFO: Executing invalid instruction: [RADTAN {1}]
PASS: Executing [RADTAN {1}] threw an error
INFO: Executing invalid instruction: [RADTAN "one]
PASS: Executing [RADTAN "one] threw an error
INFO: Executing invalid instruction: [RADTAN "1a]
PASS: Executing [RADTAN "1a] threw an error
PASS: [ARCTAN 0] returned 0 , as expected.
PASS: [ARCTAN 1] returned 45 , as expected.
PASS: [ARCTAN -1] returned -45 , as expected.
PASS: [ARCTAN 14.5] returned 86.0548137709624 , as expected.
PASS: [(ARCTAN 1 0 )] returned 0 , as expected.
PASS: [(ARCTAN 1 1 )] returned 45 , as expected.
PASS: [(ARCTAN 1 -1 )] returned -45 , as expected.
PASS: [(ARCTAN -1 1 )] returned 135 , as expected.
PASS: [(ARCTAN -1 -1 )] returned -135 , as expected.
PASS: [(ARCTAN 1 14.5)] returned 86.0548137709624 , as expected.
PASS: [(ARCTAN 2 0)] returned 0 , as expected.
PASS: [(ARCTAN 2 2)] returned 45 , as expected.
PASS: [(ARCTAN 2 -2)] returned -45 , as expected.
PASS: [(ARCTAN 2 29)] returned 86.0548137709624 , as expected.
PASS: [(ARCTAN 1 100)] returned 89.4270613023165 , as expected.
INFO: Executing invalid instruction: [(ARCTAN)]
INFO: Executing [(ARCTAN)] set error code to 6 , as expected
INFO: Executing [(ARCTAN)] set error string to [not enough inputs to ARCTAN]
INFO: Executing invalid instruction: [(ARCTAN 1 2 3)]
INFO: Executing [(ARCTAN 1 2 3)] set error code to 8 , as expected
INFO: Executing [(ARCTAN 1 2 3)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ARCTAN []]
PASS: Executing [ARCTAN []] threw an error
INFO: Executing invalid instruction: [ARCTAN [1]]
PASS: Executing [ARCTAN [1]] threw an error
INFO: Executing invalid instruction: [ARCTAN {}]
PASS: Executing [ARCTAN {}] threw an error
INFO: Executing invalid instruction: [ARCTAN {1}]
PASS: Executing [ARCTAN {1}] threw an error
INFO: Executing invalid instruction: [ARCTAN "one]
PASS: Executing [ARCTAN "one] threw an error
INFO: Executing invalid instruction: [ARCTAN "1a]
PASS: Executing [ARCTAN "1a] threw an error
INFO: Executing invalid instruction: [(ARCTAN 0 1)]
FAIL: Executing [(ARCTAN 0 1)] did not throw an error
INFO: Executing invalid instruction: [(ARCTAN [] 1)]
PASS: Executing [(ARCTAN [] 1)] threw an error
INFO: Executing invalid instruction: [(ARCTAN [1] 1)]
PASS: Executing [(ARCTAN [1] 1)] threw an error
INFO: Executing invalid instruction: [(ARCTAN {} 1)]
PASS: Executing [(ARCTAN {} 1)] threw an error
INFO: Executing invalid instruction: [(ARCTAN {1} 1)]
PASS: Executing [(ARCTAN {1} 1)] threw an error
INFO: Executing invalid instruction: [(ARCTAN "one 1)]
PASS: Executing [(ARCTAN "one 1)] threw an error
INFO: Executing invalid instruction: [(ARCTAN "1a 1)]
PASS: Executing [(ARCTAN "1a 1)] threw an error
INFO: Executing invalid instruction: [(ARCTAN 1 [] )]
PASS: Executing [(ARCTAN 1 [] )] threw an error
INFO: Executing invalid instruction: [(ARCTAN 1 [1] )]
PASS: Executing [(ARCTAN 1 [1] )] threw an error
INFO: Executing invalid instruction: [(ARCTAN 1 {} )]
PASS: Executing [(ARCTAN 1 {} )] threw an error
INFO: Executing invalid instruction: [(ARCTAN 1 {1} )]
PASS: Executing [(ARCTAN 1 {1} )] threw an error
INFO: Executing invalid instruction: [(ARCTAN 1 "one )]
PASS: Executing [(ARCTAN 1 "one )] threw an error
INFO: Executing invalid instruction: [(ARCTAN 1 "1a )]
PASS: Executing [(ARCTAN 1 "1a )] threw an error
PASS: [RADARCTAN 0] returned 0 , as expected.
PASS: [RADARCTAN 1] returned 0.785398163397448 , as expected.
PASS: [RADARCTAN -1] returned -0.785398163397448 , as expected.
PASS: [RADARCTAN 14.5] returned 1.50193983749385 , as expected.
PASS: [(RADARCTAN 1 0 )] returned 0 , as expected.
PASS: [(RADARCTAN 1 1 )] returned 0.785398163397448 , as expected.
PASS: [(RADARCTAN 1 -1 )] returned -0.785398163397448 , as expected.
PASS: [(RADARCTAN -1 1 )] returned 2.35619449019234 , as expected.
PASS: [(RADARCTAN -1 -1 )] returned -2.35619449019234 , as expected.
PASS: [(RADARCTAN 1 14.5 )] returned 1.50193983749385 , as expected.
PASS: [(RADARCTAN 2 0 )] returned 0 , as expected.
PASS: [(RADARCTAN 2 2 )] returned 0.785398163397448 , as expected.
PASS: [(RADARCTAN 2 -2 )] returned -0.785398163397448 , as expected.
PASS: [(RADARCTAN 2 29 )] returned 1.50193983749385 , as expected.
PASS: [(RADARCTAN 1 100)] returned 1.56079666010823 , as expected.
INFO: Executing invalid instruction: [(RADARCTAN)]
INFO: Executing [(RADARCTAN)] set error code to 6 , as expected
INFO: Executing [(RADARCTAN)] set error string to [not enough inputs to RADARCTAN]
INFO: Executing invalid instruction: [(RADARCTAN 1 2 3)]
INFO: Executing [(RADARCTAN 1 2 3)] set error code to 8 , as expected
INFO: Executing [(RADARCTAN 1 2 3)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADARCTAN []]
PASS: Executing [RADARCTAN []] threw an error
INFO: Executing invalid instruction: [RADARCTAN [1]]
PASS: Executing [RADARCTAN [1]] threw an error
INFO: Executing invalid instruction: [RADARCTAN {}]
PASS: Executing [RADARCTAN {}] threw an error
INFO: Executing invalid instruction: [RADARCTAN {1}]
PASS: Executing [RADARCTAN {1}] threw an error
INFO: Executing invalid instruction: [RADARCTAN "one]
PASS: Executing [RADARCTAN "one] threw an error
INFO: Executing invalid instruction: [RADARCTAN "1a]
PASS: Executing [RADARCTAN "1a] threw an error
INFO: Executing invalid instruction: [(RADARCTAN 0 1)]
FAIL: Executing [(RADARCTAN 0 1)] did not throw an error
INFO: Executing invalid instruction: [(RADARCTAN [] 1)]
PASS: Executing [(RADARCTAN [] 1)] threw an error
INFO: Executing invalid instruction: [(RADARCTAN [1] 1)]
PASS: Executing [(RADARCTAN [1] 1)] threw an error
INFO: Executing invalid instruction: [(RADARCTAN {} 1)]
PASS: Executing [(RADARCTAN {} 1)] threw an error
INFO: Executing invalid instruction: [(RADARCTAN {1} 1)]
PASS: Executing [(RADARCTAN {1} 1)] threw an error
INFO: Executing invalid instruction: [(RADARCTAN "one 1)]
PASS: Executing [(RADARCTAN "one 1)] threw an error
INFO: Executing invalid instruction: [(RADARCTAN "1a 1)]
PASS: Executing [(RADARCTAN "1a 1)] threw an error
INFO: Executing invalid instruction: [(RADARCTAN 1 [] )]
PASS: Executing [(RADARCTAN 1 [] )] threw an error
INFO: Executing invalid instruction: [(RADARCTAN 1 [1] )]
PASS: Executing [(RADARCTAN 1 [1] )] threw an error
INFO: Executing invalid instruction: [(RADARCTAN 1 {} )]
PASS: Executing [(RADARCTAN 1 {} )] threw an error
INFO: Executing invalid instruction: [(RADARCTAN 1 {1} )]
PASS: Executing [(RADARCTAN 1 {1} )] threw an error
INFO: Executing invalid instruction: [(RADARCTAN 1 "one )]
PASS: Executing [(RADARCTAN 1 "one )] threw an error
INFO: Executing invalid instruction: [(RADARCTAN 1 "1a )]
PASS: Executing [(RADARCTAN 1 "1a )] threw an error
PASS: [SIN 0] returned 0 , as expected.
PASS: [SIN 30] returned 0.5 , as expected.
PASS: [SIN 45] returned 0.707106781186547 , as expected.
PASS: [SIN -45] returned -0.707106781186547 , as expected.
PASS: [SIN 90] returned 1 , as expected.
PASS: [SIN 180] returned 1.22514845490862e-16 , as expected.
PASS: [SIN 270] returned -1 , as expected.
FAIL: [SIN 360] returned -2.45029690981724e-16 . We expected 0
FAIL: [SIN 3600] returned -2.45029690981724e-15 . We expected 0
PASS: [SIN 3690] returned 1 , as expected.
PASS: [SIN 14.5] returned 0.250380004054441 , as expected.
INFO: Executing invalid instruction: [(SIN)]
INFO: Executing [(SIN)] set error code to 6 , as expected
INFO: Executing [(SIN)] set error string to [not enough inputs to SIN]
INFO: Executing invalid instruction: [(SIN 1 2)]
INFO: Executing [(SIN 1 2)] set error code to 8 , as expected
INFO: Executing [(SIN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SIN []]
PASS: Executing [SIN []] threw an error
INFO: Executing invalid instruction: [SIN [1]]
PASS: Executing [SIN [1]] threw an error
INFO: Executing invalid instruction: [SIN {}]
PASS: Executing [SIN {}] threw an error
INFO: Executing invalid instruction: [SIN {1}]
PASS: Executing [SIN {1}] threw an error
INFO: Executing invalid instruction: [SIN "one]
PASS: Executing [SIN "one] threw an error
INFO: Executing invalid instruction: [SIN "1a]
PASS: Executing [SIN "1a] threw an error
PASS: [RADSIN 0] returned 0 , as expected.
PASS: [RADSIN ( 0.25 * PI)] returned 0.707106781186547 , as expected.
PASS: [RADSIN (-0.25 * PI)] returned -0.707106781186547 , as expected.
PASS: [RADSIN (1/6 * PI)] returned 0.5 , as expected.
PASS: [RADSIN ( 0.5 * PI)] returned 1 , as expected.
PASS: [RADSIN PI] returned 1.22514845490862e-16 , as expected.
PASS: [RADSIN (1.5 * PI)] returned -1 , as expected.
FAIL: [RADSIN ( 2 * PI)] returned -2.45029690981724e-16 . We expected 0
FAIL: [RADSIN ( 10 * PI)] returned -1.22514845490862e-15 . We expected 0
PASS: [RADSIN ( 10.50 * PI)] returned 1 , as expected.
PASS: [RADSIN 14.5] returned 0.934895055524683 , as expected.
INFO: Executing invalid instruction: [(RADSIN)]
INFO: Executing [(RADSIN)] set error code to 6 , as expected
INFO: Executing [(RADSIN)] set error string to [not enough inputs to RADSIN]
INFO: Executing invalid instruction: [(RADSIN 1 2)]
INFO: Executing [(RADSIN 1 2)] set error code to 8 , as expected
INFO: Executing [(RADSIN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADSIN []]
PASS: Executing [RADSIN []] threw an error
INFO: Executing invalid instruction: [RADSIN [1]]
PASS: Executing [RADSIN [1]] threw an error
INFO: Executing invalid instruction: [RADSIN {}]
PASS: Executing [RADSIN {}] threw an error
INFO: Executing invalid instruction: [RADSIN {1}]
PASS: Executing [RADSIN {1}] threw an error
INFO: Executing invalid instruction: [RADSIN "one]
PASS: Executing [RADSIN "one] threw an error
INFO: Executing invalid instruction: [RADSIN "1a]
PASS: Executing [RADSIN "1a] threw an error
PASS: [ARCSIN 0] returned 0 , as expected.
FAIL: [ARCSIN ( 0.5 * SQRT 2)] returned 45 . We expected 45
FAIL: [ARCSIN (-0.5 * SQRT 2)] returned -45 . We expected -45
PASS: [ARCSIN 1] returned 90 , as expected.
PASS: [ARCSIN -1] returned -90 , as expected.
PASS: [ARCSIN 0.5] returned 30 , as expected.
PASS: [ARCSIN -0.5] returned -30 , as expected.
INFO: Executing invalid instruction: [(ARCSIN)]
INFO: Executing [(ARCSIN)] set error code to 6 , as expected
INFO: Executing [(ARCSIN)] set error string to [not enough inputs to ARCSIN]
INFO: Executing invalid instruction: [(ARCSIN 1 2)]
INFO: Executing [(ARCSIN 1 2)] set error code to 8 , as expected
INFO: Executing [(ARCSIN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ARCSIN 1.1]
PASS: Executing [ARCSIN 1.1] threw an error
INFO: Executing invalid instruction: [ARCSIN -1.1]
PASS: Executing [ARCSIN -1.1] threw an error
INFO: Executing invalid instruction: [ARCSIN []]
PASS: Executing [ARCSIN []] threw an error
INFO: Executing invalid instruction: [ARCSIN [1]]
PASS: Executing [ARCSIN [1]] threw an error
INFO: Executing invalid instruction: [ARCSIN {}]
PASS: Executing [ARCSIN {}] threw an error
INFO: Executing invalid instruction: [ARCSIN {1}]
PASS: Executing [ARCSIN {1}] threw an error
INFO: Executing invalid instruction: [ARCSIN "one]
PASS: Executing [ARCSIN "one] threw an error
INFO: Executing invalid instruction: [ARCSIN "1a]
PASS: Executing [ARCSIN "1a] threw an error
PASS: [RADARCSIN 0] returned 0 , as expected.
PASS: [RADARCSIN ( 0.5 * SQRT 2)] returned 0.785398163397448 , as expected.
PASS: [RADARCSIN (-0.5 * SQRT 2)] returned -0.785398163397448 , as expected.
PASS: [RADARCSIN 1] returned 1.5707963267949 , as expected.
PASS: [RADARCSIN -1] returned -1.5707963267949 , as expected.
PASS: [RADARCSIN 0.5] returned 0.523598775598299 , as expected.
PASS: [RADARCSIN -0.5] returned -0.523598775598299 , as expected.
INFO: Executing invalid instruction: [(RADARCSIN)]
INFO: Executing [(RADARCSIN)] set error code to 6 , as expected
INFO: Executing [(RADARCSIN)] set error string to [not enough inputs to RADARCSIN]
INFO: Executing invalid instruction: [(RADARCSIN 1 2)]
INFO: Executing [(RADARCSIN 1 2)] set error code to 8 , as expected
INFO: Executing [(RADARCSIN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADARCSIN 1.1]
PASS: Executing [RADARCSIN 1.1] threw an error
INFO: Executing invalid instruction: [RADARCSIN -1.1]
PASS: Executing [RADARCSIN -1.1] threw an error
INFO: Executing invalid instruction: [RADARCSIN []]
PASS: Executing [RADARCSIN []] threw an error
INFO: Executing invalid instruction: [RADARCSIN [1]]
PASS: Executing [RADARCSIN [1]] threw an error
INFO: Executing invalid instruction: [RADARCSIN {}]
PASS: Executing [RADARCSIN {}] threw an error
INFO: Executing invalid instruction: [RADARCSIN {1}]
PASS: Executing [RADARCSIN {1}] threw an error
INFO: Executing invalid instruction: [RADARCSIN "one]
PASS: Executing [RADARCSIN "one] threw an error
INFO: Executing invalid instruction: [RADARCSIN "1a]
PASS: Executing [RADARCSIN "1a] threw an error
PASS: [COS 0] returned 1 , as expected.
PASS: [COS 45] returned 0.707106781186548 , as expected.
PASS: [COS -45] returned 0.707106781186548 , as expected.
PASS: [COS 225] returned -0.707106781186548 , as expected.
PASS: [COS 60] returned 0.5 , as expected.
PASS: [COS 90] returned 6.1257422745431e-17 , as expected.
PASS: [COS 180] returned -1 , as expected.
PASS: [COS 270] returned -1.83772268236293e-16 , as expected.
PASS: [COS 360] returned 1 , as expected.
PASS: [COS 3600] returned 1 , as expected.
FAIL: [COS 3690] returned 7.84062485076342e-15 . We expected 0
PASS: [COS 14.5] returned 0.968147640378108 , as expected.
INFO: Executing invalid instruction: [(COS)]
INFO: Executing [(COS)] set error code to 6 , as expected
INFO: Executing [(COS)] set error string to [not enough inputs to COS]
INFO: Executing invalid instruction: [(COS 1 2)]
INFO: Executing [(COS 1 2)] set error code to 8 , as expected
INFO: Executing [(COS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [COS []]
PASS: Executing [COS []] threw an error
INFO: Executing invalid instruction: [COS [1]]
PASS: Executing [COS [1]] threw an error
INFO: Executing invalid instruction: [COS {}]
PASS: Executing [COS {}] threw an error
INFO: Executing invalid instruction: [COS {1}]
PASS: Executing [COS {1}] threw an error
INFO: Executing invalid instruction: [COS "one]
PASS: Executing [COS "one] threw an error
INFO: Executing invalid instruction: [COS "1a]
PASS: Executing [COS "1a] threw an error
PASS: [RADCOS 0] returned 1 , as expected.
PASS: [RADCOS ( 0.25 * PI)] returned 0.707106781186548 , as expected.
PASS: [RADCOS (-0.25 * PI)] returned 0.707106781186548 , as expected.
PASS: [RADCOS ( 1.25 * PI)] returned -0.707106781186548 , as expected.
PASS: [RADCOS ( 1/3 * PI)] returned 0.5 , as expected.
PASS: [RADCOS ( 0.5 * PI)] returned 6.1257422745431e-17 , as expected.
PASS: [RADCOS PI] returned -1 , as expected.
PASS: [RADCOS 1.5 * PI] returned -1.83772268236293e-16 , as expected.
PASS: [RADCOS 2 * PI] returned 1 , as expected.
PASS: [RADCOS 10 * PI] returned 1 , as expected.
FAIL: [RADCOS 10.50 * PI] returned -4.89950961746199e-16 . We expected 0
PASS: [RADCOS 14.5] returned -0.354924266788705 , as expected.
INFO: Executing invalid instruction: [(RADCOS)]
INFO: Executing [(RADCOS)] set error code to 6 , as expected
INFO: Executing [(RADCOS)] set error string to [not enough inputs to RADCOS]
INFO: Executing invalid instruction: [(RADCOS 1 2)]
INFO: Executing [(RADCOS 1 2)] set error code to 8 , as expected
INFO: Executing [(RADCOS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADCOS []]
PASS: Executing [RADCOS []] threw an error
INFO: Executing invalid instruction: [RADCOS [1]]
PASS: Executing [RADCOS [1]] threw an error
INFO: Executing invalid instruction: [RADCOS {}]
PASS: Executing [RADCOS {}] threw an error
INFO: Executing invalid instruction: [RADCOS {1}]
PASS: Executing [RADCOS {1}] threw an error
INFO: Executing invalid instruction: [RADCOS "one]
PASS: Executing [RADCOS "one] threw an error
INFO: Executing invalid instruction: [RADCOS "1a]
PASS: Executing [RADCOS "1a] threw an error
PASS: [ARCCOS 1] returned 0 , as expected.
PASS: [ARCCOS ( 0.5 * SQRT 2)] returned 45 , as expected.
PASS: [ARCCOS (-0.5 * SQRT 2)] returned 135 , as expected.
PASS: [ARCCOS 0.5] returned 60 , as expected.
PASS: [ARCCOS 0] returned 90 , as expected.
PASS: [ARCCOS -0.5] returned 120 , as expected.
PASS: [ARCCOS -1] returned 180 , as expected.
INFO: Executing invalid instruction: [(ARCCOS)]
INFO: Executing [(ARCCOS)] set error code to 6 , as expected
INFO: Executing [(ARCCOS)] set error string to [not enough inputs to ARCCOS]
INFO: Executing invalid instruction: [(ARCCOS 1 2)]
INFO: Executing [(ARCCOS 1 2)] set error code to 8 , as expected
INFO: Executing [(ARCCOS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ARCCOS 1.1]
PASS: Executing [ARCCOS 1.1] threw an error
INFO: Executing invalid instruction: [ARCCOS -1.1]
PASS: Executing [ARCCOS -1.1] threw an error
INFO: Executing invalid instruction: [ARCCOS []]
PASS: Executing [ARCCOS []] threw an error
INFO: Executing invalid instruction: [ARCCOS [1]]
PASS: Executing [ARCCOS [1]] threw an error
INFO: Executing invalid instruction: [ARCCOS {}]
PASS: Executing [ARCCOS {}] threw an error
INFO: Executing invalid instruction: [ARCCOS {1}]
PASS: Executing [ARCCOS {1}] threw an error
INFO: Executing invalid instruction: [ARCCOS "one]
PASS: Executing [ARCCOS "one] threw an error
INFO: Executing invalid instruction: [ARCCOS "1a]
PASS: Executing [ARCCOS "1a] threw an error
PASS: [RADARCCOS 1] returned 0 , as expected.
PASS: [RADARCCOS ( 0.5 * SQRT 2)] returned 0.785398163397448 , as expected.
PASS: [RADARCCOS (-0.5 * SQRT 2)] returned 2.35619449019234 , as expected.
FAIL: [RADARCCOS 0.5] returned 1.0471975511966 . We expected 1.0471975511966
PASS: [RADARCCOS 0] returned 1.5707963267949 , as expected.
FAIL: [RADARCCOS -0.5] returned 2.0943951023932 . We expected 2.0943951023932
PASS: [RADARCCOS -1] returned 3.14159265358979 , as expected.
INFO: Executing invalid instruction: [(RADCOS)]
INFO: Executing [(RADCOS)] set error code to 6 , as expected
INFO: Executing [(RADCOS)] set error string to [not enough inputs to RADCOS]
INFO: Executing invalid instruction: [(RADCOS 1 2)]
INFO: Executing [(RADCOS 1 2)] set error code to 8 , as expected
INFO: Executing [(RADCOS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADARCCOS 1.1]
PASS: Executing [RADARCCOS 1.1] threw an error
INFO: Executing invalid instruction: [RADARCCOS -1.1]
PASS: Executing [RADARCCOS -1.1] threw an error
INFO: Executing invalid instruction: [RADARCCOS []]
PASS: Executing [RADARCCOS []] threw an error
INFO: Executing invalid instruction: [RADARCCOS [1]]
PASS: Executing [RADARCCOS [1]] threw an error
INFO: Executing invalid instruction: [RADARCCOS {}]
PASS: Executing [RADARCCOS {}] threw an error
INFO: Executing invalid instruction: [RADARCCOS {1}]
PASS: Executing [RADARCCOS {1}] threw an error
INFO: Executing invalid instruction: [RADARCCOS "one]
PASS: Executing [RADARCCOS "one] threw an error
INFO: Executing invalid instruction: [RADARCCOS "1a]
PASS: Executing [RADARCCOS "1a] threw an error
PASS: [PRODUCT 1e200 2e200] returned +INF , as expected.
PASS: [ROUND 2.3e40] returned 2.3e+40 , as expected.
PASS: [PRODUCT 1e200 2e200] returned +INF , as expected.
PASS: Bug #1397560 is fixed. Multiple floating point exceptions do not crash.
PASS: [TEXT "SAMPLEPROC] returned [[a b] [PRINT :a] [SHOW :b]] , as expected.
INFO: Executing invalid instruction: [(TEXT)]
INFO: Executing [(TEXT)] set error code to 6 , as expected
INFO: Executing [(TEXT)] set error string to [not enough inputs to TEXT]
INFO: Executing invalid instruction: [(TEXT "nonexistent)]
PASS: Executing [(TEXT "nonexistent)] threw an error
INFO: Executing invalid instruction: [(TEXT [sampleproc] )]
PASS: Executing [(TEXT [sampleproc] )] threw an error
INFO: Executing invalid instruction: [(TEXT {sampleproc} )]
PASS: Executing [(TEXT {sampleproc} )] threw an error
INFO: Executing invalid instruction: [(TEXT "sampleproc "toomany)]
INFO: Executing [(TEXT "sampleproc "toomany)] set error code to 8 , as expected
INFO: Executing [(TEXT "sampleproc "toomany)] set error string to [too much inside ()'s]
PASS: [FULLTEXT "SAMPLEPROC] returned [TO SAMPLEPROC  :a  :b   PRINT :a ; print   SHOW  :b ; show END] , as expected.
INFO: Executing invalid instruction: [(FULLTEXT)]
INFO: Executing [(FULLTEXT)] set error code to 6 , as expected
INFO: Executing [(FULLTEXT)] set error string to [not enough inputs to FULLTEXT]
INFO: Executing invalid instruction: [(FULLTEXT "nonexistent)]
PASS: Executing [(FULLTEXT "nonexistent)] threw an error
INFO: Executing invalid instruction: [(FULLTEXT [sampleproc] )]
PASS: Executing [(FULLTEXT [sampleproc] )] threw an error
INFO: Executing invalid instruction: [(FULLTEXT {sampleproc} )]
PASS: Executing [(FULLTEXT {sampleproc} )] threw an error
INFO: Executing invalid instruction: [(FULLTEXT "sampleproc "toomany)]
INFO: Executing [(FULLTEXT "sampleproc "toomany)] set error code to 8 , as expected
INFO: Executing [(FULLTEXT "sampleproc "toomany)] set error string to [too much inside ()'s]
PASS: [DEFINEDP "nonexistent] returned false , as expected.
PASS: [DEFINED? "nonexistent] returned false , as expected.
PASS: [DEFINED? "FORWARD] returned false , as expected.
PASS: [DEFINED? "SAMPLEPROC] returned true , as expected.
PASS: [DEFINED? "sampleproc] returned true , as expected.
PASS: [DEFINED? "] returned false , as expected.
INFO: Executing invalid instruction: [(DEFINED?)]
INFO: Executing [(DEFINED?)] set error code to 6 , as expected
INFO: Executing [(DEFINED?)] set error string to [not enough inputs to DEFINED?]
INFO: Executing invalid instruction: [(DEFINED? {a} )]
PASS: Executing [(DEFINED? {a} )] threw an error
INFO: Executing invalid instruction: [(DEFINED? [] )]
PASS: Executing [(DEFINED? [] )] threw an error
INFO: Executing invalid instruction: [(DEFINED? "sampleproc "toomany)]
INFO: Executing [(DEFINED? "sampleproc "toomany)] set error code to 8 , as expected
INFO: Executing [(DEFINED? "sampleproc "toomany)] set error string to [too much inside ()'s]
PASS: [PROCEDUREP "nonexistent] returned false , as expected.
PASS: [PROCEDURE? "nonexistent] returned false , as expected.
PASS: [PROCEDURE? "FORWARD] returned true , as expected.
PASS: [PROCEDURE? "SAMPLEPROC] returned true , as expected.
PASS: [PROCEDURE? "sampleproc] returned true , as expected.
PASS: [PROCEDURE? "] returned false , as expected.
INFO: Executing invalid instruction: [(PROCEDURE?)]
INFO: Executing [(PROCEDURE?)] set error code to 6 , as expected
INFO: Executing [(PROCEDURE?)] set error string to [not enough inputs to PROCEDURE?]
INFO: Executing invalid instruction: [(PROCEDURE? {a} )]
PASS: Executing [(PROCEDURE? {a} )] threw an error
INFO: Executing invalid instruction: [(PROCEDURE? [] )]
PASS: Executing [(PROCEDURE? [] )] threw an error
INFO: Executing invalid instruction: [(PROCEDURE? "sampleproc "toomany)]
INFO: Executing [(PROCEDURE? "sampleproc "toomany)] set error code to 8 , as expected
INFO: Executing [(PROCEDURE? "sampleproc "toomany)] set error string to [too much inside ()'s]
PASS: [NAMEP "nonexistent] returned false , as expected.
PASS: [NAME? "nonexistent] returned false , as expected.
PASS: [NAME? "FORWARD] returned false , as expected.
PASS: [NAME? "] returned false , as expected.
PASS: [NAME? "namepvariable] returned true , as expected.
PASS: [NAME? "NAMEPVARIABLE] returned true , as expected.
INFO: Executing invalid instruction: [(NAME?)]
INFO: Executing [(NAME?)] set error code to 6 , as expected
INFO: Executing [(NAME?)] set error string to [not enough inputs to NAME?]
INFO: Executing invalid instruction: [(NAME? {a} )]
PASS: Executing [(NAME? {a} )] threw an error
INFO: Executing invalid instruction: [(NAME? [] )]
PASS: Executing [(NAME? [] )] threw an error
INFO: Executing invalid instruction: [(NAME? "namepvariable "toomany)]
INFO: Executing [(NAME? "namepvariable "toomany)] set error code to 8 , as expected
INFO: Executing [(NAME? "namepvariable "toomany)] set error string to [too much inside ()'s]
PASS: [PRIMITIVEP "nonexistent] returned false , as expected.
PASS: [PRIMITIVE? "nonexistent] returned false , as expected.
PASS: [PRIMITIVE? "FORWARD] returned true , as expected.
PASS: [PRIMITIVE? "FD] returned true , as expected.
PASS: [PRIMITIVE? "] returned false , as expected.
PASS: [PRIMITIVE? "namepvariable] returned false , as expected.
PASS: [PRIMITIVE? "sampleproc] returned false , as expected.
INFO: Executing invalid instruction: [(PRIMITIVE?)]
INFO: Executing [(PRIMITIVE?)] set error code to 6 , as expected
INFO: Executing [(PRIMITIVE?)] set error string to [not enough inputs to PRIMITIVE?]
INFO: Executing invalid instruction: [(PRIMITIVE? {a} )]
PASS: Executing [(PRIMITIVE? {a} )] threw an error
INFO: Executing invalid instruction: [(PRIMITIVE? [] )]
PASS: Executing [(PRIMITIVE? [] )] threw an error
INFO: Executing invalid instruction: [(PRIMITIVE? "namepvariable "toomany)]
INFO: Executing [(PRIMITIVE? "namepvariable "toomany)] set error code to 8 , as expected
INFO: Executing [(PRIMITIVE? "namepvariable "toomany)] set error string to [too much inside ()'s]
PASS: [MACROP "mymacro] returned true , as expected.
PASS: [MACRO? "mymacro] returned true , as expected.
PASS: [MACRO? "FORWARD] returned false , as expected.
PASS: [MACRO? "FD] returned false , as expected.
PASS: [MACRO? "] returned false , as expected.
PASS: [MACRO? "namepvariable] returned false , as expected.
PASS: [MACRO? "sampleproc] returned false , as expected.
INFO: Executing invalid instruction: [(MACRO?)]
INFO: Executing [(MACRO?)] set error code to 6 , as expected
INFO: Executing [(MACRO?)] set error string to [not enough inputs to MACRO?]
INFO: Executing invalid instruction: [(MACRO? {a} )]
PASS: Executing [(MACRO? {a} )] threw an error
INFO: Executing invalid instruction: [(MACRO? [] )]
PASS: Executing [(MACRO? [] )] threw an error
INFO: Executing invalid instruction: [(MACRO? "mymacro "toomany)]
INFO: Executing [(MACRO? "mymacro "toomany)] set error code to 8 , as expected
INFO: Executing [(MACRO? "mymacro "toomany)] set error string to [too much inside ()'s]
PASS: [ECHO "input] returned input , as expected.
PASS: [DEFINEDP "ECHO] returned true , as expected.
PASS: [DEFINED? "ECHO] returned true , as expected.
INFO: Executing invalid instruction: [(DEFINE)]
INFO: Executing [(DEFINE)] set error code to 6 , as expected
INFO: Executing [(DEFINE)] set error string to [not enough inputs to DEFINE]
INFO: Executing invalid instruction: [(DEFINE "function)]
PASS: Executing [(DEFINE "function)] threw an error
INFO: Executing invalid instruction: [(DEFINE "function [] )]
PASS: Executing [(DEFINE "function [] )] threw an error
INFO: Executing invalid instruction: [(DEFINE "function [[a] [output :a]] "toomany)]
INFO: Executing [(DEFINE "function [[a] [output :a]] "toomany)] set error code to 8 , as expected
INFO: Executing [(DEFINE "function [[a] [output :a]] "toomany)] set error string to [too much inside ()'s]
PASS: [LOCALVARTEST "unknownlocalvar 42] returned 42 , as expected.
PASS: [NAME? "unknownlocalvar] returned false , as expected.
PASS: [:10] returned ten , as expected.
PASS: [:11] returned eleven , as expected.
PASS: [:10] returned ten , as expected.
PASS: [:11] returned eleven , as expected.
INFO: Executing invalid instruction: [(LOCAL)]
PASS: Executing [(LOCAL)] threw an error
INFO: Executing invalid instruction: [LOCAL {a}]
PASS: Executing [LOCAL {a}] threw an error
PASS: [PROCEDURE? "erasedproc] returned true , as expected.
PASS: [PROCEDURE? "erasedproc] returned false , as expected.
INFO: Executing invalid instruction: [ERASEDPROC]
PASS: Executing [ERASEDPROC] threw an error
INFO: Executing invalid instruction: [(ERASE)]
PASS: Executing [(ERASE)] threw an error
INFO: Executing invalid instruction: [ERASE {a}]
PASS: Executing [ERASE {a}] threw an error
INFO: Executing invalid instruction: [ERASE "forward]
PASS: Executing [ERASE "forward] threw an error
INFO: Executing invalid instruction: [(ERASE "erasedproc "erasedproc)]
INFO: Executing [(ERASE "erasedproc "erasedproc)] set error code to 8 , as expected
INFO: Executing [(ERASE "erasedproc "erasedproc)] set error string to [too much inside ()'s]
PASS: [PROCEDURE? "sampleproc] returned true , as expected.
INFO: Executing invalid instruction: [(ERALL 10)]
PASS: Executing [(ERALL 10)] threw an error
INFO: Executing invalid instruction: [(ERALL [] )]
PASS: Executing [(ERALL [] )] threw an error
INFO: Executing invalid instruction: [(ERALL {a} )]
PASS: Executing [(ERALL {a} )] threw an error
INFO: Executing invalid instruction: [(ERALL "no)]
PASS: Executing [(ERALL "no)] threw an error
INFO: Executing invalid instruction: [(ERALL "false "toomany)]
INFO: Executing [(ERALL "false "toomany)] set error code to 8 , as expected
INFO: Executing [(ERALL "false "toomany)] set error string to [too much inside ()'s]
PASS: [LOCALVARTEST "mylocalvarname 42] returned 42 , as expected.
PASS: [:mylocalvarname] returned 32 , as expected.
INFO: Executing invalid instruction: [(LOCALMAKE)]
INFO: Executing [(LOCALMAKE)] set error code to 6 , as expected
INFO: Executing [(LOCALMAKE)] set error string to [not enough inputs to LOCALMAKE]
INFO: Executing invalid instruction: [(CONTENTS "toomany)]
INFO: Executing [(CONTENTS "toomany)] set error code to 8 , as expected
INFO: Executing [(CONTENTS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(NAMES "toomany)]
INFO: Executing [(NAMES "toomany)] set error code to 8 , as expected
INFO: Executing [(NAMES "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(BURIED "toomany)]
INFO: Executing [(BURIED "toomany)] set error code to 8 , as expected
INFO: Executing [(BURIED "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(PROCEDURES "toomany)]
INFO: Executing [(PROCEDURES "toomany)] set error code to 8 , as expected
INFO: Executing [(PROCEDURES "toomany)] set error string to [too much inside ()'s]
PASS: [NAMELIST "a] returned [[] [a]] , as expected.
PASS: [NAMELIST [a b]] returned [[] [a b]] , as expected.
PASS: [NAMELIST "] returned [[] []] , as expected.
PASS: [NAMELIST []] returned [[] []] , as expected.
INFO: Executing invalid instruction: [(NAMELIST)]
INFO: Executing [(NAMELIST)] set error code to 6 , as expected
INFO: Executing [(NAMELIST)] set error string to [not enough inputs to NAMELIST]
INFO: Executing invalid instruction: [NAMELIST {a b}]
PASS: Executing [NAMELIST {a b}] threw an error
INFO: Executing invalid instruction: [(NAMELIST "a "b)]
INFO: Executing [(NAMELIST "a "b)] set error code to 8 , as expected
INFO: Executing [(NAMELIST "a "b)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(POPL)]
PASS: Executing [(POPL)] threw an error
INFO: Executing invalid instruction: [(POPL "numbertoword "toomany)]
PASS: Executing [(POPL "numbertoword "toomany)] threw an error
INFO: Executing invalid instruction: [(PO)]
INFO: Executing [(PO)] set error code to 6 , as expected
INFO: Executing [(PO)] set error string to [not enough inputs to PO]
INFO: Executing invalid instruction: [(PO "pot "pots)]
INFO: Executing [(PO "pot "pots)] set error code to 8 , as expected
INFO: Executing [(PO "pot "pots)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PO "forward]
PASS: Executing [PO "forward] threw an error
INFO: Executing invalid instruction: [PO "nonexistent]
PASS: Executing [PO "nonexistent] threw an error
INFO: Executing invalid instruction: [PO [nonexistent]]
PASS: Executing [PO [nonexistent]] threw an error
INFO: Executing invalid instruction: [PO {a}]
PASS: Executing [PO {a}] threw an error
INFO: Executing invalid instruction: [(POALL "toomany)]
INFO: Executing [(POALL "toomany)] set error code to 8 , as expected
INFO: Executing [(POALL "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(POPS "toomany)]
INFO: Executing [(POPS "toomany)] set error code to 8 , as expected
INFO: Executing [(POPS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(POPLS "toomany)]
INFO: Executing [(POPLS "toomany)] set error code to 8 , as expected
INFO: Executing [(POPLS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(POTS "toomany)]
INFO: Executing [(POTS "toomany)] set error code to 8 , as expected
INFO: Executing [(POTS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(PON)]
INFO: Executing [(PON)] set error code to 6 , as expected
INFO: Executing [(PON)] set error string to [not enough inputs to PON]
INFO: Executing invalid instruction: [PON "sampleproc]
PASS: Executing [PON "sampleproc] threw an error
INFO: Executing invalid instruction: [(PON "too "many)]
INFO: Executing [(PON "too "many)] set error code to 8 , as expected
INFO: Executing [(PON "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PON {a b}]
PASS: Executing [PON {a b}] threw an error
INFO: Executing invalid instruction: [(POT)]
INFO: Executing [(POT)] set error code to 6 , as expected
INFO: Executing [(POT)] set error string to [not enough inputs to POT]
INFO: Executing invalid instruction: [(POT "pot "pots)]
INFO: Executing [(POT "pot "pots)] set error code to 8 , as expected
INFO: Executing [(POT "pot "pots)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [POT "forward]
PASS: Executing [POT "forward] threw an error
INFO: Executing invalid instruction: [POT "nonexistent]
PASS: Executing [POT "nonexistent] threw an error
INFO: Executing invalid instruction: [POT [nonexistent]]
PASS: Executing [POT [nonexistent]] threw an error
INFO: Executing invalid instruction: [POT {a}]
PASS: Executing [POT {a}] threw an error
PASS: "Bug #1438863 is fixed; erasing a procedure in the middle of running it does not crash
PASS: [GPROP "nonexistent "prop1] returned [] , as expected.
PASS: [GPROP "testplist1 "nonexistent] returned [] , as expected.
PASS: [GPROP "testplist1 "property1] returned 1 , as expected.
PASS: [GPROP "testplist1 "property2] returned abc , as expected.
PASS: [GPROP "testplist1 "property3] returned [a b c] , as expected.
PASS: [GPROP "testplist1 "property4] returned {a b c} , as expected.
PASS: [GPROP "testplist1 "property5] returned [] , as expected.
PASS: [GPROP "testplist1 "property6] returned  , as expected.
PASS: [GPROP "testplist1 "] returned empty , as expected.
PASS: [GPROP "testplist1 "property1] returned one , as expected.
PASS: [PLIST "nonexistent] returned [] , as expected.
PASS: [COUNT :listcontents] returned 14 , as expected.
PASS: [:value] returned empty , as expected.
PASS: [:value] returned  , as expected.
PASS: [:value] returned [] , as expected.
PASS: [:value] returned {a b c} , as expected.
PASS: [:value] returned [a b c] , as expected.
PASS: [:value] returned abc , as expected.
PASS: [:value] returned one , as expected.
PASS: [COUNT :plistsoutput] returned 3 , as expected.
PASS: [ITEM 1 :plistsoutput] returned [] , as expected.
PASS: [ITEM 2 :plistsoutput] returned [] , as expected.
PASS: [MEMBERP "testplist1 ITEM 3 :plistsoutput] returned true , as expected.
PASS: [COUNT :plistsoutput] returned 3 , as expected.
PASS: [ITEM 1 :plistsoutput] returned [] , as expected.
PASS: [ITEM 2 :plistsoutput] returned [] , as expected.
PASS: [MEMBERP "testplist1 ITEM 3 :plistsoutput] returned false , as expected.
PASS: [GPROP "testplist1 "property1] returned [] , as expected.
PASS: [GPROP "testplist1 "property2] returned [] , as expected.
PASS: [GPROP "testplist1 "property3] returned [] , as expected.
PASS: [GPROP "testplist1 "property4] returned [] , as expected.
PASS: [GPROP "testplist1 "property5] returned [] , as expected.
PASS: [GPROP "testplist1 "property6] returned [] , as expected.
PASS: [GPROP "testplist1 "] returned [] , as expected.
PASS: [PLIST "testplist1] returned [] , as expected.
INFO: Executing invalid instruction: [(PLIST)]
INFO: Executing [(PLIST)] set error code to 6 , as expected
INFO: Executing [(PLIST)] set error string to [not enough inputs to PLIST]
INFO: Executing invalid instruction: [(PLIST "too "many)]
INFO: Executing [(PLIST "too "many)] set error code to 8 , as expected
INFO: Executing [(PLIST "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PLIST [1 2 3]]
PASS: Executing [PLIST [1 2 3]] threw an error
INFO: Executing invalid instruction: [PLIST {1 2 3}]
PASS: Executing [PLIST {1 2 3}] threw an error
INFO: Executing invalid instruction: [(REMPROP)]
INFO: Executing [(REMPROP)] set error code to 6 , as expected
INFO: Executing [(REMPROP)] set error string to [not enough inputs to REMPROP]
INFO: Executing invalid instruction: [(REMPROP "plist)]
INFO: Executing [(REMPROP "plist)] set error code to 6 , as expected
INFO: Executing [(REMPROP "plist)] set error string to [not enough inputs to REMPROP]
INFO: Executing invalid instruction: [(REMPROP "plist "prop "toomany)]
INFO: Executing [(REMPROP "plist "prop "toomany)] set error code to 8 , as expected
INFO: Executing [(REMPROP "plist "prop "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [REMPROP [1 2 3] "prop]
PASS: Executing [REMPROP [1 2 3] "prop] threw an error
INFO: Executing invalid instruction: [REMPROP {1 2 3} "prop]
PASS: Executing [REMPROP {1 2 3} "prop] threw an error
INFO: Executing invalid instruction: [REMPROP "plist [1 2 3]]
PASS: Executing [REMPROP "plist [1 2 3]] threw an error
INFO: Executing invalid instruction: [REMPROP "plist {1 2 3}]
PASS: Executing [REMPROP "plist {1 2 3}] threw an error
INFO: Executing invalid instruction: [(GPROP)]
INFO: Executing [(GPROP)] set error code to 6 , as expected
INFO: Executing [(GPROP)] set error string to [not enough inputs to GPROP]
INFO: Executing invalid instruction: [(GPROP "plist)]
INFO: Executing [(GPROP "plist)] set error code to 6 , as expected
INFO: Executing [(GPROP "plist)] set error string to [not enough inputs to GPROP]
INFO: Executing invalid instruction: [(GPROP "plist "prop "toomany)]
INFO: Executing [(GPROP "plist "prop "toomany)] set error code to 8 , as expected
INFO: Executing [(GPROP "plist "prop "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [GPROP [1 2 3] "prop]
PASS: Executing [GPROP [1 2 3] "prop] threw an error
INFO: Executing invalid instruction: [GPROP {1 2 3} "prop]
PASS: Executing [GPROP {1 2 3} "prop] threw an error
INFO: Executing invalid instruction: [GPROP "plist [1 2 3]]
PASS: Executing [GPROP "plist [1 2 3]] threw an error
INFO: Executing invalid instruction: [GPROP "plist {1 2 3}]
PASS: Executing [GPROP "plist {1 2 3}] threw an error
INFO: Executing invalid instruction: [(PPROP)]
INFO: Executing [(PPROP)] set error code to 6 , as expected
INFO: Executing [(PPROP)] set error string to [not enough inputs to PPROP]
INFO: Executing invalid instruction: [(PPROP "plist)]
INFO: Executing [(PPROP "plist)] set error code to 6 , as expected
INFO: Executing [(PPROP "plist)] set error string to [not enough inputs to PPROP]
INFO: Executing invalid instruction: [(PPROP "plist "prop)]
INFO: Executing [(PPROP "plist "prop)] set error code to 6 , as expected
INFO: Executing [(PPROP "plist "prop)] set error string to [not enough inputs to PPROP]
INFO: Executing invalid instruction: [(PPROP "plist "name "value "toomany)]
INFO: Executing [(PPROP "plist "name "value "toomany)] set error code to 8 , as expected
INFO: Executing [(PPROP "plist "name "value "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PPROP [1 2 3] "name "value]
PASS: Executing [PPROP [1 2 3] "name "value] threw an error
INFO: Executing invalid instruction: [PPROP {1 2 3} "name "value]
PASS: Executing [PPROP {1 2 3} "name "value] threw an error
INFO: Executing invalid instruction: [PPROP "plist [1 2 3] "value]
PASS: Executing [PPROP "plist [1 2 3] "value] threw an error
INFO: Executing invalid instruction: [PPROP "plist {1 2 3} "value]
PASS: Executing [PPROP "plist {1 2 3} "value] threw an error
PASS: [PLLIST "a] returned [[] [] [a]] , as expected.
PASS: [PLLIST "] returned [[] [] []] , as expected.
PASS: [PLLIST [a b]] returned [[] [] [a b]] , as expected.
PASS: [PLLIST []] returned [[] [] []] , as expected.
INFO: Executing invalid instruction: [(PLLIST)]
INFO: Executing [(PLLIST)] set error code to 6 , as expected
INFO: Executing [(PLLIST)] set error string to [not enough inputs to PLLIST]
INFO: Executing invalid instruction: [(PLLIST "too "many)]
INFO: Executing [(PLLIST "too "many)] set error code to 8 , as expected
INFO: Executing [(PLLIST "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PLLIST {a b}]
PASS: Executing [PLLIST {a b}] threw an error
INFO: executing regression test for bug #1383281
PASS: "bug #1382181 is fixed; 'FOR [1] [[][]]' did not crash.
PASS: [ACTIVEAREA] returned [-100 -100 100 100] , as expected.
PASS: [ACTIVEAREA] returned [-500 -500 500 500] , as expected.
PASS: [ACTIVEAREA] returned [-500 -500 500 500] , as expected.
INFO: Executing invalid instruction: [(SETACTIVEAREA)]
INFO: Executing [(SETACTIVEAREA)] set error code to 6 , as expected
INFO: Executing [(SETACTIVEAREA)] set error string to [not enough inputs to SETACTIVEAREA]
INFO: Executing invalid instruction: [(SETACTIVEAREA 0 0)]
INFO: Executing [(SETACTIVEAREA 0 0)] set error code to 8 , as expected
INFO: Executing [(SETACTIVEAREA 0 0)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETACTIVEAREA 0 0 50)]
INFO: Executing [(SETACTIVEAREA 0 0 50)] set error code to 8 , as expected
INFO: Executing [(SETACTIVEAREA 0 0 50)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETACTIVEAREA 0 0 50 50)]
INFO: Executing [(SETACTIVEAREA 0 0 50 50)] set error code to 8 , as expected
INFO: Executing [(SETACTIVEAREA 0 0 50 50)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETACTIVEAREA [0] )]
PASS: Executing [(SETACTIVEAREA [0] )] threw an error
INFO: Executing invalid instruction: [(SETACTIVEAREA [0 0] )]
PASS: Executing [(SETACTIVEAREA [0 0] )] threw an error
INFO: Executing invalid instruction: [(SETACTIVEAREA [0 0 50] )]
PASS: Executing [(SETACTIVEAREA [0 0 50] )] threw an error
INFO: Executing invalid instruction: [(SETACTIVEAREA [0 0 50 50 50] )]
PASS: Executing [(SETACTIVEAREA [0 0 50 50 50] )] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA 0]
PASS: Executing [SETACTIVEAREA 0] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA "0,0,50,50]
PASS: Executing [SETACTIVEAREA "0,0,50,50] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA {0 0 50 50}]
PASS: Executing [SETACTIVEAREA {0 0 50 50}] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [zero 0 50 50]]
PASS: Executing [SETACTIVEAREA [zero 0 50 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [[0] 0 50 50]]
PASS: Executing [SETACTIVEAREA [[0] 0 50 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [{0} 0 50 50]]
PASS: Executing [SETACTIVEAREA [{0} 0 50 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 zero 50 50]]
PASS: Executing [SETACTIVEAREA [0 zero 50 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 [0] 50 50]]
PASS: Executing [SETACTIVEAREA [0 [0] 50 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 {0} 50 50]]
PASS: Executing [SETACTIVEAREA [0 {0} 50 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 fifty 50]]
PASS: Executing [SETACTIVEAREA [0 0 fifty 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 [50] 50]]
PASS: Executing [SETACTIVEAREA [0 0 [50] 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 {50} 50]]
PASS: Executing [SETACTIVEAREA [0 0 {50} 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 fifty]]
PASS: Executing [SETACTIVEAREA [0 0 50 fifty]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 [50]]]
PASS: Executing [SETACTIVEAREA [0 0 50 [50]]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 {50}]]
PASS: Executing [SETACTIVEAREA [0 0 50 {50}]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 -50 50]]
PASS: Executing [SETACTIVEAREA [0 0 -50 50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 -50]]
PASS: Executing [SETACTIVEAREA [0 0 50 -50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 -50]]
PASS: Executing [SETACTIVEAREA [0 0 50 -50]] threw an error
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 0 0]]
PASS: Executing [SETACTIVEAREA [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [(ACTIVEAREA "toomany)]
INFO: Executing [(ACTIVEAREA "toomany)] set error code to 8 , as expected
INFO: Executing [(ACTIVEAREA "toomany)] set error string to [too much inside ()'s]
PASS: Size is [100 100] , as expected.
PASS: Size is [100 101] , as expected.
PASS: Size is [101 100] , as expected.
PASS: The bitpaste was drawn correctly
PASS: [FORM 123.1 10 10] returned 123.1000000000 , as expected.
INFO: Executing invalid instruction: [FORM "string 10 10]
PASS: Executing [FORM "string 10 10] threw an error
INFO: Executing invalid instruction: [FORM 123.1 12.3 10]
PASS: Executing [FORM 123.1 12.3 10] threw an error
INFO: Executing invalid instruction: [FORM 123.1 10 12.3]
PASS: Executing [FORM 123.1 10 12.3] threw an error
INFO: Executing invalid instruction: [(FORM)]
INFO: Executing [(FORM)] set error code to 6 , as expected
INFO: Executing [(FORM)] set error string to [not enough inputs to FORM]
INFO: Executing invalid instruction: [(FORM 123.1)]
INFO: Executing [(FORM 123.1)] set error code to 6 , as expected
INFO: Executing [(FORM 123.1)] set error string to [not enough inputs to FORM]
INFO: Executing invalid instruction: [(FORM 123.1 10)]
INFO: Executing [(FORM 123.1 10)] set error code to 6 , as expected
INFO: Executing [(FORM 123.1 10)] set error string to [not enough inputs to FORM]
INFO: Executing invalid instruction: [(FORM 123.1 10 10 10)]
INFO: Executing [(FORM 123.1 10 10 10)] set error code to 8 , as expected
INFO: Executing [(FORM 123.1 10 10 10)] set error string to [too much inside ()'s]
PASS: 'FORM 123.1 10000 10' did not crash
PASS: 'FORM 123.1 10 10000' did not crash
INFO: Executing invalid instruction: [FORM -1 -1 "%s%s]
PASS: Executing [FORM -1 -1 "%s%s] threw an error
PASS: 'FORM -1 -1 "%s%s' did not crash
FAIL: The editor window did not popup
PASS: The editor saved the values of all 10000 variables
PASS: INPORT did not crash
INFO: Executing invalid instruction: [(INPORT)]
INFO: Executing [(INPORT)] set error code to 6 , as expected
INFO: Executing [(INPORT)] set error string to [not enough inputs to INPORT]
INFO: Executing invalid instruction: [INPORT [192]]
PASS: Executing [INPORT [192]] threw an error
INFO: Executing invalid instruction: [INPORT -1]
PASS: Executing [INPORT -1] threw an error
INFO: Executing invalid instruction: [INPORT {}]
PASS: Executing [INPORT {}] threw an error
INFO: Executing invalid instruction: [INPORT "hello]
PASS: Executing [INPORT "hello] threw an error
INFO: Executing invalid instruction: [(INPORT "198 "toomany)]
INFO: Executing [(INPORT "198 "toomany)] set error code to 8 , as expected
INFO: Executing [(INPORT "198 "toomany)] set error string to [too much inside ()'s]
PASS: INPORTB did not crash
INFO: Executing invalid instruction: [(INPORTB)]
INFO: Executing [(INPORTB)] set error code to 6 , as expected
INFO: Executing [(INPORTB)] set error string to [not enough inputs to INPORTB]
INFO: Executing invalid instruction: [INPORTB [192]]
PASS: Executing [INPORTB [192]] threw an error
INFO: Executing invalid instruction: [INPORTB -1]
PASS: Executing [INPORTB -1] threw an error
INFO: Executing invalid instruction: [INPORTB {}]
PASS: Executing [INPORTB {}] threw an error
INFO: Executing invalid instruction: [INPORTB "hello]
PASS: Executing [INPORTB "hello] threw an error
INFO: Executing invalid instruction: [(INPORTB "198 "toomany)]
INFO: Executing [(INPORTB "198 "toomany)] set error code to 8 , as expected
INFO: Executing [(INPORTB "198 "toomany)] set error string to [too much inside ()'s]
PASS: OUTPORT did not crash
INFO: Executing invalid instruction: [(OUTPORT)]
INFO: Executing [(OUTPORT)] set error code to 6 , as expected
INFO: Executing [(OUTPORT)] set error string to [not enough inputs to OUTPORT]
INFO: Executing invalid instruction: [(OUTPORT 192)]
INFO: Executing [(OUTPORT 192)] set error code to 6 , as expected
INFO: Executing [(OUTPORT 192)] set error string to [not enough inputs to OUTPORT]
INFO: Executing invalid instruction: [OUTPORT [192] 0]
PASS: Executing [OUTPORT [192] 0] threw an error
INFO: Executing invalid instruction: [OUTPORT -1 0]
PASS: Executing [OUTPORT -1 0] threw an error
INFO: Executing invalid instruction: [OUTPORT {} 0]
PASS: Executing [OUTPORT {} 0] threw an error
INFO: Executing invalid instruction: [OUTPORT "hello 0]
PASS: Executing [OUTPORT "hello 0] threw an error
INFO: Executing invalid instruction: [(OUTPORT 198 0 "toomany)]
INFO: Executing [(OUTPORT 198 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(OUTPORT 198 0 "toomany)] set error string to [too much inside ()'s]
PASS: OUTPORTB did not crash
INFO: Executing invalid instruction: [(OUTPORTB)]
INFO: Executing [(OUTPORTB)] set error code to 6 , as expected
INFO: Executing [(OUTPORTB)] set error string to [not enough inputs to OUTPORTB]
INFO: Executing invalid instruction: [(OUTPORTB 192)]
INFO: Executing [(OUTPORTB 192)] set error code to 6 , as expected
INFO: Executing [(OUTPORTB 192)] set error string to [not enough inputs to OUTPORTB]
INFO: Executing invalid instruction: [OUTPORTB [192] 0]
PASS: Executing [OUTPORTB [192] 0] threw an error
INFO: Executing invalid instruction: [OUTPORTB -1 0]
PASS: Executing [OUTPORTB -1 0] threw an error
INFO: Executing invalid instruction: [OUTPORTB {} 0]
PASS: Executing [OUTPORTB {} 0] threw an error
INFO: Executing invalid instruction: [OUTPORTB "hello 0]
PASS: Executing [OUTPORTB "hello 0] threw an error
INFO: Executing invalid instruction: [(OUTPORTB 198 0 "toomany)]
INFO: Executing [(OUTPORTB 198 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(OUTPORTB 198 0 "toomany)] set error string to [too much inside ()'s]
PASS: The font circle was drawn correctly
INFO: Executing invalid instruction: [(LABEL)]
INFO: Executing [(LABEL)] set error code to 6 , as expected
INFO: Executing [(LABEL)] set error string to [not enough inputs to LABEL]
INFO: Executing invalid instruction: [(LABEL 1 1)]
INFO: Executing [(LABEL 1 1)] set error code to 8 , as expected
INFO: Executing [(LABEL 1 1)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SETLABELFONT "Courier]
PASS: Executing [SETLABELFONT "Courier] threw an error
INFO: Executing invalid instruction: [SETLABELFONT 1.1]
PASS: Executing [SETLABELFONT 1.1] threw an error
INFO: Executing invalid instruction: [SETLABELFONT {0}]
PASS: Executing [SETLABELFONT {0}] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [0]]
PASS: Executing [SETLABELFONT [0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT []]
PASS: Executing [SETLABELFONT []] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[]]]
PASS: Executing [SETLABELFONT [[]]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] bad 0 0 400 0 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] Unbound 0 0 400 0 0 0 0 0 0 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 bad 0 400 0 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 Unbound 0 400 0 0 0 0 0 0 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 bad 400 0 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 Unbound 400 0 0 0 0 0 0 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 bad 0 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 Unbound 0 0 0 0 0 0 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 bad 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 Unbound 0 0 0 0 0 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 bad 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 Unbound 0 0 0 0 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 bad 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 Unbound 0 0 0 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 bad 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 Unbound 0 0 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 bad 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 Unbound 0 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 bad 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 Unbound 0 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 bad 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 Unbound 0]] threw an error
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 0 bad]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 0 Unbound]] threw an error
INFO: Executing invalid instruction: [(SETLABELFONT)]
INFO: Executing [(SETLABELFONT)] set error code to 6 , as expected
INFO: Executing [(SETLABELFONT)] set error string to [not enough inputs to SETLABELFONT]
INFO: Executing invalid instruction: [(SETLABELFONT [[Arial]] "toomany)]
INFO: Executing [(SETLABELFONT [[Arial]] "toomany)] set error code to 8 , as expected
INFO: Executing [(SETLABELFONT [[Arial]] "toomany)] set error string to [too much inside ()'s]
INFO: Testing that SETLABELFONT doesn't modify its input list on error
INFO: Now comparing the original instruction to the one that was used
FAIL: [[SETLABELFONT [[Arial] 24 0 0 400 0 0 bad 0 0 0 0 0]] = [SETLABELFONT [[Arial] 24 0 0 400 0 0 Unbound 0 0 0 0 0]]] returned false . We expected true
PASS: [PENDOWNP] returned true , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [ITEM 1 PEN] returned pendown , as expected.
PASS: [PENDOWN?] returned false , as expected.
PASS: [ITEM 1 PEN] returned penup , as expected.
INFO: Executing invalid instruction: [(PENDOWN "toomany)]
INFO: Executing [(PENDOWN "toomany)] set error code to 8 , as expected
INFO: Executing [(PENDOWN "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(PENUP "toomany)]
INFO: Executing [(PENUP "toomany)] set error code to 8 , as expected
INFO: Executing [(PENUP "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(PENDOWN? "toomany)]
INFO: Executing [(PENDOWN? "toomany)] set error code to 8 , as expected
INFO: Executing [(PENDOWN? "toomany)] set error string to [too much inside ()'s]
PASS: [PENMODE] returned paint , as expected.
PASS: [ITEM 2 PEN] returned paint , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned erase , as expected.
PASS: [ITEM 2 PEN] returned erase , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned reverse , as expected.
PASS: [ITEM 2 PEN] returned reverse , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned paint , as expected.
PASS: [ITEM 2 PEN] returned paint , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned erase , as expected.
PASS: [ITEM 2 PEN] returned erase , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned reverse , as expected.
PASS: [ITEM 2 PEN] returned reverse , as expected.
PASS: [PENDOWN?] returned true , as expected.
INFO: Executing invalid instruction: [(ARC)]
INFO: Executing [(ARC)] set error code to 6 , as expected
INFO: Executing [(ARC)] set error string to [not enough inputs to ARC]
INFO: Executing invalid instruction: [(ARC 10)]
INFO: Executing [(ARC 10)] set error code to 6 , as expected
INFO: Executing [(ARC 10)] set error string to [not enough inputs to ARC]
INFO: Executing invalid instruction: [(ARC 10 10 10)]
INFO: Executing [(ARC 10 10 10)] set error code to 8 , as expected
INFO: Executing [(ARC 10 10 10)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ARC [10] 10]
PASS: Executing [ARC [10] 10] threw an error
INFO: Executing invalid instruction: [ARC {10} 10]
PASS: Executing [ARC {10} 10] threw an error
INFO: Executing invalid instruction: [ARC 10 [10]]
PASS: Executing [ARC 10 [10]] threw an error
INFO: Executing invalid instruction: [ARC 10 {10}]
PASS: Executing [ARC 10 {10}] threw an error
INFO: executing regression test for bug #1388325
PASS: "bug #1388325 is fixed; 'ELLIPSEARC 1e20 50 50 0' did not crash.
PASS: The circle was drawn correctly
PASS: (FILL "true) worked as expected
INFO: Executing invalid instruction: [(FILL 10)]
FAIL: ITEM 1 ERROR did not return 6
INFO: Executing invalid instruction: [(FILL ["true] )]
PASS: Executing [(FILL ["true] )] threw an error
INFO: Executing invalid instruction: [(FILL "true "toomany)]
INFO: Executing [(FILL "true "toomany)] set error code to 8 , as expected
INFO: Executing [(FILL "true "toomany)] set error string to [too much inside ()'s]
PASS: [WRITER] returned smoketest.txt , as expected.
PASS: [WRITEPOS] returned 0 , as expected.
PASS: [WRITEPOS] returned 7 , as expected.
PASS: [WRITEPOS] returned 17 , as expected.
PASS: [WRITER] returned [] , as expected.
PASS: [READER] returned smoketest.txt , as expected.
PASS: [READPOS] returned 0 , as expected.
PASS: [EOFP] returned false , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READPOS] returned 7 , as expected.
PASS: [EOFP] returned false , as expected.
PASS: [READLIST] returned [Good Bye] , as expected.
PASS: [READPOS] returned 17 , as expected.
PASS: [EOFP] returned true , as expected.
PASS: [READER] returned [] , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Jello] , as expected.
PASS: ALLOPEN returned filealltest-2.txt filealltest-1.txt testlog.baseline.txt , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Good Bye] , as expected.
INFO: Executing invalid instruction: [OPENREAD :filename]
PASS: Executing [OPENREAD :filename] threw an error
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [And how are you today] , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Good Bye] , as expected.
PASS: [MEMBERP "mytestfile FILES] returned true , as expected.
PASS: [MEMBERP "mytestfile FILES] returned false , as expected.
PASS: [MEMBERP "mytestdir DIRECTORIES] returned true , as expected.
INFO: Executing invalid instruction: [OPENREAD "mytestfile]
PASS: Executing [OPENREAD "mytestfile] threw an error
INFO: Executing invalid instruction: [OPENWRITE "mytestfile]
PASS: Executing [OPENWRITE "mytestfile] threw an error
INFO: Executing invalid instruction: [OPENAPPEND "mytestfile]
PASS: Executing [OPENAPPEND "mytestfile] threw an error
INFO: Executing invalid instruction: [OPENUPDATE "mytestfile]
PASS: Executing [OPENUPDATE "mytestfile] threw an error
INFO: Executing invalid instruction: [OPENREAD "mytestfile]
PASS: Executing [OPENREAD "mytestfile] threw an error
INFO: Executing invalid instruction: [OPENWRITE "mytestfile]
PASS: Executing [OPENWRITE "mytestfile] threw an error
INFO: Executing invalid instruction: [OPENAPPEND "mytestfile]
PASS: Executing [OPENAPPEND "mytestfile] threw an error
INFO: Executing invalid instruction: [OPENUPDATE "mytestfile]
PASS: Executing [OPENUPDATE "mytestfile] threw an error
PASS: [MEMBERP "mytestfile FILES] returned false , as expected.
INFO: Executing invalid instruction: [OPENREAD "testdir]
PASS: Executing [OPENREAD "testdir] threw an error
INFO: Executing invalid instruction: [OPENWRITE "testdir]
PASS: Executing [OPENWRITE "testdir] threw an error
INFO: Executing invalid instruction: [OPENAPPEND "testdir]
PASS: Executing [OPENAPPEND "testdir] threw an error
INFO: Executing invalid instruction: [OPENUPDATE "testdir]
PASS: Executing [OPENUPDATE "testdir] threw an error
PASS: [MEMBERP "mytestfile DIRECTORIES] returned false , as expected.
INFO: Executing invalid instruction: [(OPENREAD "testfile.txt 1)]
PASS: Executing [(OPENREAD "testfile.txt 1)] threw an error
INFO: Executing invalid instruction: [(OPENWRITE "testfile.txt 1)]
PASS: Executing [(OPENWRITE "testfile.txt 1)] threw an error
INFO: Executing invalid instruction: [(OPENAPPEND "testfile.txt 1)]
PASS: Executing [(OPENAPPEND "testfile.txt 1)] threw an error
INFO: Executing invalid instruction: [(OPENUPDATE "testfile.txt 1)]
PASS: Executing [(OPENUPDATE "testfile.txt 1)] threw an error
INFO: Executing invalid instruction: [(OPENREAD)]
INFO: Executing [(OPENREAD)] set error code to 6 , as expected
INFO: Executing [(OPENREAD)] set error string to [not enough inputs to OPENREAD]
INFO: Executing invalid instruction: [(OPENWRITE)]
INFO: Executing [(OPENWRITE)] set error code to 6 , as expected
INFO: Executing [(OPENWRITE)] set error string to [not enough inputs to OPENWRITE]
INFO: Executing invalid instruction: [(OPENAPPEND)]
INFO: Executing [(OPENAPPEND)] set error code to 6 , as expected
INFO: Executing [(OPENAPPEND)] set error string to [not enough inputs to OPENAPPEND]
INFO: Executing invalid instruction: [(OPENUPDATE)]
INFO: Executing [(OPENUPDATE)] set error code to 6 , as expected
INFO: Executing [(OPENUPDATE)] set error string to [not enough inputs to OPENUPDATE]
INFO: Executing invalid instruction: [(OPENREAD "testfile.txt "true "toomany)]
INFO: Executing [(OPENREAD "testfile.txt "true "toomany)] set error code to 8 , as expected
INFO: Executing [(OPENREAD "testfile.txt "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(OPENWRITE "testfile.txt "true "toomany)]
INFO: Executing [(OPENWRITE "testfile.txt "true "toomany)] set error code to 8 , as expected
INFO: Executing [(OPENWRITE "testfile.txt "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(OPENAPPEND "testfile.txt "true "toomany)]
INFO: Executing [(OPENAPPEND "testfile.txt "true "toomany)] set error code to 8 , as expected
INFO: Executing [(OPENAPPEND "testfile.txt "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(OPENUPDATE "testfile.txt "true "toomany)]
INFO: Executing [(OPENUPDATE "testfile.txt "true "toomany)] set error code to 8 , as expected
INFO: Executing [(OPENUPDATE "testfile.txt "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [OPENREAD :longfilename]
PASS: Executing [OPENREAD :longfilename] threw an error
INFO: Executing invalid instruction: [OPENWRITE :longfilename]
PASS: Executing [OPENWRITE :longfilename] threw an error
INFO: Executing invalid instruction: [OPENAPPEND :longfilename]
PASS: Executing [OPENAPPEND :longfilename] threw an error
INFO: Executing invalid instruction: [OPENUPDATE :longfilename]
PASS: Executing [OPENUPDATE :longfilename] threw an error
INFO: Executing invalid instruction: [CLOSE :longfilename]
PASS: Executing [CLOSE :longfilename] threw an error
INFO: Executing invalid instruction: [CLOSE "nonexistent.txt]
PASS: Executing [CLOSE "nonexistent.txt] threw an error
INFO: Executing invalid instruction: [(CLOSE)]
INFO: Executing [(CLOSE)] set error code to 6 , as expected
INFO: Executing [(CLOSE)] set error string to [not enough inputs to CLOSE]
INFO: Executing invalid instruction: [(CLOSE "testfile.txt "many)]
INFO: Executing [(CLOSE "testfile.txt "many)] set error code to 8 , as expected
INFO: Executing [(CLOSE "testfile.txt "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ERASEFILE :longfilename]
PASS: Executing [ERASEFILE :longfilename] threw an error
INFO: Executing invalid instruction: [(ERASEFILE)]
INFO: Executing [(ERASEFILE)] set error code to 6 , as expected
INFO: Executing [(ERASEFILE)] set error string to [not enough inputs to ERASEFILE]
INFO: Executing invalid instruction: [(ERASEFILE "too "many)]
INFO: Executing [(ERASEFILE "too "many)] set error code to 8 , as expected
INFO: Executing [(ERASEFILE "too "many)] set error string to [too much inside ()'s]
PASS: [PENCOLOR] returned 0 , as expected.
PASS: [PENCOLOR] returned 15 , as expected.
PASS: [PENCOLOR] returned 7 , as expected.
PASS: [PENCOLOR] returned 1 , as expected.
PASS: [PENCOLOR] returned [128 64 32] , as expected.
PASS: [PENCOLOR] returned [128 64 32] , as expected.
PASS: [PENCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETPENCOLOR {}]
PASS: Executing [SETPENCOLOR {}] threw an error
INFO: Executing invalid instruction: [SETPENCOLOR [0]]
PASS: Executing [SETPENCOLOR [0]] threw an error
INFO: Executing invalid instruction: [SETPENCOLOR [0 0]]
PASS: Executing [SETPENCOLOR [0 0]] threw an error
INFO: Executing invalid instruction: [SETPENCOLOR [0 0 0 0]]
PASS: Executing [SETPENCOLOR [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [( SETPENCOLOR )]
INFO: Executing [( SETPENCOLOR )] set error code to 6 , as expected
INFO: Executing [( SETPENCOLOR )] set error string to [not enough inputs to SETPENCOLOR]
INFO: Executing invalid instruction: [( SETPENCOLOR 0 0 )]
INFO: Executing [( SETPENCOLOR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETPENCOLOR 0 0 )] set error string to [too much inside ()'s]
PASS: [PENCOLOUR] returned 0 , as expected.
PASS: [PENCOLOUR] returned 15 , as expected.
PASS: [PENCOLOUR] returned 7 , as expected.
PASS: [PENCOLOUR] returned 1 , as expected.
PASS: [PENCOLOUR] returned [128 64 32] , as expected.
PASS: [PENCOLOUR] returned [128 64 32] , as expected.
PASS: [PENCOLOUR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETPENCOLOUR {}]
PASS: Executing [SETPENCOLOUR {}] threw an error
INFO: Executing invalid instruction: [SETPENCOLOUR [0]]
PASS: Executing [SETPENCOLOUR [0]] threw an error
INFO: Executing invalid instruction: [SETPENCOLOUR [0 0]]
PASS: Executing [SETPENCOLOUR [0 0]] threw an error
INFO: Executing invalid instruction: [SETPENCOLOUR [0 0 0 0]]
PASS: Executing [SETPENCOLOUR [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [( SETPENCOLOUR )]
INFO: Executing [( SETPENCOLOUR )] set error code to 6 , as expected
INFO: Executing [( SETPENCOLOUR )] set error string to [not enough inputs to SETPENCOLOUR]
INFO: Executing invalid instruction: [( SETPENCOLOUR 0 0 )]
INFO: Executing [( SETPENCOLOUR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETPENCOLOUR 0 0 )] set error string to [too much inside ()'s]
PASS: [PENCOLOR] returned 0 , as expected.
PASS: [PENCOLOR] returned 15 , as expected.
PASS: [PENCOLOR] returned 7 , as expected.
PASS: [PENCOLOR] returned 1 , as expected.
PASS: [PENCOLOR] returned [128 64 32] , as expected.
PASS: [PENCOLOR] returned [128 64 32] , as expected.
PASS: [PENCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETPC {}]
PASS: Executing [SETPC {}] threw an error
INFO: Executing invalid instruction: [SETPC [0]]
PASS: Executing [SETPC [0]] threw an error
INFO: Executing invalid instruction: [SETPC [0 0]]
PASS: Executing [SETPC [0 0]] threw an error
INFO: Executing invalid instruction: [SETPC [0 0 0 0]]
PASS: Executing [SETPC [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [( SETPC )]
INFO: Executing [( SETPC )] set error code to 6 , as expected
INFO: Executing [( SETPC )] set error string to [not enough inputs to SETPC]
INFO: Executing invalid instruction: [( SETPC 0 0 )]
INFO: Executing [( SETPC 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETPC 0 0 )] set error string to [too much inside ()'s]
PASS: [FLOODCOLOR] returned 0 , as expected.
PASS: [FLOODCOLOR] returned 15 , as expected.
PASS: [FLOODCOLOR] returned 7 , as expected.
PASS: [FLOODCOLOR] returned 1 , as expected.
PASS: [FLOODCOLOR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETFLOODCOLOR {}]
PASS: Executing [SETFLOODCOLOR {}] threw an error
INFO: Executing invalid instruction: [SETFLOODCOLOR [0]]
PASS: Executing [SETFLOODCOLOR [0]] threw an error
INFO: Executing invalid instruction: [SETFLOODCOLOR [0 0]]
PASS: Executing [SETFLOODCOLOR [0 0]] threw an error
INFO: Executing invalid instruction: [SETFLOODCOLOR [0 0 0 0]]
PASS: Executing [SETFLOODCOLOR [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [( SETFLOODCOLOR )]
INFO: Executing [( SETFLOODCOLOR )] set error code to 6 , as expected
INFO: Executing [( SETFLOODCOLOR )] set error string to [not enough inputs to SETFLOODCOLOR]
INFO: Executing invalid instruction: [( SETFLOODCOLOR 0 0 )]
INFO: Executing [( SETFLOODCOLOR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETFLOODCOLOR 0 0 )] set error string to [too much inside ()'s]
PASS: [FLOODCOLOUR] returned 0 , as expected.
PASS: [FLOODCOLOUR] returned 15 , as expected.
PASS: [FLOODCOLOUR] returned 7 , as expected.
PASS: [FLOODCOLOUR] returned 1 , as expected.
PASS: [FLOODCOLOUR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOUR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOUR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETFLOODCOLOUR {}]
PASS: Executing [SETFLOODCOLOUR {}] threw an error
INFO: Executing invalid instruction: [SETFLOODCOLOUR [0]]
PASS: Executing [SETFLOODCOLOUR [0]] threw an error
INFO: Executing invalid instruction: [SETFLOODCOLOUR [0 0]]
PASS: Executing [SETFLOODCOLOUR [0 0]] threw an error
INFO: Executing invalid instruction: [SETFLOODCOLOUR [0 0 0 0]]
PASS: Executing [SETFLOODCOLOUR [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [( SETFLOODCOLOUR )]
INFO: Executing [( SETFLOODCOLOUR )] set error code to 6 , as expected
INFO: Executing [( SETFLOODCOLOUR )] set error string to [not enough inputs to SETFLOODCOLOUR]
INFO: Executing invalid instruction: [( SETFLOODCOLOUR 0 0 )]
INFO: Executing [( SETFLOODCOLOUR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETFLOODCOLOUR 0 0 )] set error string to [too much inside ()'s]
PASS: [FLOODCOLOR] returned 0 , as expected.
PASS: [FLOODCOLOR] returned 15 , as expected.
PASS: [FLOODCOLOR] returned 7 , as expected.
PASS: [FLOODCOLOR] returned 1 , as expected.
PASS: [FLOODCOLOR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETFC {}]
PASS: Executing [SETFC {}] threw an error
INFO: Executing invalid instruction: [SETFC [0]]
PASS: Executing [SETFC [0]] threw an error
INFO: Executing invalid instruction: [SETFC [0 0]]
PASS: Executing [SETFC [0 0]] threw an error
INFO: Executing invalid instruction: [SETFC [0 0 0 0]]
PASS: Executing [SETFC [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [( SETFC )]
INFO: Executing [( SETFC )] set error code to 6 , as expected
INFO: Executing [( SETFC )] set error string to [not enough inputs to SETFC]
INFO: Executing invalid instruction: [( SETFC 0 0 )]
INFO: Executing [( SETFC 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETFC 0 0 )] set error string to [too much inside ()'s]
PASS: [SCREENCOLOR] returned 0 , as expected.
PASS: [SCREENCOLOR] returned 15 , as expected.
PASS: [SCREENCOLOR] returned 7 , as expected.
PASS: [SCREENCOLOR] returned 1 , as expected.
PASS: [SCREENCOLOR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETSCREENCOLOR {}]
PASS: Executing [SETSCREENCOLOR {}] threw an error
INFO: Executing invalid instruction: [SETSCREENCOLOR [0]]
PASS: Executing [SETSCREENCOLOR [0]] threw an error
INFO: Executing invalid instruction: [SETSCREENCOLOR [0 0]]
PASS: Executing [SETSCREENCOLOR [0 0]] threw an error
INFO: Executing invalid instruction: [SETSCREENCOLOR [0 0 0 0]]
PASS: Executing [SETSCREENCOLOR [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [( SETSCREENCOLOR )]
INFO: Executing [( SETSCREENCOLOR )] set error code to 6 , as expected
INFO: Executing [( SETSCREENCOLOR )] set error string to [not enough inputs to SETSCREENCOLOR]
INFO: Executing invalid instruction: [( SETSCREENCOLOR 0 0 )]
INFO: Executing [( SETSCREENCOLOR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETSCREENCOLOR 0 0 )] set error string to [too much inside ()'s]
PASS: [SCREENCOLOUR] returned 0 , as expected.
PASS: [SCREENCOLOUR] returned 15 , as expected.
PASS: [SCREENCOLOUR] returned 7 , as expected.
PASS: [SCREENCOLOUR] returned 1 , as expected.
PASS: [SCREENCOLOUR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOUR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOUR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETSCREENCOLOUR {}]
PASS: Executing [SETSCREENCOLOUR {}] threw an error
INFO: Executing invalid instruction: [SETSCREENCOLOUR [0]]
PASS: Executing [SETSCREENCOLOUR [0]] threw an error
INFO: Executing invalid instruction: [SETSCREENCOLOUR [0 0]]
PASS: Executing [SETSCREENCOLOUR [0 0]] threw an error
INFO: Executing invalid instruction: [SETSCREENCOLOUR [0 0 0 0]]
PASS: Executing [SETSCREENCOLOUR [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [( SETSCREENCOLOUR )]
INFO: Executing [( SETSCREENCOLOUR )] set error code to 6 , as expected
INFO: Executing [( SETSCREENCOLOUR )] set error string to [not enough inputs to SETSCREENCOLOUR]
INFO: Executing invalid instruction: [( SETSCREENCOLOUR 0 0 )]
INFO: Executing [( SETSCREENCOLOUR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETSCREENCOLOUR 0 0 )] set error string to [too much inside ()'s]
PASS: [SCREENCOLOR] returned 0 , as expected.
PASS: [SCREENCOLOR] returned 15 , as expected.
PASS: [SCREENCOLOR] returned 7 , as expected.
PASS: [SCREENCOLOR] returned 1 , as expected.
PASS: [SCREENCOLOR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETSC {}]
PASS: Executing [SETSC {}] threw an error
INFO: Executing invalid instruction: [SETSC [0]]
PASS: Executing [SETSC [0]] threw an error
INFO: Executing invalid instruction: [SETSC [0 0]]
PASS: Executing [SETSC [0 0]] threw an error
INFO: Executing invalid instruction: [SETSC [0 0 0 0]]
PASS: Executing [SETSC [0 0 0 0]] threw an error
INFO: Executing invalid instruction: [( SETSC )]
INFO: Executing [( SETSC )] set error code to 6 , as expected
INFO: Executing [( SETSC )] set error string to [not enough inputs to SETSC]
INFO: Executing invalid instruction: [( SETSC 0 0 )]
INFO: Executing [( SETSC 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETSC 0 0 )] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SPLITSCREEN 1)]
INFO: Executing [(SPLITSCREEN 1)] set error code to 8 , as expected
INFO: Executing [(SPLITSCREEN 1)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(TEXTSCREEN 1)]
INFO: Executing [(TEXTSCREEN 1)] set error code to 8 , as expected
INFO: Executing [(TEXTSCREEN 1)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(FULLSCREEN 1)]
INFO: Executing [(FULLSCREEN 1)] set error code to 8 , as expected
INFO: Executing [(FULLSCREEN 1)] set error string to [too much inside ()'s]
INFO: [WAIT 0] took 0 ms to execute
PASS: [WAIT 0 ] waited for 0 ms. Anywhere between 0 ms and 20 is acceptable.
INFO: [WAIT 1] took 20 ms to execute
PASS: [WAIT 1 ] waited for 20 ms. Anywhere between 16.6666666666667 ms and 36.6666666666667 is acceptable.
INFO: [WAIT 6] took 100 ms to execute
PASS: [WAIT 6 ] waited for 100 ms. Anywhere between 100 ms and 120 is acceptable.
INFO: [WAIT 10] took 170 ms to execute
PASS: [WAIT 10 ] waited for 170 ms. Anywhere between 166.666666666667 ms and 186.666666666667 is acceptable.
INFO: [WAIT 60] took 1002 ms to execute
PASS: [WAIT 60 ] waited for 1002 ms. Anywhere between 1000 ms and 1020 is acceptable.
INFO: [WAIT 100] took 1672 ms to execute
PASS: [WAIT 100 ] waited for 1672 ms. Anywhere between 1666.66666666667 ms and 1686.66666666667 is acceptable.
INFO: Executing invalid instruction: [(WAIT)]
INFO: Executing [(WAIT)] set error code to 6 , as expected
INFO: Executing [(WAIT)] set error string to [not enough inputs to WAIT]
INFO: Executing invalid instruction: [(WAIT 10 10)]
INFO: Executing [(WAIT 10 10)] set error code to 8 , as expected
INFO: Executing [(WAIT 10 10)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [WAIT -1]
PASS: Executing [WAIT -1] threw an error
INFO: Executing invalid instruction: [WAIT "ABC]
PASS: Executing [WAIT "ABC] threw an error
INFO: Executing invalid instruction: [WAIT [1]]
PASS: Executing [WAIT [1]] threw an error
INFO: Executing invalid instruction: [WAIT {1}]
PASS: Executing [WAIT {1}] threw an error
PASS: [FILES] returned [] , as expected.
PASS: [DIRECTORIES] returned [.. .] , as expected.
PASS: [FILES] returned [file1.txt] , as expected.
PASS: [DIRECTORIES] returned [.. .] , as expected.
PASS: [FILES] returned [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] returned [.. .] , as expected.
PASS: [FILES] returned [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] returned [dir1 .. .] , as expected.
PASS: [FILES] returned [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] returned [dir2 dir1 .. .] , as expected.
PASS: [FILES] returned [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] returned [dir1 .. .] , as expected.
PASS: [FILES] returned [file2.txt] , as expected.
PASS: [DIRECTORIES] returned [dir1 .. .] , as expected.
PASS: [FILES] returned [] , as expected.
PASS: [DIRECTORIES] returned [.. .] , as expected.
PASS: [MEMBERP "mytestdir DIRECTORIES] returned false , as expected.
INFO: Executing invalid instruction: [(MKDIR)]
INFO: Executing [(MKDIR)] set error code to 6 , as expected
INFO: Executing [(MKDIR)] set error string to [not enough inputs to MKDIR]
INFO: Executing invalid instruction: [(MKDIR "too "many)]
INFO: Executing [(MKDIR "too "many)] set error code to 8 , as expected
INFO: Executing [(MKDIR "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(RMDIR)]
INFO: Executing [(RMDIR)] set error code to 6 , as expected
INFO: Executing [(RMDIR)] set error string to [not enough inputs to RMDIR]
INFO: Executing invalid instruction: [(RMDIR "too "many)]
INFO: Executing [(RMDIR "too "many)] set error code to 8 , as expected
INFO: Executing [(RMDIR "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(RMDIR "doesnotexist)]
PASS: Executing [(RMDIR "doesnotexist)] threw an error
INFO: Executing invalid instruction: [(CHDIR)]
INFO: Executing [(CHDIR)] set error code to 6 , as expected
INFO: Executing [(CHDIR)] set error string to [not enough inputs to CHDIR]
INFO: Executing invalid instruction: [(CHDIR "too "many)]
INFO: Executing [(CHDIR "too "many)] set error code to 8 , as expected
INFO: Executing [(CHDIR "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(CHDIR "doesnotexist)]
PASS: Executing [(CHDIR "doesnotexist)] threw an error
PASS: [LIST? NODES] returned true , as expected.
PASS: [COUNT NODES] returned 2 , as expected.
PASS: [NUMBER? ITEM 1 NODES] returned true , as expected.
PASS: [NUMBER? ITEM 2 NODES] returned true , as expected.
INFO: Executing invalid instruction: [(NODES "too-many)]
INFO: Executing [(NODES "too-many)] set error code to 8 , as expected
INFO: Executing [(NODES "too-many)] set error string to [too much inside ()'s]
PASS: [BUTTONP] returned false , as expected.
PASS: [BUTTON?] returned false , as expected.
INFO: Executing invalid instruction: [(BUTTON? "too-many)]
INFO: Executing [(BUTTON? "too-many)] set error code to 8 , as expected
INFO: Executing [(BUTTON? "too-many)] set error string to [too much inside ()'s]
INFO: executing regression test for bug #1384267
PASS: "bug #1384267 is fixed; turning by a large number in perspective mode did not crash.
INFO: Executing invalid instruction: [(PERSPECTIVE "toomany)]
INFO: Executing [(PERSPECTIVE "toomany)] set error code to 8 , as expected
INFO: Executing [(PERSPECTIVE "toomany)] set error string to [too much inside ()'s]
INFO: Calling SETORIENTATION [0 0 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 6.09243946063544e-15 , as expected.
PASS: [PITCH] returned 360 , as expected.
PASS: [HEADING] returned 360 , as expected.
PASS: [ANGLEISCLOSEENOUGH 6.09243946063544e-15 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
INFO: Calling SETORIENTATION [1 2 3]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 0.999999999999999 , as expected.
PASS: [PITCH] returned 1.99999999999999 , as expected.
PASS: [HEADING] returned 3.00000000000004 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0.999999999999999 1] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2 2] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 3.00000000000001 3] returned true , as expected.
INFO: Calling SETORIENTATION [105 0 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 105 , as expected.
PASS: [PITCH] returned 2.71584790059938e-15 , as expected.
PASS: [HEADING] returned 3.50208555906615e-14 , as expected.
PASS: [HEADING] returned 360 , as expected.
PASS: [ANGLEISCLOSEENOUGH 105 105] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2.71584790059938e-15 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 3.50208555906615e-14 0] returned true , as expected.
INFO: Calling SETORIENTATION [0 105 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 180 , as expected.
PASS: [PITCH] returned 75 , as expected.
PASS: [HEADING] returned 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 75 75] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
INFO: Calling SETORIENTATION [0 0 105]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 360 , as expected.
PASS: [PITCH] returned 1.42707015394939e-15 , as expected.
PASS: [PITCH] returned 360 , as expected.
PASS: [HEADING] returned 105 , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 1.42707015394939e-15 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 105 105] returned true , as expected.
INFO: Calling SETORIENTATION [0 -90 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 0 , as expected.
PASS: [PITCH] returned 270 , as expected.
PASS: [HEADING] returned 360 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 270 270] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
INFO: Calling SETORIENTATION [0 -105 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 180 , as expected.
PASS: [PITCH] returned 285 , as expected.
PASS: [HEADING] returned 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 285 285] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
INFO: Calling SETORIENTATION [0 465 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 180 , as expected.
PASS: [PITCH] returned 75 , as expected.
PASS: [HEADING] returned 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 75 75] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
INFO: Calling SETORIENTATION [360 360 360]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 4.97272270021786e-15 , as expected.
PASS: [PITCH] returned 1.29138760801751e-14 , as expected.
PASS: [HEADING] returned 360 , as expected.
PASS: [ANGLEISCLOSEENOUGH 4.97272270021786e-15 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 1.29138760801751e-14 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
INFO: Calling SETORIENTATION [-360 -360 -360]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 360 , as expected.
PASS: [PITCH] returned 360 , as expected.
PASS: [HEADING] returned 3.03308687270797e-16 , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 3.03308687270797e-16 0] returned true , as expected.
INFO: Executing invalid instruction: [(SETORIENTATION)]
INFO: Executing [(SETORIENTATION)] set error code to 6 , as expected
INFO: Executing [(SETORIENTATION)] set error string to [not enough inputs to SETORIENTATION]
INFO: Executing invalid instruction: [(SETORIENTATION 0)]
PASS: Executing [(SETORIENTATION 0)] threw an error
INFO: Executing invalid instruction: [(SETORIENTATION 0 0)]
INFO: Executing [(SETORIENTATION 0 0)] set error code to 8 , as expected
INFO: Executing [(SETORIENTATION 0 0)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETORIENTATION 0 0 0)]
INFO: Executing [(SETORIENTATION 0 0 0)] set error code to 8 , as expected
INFO: Executing [(SETORIENTATION 0 0 0)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETORIENTATION [0] )]
PASS: Executing [(SETORIENTATION [0] )] threw an error
INFO: Executing invalid instruction: [(SETORIENTATION [0 0] )]
PASS: Executing [(SETORIENTATION [0 0] )] threw an error
INFO: Executing invalid instruction: [(SETORIENTATION [a b c] )]
PASS: Executing [(SETORIENTATION [a b c] )] threw an error
INFO: Executing invalid instruction: [(SETORIENTATION [0 0 0 0] )]
PASS: Executing [(SETORIENTATION [0 0 0 0] )] threw an error
INFO: Executing invalid instruction: [(SETORIENTATION {0 0 0} )]
PASS: Executing [(SETORIENTATION {0 0 0} )] threw an error
INFO: Executing invalid instruction: [(SETORIENTATION [0 0 0] "toomany)]
INFO: Executing [(SETORIENTATION [0 0 0] "toomany)] set error code to 8 , as expected
INFO: Executing [(SETORIENTATION [0 0 0] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ORIENTATION "toomany)]
INFO: Executing [(ORIENTATION "toomany)] set error code to 8 , as expected
INFO: Executing [(ORIENTATION "toomany)] set error string to [too much inside ()'s]
PASS: [SCRUNCH] returned [1 1] , as expected.
PASS: [SCRUNCH] returned [2 0.1] , as expected.
INFO: Executing invalid instruction: [(SETSCRUNCH)]
INFO: Executing [(SETSCRUNCH)] set error code to 6 , as expected
INFO: Executing [(SETSCRUNCH)] set error string to [not enough inputs to SETSCRUNCH]
INFO: Executing invalid instruction: [(SETSCRUNCH [1 1] )]
INFO: Executing [(SETSCRUNCH [1 1] )] set error code to 6 , as expected
INFO: Executing [(SETSCRUNCH [1 1] )] set error string to [not enough inputs to SETSCRUNCH]
INFO: Executing invalid instruction: [(SETSCRUNCH 1)]
INFO: Executing [(SETSCRUNCH 1)] set error code to 6 , as expected
INFO: Executing [(SETSCRUNCH 1)] set error string to [not enough inputs to SETSCRUNCH]
INFO: Executing invalid instruction: [(SETSCRUNCH "a 1)]
PASS: Executing [(SETSCRUNCH "a 1)] threw an error
INFO: Executing invalid instruction: [(SETSCRUNCH [1] 1)]
PASS: Executing [(SETSCRUNCH [1] 1)] threw an error
INFO: Executing invalid instruction: [(SETSCRUNCH {1} 1)]
PASS: Executing [(SETSCRUNCH {1} 1)] threw an error
INFO: Executing invalid instruction: [(SETSCRUNCH 1 "a )]
PASS: Executing [(SETSCRUNCH 1 "a )] threw an error
INFO: Executing invalid instruction: [(SETSCRUNCH 1 [1] )]
PASS: Executing [(SETSCRUNCH 1 [1] )] threw an error
INFO: Executing invalid instruction: [(SETSCRUNCH 1 {1} )]
PASS: Executing [(SETSCRUNCH 1 {1} )] threw an error
INFO: Executing invalid instruction: [(SETSCRUNCH 1 1 1)]
INFO: Executing [(SETSCRUNCH 1 1 1)] set error code to 8 , as expected
INFO: Executing [(SETSCRUNCH 1 1 1)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SCRUNCH "toomany)]
INFO: Executing [(SCRUNCH "toomany)] set error code to 8 , as expected
INFO: Executing [(SCRUNCH "toomany)] set error string to [too much inside ()'s]
PASS: [SCRUNCH] returned [0 0] , as expected.
PASS: [SCRUNCH] returned [1e+50 -1e+50] , as expected.
PASS: "HELP [wor]" opened the index to WORD
PASS: "HELP TO" opened the documentation for TO
PASS: "(HELP)" opened the manual to the table of contents
INFO: Executing invalid instruction: [(HELP "TOO "MANY)]
INFO: Executing [(HELP "TOO "MANY)] set error code to 8 , as expected
INFO: Executing [(HELP "TOO "MANY)] set error string to [too much inside ()'s]
PASS: ICON "Commander minimized the commander when it was docked
INFO: Executing invalid instruction: [(WINDOWSET)]
INFO: Executing [(WINDOWSET)] set error code to 6 , as expected
INFO: Executing [(WINDOWSET)] set error string to [not enough inputs to WINDOWSET]
INFO: Executing invalid instruction: [(WINDOWSET "FMSLogo)]
INFO: Executing [(WINDOWSET "FMSLogo)] set error code to 6 , as expected
INFO: Executing [(WINDOWSET "FMSLogo)] set error string to [not enough inputs to WINDOWSET]
INFO: Executing invalid instruction: [(WINDOWSET "FMSLogo 0 "toomany)]
INFO: Executing [(WINDOWSET "FMSLogo 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(WINDOWSET "FMSLogo 0 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [WINDOWSET "FMSLogo [1]]
PASS: Executing [WINDOWSET "FMSLogo [1]] threw an error
INFO: Executing invalid instruction: [WINDOWSET "FMSLogo {1}]
PASS: Executing [WINDOWSET "FMSLogo {1}] threw an error
INFO: Executing invalid instruction: [WINDOWSET "FMSLogo "one]
PASS: Executing [WINDOWSET "FMSLogo "one] threw an error
INFO: Executing invalid instruction: [WINDOWSET "FMSLogo -1]
PASS: Executing [WINDOWSET "FMSLogo -1] threw an error
INFO: Executing invalid instruction: [(DLLLOAD)]
INFO: Executing [(DLLLOAD)] set error code to 6 , as expected
INFO: Executing [(DLLLOAD)] set error string to [not enough inputs to DLLLOAD]
INFO: Executing invalid instruction: [(DLLLOAD "kernel32 "user32)]
INFO: Executing [(DLLLOAD "kernel32 "user32)] set error code to 8 , as expected
INFO: Executing [(DLLLOAD "kernel32 "user32)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [DLLLOAD {0}]
PASS: Executing [DLLLOAD {0}] threw an error
INFO: Executing invalid instruction: [DLLLOAD [0]]
PASS: Executing [DLLLOAD [0]] threw an error
INFO: Executing invalid instruction: [DLLLOAD 12345]
PASS: Executing [DLLLOAD 12345] threw an error
INFO: Executing invalid instruction: [DLLLOAD "nonexistent.dll]
PASS: Executing [DLLLOAD "nonexistent.dll] threw an error
INFO: Executing invalid instruction: [DLLLOAD "c:\]
PASS: Executing [DLLLOAD "c:\] threw an error
INFO: Executing invalid instructiondll]
PASS: Executing [DLLLOAD "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.dll] threw an error
INFO: Executing invalid instruction: [DLLLOAD "user32.dll]
PASS: Executing [DLLLOAD "user32.dll] threw an error
INFO: Executing invalid instruction: [DLLLOAD {0}]
PASS: Executing [DLLLOAD {0}] threw an error
INFO: Executing invalid instruction: [DLLCALL [L FindWindowA S FMSLogo L 0]]
PASS: Executing [DLLCALL [L FindWindowA S FMSLogo L 0]] threw an error
INFO: Executing invalid instruction: [(DLLCALL)]
INFO: Executing [(DLLCALL)] set error code to 6 , as expected
INFO: Executing [(DLLCALL)] set error string to [not enough inputs to DLLCALL]
INFO: Executing invalid instruction: [(DLLCALL [L GetTickCount] "toomany)]
INFO: Executing [(DLLCALL [L GetTickCount] "toomany)] set error code to 8 , as expected
INFO: Executing [(DLLCALL [L GetTickCount] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [DLLCALL {0}]
PASS: Executing [DLLCALL {0}] threw an error
INFO: Executing invalid instruction: [DLLCALL [0]]
PASS: Executing [DLLCALL [0]] threw an error
INFO: Executing invalid instruction: [DLLCALL [L]]
PASS: Executing [DLLCALL [L]] threw an error
INFO: Executing invalid instruction: [DLLCALL [L FunctionDoesNotExist]]
PASS: Executing [DLLCALL [L FunctionDoesNotExist]] threw an error
INFO: Executing invalid instruction: [DLLCALL [E GetTickCount]]
PASS: Executing [DLLCALL [E GetTickCount]] threw an error
INFO: Executing invalid instruction: [DLLCALL [E GetTickCount]]
PASS: Executing [DLLCALL [E GetTickCount]] threw an error
INFO: Executing invalid instruction: [DLLCALL [L GetTickCount L]]
PASS: Executing [DLLCALL [L GetTickCount L]] threw an error
INFO: Executing invalid instruction: [DLLCALL [L GetTickCount E Unknown]]
PASS: Executing [DLLCALL [L GetTickCount E Unknown]] threw an error
INFO: Executing invalid instruction: [DLLFREE]
PASS: Executing [DLLFREE] threw an error
INFO: Executing invalid instruction: [(DLLFREE 0)]
INFO: Executing [(DLLFREE 0)] set error code to 8 , as expected
INFO: Executing [(DLLFREE 0)] set error string to [too much inside ()'s]
PASS: [SORT []] returned [] , as expected.
PASS: [SORT [1]] returned [1] , as expected.
PASS: [SORT [1 2 3]] returned [1 2 3] , as expected.
PASS: [SORT [3 2 1]] returned [1 2 3] , as expected.
PASS: [SORT [1 2 3 1 2 3 1 2 3]] returned [1 1 1 2 2 2 3 3 3] , as expected.
PASS: [(SORT [1 2 3 1 2 3 1 2 3] "greaterp)] returned [3 3 3 2 2 2 1 1 1] , as expected.
PASS: [(SORT :database "SORTBYNAME)] returned [{"cat 4 2} {"human 2 2} {"spider 8 8}] , as expected.
PASS: [(SORT :database "SORTBYLEGS)] returned [{"human 2 2} {"cat 4 2} {"spider 8 8}] , as expected.
PASS: [SORT "hello] returned ehllo , as expected.
PASS: [SORT "FMSLogo] returned FgLMooS , as expected.
PASS: [SORT "FgLMooS] returned FgLMooS , as expected.
PASS: [SORT "Z] returned Z , as expected.
PASS: [SORT "] returned  , as expected.
PASS: [ARRAY? :sortedarray] returned true , as expected.
PASS: [COUNT :sortedarray] returned 9 , as expected.
PASS: [ITEM 1 :sortedarray] returned 1 , as expected.
PASS: [ITEM 2 :sortedarray] returned 1 , as expected.
PASS: [ITEM 3 :sortedarray] returned 1 , as expected.
PASS: [ITEM 4 :sortedarray] returned 2 , as expected.
PASS: [ITEM 5 :sortedarray] returned 2 , as expected.
PASS: [ITEM 6 :sortedarray] returned 2 , as expected.
PASS: [ITEM 7 :sortedarray] returned 3 , as expected.
PASS: [ITEM 8 :sortedarray] returned 3 , as expected.
PASS: [ITEM 9 :sortedarray] returned 3 , as expected.
INFO: Executing invalid instruction: [(SORT)]
INFO: Executing [(SORT)] set error code to 6 , as expected
INFO: Executing [(SORT)] set error string to [not enough inputs to SORT]
INFO: Executing invalid instruction: [(SORT [[1] [2]] )]
PASS: Executing [(SORT [[1] [2]] )] threw an error
INFO: Executing invalid instruction: [(SORT {[1] [2]} )]
PASS: Executing [(SORT {[1] [2]} )] threw an error
INFO: Executing invalid instruction: [(SORT [3 2 1] "FMSLogo)]
PASS: Executing [(SORT [3 2 1] "FMSLogo)] threw an error
INFO: Executing invalid instruction: [(SORT [3 2 1] [1] )]
PASS: Executing [(SORT [3 2 1] [1] )] threw an error
INFO: Executing invalid instruction: [(SORT [3 2 1] {1} )]
PASS: Executing [(SORT [3 2 1] {1} )] threw an error
INFO: Executing invalid instruction: [(SORT [3 2 1] "clearscreen)]
PASS: Executing [(SORT [3 2 1] "clearscreen)] threw an error
INFO: Executing invalid instruction: [(SORT [3 2 1] "lessp "toomany)]
INFO: Executing [(SORT [3 2 1] "lessp "toomany)] set error code to 8 , as expected
INFO: Executing [(SORT [3 2 1] "lessp "toomany)] set error string to [too much inside ()'s]
