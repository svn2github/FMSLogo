PASS: Running [load "greatlogoatlas\tok-1.1.logo] printed 5 , as expected.
PASS: Running [load "greatlogoatlas\tok-1.2.logo] printed 2 , as expected.
PASS: Running [load "greatlogoatlas\tok-1.3.logo] printed 2 , as expected.
PASS: Running [load "greatlogoatlas\tok-1.5.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-1.6-CRLF.logo] printed Longword , as expected.
PASS: Running [load "greatlogoatlas\tok-1.6-LF.logo] printed Longword , as expected.
PASS: Running [load "greatlogoatlas\tok-1.7.logo] printed Backslashed word , as expected.
PASS: Running [load "greatlogoatlas\tok-1.7.logo] printed Bracket[word , as expected.
PASS: Running [load "greatlogoatlas\tok-1.8.logo] printed bars and spaces , as expected.
PASS: Running [load "greatlogoatlas\tok-1.8.logo] printed bars and  , as expected.
PASS: Running [load "greatlogoatlas\tok-1.8.logo] printed new lines , as expected.
PASS: Running [load "greatlogoatlas\tok-1.10.logo] printed Shell comment , as expected.
PASS: Running [load "greatlogoatlas\tok-1.11.logo] printed one , as expected.
PASS: Running [load "greatlogoatlas\tok-2.1.logo] printed 21 , as expected.
PASS: Running [load "greatlogoatlas\tok-2.3.logo] printed 7 , as expected.
PASS: Running [load "greatlogoatlas\tok-2.4.logo] printed 1+2*3 , as expected.
PASS: Running [load "greatlogoatlas\tok-2.5.logo] printed 1 + ( ? 37 ) , as expected.
PASS: Running [load "greatlogoatlas\tok-2.5.logo] printed 1 + ?37 , as expected.
PASS: Running [load "greatlogoatlas\tok-3.1-CRLF.logo] printed Two-line , as expected.
PASS: Running [load "greatlogoatlas\tok-3.1-CRLF.logo] printed word , as expected.
PASS: Running [load "greatlogoatlas\tok-3.1-LF.logo] printed Two-line , as expected.
PASS: Running [load "greatlogoatlas\tok-3.1-LF.logo] printed word , as expected.
PASS: Running [load "greatlogoatlas\tok-3.2-CRLF.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-3.2-LF.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-CRLF.logo] printed one , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-CRLF.logo] printed two , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-CRLF.logo] printed three , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-LF.logo] printed one , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-LF.logo] printed two , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-LF.logo] printed three , as expected.
PASS: Running [load "greatlogoatlas\tok-3.4-CRLF.logo] printed Helloagain , as expected.
PASS: Running [load "greatlogoatlas\tok-3.4-LF.logo] printed Helloagain , as expected.
PASS: Running [load "greatlogoatlas\tok-3.5-CRLF.logo] printed bar;red~
comment , as expected.
PASS: Running [load "greatlogoatlas\tok-3.5-LF.logo] printed bar;red~
comment , as expected.
PASS: Running [load "greatlogoatlas\tok-3.6-CRLF.logo] printed line andthe~ lastline , as expected.
PASS: Running [load "greatlogoatlas\tok-3.6-LF.logo] printed line andthe~ lastline , as expected.
PASS: Running [load "greatlogoatlas\tok-3.7.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-3.8.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-3.9.logo] printed bars in .. bars , as expected.
PASS: Running [load "greatlogoatlas\tok-3.9.logo] printed bars in |..| bars , as expected.
PASS: [-0] output 0 , as expected.
PASS: [-0.0] output 0 , as expected.
PASS: [.00] output 0 , as expected.
PASS: [0e10] output 0 , as expected.
PASS: [0e+10] output 0 , as expected.
PASS: [0e-10] output 0 , as expected.
PASS: [00012] output 12 , as expected.
PASS: [1e3] output 1000 , as expected.
PASS: [1.234e3] output 1234 , as expected.
PASS: [1.234e+3] output 1234 , as expected.
PASS: [1.23e-1] output 0.123 , as expected.
PASS: [.5] output 0.5 , as expected.
PASS: [-.5] output -0.5 , as expected.
PASS: [0.50000] output 0.5 , as expected.
PASS: [5000000000000000000000000000000000000000000000000] output 5e+48 , as expected.
INFO: Running invalid instruction: [1e1e]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 1e1e .
INFO: Running invalid instruction: [1e1.5]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 1e1.5 .
INFO: Running invalid instruction: [1.1.]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 1.1. .
INFO: Running invalid instruction: [1..]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 1.. .
INFO: Running invalid instruction: [.1.]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to .1. .
INFO: Running invalid instruction: [50000000000000000000000000000000000000000000000000]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 50000000000000000000000000000000000000000000000000 .
PASS: ["WORD] output WORD , as expected.
PASS: ["A B] output A B , as expected.
PASS: [DIFFICULTCOMMENTS1] output 1 , as expected.
PASS: [DIFFICULTCOMMENTS2] output 2 , as expected.
PASS: [LINECONTINUATION3] output 3 , as expected.
PASS: [TILDAINLINE] output 4 , as expected.
PASS: [:~IGNOREMEWASCALLED] output 0 , as expected.
PASS: [:~CALLMEWASCALLED] output 1 , as expected.
PASS: [ITEM 1 [{]] output { , as expected.
PASS: [ITEM 1 [}]] output } , as expected.
PASS: [ITEM 1 []]] output ] , as expected.
PASS: [ITEM 1 [[]] output [ , as expected.
PASS: [ITEM 1 [|]] output | , as expected.
PASS: [[]] output [] , as expected.
PASS: [ITEM 1 {[}] output [ , as expected.
PASS: [ITEM 1 {]}] output ] , as expected.
PASS: [ITEM 1 {{}] output { , as expected.
PASS: [ITEM 1 {}}] output } , as expected.
PASS: [ITEM 1 {|}] output | , as expected.
PASS: [ITEM 1 ["]] output " , as expected.
PASS: [ITEM 1 {"}] output " , as expected.
INFO: Running invalid instruction: [5**5]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to * .
INFO: Running invalid instruction: [*5]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to * .
INFO: Running invalid instruction: [5*]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to * .
INFO: Running invalid instruction: [-]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to -- .
INFO: Running invalid instruction: [MODULO 100 * 100]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MODULO .
PASS: [(1 + 2) * 3] output 9 , as expected.
PASS: [1 + (2 * 3)] output 7 , as expected.
PASS: [1 + 2 * 3] output 7 , as expected.
PASS: [(2 * 3) + 4] output 10 , as expected.
PASS: [2 * (3 + 4)] output 14 , as expected.
PASS: [2 * 3 + 4] output 10 , as expected.
PASS: [1 + 1 = 2] output true , as expected.
PASS: [2 = 1 + 1] output true , as expected.
PASS: [2 = 1 = 1] output false , as expected.
PASS: [1 < 2] output true , as expected.
PASS: [1 <= 2] output true , as expected.
PASS: [1 > 2] output false , as expected.
PASS: [1 >= 2] output false , as expected.
PASS: [1 = 2] output false , as expected.
PASS: [1 < 2] output true , as expected.
PASS: [1 <> 2] output true , as expected.
PASS: [1<2] output true , as expected.
PASS: [1<=2] output true , as expected.
PASS: [1>2] output false , as expected.
PASS: [1>=2] output false , as expected.
PASS: [1=2] output false , as expected.
PASS: [1<2] output true , as expected.
PASS: [1<>2] output true , as expected.
INFO: Running invalid instruction: [1 < > 2]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to > .
INFO: Running invalid instruction: [1 < = 2]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to = .
INFO: Running invalid instruction: [1 > = 2]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to = .
INFO: Running invalid instruction: [1>]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to > .
INFO: Running invalid instruction: [1<]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to < .
PASS: [1+2*2] output 5 , as expected.
PASS: [2*2+1] output 5 , as expected.
PASS: [1-2/2] output 0 , as expected.
PASS: [2/2+1] output 2 , as expected.
PASS: [PRODUCT 2 2 + 1] output 6 , as expected.
PASS: [PRODUCT 2 2 - 1] output 2 , as expected.
PASS: [2 - - 1] output 3 , as expected.
PASS: [2 * - 1] output -2 , as expected.
PASS: [- 2 + 3] output 1 , as expected.
PASS: [1 + 2 < 3 * 4] output true , as expected.
PASS: [1 + 2 <= 3 * 4] output true , as expected.
PASS: [1 + 2 <> 3 * 4] output true , as expected.
PASS: [1 + 2 > 3 * 4] output false , as expected.
PASS: [1 + 2 >= 3 * 4] output false , as expected.
PASS: [1 + 2 = 3 * 4] output false , as expected.
PASS: [FIRST 1 = 2] output f , as expected.
PASS: [FIRST 1 < 2] output t , as expected.
PASS: [FIRST 1 <= 2] output t , as expected.
PASS: [FIRST 1 <> 2] output t , as expected.
PASS: [FIRST 1 > 2] output f , as expected.
PASS: [FIRST 1 >= 2] output f , as expected.
PASS: [:sum] output 5000050000 , as expected.
PASS: Bug #1539716 is fixed; running an expression with a long list of inputs didn't crash.
PASS: 100000 output 100000 , as expected.
PASS: Bug #1566166 is fixed; running a long list of infix expressions didn't crash.
PASS: 100000 output 100000 , as expected.
PASS: Bug #1565788 is fixed; running a long list of expressions didn't crash.
PASS: 100000 output 100000 , as expected.
PASS: Bug #1565788 is fixed; running a long list of expressions didn't crash.
PASS: [:myvalue] output ÿ , as expected.
INFO: Running invalid instruction: [(LOAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOAD .
INFO: Running invalid instruction: [(LOAD "testlib.lgo "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LOAD "doesnotexist.lgo]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
CALL: ERASE "procedureinworkingdirectory
PASS: [procedureinworkingdirectory] output 123 , as expected.
INFO: Running invalid instruction
INFO: error code is 13 .
INFO: error text is I don't know how to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA .
INFO: Running invalid instruction: [(RUN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RUN .
INFO: Running invalid instruction: [RUN {"FD 100}]
INFO: error code is 7 .
INFO: error text is RUN doesn't like {"FD 100} as input .
INFO: Running invalid instruction: [(RUN [FD 100] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [RUNRESULT [FIRST [1 2 3]]] output [1] , as expected.
PASS: [RUNRESULT [PENDOWN]] output [] , as expected.
PASS: [RUNRESULT []] output [] , as expected.
PASS: [RUNRESULT 100] output [100] , as expected.
PASS: [RUNRESULT [100]] output [100] , as expected.
INFO: Running invalid instruction: [(RUNRESULT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RUNRESULT .
INFO: Running invalid instruction: [(RUNRESULT "SUM "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RUNRESULT {1 2 3}]
INFO: error code is 7 .
INFO: error text is RUNRESULT doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [RUNRESULT DOES.NOT.EXIST]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to DOES.NOT.EXIST .
INFO: Running invalid instruction: [RUNRESULT [1 2 3]]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with 1 .
PASS: [RUNPARSE "1+2*3/4] output [1 + 2 * 3 / 4] , as expected.
PASS: [RUNPARSE "1<2>3=4<=5>=6<>7] output [1 < 2 > 3 = 4 <= 5 >= 6 <> 7] , as expected.
PASS: [RUNPARSE "1(2(3)4(5)6)] output [1 ( 2 ( 3 ) 4 ( 5 ) 6 )] , as expected.
PASS: [RUNPARSE "1[2[3]4]5] output [1 [2 [3] 4] 5] , as expected.
CALL: make "runparsedvalue RUNPARSE "1{2{3}4}5
PASS: [list? :runparsedvalue] output true , as expected.
PASS: [count :runparsedvalue] output 3 , as expected.
PASS: [array? item 2 :runparsedvalue] output true , as expected.
PASS: [count item 2 :runparsedvalue] output 3 , as expected.
PASS: [array? item 2 item 2 :runparsedvalue] output true , as expected.
PASS: [count item 2 item 2 :runparsedvalue] output 1 , as expected.
PASS: [item 1 :runparsedvalue] output 1 , as expected.
PASS: [item 1 item 2 :runparsedvalue] output 2 , as expected.
PASS: [item 1 item 2 item 2 :runparsedvalue] output 3 , as expected.
PASS: [item 3 item 2 :runparsedvalue] output 4 , as expected.
PASS: [item 3 :runparsedvalue] output 5 , as expected.
PASS: [runparse "1 2 3; 4 5 6] output [1 2 3] , as expected.
PASS: [runparse "1~
2] output [12] , as expected.
PASS: [runparse "1~ 
2] output [1~ 2] , as expected.
PASS: [runparse "12ab] output [12ab] , as expected.
INFO: Running invalid instruction: [RUNPARSE {badinput}]
PASS: error code is 7 , as expected.
INFO: error text is RUNPARSE doesn't like {badinput} as input .
INFO: Running invalid instruction: [(RUNPARSE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RUNPARSE .
INFO: Running invalid instruction: [(RUNPARSE "A<B "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: TOTEST.NOOUTPUT
PASS: [TOTEST.OUTPUT5] output 5 , as expected.
PASS: [TOTEST.SINGLEINPUT 123] output 123 , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTDEFAULTINPUT]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TOTEST.OUTPUTDEFAULTINPUT .
PASS: [TOTEST.OUTPUTDEFAULTINPUT 1] output 123 , as expected.
PASS: [(TOTEST.OUTPUTDEFAULTINPUT 1)] output 123 , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTDEFAULTINPUT 1 321]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with 123 .
PASS: [(TOTEST.OUTPUTDEFAULTINPUT 1 321)] output 321 , as expected.
INFO: Running invalid instruction: [(TOTEST.OUTPUTDEFAULTINPUT 1 321 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS .
PASS: [(TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1)] output 123 , as expected.
PASS: [TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1 321] output 321 , as expected.
PASS: [(TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1 321)] output 321 , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1 321 "toomany]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with 321 .
INFO: Running invalid instruction: [(TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1 321 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [TOTEST.OUTPUTREST] output [] , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTREST 1]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with [] .
PASS: [(TOTEST.OUTPUTREST 1)] output [1] , as expected.
PASS: [(TOTEST.OUTPUTREST 1 2)] output [1 2] , as expected.
PASS: [(TOTEST.OUTPUTREST 1 2 3)] output [1 2 3] , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTREST.TWOINPUTS 1]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TOTEST.OUTPUTREST.TWOINPUTS .
PASS: [TOTEST.OUTPUTREST.TWOINPUTS 1 2] output [1 2] , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTREST.TWOINPUTS 1 2 3]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with [1 2] .
PASS: [(TOTEST.OUTPUTREST.TWOINPUTS 1)] output [1] , as expected.
PASS: [(TOTEST.OUTPUTREST.TWOINPUTS 1 2)] output [1 2] , as expected.
PASS: [(TOTEST.OUTPUTREST.TWOINPUTS 1 2 3)] output [1 2 3] , as expected.
PASS: [TOTEST.REPEATEDINPUT 123 456] output 456 , as expected.
PASS: [(TOTEST.CHAINEDDEFAULTS 1 2 3)] output 3 , as expected.
PASS: [(TOTEST.CHAINEDDEFAULTS 1 2)] output 8 , as expected.
PASS: [(TOTEST.CHAINEDDEFAULTS 1)] output 12 , as expected.
PASS: [(TOTEST.CHAINEDDEFAULTS)] output 408 , as expected.
PASS: [DEFINED? "TOTEST.BADINPUT] output false , as expected.
FAIL: [DEFINED? "TOTEST.BADDEFAULTINPUTS] output true . We expected false .
PASS: error code is 4 , as expected.
PASS: error text is / doesn't like 0 as input , as expected.
PASS: error procedure is ERRORTEST , as expected.
PASS: error line is [CATCH "ERROR [1 / 0]] , as expected.
INFO: Running invalid instruction: [FORWARD 1e10]
PASS: error code is 3 , as expected.
PASS: error text is turtle out of bounds , as expected.
INFO: Running invalid instruction: [1 / 0]
PASS: error code is 4 , as expected.
PASS: error text is / doesn't like 0 as input , as expected.
INFO: Running invalid instruction: [(THROW "ERROR 4 [1 2 3] )]
PASS: error code is 4 , as expected.
PASS: error text is RUNEXPECTERRORTEST doesn't like [1 2 3] as input , as expected.
INFO: Running invalid instruction: [(THROW "ERROR 4.0 [1 2 3] )]
PASS: error code is 4 , as expected.
PASS: error text is RUNEXPECTERRORTEST doesn't like [1 2 3] as input , as expected.
INFO: Running invalid instruction: [(THROW "ERROR "4 [1 2 3] )]
PASS: error code is 4 , as expected.
PASS: error text is RUNEXPECTERRORTEST doesn't like [1 2 3] as input , as expected.
INFO: Running invalid instruction: [IGNORE NO.INPUT.NO.OUTPUT]
PASS: error code is 5 , as expected.
PASS: error text is NO.INPUT.NO.OUTPUT didn't output to IGNORE , as expected.
INFO: Running invalid instruction: [(ONE.INPUT.NO.OUTPUT)]
PASS: error code is 6 , as expected.
PASS: error text is not enough inputs to ONE.INPUT.NO.OUTPUT , as expected.
INFO: Running invalid instruction: [FORWARD "tensteps]
PASS: error code is 7 , as expected.
PASS: error text is FORWARD doesn't like tensteps as input , as expected.
INFO: Running invalid instruction: [(NO.INPUT.NO.OUTPUT "toomany)]
PASS: error code is 8 , as expected.
PASS: error text is too much inside ()'s , as expected.
INFO: Running invalid instruction: [I.DONT.KNOW.WHAT.TO.DO.WITH.VALUE]
PASS: error code is 9 , as expected.
PASS: error text is You don't say what to do with 1 , as expected.
INFO: Running invalid instruction: [(ONE.INPUT.NO.OUTPUT]
PASS: error code is 10 , as expected.
PASS: error text is too many ('s , as expected.
INFO: Running invalid instruction: [ONE.INPUT.NO.OUTPUT :novalue]
PASS: error code is 11 , as expected.
PASS: error text is novalue has no value , as expected.
INFO: Running invalid instruction: [)]
PASS: error code is 12 , as expected.
PASS: error text is unexpected ')' , as expected.
INFO: Running invalid instruction: [UNKNOWN.PROC]
PASS: error code is 13 , as expected.
PASS: error text is I don't know how to UNKNOWN.PROC , as expected.
INFO: Running invalid instruction: [MY.PROC.TO.STEP]
PASS: error code is 16 , as expected.
PASS: error text is Stopping... , as expected.
INFO: Running invalid instruction: [DRIBBLE "DELETEME.TXT]
PASS: error code is 17 , as expected.
PASS: error text is Already dribbling , as expected.
INFO: Running invalid instruction: [OPENREAD "DELETEME.TXT]
PASS: error code is 18 , as expected.
PASS: error text is File system error: Could not open file , as expected.
INFO: Running invalid instruction: [THROW "ERROR]
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
INFO: Running invalid instruction: [(THROW "ERROR "errormessage)]
PASS: error code is 21 , as expected.
PASS: error text is errormessage , as expected.
INFO: Running invalid instruction: [(THROW "ERROR 4)]
PASS: error code is 21 , as expected.
PASS: error text is 4 , as expected.
INFO: Running invalid instruction: [DEFINE "forward [[]]]
PASS: error code is 22 , as expected.
PASS: error text is forward is a primitive , as expected.
INFO: Running invalid instruction: [PROCEDURE.WITH.TO.INSIDE.IT]
PASS: error code is 23 , as expected.
PASS: error text is Can't use TO inside a procedure , as expected.
INFO: Running invalid instruction: [TEXT "NO.SUCH.PROCEDURE.IS.DEFINED]
PASS: error code is 24 , as expected.
PASS: error text is I don't know how to NO.SUCH.PROCEDURE.IS.DEFINED , as expected.
INFO: Running invalid instruction: [IFTRUE "x]
PASS: error code is 25 , as expected.
PASS: error text is IFTRUE without TEST , as expected.
INFO: Running invalid instruction: [LOAD "unexpectedclosebracket.lgo]
PASS: error code is 26 , as expected.
PASS: error text is unexpected ']' , as expected.
INFO: Running invalid instruction: [LOAD "unexpectedclosebrace.lgo]
PASS: error code is 27 , as expected.
PASS: error text is unexpected '}' , as expected.
INFO: Running invalid instruction: [MACRO.RETURN.UNBOUND.INSTEAD.OF.LIST]
PASS: error code is 29 , as expected.
PASS: error text is Macro output Unbound instead of a list , as expected.
INFO: Running invalid instruction: [APPLY "ONE.INPUT.NO.OUTPUT 1]
PASS: error code is 32 , as expected.
PASS: error text is APPLY doesn't like 1 as input , as expected.
INFO: Running invalid instruction: [LOAD "endinmultilineinstruction.lgo]
PASS: error code is 33 , as expected.
PASS: error text is END inside multi-line instruction in END.INSIDE.MULTILINE.INSTRUCTION , as expected.
INFO: Setting ERRACT to a procedure that outputs 5
INFO: Calling "SUM 1 [1] ", which should run :erract to replace [1] with 5
PASS: [:thesum] output 6 , as expected.
INFO: Calling "SUM 1 [1] " again. This used to crash (bug #1517326)
PASS: [:thesum] output 6 , as expected.
INFO: Setting ERRACT to a value such that we can verify if it is called
INFO: Causing an unrecoverable error outside of a CATCH block
INFO: Running invalid instruction: [FUNCTION.DOES.NOT.EXIST]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to FUNCTION.DOES.NOT.EXIST .
PASS: [:erract.was.called] output false , as expected.
PASS: [:erract] output [MAKE "erract.was.called "true] , as expected.
INFO: Setting ERRACT to a procedure outputs the next value in :erractvalues
CALL: MAKE "erractvalues [[100] 5]
INFO: Calling "SUM 1 [1] " this should keep calling :ERRACT until it gets a good value
INFO: ERRACT handler outputs 100
INFO: ERRACT handler outputs 5
PASS: [:thesum] output 6 , as expected.
INFO: Setting ERRACT to a procedure changes erract and outputs 6
INFO: Calling "SUM 1 [1] ", which should run :erract to replace [1] with 6
INFO: Entering ERRACTTEST.CHANGEERRACT.OUTPUT.6
PASS: [:erract] output [ERRACTTEST.CHANGEERRACT.OUTPUT.6] , as expected.
INFO: Changing the value of :erract to [ERRACTTEST.OUTPUT.5]
PASS: [:erract] output [ERRACTTEST.OUTPUT.5] , as expected.
INFO: Exiting ERRACTTEST.CHANGEERRACT.OUTPUT.6
PASS: [:thesum] output 7 , as expected.
INFO: Calling "SUM 1 [1] " again. This should use the new erract value
PASS: [:thesum] output 6 , as expected.
INFO: Setting ERRACT to a value that outputs 5
INFO: Causing a recoverable error just after a CATCH block
PASS: [:outputvalue] output 6 , as expected.
INFO: Running test where CATCH instruction list doesn't output or throw
INFO: Running test where CATCH instruction list outputs a value
PASS: [:outputvalue] output 3 , as expected.
INFO: Running test where CATCH instruction list throws
INFO: Running test where CATCH instruction list throws a value
INFO: Entering CATCHTEST.SMOKETEST.THROW
PASS: [:outputvalue] output [1 2 3 4 5] , as expected.
INFO: Running invalid instruction: [CATCHTEST.THROW.BUILTIN.ERROR]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to FUNCTION.DOES.NOT.EXIST .
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
PASS: error procedure is CATCHTEST.CATCHUSERERROR , as expected.
PASS: error line is [CATCH "ERROR [THROW "ERROR]] , as expected.
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
PASS: error procedure is CATCHTEST.CATCHUSERERROR , as expected.
PASS: error line is [CATCH "ERROR [throw "error]] , as expected.
PASS: error code is 21 , as expected.
PASS: error text is 1234 , as expected.
PASS: error procedure is CATCHTEST , as expected.
PASS: error line is [CATCHTEST.CATCHUSERERROR] , as expected.
INFO: Entering CATCHTEST.SKIPERRORTAG.CATCHERROR
INFO: Entering CATCHTEST.SKIPERRORTAG.THROW
PASS: [ERROR] output [] , as expected.
INFO: Exiting CATCHTEST.SKIPERRORTEST
INFO: Entering CATCHTEST.SKIPTHROWTAG.CATCHTHROWTAG
INFO: Entering CATCHTEST.SKIPTHROWTAG.THROWERROR
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
PASS: error procedure is CATCHTEST.SKIPTHROWTAG.THROWERROR , as expected.
PASS: error line is [Throw "Error] , as expected.
INFO: Exiting CATCHTEST.SKIPTHROWTAG
INFO: Entering CATCHTEST.SKIPTHROWTAG.CATCHINNERTAG
INFO: Entering CATCHTEST.SKIPTHROWTAGWTIHVALUE.THROWOUTERTAG
PASS: [:throwvalue] output 12345 , as expected.
INFO: Exiting CATCHTEST.SKIPTHROWTAGWITHVALUE
INFO: Entering CATCHTEST.DOUBLECATCHERROR.INNERCATCHERROR
INFO: Entering CATCHTEST.DOUBLECATCHERROR.THROWERROR
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
PASS: error procedure is CATCHTEST.DOUBLECATCHERROR.THROWERROR , as expected.
PASS: error line is [Throw "Error] , as expected.
INFO: Exiting CATCHTEST.DOUBLECATCHERROR.INNERCATCHERROR
PASS: [ERROR] output [] , as expected.
INFO: Exiting CATCHTEST.DOUBLECATCHERROR
INFO: Running invalid instruction: [(CATCH "error)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to CATCH .
INFO: Running invalid instruction: [(CATCH "error [instructionlist] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: error code is 21 , as expected.
PASS: error text is abc , as expected.
PASS: error procedure is THROWTEST.USERERROR , as expected.
PASS: error line is [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION "abc]] , as expected.
PASS: error code is 21 , as expected.
PASS: error text is a b c , as expected.
PASS: error procedure is THROWTEST.USERERROR , as expected.
PASS: error line is [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION [a b c]]] , as expected.
PASS: error code is 21 , as expected.
PASS: error text is {a b c} , as expected.
PASS: error procedure is THROWTEST.USERERROR , as expected.
PASS: error line is [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION :array]] , as expected.
INFO: Running invalid instruction: [(THROW)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to THROW .
INFO: Running invalid instruction: [(THROW "tag "value "secondvalue "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: The "catch 'too many inputs' error many times" test did not crash.
PASS: [EVALTEST.TAILRECURSIVECOUNT 120] output 120 , as expected.
PASS: [EVALTEST.TAILRECURSIVECOUNT 100000] output 100000 , as expected.
PASS: [EVALTEST.NONTAILRECURSIVECOUNT 120] output 120 , as expected.
PASS: [EVALTEST.NONTAILRECURSIVECOUNT 100000] output 100000 , as expected.
PASS: [(LIST)] output [] , as expected.
PASS: [(LIST 1)] output [1] , as expected.
PASS: [(LIST 1 2)] output [1 2] , as expected.
PASS: [(LIST 1 2 3)] output [1 2 3] , as expected.
PASS: [(LIST [1] )] output [[1]] , as expected.
PASS: [(LIST [] )] output [[]] , as expected.
PASS: [LPUT 3 [1 2]] output [1 2 3] , as expected.
PASS: [LPUT 1 []] output [1] , as expected.
PASS: [LPUT [3] [[1] [2]]] output [[1] [2] [3]] , as expected.
INFO: Testing that LPUT can put an array into a list
PASS: [LPUT :array [1 2 3]] output [1 2 3 {1 2 3}] , as expected.
INFO: Testing that LPUT isn't destructive
PASS: [LPUT 3 :originallist] output [1 2 3] , as expected.
PASS: [:originallist] output [1 2] , as expected.
INFO: Running invalid instruction: [(LPUT 3)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LPUT .
INFO: Running invalid instruction: [(LPUT 3 [1 2] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LPUT 3 12]
INFO: error code is 7 .
INFO: error text is LPUT doesn't like 12 as input .
INFO: Running invalid instruction: [LPUT "c "ab]
INFO: error code is 7 .
INFO: error text is LPUT doesn't like ab as input .
INFO: Running invalid instruction: [LPUT "3 {1 2}]
INFO: error code is 7 .
INFO: error text is LPUT doesn't like {1 2} as input .
PASS: [FPUT 1 [2 3]] output [1 2 3] , as expected.
PASS: [FPUT 1 []] output [1] , as expected.
PASS: [FPUT [1] [[2] [3]]] output [[1] [2] [3]] , as expected.
INFO: Testing that FPUT can put an array into a list
PASS: [FPUT :array [1 2 3]] output [{1 2 3} 1 2 3] , as expected.
INFO: Testing that FPUT isn't destructive
PASS: [FPUT 1 :originallist] output [1 2 3] , as expected.
PASS: [:originallist] output [2 3] , as expected.
INFO: Running invalid instruction: [(FPUT 3)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FPUT .
INFO: Running invalid instruction: [(FPUT 3 [1 2] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FPUT 3 12]
INFO: error code is 7 .
INFO: error text is FPUT doesn't like 12 as input .
INFO: Running invalid instruction: [FPUT "c "ab]
INFO: error code is 7 .
INFO: error text is FPUT doesn't like ab as input .
INFO: Running invalid instruction: [FPUT "3 {1 2}]
INFO: error code is 7 .
INFO: error text is FPUT doesn't like {1 2} as input .
PASS: [SE "abc "def] output [abc def] , as expected.
PASS: [SENTENCE "abc "def] output [abc def] , as expected.
PASS: [SENTENCE "abc [def]] output [abc def] , as expected.
PASS: [SENTENCE [abc] "def] output [abc def] , as expected.
PASS: [SENTENCE [abc def] "ghi] output [abc def ghi] , as expected.
PASS: [SENTENCE [abc def] [ghi jlk]] output [abc def ghi jlk] , as expected.
PASS: [SENTENCE [] [abc]] output [abc] , as expected.
PASS: [SENTENCE [] []] output [] , as expected.
PASS: [SENTENCE [[abc]] "def] output [[abc] def] , as expected.
PASS: [(SE "A "sentence "is "simply "a "list "of "words)] output [A sentence is simply a list of words] , as expected.
PASS: [(SENTENCE "A "sentence "is "simply "a "list "of "words)] output [A sentence is simply a list of words] , as expected.
PASS: [(SENTENCE [] [abc] [] )] output [abc] , as expected.
PASS: [(SE)] output [] , as expected.
PASS: [(SENTENCE)] output [] , as expected.
PASS: [(SE "abc)] output [abc] , as expected.
PASS: [(SENTENCE "abc)] output [abc] , as expected.
INFO: Running invalid instruction: [SENTENCE "abc {def}]
INFO: error code is 7 .
INFO: error text is SENTENCE doesn't like {def} as input .
INFO: Running invalid instruction: [SENTENCE {abc} "def]
INFO: error code is 7 .
INFO: error text is SENTENCE doesn't like {abc} as input .
INFO: Running invalid instruction: [(SENTENCE "abc {def} "ghi)]
INFO: error code is 7 .
INFO: error text is SENTENCE doesn't like {def} as input .
CALL: MAKE "list1 [1 2 3]
CALL: MAKE "list2 [4 5 6]
CALL: MAKE "sentence (SENTENCE :list1 :list2)
PASS: [:sentence] output [1 2 3 4 5 6] , as expected.
PASS: [:list1] output [1 2 3] , as expected.
PASS: [:list2] output [4 5 6] , as expected.
PASS: [.EQ 1000 1000] output false , as expected.
PASS: [.EQ :x :y] output false , as expected.
PASS: [.EQ :x :x] output true , as expected.
PASS: [.EQ " "] output true , as expected.
PASS: [.EQ "false "false] output true , as expected.
PASS: [.EQ "true "true] output true , as expected.
PASS: [.EQ [] []] output true , as expected.
INFO: Running invalid instruction: [(.EQ)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to .EQ .
INFO: Running invalid instruction: [(.EQ 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to .EQ .
INFO: Running invalid instruction: [(.EQ 1 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [EQUALP 1 1] output true , as expected.
PASS: [EQUALP 0 0] output true , as expected.
PASS: [EQUALP 3.14 3.14] output true , as expected.
PASS: [EQUALP "hi "hi] output true , as expected.
PASS: [EQUAL? ["a 1 "ab] ["a 1 "ab]] output true , as expected.
PASS: [EQUAL? [[1 2 3] [1]] [[1 2 3] [1]]] output true , as expected.
PASS: [EQUAL? 0 0] output true , as expected.
PASS: [EQUALP " "] output true , as expected.
PASS: [EQUALP "true "TRUE] output true , as expected.
PASS: [EQUALP "false "FALSE] output true , as expected.
PASS: [EQUALP "HELLO "hello] output true , as expected.
PASS: [EQUALP "hello "HELLO] output true , as expected.
PASS: [EQUALP "HELLO "HELLO] output true , as expected.
PASS: [EQUALP "hello "hello] output true , as expected.
PASS: [EQUAL? :myarray :myarray] output true , as expected.
PASS: [EQUAL? :myarray :myarray] output true , as expected.
PASS: [EQUAL? {} {}] output false , as expected.
PASS: [EQUAL? {1 2 3} {1 2 3}] output false , as expected.
PASS: [EQUALP 1 1.1] output false , as expected.
PASS: [EQUALP 0 1] output false , as expected.
PASS: [EQUALP "hi "hil] output false , as expected.
PASS: [EQUALP "hil "hi] output false , as expected.
PASS: [EQUALP "true "false] output false , as expected.
PASS: [EQUALP [] "false] output false , as expected.
PASS: [EQUALP "false []] output false , as expected.
PASS: [EQUALP [1 2] [1 2 3]] output false , as expected.
PASS: [EQUALP [1 2 3] [1 2]] output false , as expected.
PASS: [EQUALP {1} [1]] output false , as expected.
PASS: [EQUALP [1] {1}] output false , as expected.
PASS: [1 = 1] output true , as expected.
PASS: [0 = 0] output true , as expected.
PASS: [3.14 = 3.14] output true , as expected.
PASS: [" = "] output true , as expected.
PASS: ["true = "TRUE] output true , as expected.
PASS: ["false = "FALSE] output true , as expected.
PASS: ["HELLO = "hello] output true , as expected.
PASS: ["hello = "HELLO] output true , as expected.
PASS: ["HELLO = "HELLO] output true , as expected.
PASS: ["hello = "hello] output true , as expected.
PASS: [["a 1 "ab] = ["a 1 "ab]] output true , as expected.
PASS: [[[1 2 3] [1]] = [[1 2 3] [1]]] output true , as expected.
PASS: [EQUALP 1e-16 0] output false , as expected.
PASS: [EQUALP -1e-16 0] output false , as expected.
PASS: [EQUALP 0 1e-16] output false , as expected.
PASS: [EQUALP 0 -1e-16] output false , as expected.
CALL: MAKE "CASEIGNOREDP LOCALEFALSE
PASS: [EQUALP "true "true] output true , as expected.
PASS: [EQUALP "false "false] output true , as expected.
PASS: [EQUALP "true "TRUE] output false , as expected.
PASS: [EQUALP "false "FALSE] output false , as expected.
PASS: [EQUALP "HELLO "HELLO] output true , as expected.
PASS: [EQUALP "hello "hello] output true , as expected.
PASS: [EQUALP "HELLO "hello] output false , as expected.
PASS: [EQUALP "hello "HELLO] output false , as expected.
PASS: [EQUALP "ýÝ "Ýý] output true , as expected.
PASS: [EQUALP "ñÑ "Ññ] output true , as expected.
PASS: [EQUALP "áÁ "Áá] output true , as expected.
PASS: [EQUALP "âÂ "Ââ] output true , as expected.
PASS: [EQUALP "ãÃ "Ãã] output true , as expected.
PASS: [EQUALP "äÄ "Ää] output true , as expected.
PASS: [EQUALP "çÇ "Çç] output true , as expected.
PASS: [EQUALP "èÈ "Èè] output true , as expected.
PASS: [EQUALP "éÉ "Éé] output true , as expected.
PASS: [EQUALP "êÊ "Êê] output true , as expected.
PASS: [EQUALP "ëË "Ëë] output true , as expected.
PASS: [EQUALP "ìÌ "Ìì] output true , as expected.
PASS: [EQUALP "íÍ "Íí] output true , as expected.
PASS: [EQUALP "îÎ "Îî] output true , as expected.
PASS: [EQUALP "ïÏ "Ïï] output true , as expected.
PASS: [EQUALP "ðÐ "Ðð] output true , as expected.
PASS: [EQUALP "ñÑ "Ññ] output true , as expected.
PASS: [EQUALP "óÓ "Óó] output true , as expected.
PASS: [EQUALP "ôÔ "Ôô] output true , as expected.
PASS: [EQUALP "õÕ "Õõ] output true , as expected.
PASS: [EQUALP "öÖ "Öö] output true , as expected.
PASS: [EQUALP "øØ "Øø] output true , as expected.
PASS: [EQUALP "ùÙ "Ùù] output true , as expected.
INFO: Running invalid instruction: [(EQUAL?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to EQUAL? .
INFO: Running invalid instruction: [(EQUAL? 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to EQUAL? .
INFO: Running invalid instruction: [(EQUAL? 1 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NOTEQUALP 1 1] output false , as expected.
PASS: [NOTEQUALP 0 0] output false , as expected.
PASS: [NOTEQUALP 3.14 3.14] output false , as expected.
PASS: [NOTEQUALP "hi "hi] output false , as expected.
PASS: [NOTEQUAL? ["a 1 "ab] ["a 1 "ab]] output false , as expected.
PASS: [NOTEQUAL? [[1 2 3] [1]] [[1 2 3] [1]]] output false , as expected.
PASS: [NOTEQUAL? 0 0] output false , as expected.
PASS: [NOTEQUALP " "] output false , as expected.
PASS: [NOTEQUALP "true "TRUE] output false , as expected.
PASS: [NOTEQUALP "false "FALSE] output false , as expected.
PASS: [NOTEQUALP "HELLO "hello] output false , as expected.
PASS: [NOTEQUALP "hello "HELLO] output false , as expected.
PASS: [NOTEQUALP "HELLO "HELLO] output false , as expected.
PASS: [NOTEQUALP "hello "hello] output false , as expected.
PASS: [NOTEQUAL? :myarray :myarray] output false , as expected.
PASS: [NOTEQUAL? :myarray :myarray] output false , as expected.
PASS: [NOTEQUAL? {} {}] output true , as expected.
PASS: [NOTEQUAL? {1 2 3} {1 2 3}] output true , as expected.
PASS: [NOTEQUALP 1 1.1] output true , as expected.
PASS: [NOTEQUALP 0 1] output true , as expected.
PASS: [NOTEQUALP "hi "hil] output true , as expected.
PASS: [NOTEQUALP "hil "hi] output true , as expected.
PASS: [NOTEQUALP "true "false] output true , as expected.
PASS: [NOTEQUALP [] "false] output true , as expected.
PASS: [NOTEQUALP "false []] output true , as expected.
PASS: [NOTEQUALP [1 2] [1 2 3]] output true , as expected.
PASS: [NOTEQUALP [1 2 3] [1 2]] output true , as expected.
PASS: [NOTEQUALP {1} [1]] output true , as expected.
PASS: [NOTEQUALP [1] {1}] output true , as expected.
PASS: [1 <> 1] output false , as expected.
PASS: [0 <> 0] output false , as expected.
PASS: [3.14 <> 3.14] output false , as expected.
PASS: [" <> "] output false , as expected.
PASS: ["true <> "TRUE] output false , as expected.
PASS: ["false <> "FALSE] output false , as expected.
PASS: ["HELLO <> "hello] output false , as expected.
PASS: ["hello <> "HELLO] output false , as expected.
PASS: ["HELLO <> "HELLO] output false , as expected.
PASS: ["hello <> "hello] output false , as expected.
PASS: [["a 1 "ab] <> ["a 1 "ab]] output false , as expected.
PASS: [[[1 2 3] [1]] <> [[1 2 3] [1]]] output false , as expected.
CALL: MAKE "CASEIGNOREDP LOCALEFALSE
PASS: [NOTEQUALP "true "true] output false , as expected.
PASS: [NOTEQUALP "false "false] output false , as expected.
PASS: [NOTEQUALP "true "TRUE] output true , as expected.
PASS: [NOTEQUALP "false "FALSE] output true , as expected.
PASS: [NOTEQUALP "HELLO "HELLO] output false , as expected.
PASS: [NOTEQUALP "hello "hello] output false , as expected.
PASS: [NOTEQUALP "HELLO "hello] output true , as expected.
PASS: [NOTEQUALP "hello "HELLO] output true , as expected.
INFO: Running invalid instruction: [(NOTEQUAL?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NOTEQUAL? .
INFO: Running invalid instruction: [(NOTEQUAL? 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NOTEQUAL? .
INFO: Running invalid instruction: [(NOTEQUAL? 1 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [EMPTYP []] output true , as expected.
PASS: [EMPTY? []] output true , as expected.
PASS: [EMPTY? [1]] output false , as expected.
PASS: [EMPTY? [0]] output false , as expected.
PASS: [EMPTY? 0] output false , as expected.
PASS: [EMPTY? "] output true , as expected.
PASS: [EMPTY? " ] output false , as expected.
PASS: [EMPTY? {}] output false , as expected.
INFO: Running invalid instruction: [(EMPTY?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to EMPTY? .
INFO: Running invalid instruction: [(EMPTY? [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NUMBERP 1] output true , as expected.
PASS: [NUMBER? 1] output true , as expected.
PASS: [NUMBER? 0] output true , as expected.
PASS: [NUMBER? -1] output true , as expected.
PASS: [NUMBER? 3.14] output true , as expected.
PASS: [NUMBER? "-1] output true , as expected.
PASS: [NUMBER? "0] output true , as expected.
PASS: [NUMBER? "1] output true , as expected.
PASS: [NUMBER? "2] output true , as expected.
PASS: [NUMBER? "3] output true , as expected.
PASS: [NUMBER? "4] output true , as expected.
PASS: [NUMBER? "5] output true , as expected.
PASS: [NUMBER? "6] output true , as expected.
PASS: [NUMBER? "7] output true , as expected.
PASS: [NUMBER? "8] output true , as expected.
PASS: [NUMBER? "9] output true , as expected.
PASS: [NUMBER? "/] output false , as expected.
PASS: [NUMBER? ":] output false , as expected.
PASS: [NUMBER? {}] output false , as expected.
PASS: [NUMBER? {2}] output false , as expected.
PASS: [NUMBER? []] output false , as expected.
PASS: [NUMBER? [1]] output false , as expected.
PASS: [NUMBER? "one] output false , as expected.
PASS: [NUMBER? "1A] output false , as expected.
PASS: [NUMBER? "A1] output false , as expected.
PASS: [NUMBER? "] output false , as expected.
PASS: [NUMBER? "Â] output false , as expected.
INFO: Running invalid instruction: [(NUMBER?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NUMBER? .
INFO: Running invalid instruction: [(NUMBER? 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [LISTP [1 2 3]] output true , as expected.
PASS: [LIST? [1 2 3]] output true , as expected.
PASS: [LIST? []] output true , as expected.
PASS: [LIST? "list] output false , as expected.
PASS: [LIST? "[1]] output false , as expected.
PASS: [LIST? 1] output false , as expected.
PASS: [LIST? 3.14] output false , as expected.
PASS: [LIST? {1}] output false , as expected.
PASS: [LIST? {}] output false , as expected.
PASS: [LIST? "] output false , as expected.
INFO: Running invalid instruction: [(LIST?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LIST? .
INFO: Running invalid instruction: [(LIST? [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [WORDP "hello] output true , as expected.
PASS: [WORD? "hello] output true , as expected.
PASS: [WORD? 123] output true , as expected.
PASS: [WORD? 3.14] output true , as expected.
PASS: [WORD? "] output true , as expected.
PASS: [WORD? "[1]] output true , as expected.
PASS: [WORD? []] output false , as expected.
PASS: [WORD? ["hello]] output false , as expected.
PASS: [WORD? {}] output false , as expected.
PASS: [WORD? {"hello}] output false , as expected.
INFO: Running invalid instruction: [(WORD?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to WORD? .
INFO: Running invalid instruction: [(WORD? [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [ARRAYP {1 2 3}] output true , as expected.
PASS: [ARRAY? {1 2 3}] output true , as expected.
PASS: [ARRAY? {}] output true , as expected.
PASS: [ARRAY? "word] output false , as expected.
PASS: [ARRAY? "{}] output false , as expected.
PASS: [ARRAY? 1] output false , as expected.
PASS: [ARRAY? 3.14] output false , as expected.
PASS: [ARRAY? [1]] output false , as expected.
PASS: [ARRAY? []] output false , as expected.
PASS: [ARRAY? "] output false , as expected.
INFO: Running invalid instruction: [(ARRAY?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARRAY? .
INFO: Running invalid instruction: [(ARRAY? {1} "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [MEMBERP 2 [1 2 3]] output true , as expected.
PASS: [MEMBER? 2 [1 2 3]] output true , as expected.
PASS: [MEMBER? 1 [1]] output true , as expected.
PASS: [MEMBER? 1 [1 1 1]] output true , as expected.
PASS: [MEMBER? 0 [1 2 3]] output false , as expected.
PASS: [MEMBER? [2] [[1] [2] [3]]] output true , as expected.
PASS: [MEMBER? 2 [[1] [2] [3]]] output false , as expected.
PASS: [MEMBER? [2] [1 2 3]] output false , as expected.
PASS: [MEMBER? 1 []] output false , as expected.
PASS: [MEMBER? 1 {1}] output true , as expected.
PASS: [MEMBER? 1 {1 1 1}] output true , as expected.
PASS: [MEMBER? 12 {11 12 13}] output true , as expected.
PASS: [MEMBER? 12 {}] output false , as expected.
PASS: [MEMBER? 1 123] output true , as expected.
PASS: [MEMBER? 4 123] output false , as expected.
PASS: [MEMBER? 23 123] output false , as expected.
PASS: [MEMBER? 1 "] output false , as expected.
PASS: [MEMBER? [1] "123] output false , as expected.
PASS: [MEMBER? " "hello] output false , as expected.
PASS: [MEMBER? " (LIST ")] output true , as expected.
PASS: [MEMBER? " :arrayofemptystring] output true , as expected.
INFO: Running invalid instruction: [(MEMBER?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MEMBER? .
INFO: Running invalid instruction: [(MEMBER? 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MEMBER? .
INFO: Running invalid instruction: [(MEMBER? 2 [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [BEFOREP "ABC "ABD] output true , as expected.
PASS: [BEFORE? "ABC "ABD] output true , as expected.
PASS: [BEFORE? "ABD "ABC] output false , as expected.
PASS: [BEFORE? "ABC "ABC] output false , as expected.
PASS: [BEFORE? "ABC "ABCD] output true , as expected.
PASS: [BEFORE? "ABCD "ABC] output false , as expected.
PASS: [BEFORE? " "A] output true , as expected.
PASS: [BEFORE? "Z "] output false , as expected.
INFO: Running invalid instruction: [(BEFORE?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BEFORE? .
INFO: Running invalid instruction: [(BEFORE? "ABC)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BEFORE? .
INFO: Running invalid instruction: [(BEFORE? "ABC [] )]
INFO: error code is 7 .
INFO: error text is BEFORE? doesn't like [] as input .
INFO: Running invalid instruction: [(BEFORE? [] "ABC)]
INFO: error code is 7 .
INFO: error text is BEFORE? doesn't like [] as input .
INFO: Running invalid instruction: [(BEFORE? "ABC "ABC "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [WORD "o "k] output ok , as expected.
PASS: [WORD "4 "2] output 42 , as expected.
PASS: [(WORD)] output  , as expected.
PASS: [(WORD "o)] output o , as expected.
PASS: [(WORD "o "k "ay)] output okay , as expected.
PASS: [(WORD " ")] output  , as expected.
PASS: [(WORD " "a ")] output a , as expected.
INFO: Running invalid instruction: [WORD [] "a]
INFO: error code is 7 .
INFO: error text is WORD doesn't like [] as input .
INFO: Running invalid instruction: [WORD "a []]
INFO: error code is 7 .
INFO: error text is WORD doesn't like [] as input .
INFO: Running invalid instruction: [WORD "a {}]
INFO: error code is 7 .
INFO: error text is WORD doesn't like {} as input .
INFO: Running invalid instruction: [WORD {} "a]
INFO: error code is 7 .
INFO: error text is WORD doesn't like {} as input .
PASS: [ASCII "a] output 97 , as expected.
PASS: [ASCII "A] output 65 , as expected.
PASS: [ASCII 1] output 49 , as expected.
PASS: [ASCII "(] output 40 , as expected.
INFO: Running invalid instruction: [(ASCII)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ASCII .
INFO: Running invalid instruction: [(ASCII "a "b)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ASCII [a]]
INFO: error code is 7 .
INFO: error text is ASCII doesn't like [a] as input .
INFO: Running invalid instruction: [ASCII {a}]
INFO: error code is 7 .
INFO: error text is ASCII doesn't like {a} as input .
INFO: Running invalid instruction: [ASCII "ab]
INFO: error code is 7 .
INFO: error text is ASCII doesn't like ab as input .
INFO: Running invalid instruction: [ASCII 1.2]
INFO: error code is 7 .
INFO: error text is ASCII doesn't like 1.2 as input .
PASS: [RAWASCII "a] output 97 , as expected.
PASS: [RAWASCII "A] output 65 , as expected.
PASS: [RAWASCII 1] output 49 , as expected.
PASS: [RAWASCII CHAR 0] output 0 , as expected.
PASS: [RAWASCII CHAR 5] output 5 , as expected.
PASS: [RAWASCII CHAR 192] output 192 , as expected.
INFO: Running invalid instruction: [(RAWASCII)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RAWASCII .
INFO: Running invalid instruction: [(RAWASCII "a "b)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RAWASCII [a]]
INFO: error code is 7 .
INFO: error text is RAWASCII doesn't like [a] as input .
INFO: Running invalid instruction: [RAWASCII {a}]
INFO: error code is 7 .
INFO: error text is RAWASCII doesn't like {a} as input .
INFO: Running invalid instruction: [RAWASCII "ab]
INFO: error code is 7 .
INFO: error text is RAWASCII doesn't like ab as input .
INFO: Running invalid instruction: [RAWASCII 1.2]
INFO: error code is 7 .
INFO: error text is RAWASCII doesn't like 1.2 as input .
PASS: [UPPERCASE "hello] output HELLO , as expected.
PASS: [UPPERCASE "HELLO] output HELLO , as expected.
PASS: [UPPERCASE "HeLlo] output HELLO , as expected.
PASS: [UPPERCASE "] output  , as expected.
PASS: [UPPERCASE 12345] output 12345 , as expected.
PASS: [UPPERCASE 12.34] output 12.34 , as expected.
PASS: [UPPERCASE "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_] output ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_ , as expected.
PASS: [UPPERCASE " `~!@#$%^&*()_+-=[]{}|\;:'",<.>/?] output  `~!@#$%^&*()_+-=[]{}|\;:'",<.>/? , as expected.
PASS: [UPPERCASE "ýÝ] output ÝÝ , as expected.
PASS: [UPPERCASE "ñÑ] output ÑÑ , as expected.
PASS: [UPPERCASE "áÁ] output ÁÁ , as expected.
PASS: [UPPERCASE "âÂ] output ÂÂ , as expected.
PASS: [UPPERCASE "ãÃ] output ÃÃ , as expected.
PASS: [UPPERCASE "äÄ] output ÄÄ , as expected.
PASS: [UPPERCASE "çÇ] output ÇÇ , as expected.
PASS: [UPPERCASE "èÈ] output ÈÈ , as expected.
PASS: [UPPERCASE "éÉ] output ÉÉ , as expected.
PASS: [UPPERCASE "êÊ] output ÊÊ , as expected.
PASS: [UPPERCASE "ëË] output ËË , as expected.
PASS: [UPPERCASE "ìÌ] output ÌÌ , as expected.
PASS: [UPPERCASE "íÍ] output ÍÍ , as expected.
PASS: [UPPERCASE "îÎ] output ÎÎ , as expected.
PASS: [UPPERCASE "ïÏ] output ÏÏ , as expected.
PASS: [UPPERCASE "ðÐ] output ÐÐ , as expected.
PASS: [UPPERCASE "ñÑ] output ÑÑ , as expected.
PASS: [UPPERCASE "óÓ] output ÓÓ , as expected.
PASS: [UPPERCASE "ôÔ] output ÔÔ , as expected.
PASS: [UPPERCASE "õÕ] output ÕÕ , as expected.
PASS: [UPPERCASE "öÖ] output ÖÖ , as expected.
PASS: [UPPERCASE "øØ] output ØØ , as expected.
PASS: [UPPERCASE "ùÙ] output ÙÙ , as expected.
INFO: Running invalid instruction: [(UPPERCASE "hello "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(UPPERCASE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to UPPERCASE .
INFO: Running invalid instruction: [UPPERCASE [1 2 3]]
INFO: error code is 7 .
INFO: error text is UPPERCASE doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [UPPERCASE {1 2 3}]
INFO: error code is 7 .
INFO: error text is UPPERCASE doesn't like {1 2 3} as input .
PASS: [LOWERCASE "hello] output hello , as expected.
PASS: [LOWERCASE "HELLO] output hello , as expected.
PASS: [LOWERCASE "HeLlo] output hello , as expected.
PASS: [LOWERCASE "] output  , as expected.
PASS: [LOWERCASE 12345] output 12345 , as expected.
PASS: [LOWERCASE 12.34] output 12.34 , as expected.
PASS: [LOWERCASE "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_] output abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789_ , as expected.
PASS: [LOWERCASE " `~!@#$%^&*()_+-=[]{}|\;:'",<.>/?] output  `~!@#$%^&*()_+-=[]{}|\;:'",<.>/? , as expected.
PASS: [LOWERCASE "ýÝ] output ýý , as expected.
PASS: [LOWERCASE "ñÑ] output ññ , as expected.
PASS: [LOWERCASE "áÁ] output áá , as expected.
PASS: [LOWERCASE "âÂ] output ââ , as expected.
PASS: [LOWERCASE "ãÃ] output ãã , as expected.
PASS: [LOWERCASE "äÄ] output ää , as expected.
PASS: [LOWERCASE "çÇ] output çç , as expected.
PASS: [LOWERCASE "èÈ] output èè , as expected.
PASS: [LOWERCASE "éÉ] output éé , as expected.
PASS: [LOWERCASE "êÊ] output êê , as expected.
PASS: [LOWERCASE "ëË] output ëë , as expected.
PASS: [LOWERCASE "ìÌ] output ìì , as expected.
PASS: [LOWERCASE "íÍ] output íí , as expected.
PASS: [LOWERCASE "îÎ] output îî , as expected.
PASS: [LOWERCASE "ïÏ] output ïï , as expected.
PASS: [LOWERCASE "ðÐ] output ðð , as expected.
PASS: [LOWERCASE "ñÑ] output ññ , as expected.
PASS: [LOWERCASE "óÓ] output óó , as expected.
PASS: [LOWERCASE "ôÔ] output ôô , as expected.
PASS: [LOWERCASE "õÕ] output õõ , as expected.
PASS: [LOWERCASE "öÖ] output öö , as expected.
PASS: [LOWERCASE "øØ] output øø , as expected.
PASS: [LOWERCASE "ùÙ] output ùù , as expected.
INFO: Running invalid instruction: [(LOWERCASE "hello "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(LOWERCASE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOWERCASE .
INFO: Running invalid instruction: [LOWERCASE [1 2 3]]
INFO: error code is 7 .
INFO: error text is LOWERCASE doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [LOWERCASE {1 2 3}]
INFO: error code is 7 .
INFO: error text is LOWERCASE doesn't like {1 2 3} as input .
PASS: [THING "myvariable] output 1234 , as expected.
PASS: [THING "myvariable] output [1 2 3] , as expected.
PASS: [THING 1234] output 4321 , as expected.
INFO: Running invalid instruction: [(THING)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to THING .
INFO: Running invalid instruction: [(THING "myvariable "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [THING "unboundvariable]
PASS: error code is 11 , as expected.
INFO: error text is unboundvariable has no value .
INFO: Running invalid instruction: [THING [1]]
PASS: error code is 7 , as expected.
INFO: error text is THING doesn't like [1] as input .
INFO: Running invalid instruction: [THING {1}]
PASS: error code is 7 , as expected.
INFO: error text is THING doesn't like {1} as input .
PASS: [ITEM 1 [a b c]] output a , as expected.
PASS: [ITEM 2 [a b c]] output b , as expected.
PASS: [ITEM 3 [a b c]] output c , as expected.
PASS: [ITEM 3.0 [a b c]] output c , as expected.
PASS: [ITEM 1 "abc] output a , as expected.
PASS: [ITEM 2 "abc] output b , as expected.
PASS: [ITEM 3 "abc] output c , as expected.
PASS: [ITEM 3.0 "abc] output c , as expected.
PASS: [ITEM 1 {a b c}] output a , as expected.
PASS: [ITEM 2 {a b c}] output b , as expected.
PASS: [ITEM 3 {a b c}] output c , as expected.
PASS: [ITEM 3.0 {a b c}] output c , as expected.
INFO: Running invalid instruction: [(ITEM 12)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ITEM .
INFO: Running invalid instruction: [(ITEM 1 [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ITEM -1 [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like -1 as input .
INFO: Running invalid instruction: [ITEM 0 [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 0 as input .
INFO: Running invalid instruction: [ITEM 4 [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 4 as input .
INFO: Running invalid instruction: [ITEM 1.5 [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 1.5 as input .
INFO: Running invalid instruction: [ITEM 1 []]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like [] as input .
INFO: Running invalid instruction: [ITEM [] [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like [] as input .
INFO: Running invalid instruction: [ITEM {0} [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like {0} as input .
INFO: Running invalid instruction: [ITEM "ten [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like ten as input .
INFO: Running invalid instruction: [ITEM -1 "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like -1 as input .
INFO: Running invalid instruction: [ITEM 0 "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 0 as input .
INFO: Running invalid instruction: [ITEM 4 "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 4 as input .
INFO: Running invalid instruction: [ITEM 1.5 "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 1.5 as input .
INFO: Running invalid instruction: [ITEM 1 "]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like  as input .
INFO: Running invalid instruction: [ITEM [] "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like [] as input .
INFO: Running invalid instruction: [ITEM {0} "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like {0} as input .
INFO: Running invalid instruction: [ITEM "ten "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like ten as input .
INFO: Running invalid instruction: [ITEM -1 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like -1 as input .
INFO: Running invalid instruction: [ITEM 0 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 0 as input .
INFO: Running invalid instruction: [ITEM 4 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 4 as input .
INFO: Running invalid instruction: [ITEM 1.5 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 1.5 as input .
INFO: Running invalid instruction: [ITEM 1 {}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 1 as input .
INFO: Running invalid instruction: [ITEM [] {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like [] as input .
INFO: Running invalid instruction: [ITEM {0} {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like {0} as input .
INFO: Running invalid instruction: [ITEM "ten {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like ten as input .
CALL: MAKE "ERRACT [ITEMTEST.OUTPUT.2]
PASS: [ITEM [4] [a b c]] output b , as expected.
PASS: [ITEM {4} [a b c]] output b , as expected.
PASS: [ITEM 0.5 [a b c]] output b , as expected.
PASS: [ITEM 0 [a b c]] output b , as expected.
PASS: [ITEM 4 [a b c]] output b , as expected.
PASS: [ITEM 0 "abc] output b , as expected.
PASS: [ITEM 4 "abc] output b , as expected.
PASS: [ITEM -1 {a b c}] output c , as expected.
PASS: [ITEM 3 {a b c}] output c , as expected.
PASS: [FIRST [1 2 3]] output 1 , as expected.
PASS: [FIRST [1]] output 1 , as expected.
PASS: [FIRST {a b c}] output 1 , as expected.
PASS: [FIRST {a b c}] output 2 , as expected.
PASS: [FIRST "hello] output h , as expected.
PASS: [FIRST "h] output h , as expected.
INFO: Running invalid instruction: [(FIRST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FIRST .
INFO: Running invalid instruction: [(FIRST "word "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FIRST []]
INFO: error code is 7 .
INFO: error text is FIRST doesn't like [] as input .
INFO: Running invalid instruction: [FIRST "]
INFO: error code is 7 .
INFO: error text is FIRST doesn't like  as input .
INFO: Running invalid instruction: [FIRST {}]
INFO: error code is 7 .
INFO: error text is FIRST doesn't like {} as input .
PASS: [FIRSTS [[1 2 3]]] output [1] , as expected.
PASS: [FIRSTS [[1 2 3] [a b c]]] output [1 a] , as expected.
PASS: [FIRSTS [[1 2 3] hello [1] h]] output [1 h 1 h] , as expected.
PASS: [FIRSTS []] output [] , as expected.
INFO: Running invalid instruction: [(FIRSTS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FIRSTS .
INFO: Running invalid instruction: [(FIRSTS [[1 2 3]] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FIRSTS (LIST [1 2 3] [] [1 2 3] )]
INFO: error code is 7 .
INFO: error text is FIRSTS doesn't like [] as input .
INFO: Running invalid instruction: [FIRSTS (LIST [1 2 3] " [1 2 3] )]
INFO: error code is 7 .
INFO: error text is FIRSTS doesn't like  as input .
INFO: Running invalid instruction: [FIRSTS (LIST [1 2 3] {} [1 2 3] )]
INFO: error code is 7 .
INFO: error text is FIRSTS doesn't like {} as input .
PASS: [BF [1 2 3]] output [2 3] , as expected.
PASS: [BUTFIRST [1 2 3]] output [2 3] , as expected.
PASS: [BUTFIRST [1]] output [] , as expected.
PASS: [BUTFIRST "hello] output ello , as expected.
PASS: [BUTFIRST "h] output  , as expected.
INFO: Running invalid instruction: [(BUTFIRST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BUTFIRST .
INFO: Running invalid instruction: [(BUTFIRST "word "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BUTFIRST []]
INFO: error code is 7 .
INFO: error text is BUTFIRST doesn't like [] as input .
INFO: Running invalid instruction: [BUTFIRST "]
INFO: error code is 7 .
INFO: error text is BUTFIRST doesn't like  as input .
INFO: Running invalid instruction: [BUTFIRST {1}]
INFO: error code is 7 .
INFO: error text is BUTFIRST doesn't like {1} as input .
PASS: [BFS [[1 2 3]]] output [[2 3]] , as expected.
PASS: [BUTFIRSTS [[1 2 3]]] output [[2 3]] , as expected.
PASS: [BUTFIRSTS [[1 2 3] [a b c]]] output [[2 3] [b c]] , as expected.
PASS: [BUTFIRSTS [[1 2 3] hello [1] h]] output [[2 3] ello [] ] , as expected.
PASS: [BUTFIRSTS []] output [] , as expected.
INFO: Running invalid instruction: [(BUTFIRSTS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BUTFIRSTS .
INFO: Running invalid instruction: [(BUTFIRSTS [[1 2 3]] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BUTFIRSTS (LIST [1 2 3] [] [1 2 3] )]
INFO: error code is 7 .
INFO: error text is BUTFIRSTS doesn't like [] as input .
INFO: Running invalid instruction: [BUTFIRSTS (LIST [1 2 3] " [1 2 3] )]
INFO: error code is 7 .
INFO: error text is BUTFIRSTS doesn't like  as input .
INFO: Running invalid instruction: [BUTFIRSTS (LIST [1 2 3] {1} [1 2 3] )]
INFO: error code is 7 .
INFO: error text is BUTFIRSTS doesn't like {1} as input .
PASS: [BL [1 2 3]] output [1 2] , as expected.
PASS: [BUTLAST [1 2 3]] output [1 2] , as expected.
PASS: [BUTLAST [1]] output [] , as expected.
PASS: [BUTLAST "hello] output hell , as expected.
PASS: [BUTLAST "h] output  , as expected.
INFO: Running invalid instruction: [(BUTLAST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BUTLAST .
INFO: Running invalid instruction: [(BUTLAST "word "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BUTLAST []]
INFO: error code is 7 .
INFO: error text is BUTLAST doesn't like [] as input .
INFO: Running invalid instruction: [BUTLAST "]
INFO: error code is 7 .
INFO: error text is BUTLAST doesn't like  as input .
INFO: Running invalid instruction: [BUTLAST {1}]
INFO: error code is 7 .
INFO: error text is BUTLAST doesn't like {1} as input .
PASS: [LAST [1 2 3]] output 3 , as expected.
PASS: [LAST [1 2]] output 2 , as expected.
PASS: [LAST [1]] output 1 , as expected.
PASS: [LAST "hello] output o , as expected.
PASS: [LAST "h] output h , as expected.
INFO: Running invalid instruction: [(LAST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LAST .
INFO: Running invalid instruction: [(LAST "word "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LAST []]
INFO: error code is 7 .
INFO: error text is LAST doesn't like [] as input .
INFO: Running invalid instruction: [LAST "]
INFO: error code is 7 .
INFO: error text is LAST doesn't like  as input .
INFO: Running invalid instruction: [LAST {1}]
INFO: error code is 7 .
INFO: error text is LAST doesn't like {1} as input .
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM 1 :myarray] output [] , as expected.
PASS: [ITEM 2 :myarray] output [] , as expected.
PASS: [ITEM 3 :myarray] output [] , as expected.
PASS: [ITEM 4 :myarray] output [] , as expected.
PASS: [ITEM 1 :myarray] output 42 , as expected.
PASS: [ITEM 2 :myarray] output hi , as expected.
PASS: [ITEM 3 :myarray] output [list] , as expected.
PASS: [ITEM 1 :myarray] output 1 , as expected.
PASS: [ITEM 2 :myarray] output 2 , as expected.
PASS: [ITEM 3 :myarray] output 3 , as expected.
PASS: [ITEM 4 :myarray] output 4 , as expected.
PASS: [COUNT :newarray] output 4 , as expected.
PASS: [ITEM 1 :newarray] output 1 , as expected.
PASS: [ITEM 2 :newarray] output 2 , as expected.
PASS: [ITEM 3 :newarray] output 3 , as expected.
PASS: [ITEM 4 :newarray] output 4 , as expected.
PASS: [COUNT :myarray] output 3 , as expected.
PASS: [ITEM 0 :myarray] output [] , as expected.
PASS: [ITEM 1 :myarray] output [] , as expected.
PASS: [ITEM 2 :myarray] output [] , as expected.
PASS: [ITEM 0 :myarray] output 0 , as expected.
PASS: [ITEM 1 :myarray] output 1 , as expected.
PASS: [ITEM 2 :myarray] output 2 , as expected.
PASS: [ITEM 0 :myarray] output [0] , as expected.
PASS: [ITEM 1 :myarray] output [1] , as expected.
PASS: [ITEM 2 :myarray] output [2] , as expected.
PASS: [COUNT :myarray] output 3 , as expected.
PASS: [ITEM -100 :myarray] output 0 , as expected.
PASS: [ITEM -99 :myarray] output 1 , as expected.
PASS: [ITEM -98 :myarray] output 2 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM 2 :myarray] output 1 , as expected.
PASS: [ITEM 3 :myarray] output 2 , as expected.
PASS: [ITEM 4 :myarray] output 3 , as expected.
PASS: [ITEM 5 :myarray] output 4 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM -2 :myarray] output 1 , as expected.
PASS: [ITEM -1 :myarray] output 2 , as expected.
PASS: [ITEM 0 :myarray] output 3 , as expected.
PASS: [ITEM 1 :myarray] output 4 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM 0 :myarray] output 1 , as expected.
PASS: [ITEM 1 :myarray] output 2 , as expected.
PASS: [ITEM 2 :myarray] output 3 , as expected.
PASS: [ITEM 3 :myarray] output 4 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM -100 :myarray] output 1 , as expected.
PASS: [ITEM -99 :myarray] output 2 , as expected.
PASS: [ITEM -98 :myarray] output 3 , as expected.
PASS: [ITEM -97 :myarray] output 4 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM 12345 :myarray] output 1 , as expected.
PASS: [ITEM 12346 :myarray] output 2 , as expected.
PASS: [ITEM 12347 :myarray] output 3 , as expected.
PASS: [ITEM 12348 :myarray] output 4 , as expected.
INFO: Running invalid instruction: [MAKE "myarray {1 2 3 4} e10]
PASS: error code is 13 , as expected.
PASS: error text is I don't know how to e10 , as expected.
INFO: Running invalid instruction: [MAKE "myarray {1 2 3 4} .23 SHOW 1]
PASS: error code is 9 , as expected.
PASS: error text is You don't say what to do with 0.23 , as expected.
INFO: Running invalid instruction: [ARRAY -1]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like -1 as input .
INFO: Running invalid instruction: [ARRAY 1.23]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like 1.23 as input .
INFO: Running invalid instruction: [ARRAY "two]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like two as input .
INFO: Running invalid instruction: [ARRAY {}]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like {} as input .
INFO: Running invalid instruction: [ARRAY []]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like [] as input .
INFO: Running invalid instruction: [(ARRAY 5 "origin)]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like origin as input .
INFO: Running invalid instruction: [(ARRAY 5 1.23)]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like 1.23 as input .
INFO: Running invalid instruction: [(ARRAY 5 {5} )]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like {5} as input .
INFO: Running invalid instruction: [(ARRAY 5 [5] )]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like [5] as input .
INFO: Running invalid instruction: [ARRAY 2000000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Creating an empty array (regression test for bug #1349374)
INFO: Running invalid instruction: [(SETITEM)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETITEM .
INFO: Running invalid instruction: [(SETITEM 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETITEM .
INFO: Running invalid instruction: [(SETITEM 1 {1 2 3} )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETITEM .
INFO: Running invalid instruction: [(SETITEM 1 {1 2 3} "value "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETITEM "one {1 2 3} "value]
INFO: error code is 7 .
INFO: error text is SETITEM doesn't like one as input .
INFO: Running invalid instruction: [SETITEM 1 [1 2 3] "value]
INFO: error code is 7 .
INFO: error text is SETITEM doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [SETITEM 1 "string "value]
INFO: error code is 7 .
INFO: error text is SETITEM doesn't like string as input .
INFO: Running invalid instruction: [SETITEM 5 {1} "value]
INFO: error code is 4 .
INFO: error text is SETITEM doesn't like 5 as input .
INFO: Running invalid instruction: [SETITEM 1 :myarray :myarray]
INFO: error code is 7 .
INFO: error text is SETITEM doesn't like {1 2 3} as input .
CALL: MAKE "testqueue []
CALL: QUEUE "testqueue 1
PASS: [:testqueue] output [1] , as expected.
CALL: QUEUE "testqueue 2
PASS: [:testqueue] output [1 2] , as expected.
PASS: [DEQUEUE "testqueue] output 1 , as expected.
PASS: [:testqueue] output [2] , as expected.
PASS: [DEQUEUE "testqueue] output 2 , as expected.
PASS: [:testqueue] output [] , as expected.
CALL: QUEUE "testqueue :testqueue
PASS: [:testqueue] output [[]] , as expected.
PASS: [DEQUEUE "testqueue] output [] , as expected.
PASS: [:testqueue] output [] , as expected.
INFO: Running invalid instruction: [(DEQUEUE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DEQUEUE .
INFO: Running invalid instruction: [(DEQUEUE "samplequeue "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(DEQUEUE {1 2 3} )]
INFO: error code is 7 .
INFO: error text is thing doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(DEQUEUE [1 2 3] )]
INFO: error code is 7 .
INFO: error text is thing doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(DEQUEUE "queuetest.doesnotexist)]
PASS: error code is 11 , as expected.
INFO: error text is queuetest.doesnotexist has no value .
INFO: Running invalid instruction: [(DEQUEUE "samplequeue)]
INFO: error code is 7 .
INFO: error text is first doesn't like [] as input .
INFO: Running invalid instruction: [(QUEUE "samplequeue)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to QUEUE .
INFO: Running invalid instruction: [(QUEUE "samplequeue 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(QUEUE {1 2 3} 1)]
INFO: error code is 7 .
INFO: error text is thing doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(QUEUE [1 2 3] 1)]
INFO: error code is 7 .
INFO: error text is thing doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(QUEUE "queuetest.doesnotexist 1)]
PASS: error code is 11 , as expected.
INFO: error text is queuetest.doesnotexist has no value .
CALL: MAKE "teststack []
CALL: PUSH "teststack 1
PASS: [:teststack] output [1] , as expected.
CALL: PUSH "teststack 2
PASS: [:teststack] output [2 1] , as expected.
PASS: [POP "teststack] output 2 , as expected.
PASS: [:teststack] output [1] , as expected.
PASS: [POP "teststack] output 1 , as expected.
PASS: [:teststack] output [] , as expected.
CALL: PUSH "teststack :teststack
PASS: [:teststack] output [[]] , as expected.
PASS: [POP "teststack] output [] , as expected.
PASS: [:teststack] output [] , as expected.
INFO: Running invalid instruction: [(POP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POP .
INFO: Running invalid instruction: [(POP "samplestack "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(POP {1 2 3} )]
INFO: error code is 7 .
INFO: error text is thing doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(POP [1 2 3] )]
INFO: error code is 7 .
INFO: error text is thing doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(POP "stacktest.doesnotexist)]
PASS: error code is 11 , as expected.
INFO: error text is stacktest.doesnotexist has no value .
INFO: Running invalid instruction: [(POP "samplestack)]
INFO: error code is 11 .
INFO: error text is samplestack has no value .
INFO: Running invalid instruction: [(PUSH "samplestack)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PUSH .
INFO: Running invalid instruction: [(PUSH "samplestack 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(PUSH {1 2 3} 1)]
INFO: error code is 7 .
INFO: error text is thing doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(PUSH [1 2 3] 1)]
INFO: error code is 7 .
INFO: error text is thing doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(PUSH "stacktest.doesnotexist 1)]
PASS: error code is 11 , as expected.
INFO: error text is stacktest.doesnotexist has no value .
PASS: [COMBINE "o "k] output ok , as expected.
PASS: [COMBINE "4 "2] output 42 , as expected.
PASS: [COMBINE "o []] output [o] , as expected.
PASS: [COMBINE "1 [2 3]] output [1 2 3] , as expected.
PASS: [COMBINE [] []] output [[]] , as expected.
INFO: Running invalid instruction: [(COMBINE "a)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to COMBINE .
INFO: Running invalid instruction: [(COMBINE "a "b "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [COMBINE [] "a]
INFO: error code is 7 .
INFO: error text is word doesn't like [] as input .
INFO: Running invalid instruction: [COMBINE {} "a]
INFO: error code is 7 .
INFO: error text is word doesn't like {} as input .
INFO: Running invalid instruction: [COMBINE "a {}]
INFO: error code is 7 .
INFO: error text is fput doesn't like {} as input .
PASS: [ARRAYP LISTTOARRAY [a b c]] output true , as expected.
PASS: [COUNT LISTTOARRAY [a b c]] output 3 , as expected.
PASS: [ITEM 1 LISTTOARRAY [a b c]] output a , as expected.
PASS: [ITEM 2 LISTTOARRAY [a b c]] output b , as expected.
PASS: [ITEM 3 LISTTOARRAY [a b c]] output c , as expected.
PASS: [ARRAYP LISTTOARRAY []] output true , as expected.
PASS: [COUNT LISTTOARRAY []] output 0 , as expected.
PASS: [ARRAYP (LISTTOARRAY [a b c] 0)] output true , as expected.
PASS: [COUNT (LISTTOARRAY [a b c] 0)] output 3 , as expected.
PASS: [ITEM 0 (LISTTOARRAY [a b c] 0)] output a , as expected.
PASS: [ITEM 1 (LISTTOARRAY [a b c] 0)] output b , as expected.
PASS: [ITEM 2 (LISTTOARRAY [a b c] 0)] output c , as expected.
PASS: [ARRAYP (LISTTOARRAY [a b c] -5)] output true , as expected.
PASS: [COUNT (LISTTOARRAY [a b c] -5)] output 3 , as expected.
PASS: [ITEM -5 (LISTTOARRAY [a b c] -5)] output a , as expected.
PASS: [ITEM -4 (LISTTOARRAY [a b c] -5)] output b , as expected.
PASS: [ITEM -3 (LISTTOARRAY [a b c] -5)] output c , as expected.
INFO: Running invalid instruction: [(LISTTOARRAY)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LISTTOARRAY .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LISTTOARRAY {a b c}]
PASS: error code is 7 , as expected.
INFO: error text is bf doesn't like {a b c} as input .
INFO: Running invalid instruction: [LISTTOARRAY "abc]
FAIL: Running [LISTTOARRAY "abc] did not throw an error.
INFO: Running invalid instruction: [LISTTOARRAY 123]
FAIL: Running [LISTTOARRAY 123] did not throw an error.
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] 10.5 )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like 10.5 as input .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] "ten )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like ten as input .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] [] )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like [] as input .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] [1 2 3] )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] {1 2 3} )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like {1 2 3} as input .
PASS: [REVERSE "abc] output cba , as expected.
PASS: [REVERSE "a] output a , as expected.
PASS: [REVERSE "] output  , as expected.
PASS: [REVERSE 123] output 321 , as expected.
PASS: [REVERSE 12.34] output 43.21 , as expected.
PASS: [REVERSE 1e5] output 000001 , as expected.
PASS: [REVERSE [1 2 3]] output [3 2 1] , as expected.
PASS: [REVERSE [1]] output [1] , as expected.
PASS: [REVERSE []] output [] , as expected.
INFO: Running invalid instruction: [(REVERSE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REVERSE .
INFO: Running invalid instruction: [(REVERSE [1 2 3] [4 5 6] )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REVERSE {1 2 3}]
INFO: error code is 7 .
INFO: error text is bf doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [REVERSE {}]
INFO: error code is 7 .
INFO: error text is bf doesn't like {} as input .
PASS: [REMOVE "b [a b c b]] output [a c] , as expected.
PASS: [REMOVE "e "Hello] output Hllo , as expected.
PASS: [REMOVE "ab [ab cd ef]] output [cd ef] , as expected.
PASS: [REMOVE "ab "ababab] output ababab , as expected.
PASS: [REMOVE "a "aaaa] output  , as expected.
PASS: [REMOVE "a [a a a]] output [] , as expected.
PASS: [REMOVE "a "] output  , as expected.
PASS: [REMOVE 2 []] output [] , as expected.
PASS: [REMOVE " "abc] output abc , as expected.
PASS: [REMOVE [] [a [] b]] output [a b] , as expected.
PASS: [REMOVE "z [a b c d e]] output [a b c d e] , as expected.
PASS: [REMOVE "z "abcde] output abcde , as expected.
PASS: [REMOVE :myarray (LIST :myarray "a "b "c :myarray)] output [a b c] , as expected.
PASS: [REMOVE :myarray "abc] output abc , as expected.
INFO: Running invalid instruction: [(REMOVE "a)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMOVE .
INFO: Running invalid instruction: [(REMOVE "a "abc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REMOVE "1 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is bf doesn't like {1 2 3} as input .
PASS: [REMDUP [a b c c b]] output [a c b] , as expected.
PASS: [REMDUP "Hello] output Helo , as expected.
PASS: [REMDUP [q w e r T y]] output [q w e r T y] , as expected.
PASS: [REMDUP "qwerTy] output qwerTy , as expected.
PASS: [REMDUP [ab ac ad ae af]] output [ab ac ad ae af] , as expected.
PASS: [REMDUP []] output [] , as expected.
PASS: [REMDUP "] output  , as expected.
PASS: [REMDUP [abc abc abc abc abc]] output [abc] , as expected.
PASS: [REMDUP "aaaaaaaaaaaaaaaaaaa] output a , as expected.
PASS: [REMDUP [[a] [a] a b [a] [a] c [a]]] output [a b c [a]] , as expected.
INFO: Running invalid instruction: [(REMDUP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMDUP .
INFO: Running invalid instruction: [(REMDUP [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REMDUP {1 2 3}]
INFO: error code is 7 .
INFO: error text is bf doesn't like {1 2 3} as input .
PASS: [(OR)] output false , as expected.
PASS: [(OR "true)] output true , as expected.
PASS: [(OR "false)] output false , as expected.
PASS: [(OR "false "false)] output false , as expected.
PASS: [(OR "true "false)] output true , as expected.
PASS: [(OR "false "true)] output true , as expected.
PASS: [(OR "true "true)] output true , as expected.
PASS: [(OR "false "FALSE "false "FALSE)] output false , as expected.
PASS: [(OR "false "FALSE "false "TRUE)] output true , as expected.
INFO: Running invalid instruction: [(OR 1)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 1 as input .
INFO: Running invalid instruction: [(OR 0)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 0 as input .
INFO: Running invalid instruction: [(OR "truex)]
INFO: error code is 7 .
INFO: error text is OR doesn't like truex as input .
INFO: Running invalid instruction: [(OR "falsex)]
INFO: error code is 7 .
INFO: error text is OR doesn't like falsex as input .
INFO: Running invalid instruction: [(OR "true 1)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 1 as input .
INFO: Running invalid instruction: [(OR 1 "true)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 1 as input .
INFO: Running invalid instruction: [(OR "false 0)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 0 as input .
INFO: Running invalid instruction: [(OR 0 "false)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 0 as input .
PASS: [(AND)] output true , as expected.
PASS: [(AND "true)] output true , as expected.
PASS: [(AND "false)] output false , as expected.
PASS: [(AND "false "false)] output false , as expected.
PASS: [(AND "true "false)] output false , as expected.
PASS: [(AND "false "true)] output false , as expected.
PASS: [(AND "true "true)] output true , as expected.
PASS: [(AND "TRUE "true "TRUE "false)] output false , as expected.
PASS: [(AND "TRUE "true "TRUE "true)] output true , as expected.
INFO: Running invalid instruction: [(AND 1)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 1 as input .
INFO: Running invalid instruction: [(AND 0)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 0 as input .
INFO: Running invalid instruction: [(AND "truex)]
INFO: error code is 7 .
INFO: error text is AND doesn't like truex as input .
INFO: Running invalid instruction: [(AND "falsex)]
INFO: error code is 7 .
INFO: error text is AND doesn't like falsex as input .
INFO: Running invalid instruction: [(AND "true 1)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 1 as input .
INFO: Running invalid instruction: [(AND 1 "true)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 1 as input .
INFO: Running invalid instruction: [(AND "false 0)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 0 as input .
INFO: Running invalid instruction: [(AND 0 "false)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 0 as input .
PASS: [(NOT "true)] output false , as expected.
PASS: [(NOT "false)] output true , as expected.
INFO: Running invalid instruction: [(NOT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NOT .
INFO: Running invalid instruction: [(NOT 0)]
INFO: error code is 7 .
INFO: error text is NOT doesn't like 0 as input .
INFO: Running invalid instruction: [(NOT "truex)]
INFO: error code is 7 .
INFO: error text is NOT doesn't like truex as input .
INFO: Running invalid instruction: [(NOT "true "true)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [APPLY "SUM [123]] output 123 , as expected.
PASS: [APPLY "SUM [100 20 3]] output 123 , as expected.
PASS: [APPLY "APPLYTEST.NONPRIMITIVE [120 3]] output 123 , as expected.
CALL: ERASE "ARRAYTOLIST
PASS: [APPLY "ARRAYTOLIST [{1 2 3}]] output [1 2 3] , as expected.
CALL: ERASE "procedureinworkingdirectory
PASS: [APPLY "procedureinworkingdirectory []] output 123 , as expected.
CALL: APPLY "APPLYTEST.NOOUTPUT []
PASS: [APPLY [1] []] output 1 , as expected.
PASS: [APPLY "APPLY [SUM [100 20 3]]] output 123 , as expected.
INFO: Running invalid instruction: [(APPLY "SUM)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to APPLY .
INFO: Running invalid instruction: [(APPLY "SUM [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [APPLY "NONEXISTENT [1 2 3]]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to NONEXISTENT .
INFO: Running invalid instruction: [APPLY "TO []]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to TO .
INFO: Running invalid instruction: [APPLY 1 []]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to 1 .
INFO: Running invalid instruction: [APPLY {1 2 3} [1 2 3]]
INFO: error code is 32 .
INFO: error text is APPLY doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [APPLY [1 2 3] [1 2 3]]
INFO: error code is 9 .
INFO: error text is You don't say what to do with 1 .
INFO: Running invalid instruction: [APPLY "SUM {1 2 3}]
INFO: error code is 32 .
INFO: error text is APPLY doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [APPLY "APPLYTEST.NONPRIMITIVE [1]]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to APPLYTEST.NONPRIMITIVE .
INFO: Running invalid instruction: [APPLY "APPLYTEST.NONPRIMITIVE [1 2 3]]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [APPLY [[A] IGNORE :A] []]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to [A] IGNORE :A .
INFO: Running invalid instruction: [APPLY [[A] IGNORE :A] [1 2]]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [APPLY [[A] [IGNORE :A]] []]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to [A] [IGNORE :A] .
INFO: Running invalid instruction: [APPLY [[A] [IGNORE :A]] [1 2]]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [APPLY [IGNORE ?2] [1]]
INFO: error code is 4 .
INFO: error text is ? doesn't like 2 as input .
CALL: APPLY [] [1 2 3 4 5]
INFO: Running invalid instruction: [SHOW ?]
FAIL: Running [SHOW ?] did not throw an error.
PASS: [APPLYTEST.APPLYOUTPUT] output 3 , as expected.
PASS: [APPLY [APPLY [IGNORE ?1] ? ?] [[1 2 3]]] output [1 2 3] , as expected.
CALL: MAKE "lambda.function.ran 0
CALL: APPLY [[] MAKE "lambda.function.ran 1] []
PASS: [:lambda.function.ran] output 1 , as expected.
CALL: MAKE "lambda.function.ran 0
CALL: APPLY [[A] MAKE "lambda.function.ran :A] [1]
PASS: [:lambda.function.ran] output 1 , as expected.
PASS: [APPLY [[A] SUM 1 :A] [2]] output 3 , as expected.
PASS: [NAME? "ignored] output true , as expected.
PASS: [:input] output 6 , as expected.
PASS: [NAME? "ignored] output false , as expected.
PASS: [:input.before] output 5 , as expected.
CALL: APPLY [[] []] []
CALL: MAKE "lambda.function.ran 0
CALL: APPLY [[] [MAKE "lambda.function.ran 1]] []
PASS: [:lambda.function.ran] output 1 , as expected.
CALL: MAKE "lambda.function.ran 0
CALL: APPLY [[A] [MAKE "lambda.function.ran :A]] [1]
PASS: [:lambda.function.ran] output 1 , as expected.
CALL: MAKE "lambda.function.ran "0
CALL: APPLY [[A] [] [MAKE "lambda.function.ran :A] []] [1]
PASS: [:lambda.function.ran] output 1 , as expected.
PASS: [APPLY [[A] [OUTPUT SUM 1 :A]] [2]] output 3 , as expected.
PASS: [NAME? "ignored] output true , as expected.
PASS: [:input] output 6 , as expected.
PASS: [NAME? "ignored] output false , as expected.
PASS: [:input.before] output 5 , as expected.
CALL: MAKE "lambda.function.ran "false
CALL: APPLY [MAKE "lambda.function.ran "true] []
PASS: [:lambda.function.ran] output true , as expected.
CALL: MAKE "lambda.function.ran "false
CALL: APPLY [MAKE "lambda.function.ran ?] [true]
PASS: [:lambda.function.ran] output true , as expected.
CALL: MAKE "lambda.function.ran "false
CALL: APPLY [APPLY [MAKE "lambda.function.ran ?] ?] [[true]]
PASS: [:lambda.function.ran] output true , as expected.
PASS: [APPLY [SUM 1 ?] [2]] output 3 , as expected.
PASS: [APPLY [IGNORE APPLY [1] [BAD] ?] [GOOD]] output GOOD , as expected.
CALL: MAKE "list []
CALL: REPEAT 5 [MAKE "list LPUT REPCOUNT :list]
PASS: [:list] output [1 2 3 4 5] , as expected.
CALL: REPEAT 0 [REPORTTESTFAILED [REPEAT 0 executed the body]]
CALL: MAKE "list []
CALL: REPEAT 2 [MAKE "list LPUT "X :list REPEAT 3 [MAKE "list LPUT "Y :list]]
PASS: [:list] output [X Y Y Y X Y Y Y] , as expected.
CALL: REPEATTEST.STOPINREPEAT
PASS: [REPEATTEST.OUTPUTINREPEAT] output 50 , as expected.
INFO: Running invalid instruction: [REPEATTEST.ERRORINREPEAT]
PASS: error code is 21 , as expected.
INFO: error text is Throw "Error .
INFO: Running invalid instruction: [(REPEAT 100)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REPEAT .
INFO: Running invalid instruction: [(REPEAT 100 [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REPEAT "word []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like word as input .
INFO: Running invalid instruction: [REPEAT [1] []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like [1] as input .
INFO: Running invalid instruction: [REPEAT {1} []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like {1} as input .
INFO: Running invalid instruction: [REPEAT 12.3 []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like 12.3 as input .
INFO: Running invalid instruction: [REPEAT -1 []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like -1 as input .
INFO: Running invalid instruction: [REPEAT 0 {}]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like {} as input .
CALL: FOREVERTEST.STOPINFOREVER
PASS: [FOREVERTEST.OUTPUTINFOREVER] output [1 2 3 4 5] , as expected.
INFO: Running invalid instruction: [FOREVERTEST.ERRORINFOREVER]
PASS: error code is 21 , as expected.
INFO: error text is Throw "Error .
INFO: Running invalid instruction: [FOREVER [FOREVER [IF REPCOUNT = 100 [THROW "ERROR]]]]
PASS: error code is 21 , as expected.
INFO: error text is Throw "Error .
INFO: Running invalid instruction: [(FOREVER)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FOREVER .
INFO: Running invalid instruction: [(FOREVER [FORWARD 1] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FOREVER {}]
INFO: error code is 7 .
INFO: error text is FOREVER doesn't like {} as input .
INFO: Running invalid instruction: [FOREVER 100]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with 100 .
PASS: [REPCOUNT] output -1 , as expected.
PASS: [REPCOUNT] output -1 , as expected.
CALL: MAKE "list []
CALL: REPEAT 2 [MAKE "list LPUT REPCOUNT :list REPEAT 3 [MAKE "list LPUT REPCOUNT :list]]
PASS: [:list] output [1 1 2 3 2 1 2 3] , as expected.
PASS: [COUNT :word] output 1000 , as expected.
PASS: REPEAT in main loop did not change REPCOUNT in timer event
PASS: REPEAT in main loop did not change REPCOUNT in timer event
INFO: Running invalid instruction: [(REPCOUNT "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: FOREACH [abc def ghi] [QUEUE "questionmarklist ? QUEUE "hashlist # QUEUE "restlist ?REST]
PASS: [:questionmarklist] output [abc def ghi] , as expected.
PASS: [:hashlist] output [1 2 3] , as expected.
PASS: [:restlist] output [[def ghi] [ghi] []] , as expected.
CALL: FOREACH "xyz [QUEUE "questionmarklist ? QUEUE "hashlist # QUEUE "restlist ?REST]
PASS: [:questionmarklist] output [x y z] , as expected.
PASS: [:hashlist] output [1 2 3] , as expected.
PASS: [:restlist] output [yz z ] , as expected.
CALL: (FOREACH [a b c] [x y z] [QUEUE "questionmarklist (LIST ?1 ?2) QUEUE "hashlist # QUEUE "restlist (LIST (?REST 1) (?REST 2))] )
PASS: [:questionmarklist] output [[a x] [b y] [c z]] , as expected.
PASS: [:hashlist] output [1 2 3] , as expected.
PASS: [:restlist] output [[[b c] [y z]] [[c] [z]] [[] []]] , as expected.
INFO: Running FOREACH [1 2 3] [STOP]
INFO: Running FOREACH with an OUTPUT in the instruction list
PASS: [FOREACHTEST.OUTPUT.WORKER] output 2 , as expected.
INFO: Running FOREACH with an OUTPUT ? in the instruction list
PASS: [FOREACHTEST.OUTPUT.FROM.VARIABLE.WORKER [a b c]] output a , as expected.
INFO: Running invalid instruction: [(FOREACH [1 2 3] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FOREACH .
INFO: Running invalid instruction: [FOREACH {1 2 3} [PRINT ?]]
PASS: error code is 7 , as expected.
INFO: error text is bfs doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [FOREACH [1 2 3] "badinput]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to badinput .
PASS: [0 + 0] output 0 , as expected.
PASS: [0 + 1] output 1 , as expected.
PASS: [0 + -1] output -1 , as expected.
PASS: [5 + 0] output 5 , as expected.
PASS: [5 + 1] output 6 , as expected.
PASS: [5 + -1] output 4 , as expected.
PASS: [-5 + 0] output -5 , as expected.
PASS: [-5 + 1] output -4 , as expected.
PASS: [-5 + -1] output -6 , as expected.
PASS: [SUM 0 0] output 0 , as expected.
PASS: [SUM 0 1] output 1 , as expected.
PASS: [SUM 0 -1] output -1 , as expected.
PASS: [SUM 5 0] output 5 , as expected.
PASS: [SUM 5 1] output 6 , as expected.
PASS: [SUM 5 -1] output 4 , as expected.
PASS: [SUM "1 "2] output 3 , as expected.
PASS: [SUM 1e40 2e39] output 1.2e+40 , as expected.
PASS: [(SUM)] output 0 , as expected.
PASS: [(SUM 5)] output 5 , as expected.
PASS: [(SUM 1 2 3 4 5)] output 15 , as expected.
PASS: [(SUM 1 2.5 3 4.5 5)] output 16 , as expected.
INFO: Running invalid instruction: [[] + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like [] as input .
INFO: Running invalid instruction: [[1] + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like [1] as input .
INFO: Running invalid instruction: [{} + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like {} as input .
INFO: Running invalid instruction: [{1} + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like {1} as input .
INFO: Running invalid instruction: ["one + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like one as input .
INFO: Running invalid instruction: ["1a + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like 1a as input .
INFO: Running invalid instruction: [1 + []]
INFO: error code is 7 .
INFO: error text is + doesn't like [] as input .
INFO: Running invalid instruction: [1 + [2]]
INFO: error code is 7 .
INFO: error text is + doesn't like [2] as input .
INFO: Running invalid instruction: [1 + {}]
INFO: error code is 7 .
INFO: error text is + doesn't like {} as input .
INFO: Running invalid instruction: [1 + {2}]
INFO: error code is 7 .
INFO: error text is + doesn't like {2} as input .
INFO: Running invalid instruction: [1 + "two]
INFO: error code is 7 .
INFO: error text is + doesn't like two as input .
INFO: Running invalid instruction: [1 + "2a]
INFO: error code is 7 .
INFO: error text is + doesn't like 2a as input .
INFO: Running invalid instruction: [SUM [] 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [] as input .
INFO: Running invalid instruction: [SUM [1] 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [1] as input .
INFO: Running invalid instruction: [SUM {} 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {} as input .
INFO: Running invalid instruction: [SUM {1} 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {1} as input .
INFO: Running invalid instruction: [SUM "one 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like one as input .
INFO: Running invalid instruction: [SUM "1a 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like 1a as input .
INFO: Running invalid instruction: [SUM 1 []]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [] as input .
INFO: Running invalid instruction: [SUM 1 [2]]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [2] as input .
INFO: Running invalid instruction: [SUM 1 {}]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {} as input .
INFO: Running invalid instruction: [SUM 1 {2}]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {2} as input .
INFO: Running invalid instruction: [SUM 1 "two]
INFO: error code is 7 .
INFO: error text is SUM doesn't like two as input .
INFO: Running invalid instruction: [SUM 1 "2a]
INFO: error code is 7 .
INFO: error text is SUM doesn't like 2a as input .
INFO: Running invalid instruction: [(SUM 1 2 [] )]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [] as input .
INFO: Running invalid instruction: [(SUM 1 2 [3] )]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [3] as input .
INFO: Running invalid instruction: [(SUM 1 2 {} )]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {} as input .
INFO: Running invalid instruction: [(SUM 1 2 {3} )]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {3} as input .
INFO: Running invalid instruction: [(SUM 1 2 "three)]
INFO: error code is 7 .
INFO: error text is SUM doesn't like three as input .
INFO: Running invalid instruction: [(SUM 1 2 "3a)]
INFO: error code is 7 .
INFO: error text is SUM doesn't like 3a as input .
PASS: [0 - 0] output 0 , as expected.
PASS: [0 - 1] output -1 , as expected.
PASS: [0 - -1] output 1 , as expected.
PASS: [5 - 0] output 5 , as expected.
PASS: [5 - 1] output 4 , as expected.
PASS: [5 - -1] output 6 , as expected.
PASS: [-5 - 0] output -5 , as expected.
PASS: [-5 - 1] output -6 , as expected.
PASS: [-5 - -1] output -4 , as expected.
PASS: [DIFFERENCE 0 0] output 0 , as expected.
PASS: [DIFFERENCE 0 1] output -1 , as expected.
PASS: [DIFFERENCE 0 -1] output 1 , as expected.
PASS: [DIFFERENCE 5 0] output 5 , as expected.
PASS: [DIFFERENCE 5 1] output 4 , as expected.
PASS: [DIFFERENCE 5 -1] output 6 , as expected.
PASS: [DIFFERENCE "3 "2] output 1 , as expected.
PASS: [DIFFERENCE 1.2e40 2e39] output 1e+40 , as expected.
INFO: Running invalid instruction: [(DIFFERENCE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DIFFERENCE .
INFO: Running invalid instruction: [(DIFFERENCE 5)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DIFFERENCE .
INFO: Running invalid instruction: [(DIFFERENCE 5 6 7)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [[] - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like [] as input .
INFO: Running invalid instruction: [[1] - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like [1] as input .
INFO: Running invalid instruction: [{} - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like {} as input .
INFO: Running invalid instruction: [{1} - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like {1} as input .
INFO: Running invalid instruction: ["one - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like one as input .
INFO: Running invalid instruction: ["1a - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like 1a as input .
INFO: Running invalid instruction: [1 - []]
INFO: error code is 7 .
INFO: error text is - doesn't like [] as input .
INFO: Running invalid instruction: [1 - [2]]
INFO: error code is 7 .
INFO: error text is - doesn't like [2] as input .
INFO: Running invalid instruction: [1 - {}]
INFO: error code is 7 .
INFO: error text is - doesn't like {} as input .
INFO: Running invalid instruction: [1 - {2}]
INFO: error code is 7 .
INFO: error text is - doesn't like {2} as input .
INFO: Running invalid instruction: [1 - "two]
INFO: error code is 7 .
INFO: error text is - doesn't like two as input .
INFO: Running invalid instruction: [1 - "2a]
INFO: error code is 7 .
INFO: error text is - doesn't like 2a as input .
INFO: Running invalid instruction: [DIFFERENCE [] 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like [] as input .
INFO: Running invalid instruction: [DIFFERENCE [1] 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like [1] as input .
INFO: Running invalid instruction: [DIFFERENCE {} 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like {} as input .
INFO: Running invalid instruction: [DIFFERENCE {1} 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like {1} as input .
INFO: Running invalid instruction: [DIFFERENCE "one 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like one as input .
INFO: Running invalid instruction: [DIFFERENCE "1a 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like 1a as input .
INFO: Running invalid instruction: [DIFFERENCE 1 []]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like [] as input .
INFO: Running invalid instruction: [DIFFERENCE 1 [2]]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like [2] as input .
INFO: Running invalid instruction: [DIFFERENCE 1 {}]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like {} as input .
INFO: Running invalid instruction: [DIFFERENCE 1 {2}]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like {2} as input .
INFO: Running invalid instruction: [DIFFERENCE 1 "two]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like two as input .
INFO: Running invalid instruction: [DIFFERENCE 1 "2a]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like 2a as input .
PASS: [-0] output 0 , as expected.
PASS: [MINUS 0] output 0 , as expected.
PASS: [MINUS 0] output 0 , as expected.
PASS: [MINUS 2] output -2 , as expected.
PASS: [MINUS -2] output 2 , as expected.
PASS: [MINUS -2e20] output 2e+20 , as expected.
INFO: Running invalid instruction: [MINUS []]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like [] as input .
INFO: Running invalid instruction: [MINUS [1]]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like [1] as input .
INFO: Running invalid instruction: [MINUS {}]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like {} as input .
INFO: Running invalid instruction: [MINUS {1}]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like {1} as input .
INFO: Running invalid instruction: [MINUS "one]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like one as input .
INFO: Running invalid instruction: [MINUS "1a]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like 1a as input .
INFO: Running invalid instruction: [(MINUS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MINUS .
INFO: Running invalid instruction: [(MINUS 1 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [0 * 0] output 0 , as expected.
PASS: [0 * 1] output 0 , as expected.
PASS: [1 * 0] output 0 , as expected.
PASS: [2 * 4] output 8 , as expected.
PASS: [4 * 2] output 8 , as expected.
PASS: [-2 * 4] output -8 , as expected.
PASS: [2 * -4] output -8 , as expected.
PASS: [-2 * -4] output 8 , as expected.
PASS: ["2 * "4] output 8 , as expected.
PASS: [1e10 * 2e20] output 2e+30 , as expected.
PASS: [1e200 * 1e200] output +INF , as expected.
PASS: [1e200 * -1e200] output -INF , as expected.
PASS: [-1e200 * -1e200] output +INF , as expected.
PASS: [1e200 * 1e-200] output 1 , as expected.
PASS: [PRODUCT 0 0] output 0 , as expected.
PASS: [PRODUCT 0 1] output 0 , as expected.
PASS: [PRODUCT 1 0] output 0 , as expected.
PASS: [PRODUCT 2 4] output 8 , as expected.
PASS: [PRODUCT 4 2] output 8 , as expected.
PASS: [PRODUCT -2 4] output -8 , as expected.
PASS: [PRODUCT 2 -4] output -8 , as expected.
PASS: [PRODUCT -2 -4] output 8 , as expected.
PASS: [PRODUCT "2 "4] output 8 , as expected.
PASS: [PRODUCT 1e10 2e20] output 2e+30 , as expected.
PASS: [PRODUCT 1e200 1e200] output +INF , as expected.
PASS: [PRODUCT 1e200 -1e200] output -INF , as expected.
PASS: [PRODUCT -1e200 -1e200] output +INF , as expected.
PASS: [PRODUCT 1e200 1e-200] output 1 , as expected.
PASS: [(PRODUCT)] output 1 , as expected.
PASS: [(PRODUCT 5)] output 5 , as expected.
PASS: [(PRODUCT 1 2 3 4 5)] output 120 , as expected.
PASS: [(PRODUCT 1 2 3 4 5 0.5)] output 60 , as expected.
PASS: [(PRODUCT 1.10 1 2 3 4 5)] output 132 , as expected.
FAIL: [(PRODUCT 1.01 1 2 3 4 5)] output 121.2 . We expected 121.2 .
INFO: Running invalid instruction: [[] * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like [] as input .
INFO: Running invalid instruction: [[1] * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like [1] as input .
INFO: Running invalid instruction: [{} * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like {} as input .
INFO: Running invalid instruction: [{1} * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like {1} as input .
INFO: Running invalid instruction: ["one * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like one as input .
INFO: Running invalid instruction: ["1a * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like 1a as input .
INFO: Running invalid instruction: [1 * []]
INFO: error code is 7 .
INFO: error text is * doesn't like [] as input .
INFO: Running invalid instruction: [1 * [2]]
INFO: error code is 7 .
INFO: error text is * doesn't like [2] as input .
INFO: Running invalid instruction: [1 * {}]
INFO: error code is 7 .
INFO: error text is * doesn't like {} as input .
INFO: Running invalid instruction: [1 * {2}]
INFO: error code is 7 .
INFO: error text is * doesn't like {2} as input .
INFO: Running invalid instruction: [1 * "two]
INFO: error code is 7 .
INFO: error text is * doesn't like two as input .
INFO: Running invalid instruction: [1 * "2a]
INFO: error code is 7 .
INFO: error text is * doesn't like 2a as input .
INFO: Running invalid instruction: [PRODUCT [] 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [] as input .
INFO: Running invalid instruction: [PRODUCT [1] 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [1] as input .
INFO: Running invalid instruction: [PRODUCT {} 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {} as input .
INFO: Running invalid instruction: [PRODUCT {1} 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {1} as input .
INFO: Running invalid instruction: [PRODUCT "one 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like one as input .
INFO: Running invalid instruction: [PRODUCT "1a 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like 1a as input .
INFO: Running invalid instruction: [PRODUCT 1 []]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [] as input .
INFO: Running invalid instruction: [PRODUCT 1 [2]]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [2] as input .
INFO: Running invalid instruction: [PRODUCT 1 {}]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {} as input .
INFO: Running invalid instruction: [PRODUCT 1 {2}]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {2} as input .
INFO: Running invalid instruction: [PRODUCT 1 "two]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like two as input .
INFO: Running invalid instruction: [PRODUCT 1 "2a]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like 2a as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 [] )]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [] as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 [3] )]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [3] as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 {} )]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {} as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 {3} )]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {3} as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 "three)]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like three as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 "3a)]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like 3a as input .
PASS: [5 / 2] output 2.5 , as expected.
PASS: [5 / -2] output -2.5 , as expected.
PASS: [-5 / 2] output -2.5 , as expected.
PASS: [-5 / -2] output 2.5 , as expected.
PASS: [4 / 2] output 2 , as expected.
PASS: [0 / 2] output 0 , as expected.
PASS: [2.2 / 2] output 1.1 , as expected.
FAIL: [6.6 / 2.2] output 3 . We expected 3 .
PASS: [2e40 / 2e20] output 1e+20 , as expected.
PASS: [QUOTIENT 5 2] output 2.5 , as expected.
PASS: [QUOTIENT 5 -2] output -2.5 , as expected.
PASS: [QUOTIENT -5 2] output -2.5 , as expected.
PASS: [QUOTIENT -5 -2] output 2.5 , as expected.
PASS: [QUOTIENT 4 2] output 2 , as expected.
PASS: [QUOTIENT 0 2] output 0 , as expected.
PASS: [QUOTIENT 2.2 2] output 1.1 , as expected.
FAIL: [QUOTIENT 6.6 2.2] output 3 . We expected 3 .
PASS: [QUOTIENT "5 "2] output 2.5 , as expected.
PASS: [QUOTIENT 2e40 2e20] output 1e+20 , as expected.
PASS: [(QUOTIENT 1)] output 1 , as expected.
PASS: [(QUOTIENT 10)] output 0.1 , as expected.
PASS: [(QUOTIENT 0.5)] output 2 , as expected.
PASS: [(QUOTIENT 1e40)] output 1e-40 , as expected.
INFO: Running invalid instruction: [(QUOTIENT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to QUOTIENT .
INFO: Running invalid instruction: [(QUOTIENT 5 6 7)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [[] / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like [] as input .
INFO: Running invalid instruction: [[1] / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like [1] as input .
INFO: Running invalid instruction: [{} / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like {} as input .
INFO: Running invalid instruction: [{1} / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like {1} as input .
INFO: Running invalid instruction: ["one / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like one as input .
INFO: Running invalid instruction: ["1a / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like 1a as input .
INFO: Running invalid instruction: [1 / 0]
INFO: error code is 4 .
INFO: error text is / doesn't like 0 as input .
INFO: Running invalid instruction: [1 / []]
INFO: error code is 7 .
INFO: error text is / doesn't like [] as input .
INFO: Running invalid instruction: [1 / [2]]
INFO: error code is 7 .
INFO: error text is / doesn't like [2] as input .
INFO: Running invalid instruction: [1 / {}]
INFO: error code is 7 .
INFO: error text is / doesn't like {} as input .
INFO: Running invalid instruction: [1 / {2}]
INFO: error code is 7 .
INFO: error text is / doesn't like {2} as input .
INFO: Running invalid instruction: [1 / "two]
INFO: error code is 7 .
INFO: error text is / doesn't like two as input .
INFO: Running invalid instruction: [1 / "2a]
INFO: error code is 7 .
INFO: error text is / doesn't like 2a as input .
INFO: Running invalid instruction: [(QUOTIENT 0 )]
INFO: error code is 4 .
INFO: error text is QUOTIENT doesn't like 0 as input .
INFO: Running invalid instruction: [(QUOTIENT [] )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [] as input .
INFO: Running invalid instruction: [(QUOTIENT [1] )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [1] as input .
INFO: Running invalid instruction: [(QUOTIENT {} )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {} as input .
INFO: Running invalid instruction: [(QUOTIENT {1} )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {1} as input .
INFO: Running invalid instruction: [(QUOTIENT "one )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like one as input .
INFO: Running invalid instruction: [(QUOTIENT "1a )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like 1a as input .
INFO: Running invalid instruction: [QUOTIENT [] 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [] as input .
INFO: Running invalid instruction: [QUOTIENT [1] 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [1] as input .
INFO: Running invalid instruction: [QUOTIENT {} 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {} as input .
INFO: Running invalid instruction: [QUOTIENT {1} 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {1} as input .
INFO: Running invalid instruction: [QUOTIENT "one 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like one as input .
INFO: Running invalid instruction: [QUOTIENT "1a 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like 1a as input .
INFO: Running invalid instruction: [QUOTIENT 1 0]
INFO: error code is 4 .
INFO: error text is QUOTIENT doesn't like 0 as input .
INFO: Running invalid instruction: [QUOTIENT 1 []]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [] as input .
INFO: Running invalid instruction: [QUOTIENT 1 [2]]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [2] as input .
INFO: Running invalid instruction: [QUOTIENT 1 {}]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {} as input .
INFO: Running invalid instruction: [QUOTIENT 1 {2}]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {2} as input .
INFO: Running invalid instruction: [QUOTIENT 1 "two]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like two as input .
INFO: Running invalid instruction: [QUOTIENT 1 "2a]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like 2a as input .
INFO: Running invalid instruction: [QUOTIENT 0 "2a]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like 2a as input .
PASS: [REMAINDER 5 6] output 5 , as expected.
PASS: [REMAINDER 6 2] output 0 , as expected.
PASS: [REMAINDER 0 2] output 0 , as expected.
PASS: [REMAINDER 5 5] output 0 , as expected.
PASS: [REMAINDER 6 4] output 2 , as expected.
PASS: [REMAINDER -6 4] output -2 , as expected.
PASS: [REMAINDER 6 -4] output 2 , as expected.
PASS: [REMAINDER -6 -4] output -2 , as expected.
PASS: [REMAINDER "5 "2] output 1 , as expected.
INFO: Running invalid instruction: [(REMAINDER)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMAINDER .
INFO: Running invalid instruction: [(REMAINDER 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMAINDER .
INFO: Running invalid instruction: [(REMAINDER 5 6 7)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REMAINDER [] 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like [] as input .
INFO: Running invalid instruction: [REMAINDER [1] 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like [1] as input .
INFO: Running invalid instruction: [REMAINDER {} 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like {} as input .
INFO: Running invalid instruction: [REMAINDER {1} 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like {1} as input .
INFO: Running invalid instruction: [REMAINDER "one 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like one as input .
INFO: Running invalid instruction: [REMAINDER "1a 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like 1a as input .
INFO: Running invalid instruction: [REMAINDER 1 0]
INFO: error code is 4 .
INFO: error text is REMAINDER doesn't like 0 as input .
INFO: Running invalid instruction: [REMAINDER 1 []]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like [] as input .
INFO: Running invalid instruction: [REMAINDER 1 [2]]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like [2] as input .
INFO: Running invalid instruction: [REMAINDER 1 {}]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like {} as input .
INFO: Running invalid instruction: [REMAINDER 1 {2}]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like {2} as input .
INFO: Running invalid instruction: [REMAINDER 1 "two]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like two as input .
INFO: Running invalid instruction: [REMAINDER 1 "2a]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like 2a as input .
INFO: Running invalid instruction: [REMAINDER 0 "2a]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like 2a as input .
PASS: [MODULO 5 6] output 5 , as expected.
PASS: [MODULO 6 2] output 0 , as expected.
PASS: [MODULO 0 2] output 0 , as expected.
PASS: [MODULO 5 5] output 0 , as expected.
PASS: [MODULO 6 4] output 2 , as expected.
PASS: [MODULO 6 -4] output -2 , as expected.
PASS: [MODULO -6 4] output 2 , as expected.
PASS: [MODULO -6 -4] output -2 , as expected.
PASS: [MODULO "5 "2] output 1 , as expected.
INFO: Running invalid instruction: [(MODULO)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MODULO .
INFO: Running invalid instruction: [(MODULO 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MODULO .
INFO: Running invalid instruction: [(MODULO 5 6 7)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [MODULO [] 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like [] as input .
INFO: Running invalid instruction: [MODULO [1] 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like [1] as input .
INFO: Running invalid instruction: [MODULO {} 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like {} as input .
INFO: Running invalid instruction: [MODULO {1} 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like {1} as input .
INFO: Running invalid instruction: [MODULO "one 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like one as input .
INFO: Running invalid instruction: [MODULO "1a 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like 1a as input .
INFO: Running invalid instruction: [MODULO 1 0]
INFO: error code is 4 .
INFO: error text is MODULO doesn't like 0 as input .
INFO: Running invalid instruction: [MODULO 1 []]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like [] as input .
INFO: Running invalid instruction: [MODULO 1 [2]]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like [2] as input .
INFO: Running invalid instruction: [MODULO 1 {}]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like {} as input .
INFO: Running invalid instruction: [MODULO 1 {2}]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like {2} as input .
INFO: Running invalid instruction: [MODULO 1 "two]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like two as input .
INFO: Running invalid instruction: [MODULO 1 "2a]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like 2a as input .
INFO: Running invalid instruction: [MODULO 0 "2a]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like 2a as input .
PASS: [INT 0] output 0 , as expected.
PASS: [INT 8] output 8 , as expected.
PASS: [INT -8] output -8 , as expected.
PASS: [INT 8.9] output 8 , as expected.
PASS: [INT 8.1] output 8 , as expected.
PASS: [INT 8.9999999] output 8 , as expected.
PASS: [INT -8.9999999] output -8 , as expected.
PASS: [INT 2.3e40] output 2.3e+40 , as expected.
INFO: Running invalid instruction: [(INT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to INT .
INFO: Running invalid instruction: [(INT 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [INT []]
INFO: error code is 7 .
INFO: error text is INT doesn't like [] as input .
INFO: Running invalid instruction: [INT [1]]
INFO: error code is 7 .
INFO: error text is INT doesn't like [1] as input .
INFO: Running invalid instruction: [INT {}]
INFO: error code is 7 .
INFO: error text is INT doesn't like {} as input .
INFO: Running invalid instruction: [INT {1}]
INFO: error code is 7 .
INFO: error text is INT doesn't like {1} as input .
INFO: Running invalid instruction: [INT "one]
INFO: error code is 7 .
INFO: error text is INT doesn't like one as input .
INFO: Running invalid instruction: [INT "1a]
INFO: error code is 7 .
INFO: error text is INT doesn't like 1a as input .
PASS: [ROUND 0] output 0 , as expected.
PASS: [ROUND 8] output 8 , as expected.
PASS: [ROUND -8] output -8 , as expected.
PASS: [ROUND 8.1] output 8 , as expected.
PASS: [ROUND 8.9] output 9 , as expected.
PASS: [ROUND 8.5] output 9 , as expected.
PASS: [ROUND 8.49] output 8 , as expected.
PASS: [ROUND -8.9] output -9 , as expected.
PASS: [ROUND -8.1] output -8 , as expected.
PASS: [ROUND 2.3e40] output 2.3e+40 , as expected.
INFO: Running invalid instruction: [(ROUND)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ROUND .
INFO: Running invalid instruction: [(ROUND 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ROUND []]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like [] as input .
INFO: Running invalid instruction: [ROUND [1]]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like [1] as input .
INFO: Running invalid instruction: [ROUND {}]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like {} as input .
INFO: Running invalid instruction: [ROUND {1}]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like {1} as input .
INFO: Running invalid instruction: [ROUND "one]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like one as input .
INFO: Running invalid instruction: [ROUND "1a]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like 1a as input .
PASS: [ABS 0] output 0 , as expected.
PASS: [ABS 8] output 8 , as expected.
PASS: [ABS -8] output 8 , as expected.
PASS: [ABS 8.1] output 8.1 , as expected.
PASS: [ABS -8.1] output 8.1 , as expected.
PASS: [ABS 2.3e40] output 2.3e+40 , as expected.
INFO: Running invalid instruction: [(ABS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ABS .
INFO: Running invalid instruction: [(ABS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ABS []]
INFO: error code is 7 .
INFO: error text is > doesn't like [] as input .
INFO: Running invalid instruction: [ABS [1]]
INFO: error code is 7 .
INFO: error text is > doesn't like [1] as input .
INFO: Running invalid instruction: [ABS {}]
INFO: error code is 7 .
INFO: error text is > doesn't like {} as input .
INFO: Running invalid instruction: [ABS {1}]
INFO: error code is 7 .
INFO: error text is > doesn't like {1} as input .
INFO: Running invalid instruction: [ABS "one]
INFO: error code is 7 .
INFO: error text is > doesn't like one as input .
INFO: Running invalid instruction: [ABS "1a]
INFO: error code is 7 .
INFO: error text is > doesn't like 1a as input .
PASS: [SIGN 0] output 0 , as expected.
PASS: [SIGN 8] output 1 , as expected.
PASS: [SIGN -8] output -1 , as expected.
PASS: [SIGN 0.01] output 1 , as expected.
PASS: [SIGN -0.01] output -1 , as expected.
PASS: [SIGN 98.6] output 1 , as expected.
PASS: [SIGN -98.6] output -1 , as expected.
PASS: [SIGN 2.3e40] output 1 , as expected.
INFO: Running invalid instruction: [(SIGN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SIGN .
INFO: Running invalid instruction: [(SIGN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SIGN []]
INFO: error code is 7 .
INFO: error text is > doesn't like [] as input .
INFO: Running invalid instruction: [SIGN [1]]
INFO: error code is 7 .
INFO: error text is > doesn't like [1] as input .
INFO: Running invalid instruction: [SIGN {}]
INFO: error code is 7 .
INFO: error text is > doesn't like {} as input .
INFO: Running invalid instruction: [SIGN {1}]
INFO: error code is 7 .
INFO: error text is > doesn't like {1} as input .
INFO: Running invalid instruction: [SIGN "one]
INFO: error code is 7 .
INFO: error text is > doesn't like one as input .
INFO: Running invalid instruction: [SIGN "1a]
INFO: error code is 7 .
INFO: error text is > doesn't like 1a as input .
PASS: [SQRT 0] output 0 , as expected.
PASS: [SQRT 4] output 2 , as expected.
PASS: [SQRT 9] output 3 , as expected.
PASS: [SQRT 1.44] output 1.2 , as expected.
FAIL: [SQRT 2] output 1.4142135623731 . We expected 1.4142135623731 .
PASS: [SQRT 1e40] output 1e+20 , as expected.
INFO: Running invalid instruction: [(SQRT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SQRT .
INFO: Running invalid instruction: [(SQRT 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SQRT -1]
INFO: error code is 4 .
INFO: error text is SQRT doesn't like -1 as input .
INFO: Running invalid instruction: [SQRT []]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like [] as input .
INFO: Running invalid instruction: [SQRT [1]]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like [1] as input .
INFO: Running invalid instruction: [SQRT {}]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like {} as input .
INFO: Running invalid instruction: [SQRT {1}]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like {1} as input .
INFO: Running invalid instruction: [SQRT "one]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like one as input .
INFO: Running invalid instruction: [SQRT "1a]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like 1a as input .
PASS: [POWER 1 0] output 1 , as expected.
PASS: [POWER -1 0] output 1 , as expected.
PASS: [POWER 2 0] output 1 , as expected.
PASS: [POWER 1.23 0] output 1 , as expected.
PASS: [POWER 1e40 0] output 1 , as expected.
PASS: [POWER 0 1] output 0 , as expected.
PASS: [POWER 1 1] output 1 , as expected.
PASS: [POWER -1 1] output -1 , as expected.
PASS: [POWER 2 1] output 2 , as expected.
PASS: [POWER 1.23 1] output 1.23 , as expected.
PASS: [POWER 1e40 1] output 1e+40 , as expected.
PASS: [POWER 0 2] output 0 , as expected.
PASS: [POWER 1 2] output 1 , as expected.
PASS: [POWER -1 2] output 1 , as expected.
PASS: [POWER 2 2] output 4 , as expected.
PASS: [POWER 1.23 2] output 1.5129 , as expected.
PASS: [POWER 1e40 2] output 1e+80 , as expected.
PASS: [POWER 0 5] output 0 , as expected.
PASS: [POWER 1 5] output 1 , as expected.
PASS: [POWER -1 5] output -1 , as expected.
PASS: [POWER 2 5] output 32 , as expected.
FAIL: [POWER 1.1 5] output 1.61051 . We expected 1.61051 .
FAIL: [POWER -1.1 5] output -1.61051 . We expected -1.61051 .
PASS: [POWER 1e2 5] output 10000000000 , as expected.
FAIL: [POWER 1e-2 5] output 1e-10 . We expected 1e-10 .
PASS: [POWER 1 -1] output 1 , as expected.
PASS: [POWER 2 -1] output 0.5 , as expected.
PASS: [POWER 0.5 -1] output 2 , as expected.
PASS: [POWER 1e40 -1] output 1e-40 , as expected.
PASS: [POWER -1 -1] output -1 , as expected.
PASS: [POWER 1 2] output 1 , as expected.
PASS: [POWER 2 2] output 4 , as expected.
PASS: [POWER 1.23 2] output 1.5129 , as expected.
PASS: [POWER 1e40 -1] output 1e-40 , as expected.
PASS: [POWER -1 -1] output -1 , as expected.
PASS: [POWER 0 0.5] output 0 , as expected.
PASS: [POWER 4 0.5] output 2 , as expected.
PASS: [POWER 9 0.5] output 3 , as expected.
PASS: [POWER 1.44 0.5] output 1.2 , as expected.
FAIL: [POWER 2 0.5] output 1.4142135623731 . We expected 1.41421356237309 .
PASS: [POWER 1e40 0.5] output 1e+20 , as expected.
INFO: Running invalid instruction: [POWER 1e100 5]
INFO: error code is 4 .
INFO: error text is POWER doesn't like 5 as input .
INFO: Running invalid instruction: [POWER -1e100 5]
INFO: error code is 4 .
INFO: error text is POWER doesn't like 5 as input .
INFO: Running invalid instruction: [POWER 0 0]
INFO: error code is 4 .
INFO: error text is POWER doesn't like 0 as input .
INFO: Running invalid instruction: [POWER 0 -1]
INFO: error code is 4 .
INFO: error text is POWER doesn't like -1 as input .
INFO: Running invalid instruction: [POWER -1 0.5]
INFO: error code is 4 .
INFO: error text is POWER doesn't like 0.5 as input .
INFO: Running invalid instruction: [(POWER)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POWER .
INFO: Running invalid instruction: [(POWER 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POWER .
INFO: Running invalid instruction: [(POWER 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [POWER [] 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like [] as input .
INFO: Running invalid instruction: [POWER [1] 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like [1] as input .
INFO: Running invalid instruction: [POWER {} 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like {} as input .
INFO: Running invalid instruction: [POWER {1} 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like {1} as input .
INFO: Running invalid instruction: [POWER "one 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like one as input .
INFO: Running invalid instruction: [POWER "1a 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like 1a as input .
INFO: Running invalid instruction: [POWER 1 []]
INFO: error code is 7 .
INFO: error text is POWER doesn't like [] as input .
INFO: Running invalid instruction: [POWER 1 [2]]
INFO: error code is 7 .
INFO: error text is POWER doesn't like [2] as input .
INFO: Running invalid instruction: [POWER 1 {}]
INFO: error code is 7 .
INFO: error text is POWER doesn't like {} as input .
INFO: Running invalid instruction: [POWER 1 {2}]
INFO: error code is 7 .
INFO: error text is POWER doesn't like {2} as input .
INFO: Running invalid instruction: [POWER 1 "two]
INFO: error code is 7 .
INFO: error text is POWER doesn't like two as input .
INFO: Running invalid instruction: [POWER 1 "2a]
INFO: error code is 7 .
INFO: error text is POWER doesn't like 2a as input .
PASS: [EXP 0] output 1 , as expected.
FAIL: [EXP 1] output 2.71828182845905 . We expected 2.71828182845905 .
PASS: [EXP 2] output 7.38905609893065 , as expected.
FAIL: [EXP -1] output 0.367879441171442 . We expected 0.367879441171442 .
INFO: Running invalid instruction: [EXP 1e40]
INFO: error code is 4 .
INFO: error text is EXP doesn't like 1e+40 as input .
INFO: Running invalid instruction: [(EXP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to EXP .
INFO: Running invalid instruction: [(EXP 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [EXP []]
INFO: error code is 7 .
INFO: error text is EXP doesn't like [] as input .
INFO: Running invalid instruction: [EXP [1]]
INFO: error code is 7 .
INFO: error text is EXP doesn't like [1] as input .
INFO: Running invalid instruction: [EXP {}]
INFO: error code is 7 .
INFO: error text is EXP doesn't like {} as input .
INFO: Running invalid instruction: [EXP {1}]
INFO: error code is 7 .
INFO: error text is EXP doesn't like {1} as input .
INFO: Running invalid instruction: [EXP "one]
INFO: error code is 7 .
INFO: error text is EXP doesn't like one as input .
INFO: Running invalid instruction: [EXP "1a]
INFO: error code is 7 .
INFO: error text is EXP doesn't like 1a as input .
PASS: [LOG10 1] output 0 , as expected.
PASS: [LOG10 1e1] output 1 , as expected.
PASS: [LOG10 1e2] output 2 , as expected.
PASS: [LOG10 1e-2] output -2 , as expected.
PASS: [LOG10 1e100] output 100 , as expected.
FAIL: [LOG10 50] output 1.69897000433602 . We expected 1.69897000433602 .
INFO: Running invalid instruction: [(LOG10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOG10 .
INFO: Running invalid instruction: [(LOG10 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LOG10 0]
INFO: error code is 4 .
INFO: error text is LOG10 doesn't like 0 as input .
INFO: Running invalid instruction: [LOG10 -1]
INFO: error code is 4 .
INFO: error text is LOG10 doesn't like -1 as input .
INFO: Running invalid instruction: [LOG10 []]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like [] as input .
INFO: Running invalid instruction: [LOG10 [1]]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like [1] as input .
INFO: Running invalid instruction: [LOG10 {}]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like {} as input .
INFO: Running invalid instruction: [LOG10 {1}]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like {1} as input .
INFO: Running invalid instruction: [LOG10 "one]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like one as input .
INFO: Running invalid instruction: [LOG10 "1a]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like 1a as input .
PASS: [LN 1] output 0 , as expected.
FAIL: [LN 2.71828182845905] output 1 . We expected 1 .
FAIL: [LN 500] output 6.21460809842219 . We expected 6.21460809842219 .
INFO: Running invalid instruction: [(LN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LN .
INFO: Running invalid instruction: [(LN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LN 0]
INFO: error code is 4 .
INFO: error text is LN doesn't like 0 as input .
INFO: Running invalid instruction: [LN -1]
INFO: error code is 4 .
INFO: error text is LN doesn't like -1 as input .
INFO: Running invalid instruction: [LN []]
INFO: error code is 7 .
INFO: error text is LN doesn't like [] as input .
INFO: Running invalid instruction: [LN [1]]
INFO: error code is 7 .
INFO: error text is LN doesn't like [1] as input .
INFO: Running invalid instruction: [LN {}]
INFO: error code is 7 .
INFO: error text is LN doesn't like {} as input .
INFO: Running invalid instruction: [LN {1}]
INFO: error code is 7 .
INFO: error text is LN doesn't like {1} as input .
INFO: Running invalid instruction: [LN "one]
INFO: error code is 7 .
INFO: error text is LN doesn't like one as input .
INFO: Running invalid instruction: [LN "1a]
INFO: error code is 7 .
INFO: error text is LN doesn't like 1a as input .
PASS: [PI] output 3.14159265358979 , as expected.
INFO: Running invalid instruction: [(PI 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [GOLDENRATIO] output 1.61803398874989 , as expected.
INFO: Running invalid instruction: [(GOLDENRATIO 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [TAN 0] output 0 , as expected.
FAIL: [TAN 45] output 1 . We expected 1 .
FAIL: [TAN -45] output -1 . We expected -1 .
FAIL: [TAN 135] output -1 . We expected -1 .
FAIL: [TAN 225] output 1 . We expected 1 .
FAIL: [TAN 180] output -1.22514845490862e-16 . We expected 0 .
FAIL: [TAN 360] output -2.45029690981724e-16 . We expected 0 .
FAIL: [TAN 3600] output -2.45029690981724e-15 . We expected 0 .
PASS: [TAN 14.5] output 0.25861758435589 , as expected.
INFO: Running invalid instruction: [(TAN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TAN .
INFO: Running invalid instruction: [(TAN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [TAN 90]
FAIL: Running [TAN 90] did not throw an error.
INFO: Running invalid instruction: [TAN -90]
FAIL: Running [TAN -90] did not throw an error.
INFO: Running invalid instruction: [TAN 270]
FAIL: Running [TAN 270] did not throw an error.
INFO: Running invalid instruction: [TAN 3690]
FAIL: Running [TAN 3690] did not throw an error.
INFO: Running invalid instruction: [TAN []]
INFO: error code is 7 .
INFO: error text is TAN doesn't like [] as input .
INFO: Running invalid instruction: [TAN [1]]
INFO: error code is 7 .
INFO: error text is TAN doesn't like [1] as input .
INFO: Running invalid instruction: [TAN {}]
INFO: error code is 7 .
INFO: error text is TAN doesn't like {} as input .
INFO: Running invalid instruction: [TAN {1}]
INFO: error code is 7 .
INFO: error text is TAN doesn't like {1} as input .
INFO: Running invalid instruction: [TAN "one]
INFO: error code is 7 .
INFO: error text is TAN doesn't like one as input .
INFO: Running invalid instruction: [TAN "1a]
INFO: error code is 7 .
INFO: error text is TAN doesn't like 1a as input .
PASS: [RADTAN ( 0 )] output 0 , as expected.
FAIL: [RADTAN ( 0.25 * PI)] output 1 . We expected 1 .
FAIL: [RADTAN (-0.25 * PI)] output -1 . We expected -1 .
FAIL: [RADTAN ( 0.75 * PI)] output -1 . We expected -1 .
FAIL: [RADTAN ( 1.25 * PI)] output 1 . We expected 1 .
FAIL: [RADTAN ( PI )] output -1.22514845490862e-16 . We expected 0 .
FAIL: [RADTAN ( 2 * PI )] output -2.45029690981724e-16 . We expected 0 .
FAIL: [RADTAN ( 10 * PI )] output -1.22514845490862e-15 . We expected 0 .
PASS: [RADTAN ( 14.5 )] output -2.63406913250383 , as expected.
INFO: Running invalid instruction: [(RADTAN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADTAN .
INFO: Running invalid instruction: [(RADTAN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADTAN ( 0.5 * PI)]
FAIL: Running [RADTAN ( 0.5 * PI)] did not throw an error.
INFO: Running invalid instruction: [RADTAN (-0.5 * PI)]
FAIL: Running [RADTAN (-0.5 * PI)] did not throw an error.
INFO: Running invalid instruction: [RADTAN ( 1.5 * PI)]
FAIL: Running [RADTAN ( 1.5 * PI)] did not throw an error.
INFO: Running invalid instruction: [RADTAN ( 100 * PI)]
FAIL: Running [RADTAN ( 100 * PI)] did not throw an error.
INFO: Running invalid instruction: [RADTAN []]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like [] as input .
INFO: Running invalid instruction: [RADTAN [1]]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like [1] as input .
INFO: Running invalid instruction: [RADTAN {}]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like {} as input .
INFO: Running invalid instruction: [RADTAN {1}]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like {1} as input .
INFO: Running invalid instruction: [RADTAN "one]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like one as input .
INFO: Running invalid instruction: [RADTAN "1a]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like 1a as input .
PASS: [ARCTAN 0] output 0 , as expected.
PASS: [ARCTAN 1] output 45 , as expected.
PASS: [ARCTAN -1] output -45 , as expected.
PASS: [ARCTAN 14.5] output 86.0548137709624 , as expected.
PASS: [(ARCTAN 1 0 )] output 0 , as expected.
PASS: [(ARCTAN 1 1 )] output 45 , as expected.
PASS: [(ARCTAN 1 -1 )] output -45 , as expected.
PASS: [(ARCTAN -1 1 )] output 135 , as expected.
PASS: [(ARCTAN -1 -1 )] output -135 , as expected.
PASS: [(ARCTAN 1 14.5)] output 86.0548137709624 , as expected.
PASS: [(ARCTAN 2 0)] output 0 , as expected.
PASS: [(ARCTAN 2 2)] output 45 , as expected.
PASS: [(ARCTAN 2 -2)] output -45 , as expected.
PASS: [(ARCTAN 2 29)] output 86.0548137709624 , as expected.
PASS: [(ARCTAN 0 1)] output 90 , as expected.
PASS: [(ARCTAN 1 100)] output 89.4270613023165 , as expected.
INFO: Running invalid instruction: [(ARCTAN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARCTAN .
INFO: Running invalid instruction: [(ARCTAN 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ARCTAN []]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [ARCTAN [1]]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [ARCTAN {}]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [ARCTAN {1}]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [ARCTAN "one]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like one as input .
INFO: Running invalid instruction: [ARCTAN "1a]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like 1a as input .
INFO: Running invalid instruction: [(ARCTAN [] 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [(ARCTAN [1] 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [(ARCTAN {} 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [(ARCTAN {1} 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [(ARCTAN "one 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like one as input .
INFO: Running invalid instruction: [(ARCTAN "1a 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like 1a as input .
INFO: Running invalid instruction: [(ARCTAN 1 [] )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [(ARCTAN 1 [1] )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [(ARCTAN 1 {} )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [(ARCTAN 1 {1} )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [(ARCTAN 1 "one )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like one as input .
INFO: Running invalid instruction: [(ARCTAN 1 "1a )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like 1a as input .
PASS: [RADARCTAN 0] output 0 , as expected.
PASS: [RADARCTAN 1] output 0.785398163397448 , as expected.
PASS: [RADARCTAN -1] output -0.785398163397448 , as expected.
PASS: [RADARCTAN 14.5] output 1.50193983749385 , as expected.
PASS: [(RADARCTAN 1 0 )] output 0 , as expected.
PASS: [(RADARCTAN 1 1 )] output 0.785398163397448 , as expected.
PASS: [(RADARCTAN 1 -1 )] output -0.785398163397448 , as expected.
PASS: [(RADARCTAN -1 1 )] output 2.35619449019234 , as expected.
PASS: [(RADARCTAN -1 -1 )] output -2.35619449019234 , as expected.
PASS: [(RADARCTAN 1 14.5 )] output 1.50193983749385 , as expected.
PASS: [(RADARCTAN 2 0 )] output 0 , as expected.
PASS: [(RADARCTAN 2 2 )] output 0.785398163397448 , as expected.
PASS: [(RADARCTAN 2 -2 )] output -0.785398163397448 , as expected.
PASS: [(RADARCTAN 2 29 )] output 1.50193983749385 , as expected.
PASS: [(RADARCTAN 0 1 )] output 1.5707963267949 , as expected.
PASS: [(RADARCTAN 1 100)] output 1.56079666010823 , as expected.
INFO: Running invalid instruction: [(RADARCTAN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADARCTAN .
INFO: Running invalid instruction: [(RADARCTAN 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADARCTAN []]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [RADARCTAN [1]]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [RADARCTAN {}]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [RADARCTAN {1}]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [RADARCTAN "one]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like one as input .
INFO: Running invalid instruction: [RADARCTAN "1a]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like 1a as input .
INFO: Running invalid instruction: [(RADARCTAN [] 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [(RADARCTAN [1] 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [(RADARCTAN {} 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [(RADARCTAN {1} 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [(RADARCTAN "one 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like one as input .
INFO: Running invalid instruction: [(RADARCTAN "1a 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like 1a as input .
INFO: Running invalid instruction: [(RADARCTAN 1 [] )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [(RADARCTAN 1 [1] )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [(RADARCTAN 1 {} )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [(RADARCTAN 1 {1} )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [(RADARCTAN 1 "one )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like one as input .
INFO: Running invalid instruction: [(RADARCTAN 1 "1a )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like 1a as input .
PASS: [SIN 0] output 0 , as expected.
FAIL: [SIN 30] output 0.5 . We expected 0.5 .
FAIL: [SIN 45] output 0.707106781186547 . We expected 0.707106781186548 .
FAIL: [SIN -45] output -0.707106781186547 . We expected -0.707106781186548 .
PASS: [SIN 90] output 1 , as expected.
FAIL: [SIN 180] output 1.22514845490862e-16 . We expected 0 .
PASS: [SIN 270] output -1 , as expected.
FAIL: [SIN 360] output -2.45029690981724e-16 . We expected 0 .
FAIL: [SIN 3600] output -2.45029690981724e-15 . We expected 0 .
PASS: [SIN 3690] output 1 , as expected.
PASS: [SIN 14.5] output 0.250380004054441 , as expected.
INFO: Running invalid instruction: [(SIN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SIN .
INFO: Running invalid instruction: [(SIN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SIN []]
INFO: error code is 7 .
INFO: error text is SIN doesn't like [] as input .
INFO: Running invalid instruction: [SIN [1]]
INFO: error code is 7 .
INFO: error text is SIN doesn't like [1] as input .
INFO: Running invalid instruction: [SIN {}]
INFO: error code is 7 .
INFO: error text is SIN doesn't like {} as input .
INFO: Running invalid instruction: [SIN {1}]
INFO: error code is 7 .
INFO: error text is SIN doesn't like {1} as input .
INFO: Running invalid instruction: [SIN "one]
INFO: error code is 7 .
INFO: error text is SIN doesn't like one as input .
INFO: Running invalid instruction: [SIN "1a]
INFO: error code is 7 .
INFO: error text is SIN doesn't like 1a as input .
PASS: [RADSIN 0] output 0 , as expected.
FAIL: [RADSIN ( 0.25 * PI)] output 0.707106781186547 . We expected 0.707106781186548 .
FAIL: [RADSIN (-0.25 * PI)] output -0.707106781186547 . We expected -0.707106781186548 .
FAIL: [RADSIN (1/6 * PI)] output 0.5 . We expected 0.5 .
PASS: [RADSIN ( 0.5 * PI)] output 1 , as expected.
FAIL: [RADSIN PI] output 1.22514845490862e-16 . We expected 0 .
PASS: [RADSIN (1.5 * PI)] output -1 , as expected.
FAIL: [RADSIN ( 2 * PI)] output -2.45029690981724e-16 . We expected 0 .
FAIL: [RADSIN ( 10 * PI)] output -1.22514845490862e-15 . We expected 0 .
PASS: [RADSIN ( 10.50 * PI)] output 1 , as expected.
PASS: [RADSIN 14.5] output 0.934895055524683 , as expected.
INFO: Running invalid instruction: [(RADSIN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADSIN .
INFO: Running invalid instruction: [(RADSIN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADSIN []]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like [] as input .
INFO: Running invalid instruction: [RADSIN [1]]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like [1] as input .
INFO: Running invalid instruction: [RADSIN {}]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like {} as input .
INFO: Running invalid instruction: [RADSIN {1}]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like {1} as input .
INFO: Running invalid instruction: [RADSIN "one]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like one as input .
INFO: Running invalid instruction: [RADSIN "1a]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like 1a as input .
PASS: [ARCSIN 0] output 0 , as expected.
FAIL: [ARCSIN ( 0.5 * SQRT 2)] output 45 . We expected 45 .
FAIL: [ARCSIN (-0.5 * SQRT 2)] output -45 . We expected -45 .
PASS: [ARCSIN 1] output 90 , as expected.
PASS: [ARCSIN -1] output -90 , as expected.
PASS: [ARCSIN 0.5] output 30 , as expected.
PASS: [ARCSIN -0.5] output -30 , as expected.
INFO: Running invalid instruction: [(ARCSIN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARCSIN .
INFO: Running invalid instruction: [(ARCSIN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ARCSIN 1.1]
INFO: error code is 4 .
INFO: error text is ARCSIN doesn't like 1.1 as input .
INFO: Running invalid instruction: [ARCSIN -1.1]
INFO: error code is 4 .
INFO: error text is ARCSIN doesn't like -1.1 as input .
INFO: Running invalid instruction: [ARCSIN []]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like [] as input .
INFO: Running invalid instruction: [ARCSIN [1]]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like [1] as input .
INFO: Running invalid instruction: [ARCSIN {}]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like {} as input .
INFO: Running invalid instruction: [ARCSIN {1}]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like {1} as input .
INFO: Running invalid instruction: [ARCSIN "one]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like one as input .
INFO: Running invalid instruction: [ARCSIN "1a]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like 1a as input .
PASS: [RADARCSIN 0] output 0 , as expected.
FAIL: [RADARCSIN ( 0.5 * SQRT 2)] output 0.785398163397448 . We expected 0.785398163397448 .
FAIL: [RADARCSIN (-0.5 * SQRT 2)] output -0.785398163397448 . We expected -0.785398163397448 .
PASS: [RADARCSIN 1] output 1.5707963267949 , as expected.
PASS: [RADARCSIN -1] output -1.5707963267949 , as expected.
FAIL: [RADARCSIN 0.5] output 0.523598775598299 . We expected 0.523598775598299 .
FAIL: [RADARCSIN -0.5] output -0.523598775598299 . We expected -0.523598775598299 .
INFO: Running invalid instruction: [(RADARCSIN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADARCSIN .
INFO: Running invalid instruction: [(RADARCSIN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADARCSIN 1.1]
INFO: error code is 4 .
INFO: error text is RADARCSIN doesn't like 1.1 as input .
INFO: Running invalid instruction: [RADARCSIN -1.1]
INFO: error code is 4 .
INFO: error text is RADARCSIN doesn't like -1.1 as input .
INFO: Running invalid instruction: [RADARCSIN []]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like [] as input .
INFO: Running invalid instruction: [RADARCSIN [1]]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like [1] as input .
INFO: Running invalid instruction: [RADARCSIN {}]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like {} as input .
INFO: Running invalid instruction: [RADARCSIN {1}]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like {1} as input .
INFO: Running invalid instruction: [RADARCSIN "one]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like one as input .
INFO: Running invalid instruction: [RADARCSIN "1a]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like 1a as input .
PASS: [COS 0] output 1 , as expected.
PASS: [COS 45] output 0.707106781186548 , as expected.
PASS: [COS -45] output 0.707106781186548 , as expected.
FAIL: [COS 225] output -0.707106781186548 . We expected -0.707106781186548 .
FAIL: [COS 60] output 0.5 . We expected 0.5 .
FAIL: [COS 90] output 6.1257422745431e-17 . We expected 0 .
PASS: [COS 180] output -1 , as expected.
FAIL: [COS 270] output -1.83772268236293e-16 . We expected 0 .
PASS: [COS 360] output 1 , as expected.
PASS: [COS 3600] output 1 , as expected.
FAIL: [COS 3690] output 7.84062485076342e-15 . We expected 0 .
PASS: [COS 14.5] output 0.968147640378108 , as expected.
INFO: Running invalid instruction: [(COS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to COS .
INFO: Running invalid instruction: [(COS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [COS []]
INFO: error code is 7 .
INFO: error text is COS doesn't like [] as input .
INFO: Running invalid instruction: [COS [1]]
INFO: error code is 7 .
INFO: error text is COS doesn't like [1] as input .
INFO: Running invalid instruction: [COS {}]
INFO: error code is 7 .
INFO: error text is COS doesn't like {} as input .
INFO: Running invalid instruction: [COS {1}]
INFO: error code is 7 .
INFO: error text is COS doesn't like {1} as input .
INFO: Running invalid instruction: [COS "one]
INFO: error code is 7 .
INFO: error text is COS doesn't like one as input .
INFO: Running invalid instruction: [COS "1a]
INFO: error code is 7 .
INFO: error text is COS doesn't like 1a as input .
PASS: [RADCOS 0] output 1 , as expected.
PASS: [RADCOS ( 0.25 * PI)] output 0.707106781186548 , as expected.
PASS: [RADCOS (-0.25 * PI)] output 0.707106781186548 , as expected.
FAIL: [RADCOS ( 1.25 * PI)] output -0.707106781186548 . We expected -0.707106781186548 .
FAIL: [RADCOS ( 1/3 * PI)] output 0.5 . We expected 0.5 .
FAIL: [RADCOS ( 0.5 * PI)] output 6.1257422745431e-17 . We expected 0 .
PASS: [RADCOS PI] output -1 , as expected.
FAIL: [RADCOS 1.5 * PI] output -1.83772268236293e-16 . We expected 0 .
PASS: [RADCOS 2 * PI] output 1 , as expected.
PASS: [RADCOS 10 * PI] output 1 , as expected.
FAIL: [RADCOS 10.50 * PI] output -4.89950961746199e-16 . We expected 0 .
PASS: [RADCOS 14.5] output -0.354924266788705 , as expected.
INFO: Running invalid instruction: [(RADCOS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADCOS .
INFO: Running invalid instruction: [(RADCOS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADCOS []]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like [] as input .
INFO: Running invalid instruction: [RADCOS [1]]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like [1] as input .
INFO: Running invalid instruction: [RADCOS {}]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like {} as input .
INFO: Running invalid instruction: [RADCOS {1}]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like {1} as input .
INFO: Running invalid instruction: [RADCOS "one]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like one as input .
INFO: Running invalid instruction: [RADCOS "1a]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like 1a as input .
PASS: [ARCCOS 1] output 0 , as expected.
PASS: [ARCCOS ( 0.5 * SQRT 2)] output 45 , as expected.
PASS: [ARCCOS (-0.5 * SQRT 2)] output 135 , as expected.
PASS: [ARCCOS 0.5] output 60 , as expected.
PASS: [ARCCOS 0] output 90 , as expected.
PASS: [ARCCOS -0.5] output 120 , as expected.
PASS: [ARCCOS -1] output 180 , as expected.
INFO: Running invalid instruction: [(ARCCOS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARCCOS .
INFO: Running invalid instruction: [(ARCCOS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ARCCOS 1.1]
INFO: error code is 4 .
INFO: error text is ARCCOS doesn't like 1.1 as input .
INFO: Running invalid instruction: [ARCCOS -1.1]
INFO: error code is 4 .
INFO: error text is ARCCOS doesn't like -1.1 as input .
INFO: Running invalid instruction: [ARCCOS []]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like [] as input .
INFO: Running invalid instruction: [ARCCOS [1]]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like [1] as input .
INFO: Running invalid instruction: [ARCCOS {}]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like {} as input .
INFO: Running invalid instruction: [ARCCOS {1}]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like {1} as input .
INFO: Running invalid instruction: [ARCCOS "one]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like one as input .
INFO: Running invalid instruction: [ARCCOS "1a]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like 1a as input .
PASS: [RADARCCOS 1] output 0 , as expected.
PASS: [RADARCCOS ( 0.5 * SQRT 2)] output 0.785398163397448 , as expected.
PASS: [RADARCCOS (-0.5 * SQRT 2)] output 2.35619449019234 , as expected.
FAIL: [RADARCCOS 0.5] output 1.0471975511966 . We expected 1.0471975511966 .
PASS: [RADARCCOS 0] output 1.5707963267949 , as expected.
FAIL: [RADARCCOS -0.5] output 2.0943951023932 . We expected 2.0943951023932 .
PASS: [RADARCCOS -1] output 3.14159265358979 , as expected.
INFO: Running invalid instruction: [(RADCOS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADCOS .
INFO: Running invalid instruction: [(RADCOS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADARCCOS 1.1]
INFO: error code is 4 .
INFO: error text is RADARCCOS doesn't like 1.1 as input .
INFO: Running invalid instruction: [RADARCCOS -1.1]
INFO: error code is 4 .
INFO: error text is RADARCCOS doesn't like -1.1 as input .
INFO: Running invalid instruction: [RADARCCOS []]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like [] as input .
INFO: Running invalid instruction: [RADARCCOS [1]]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like [1] as input .
INFO: Running invalid instruction: [RADARCCOS {}]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like {} as input .
INFO: Running invalid instruction: [RADARCCOS {1}]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like {1} as input .
INFO: Running invalid instruction: [RADARCCOS "one]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like one as input .
INFO: Running invalid instruction: [RADARCCOS "1a]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like 1a as input .
PASS: [PRODUCT 1e200 2e200] output +INF , as expected.
PASS: [ROUND 2.3e40] output 2.3e+40 , as expected.
PASS: [PRODUCT 1e200 2e200] output +INF , as expected.
PASS: Bug #1397560 is fixed. Multiple floating point exceptions do not crash.
PASS: [LESSP 1 1] output false , as expected.
PASS: [LESSP 0 1] output true , as expected.
PASS: [LESSP 1 0] output false , as expected.
PASS: [LESSP 0 0] output false , as expected.
PASS: [LESSP 1.5 1.5] output false , as expected.
PASS: [LESSP 0.5 1.5] output true , as expected.
PASS: [LESSP 1.5 0.5] output false , as expected.
PASS: [LESSP 1e-16 0] output false , as expected.
PASS: [LESSP -1e-16 0] output true , as expected.
PASS: [LESSP 0 1e-16] output true , as expected.
PASS: [LESSP 0 -1e-16] output false , as expected.
PASS: [LESSP -1 -2] output false , as expected.
PASS: [LESSP -2 -1] output true , as expected.
PASS: [LESSP 10 10.5] output true , as expected.
PASS: [LESSP 10 9.5] output false , as expected.
PASS: [LESSP 10.5 10] output false , as expected.
PASS: [LESSP 10.5 11] output true , as expected.
PASS: [LESS? 1 1] output false , as expected.
PASS: [LESS? 0 1] output true , as expected.
PASS: [LESS? 1 0] output false , as expected.
PASS: [LESS? -1 0] output true , as expected.
PASS: [LESS? -5 -10] output false , as expected.
PASS: [LESS? 1.1 1.2] output true , as expected.
PASS: [LESS? -1.1 -1.2] output false , as expected.
PASS: [1 < 1] output false , as expected.
PASS: [0 < 1] output true , as expected.
PASS: [1 < 0] output false , as expected.
PASS: [-1 < 0] output true , as expected.
PASS: [-5 < -10] output false , as expected.
PASS: [1.1 < 1.2] output true , as expected.
PASS: [-1.1 < -1.2] output false , as expected.
INFO: Running invalid instruction: [(LESSP 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LESSP .
INFO: Running invalid instruction: [(LESSP 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LESSP "one 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like one as input .
INFO: Running invalid instruction: [LESSP [1] 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like [1] as input .
INFO: Running invalid instruction: [LESSP [] 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like [] as input .
INFO: Running invalid instruction: [LESSP {1} 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like {1} as input .
INFO: Running invalid instruction: [LESSP 2 "one]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like one as input .
INFO: Running invalid instruction: [LESSP 2 [1]]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like [1] as input .
INFO: Running invalid instruction: [LESSP 2 []]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like [] as input .
INFO: Running invalid instruction: [LESSP 2 {1}]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like {1} as input .
PASS: [LESSEQUALP 1 1] output true , as expected.
PASS: [LESSEQUALP 0 1] output true , as expected.
PASS: [LESSEQUALP 1 0] output false , as expected.
PASS: [LESSEQUALP 0 0] output true , as expected.
PASS: [LESSEQUALP 1.5 1.5] output true , as expected.
PASS: [LESSEQUALP 0.5 1.5] output true , as expected.
PASS: [LESSEQUALP 1.5 0.5] output false , as expected.
PASS: [LESSEQUALP -1 -2] output false , as expected.
PASS: [LESSEQUALP -2 -1] output true , as expected.
PASS: [LESSEQUALP 10 10.5] output true , as expected.
PASS: [LESSEQUALP 10 9.5] output false , as expected.
PASS: [LESSEQUALP 10.5 10] output false , as expected.
PASS: [LESSEQUALP 10.5 11] output true , as expected.
PASS: [LESSEQUAL? 1 1] output true , as expected.
PASS: [LESSEQUAL? 0 1] output true , as expected.
PASS: [LESSEQUAL? 1 0] output false , as expected.
PASS: [LESSEQUAL? -1 0] output true , as expected.
PASS: [LESSEQUAL? -5 -10] output false , as expected.
PASS: [LESSEQUAL? 1.1 1.2] output true , as expected.
PASS: [LESSEQUAL? -1.1 -1.2] output false , as expected.
PASS: [1 <= 1] output true , as expected.
PASS: [0 <= 1] output true , as expected.
PASS: [1 <= 0] output false , as expected.
PASS: [-1 <= 0] output true , as expected.
PASS: [-5 <= -10] output false , as expected.
PASS: [1.1 <= 1.2] output true , as expected.
PASS: [-1.1 <= -1.2] output false , as expected.
INFO: Running invalid instruction: [(LESSEQUALP 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LESSEQUALP .
INFO: Running invalid instruction: [(LESSEQUALP 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LESSEQUALP "one 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like one as input .
INFO: Running invalid instruction: [LESSEQUALP [1] 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like [1] as input .
INFO: Running invalid instruction: [LESSEQUALP [] 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like [] as input .
INFO: Running invalid instruction: [LESSEQUALP {1} 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like {1} as input .
INFO: Running invalid instruction: [LESSEQUALP 2 "one]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like one as input .
INFO: Running invalid instruction: [LESSEQUALP 2 [1]]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like [1] as input .
INFO: Running invalid instruction: [LESSEQUALP 2 []]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like [] as input .
INFO: Running invalid instruction: [LESSEQUALP 2 {1}]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like {1} as input .
PASS: [GREATERP 1 1] output false , as expected.
PASS: [GREATERP 0 1] output false , as expected.
PASS: [GREATERP 1 0] output true , as expected.
PASS: [GREATERP 0 0] output false , as expected.
PASS: [GREATERP 1.5 1.5] output false , as expected.
PASS: [GREATERP 0.5 1.5] output false , as expected.
PASS: [GREATERP 1.5 0.5] output true , as expected.
PASS: [GREATERP 1e-16 0] output true , as expected.
PASS: [GREATERP -1e-16 0] output false , as expected.
PASS: [GREATERP 0 1e-16] output false , as expected.
PASS: [GREATERP 0 -1e-16] output true , as expected.
PASS: [GREATERP -1 -2] output true , as expected.
PASS: [GREATERP -2 -1] output false , as expected.
PASS: [GREATERP 10 10.5] output false , as expected.
PASS: [GREATERP 10 9.5] output true , as expected.
PASS: [GREATERP 10.5 10] output true , as expected.
PASS: [GREATERP 10.5 11] output false , as expected.
PASS: [GREATER? 1 1] output false , as expected.
PASS: [GREATER? 0 1] output false , as expected.
PASS: [GREATER? 1 0] output true , as expected.
PASS: [GREATER? -1 0] output false , as expected.
PASS: [GREATER? -5 -10] output true , as expected.
PASS: [GREATER? 1.1 1.2] output false , as expected.
PASS: [GREATER? -1.1 -1.2] output true , as expected.
PASS: [1 > 1] output false , as expected.
PASS: [0 > 1] output false , as expected.
PASS: [1 > 0] output true , as expected.
PASS: [-1 > 0] output false , as expected.
PASS: [-5 > -10] output true , as expected.
PASS: [1.1 > 1.2] output false , as expected.
PASS: [-1.1 > -1.2] output true , as expected.
INFO: Running invalid instruction: [(GREATERP 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GREATERP .
INFO: Running invalid instruction: [(GREATERP 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GREATERP "one 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like one as input .
INFO: Running invalid instruction: [GREATERP [1] 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like [1] as input .
INFO: Running invalid instruction: [GREATERP [] 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like [] as input .
INFO: Running invalid instruction: [GREATERP {1} 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like {1} as input .
INFO: Running invalid instruction: [GREATERP 2 "one]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like one as input .
INFO: Running invalid instruction: [GREATERP 2 [1]]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like [1] as input .
INFO: Running invalid instruction: [GREATERP 2 []]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like [] as input .
INFO: Running invalid instruction: [GREATERP 2 {1}]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like {1} as input .
PASS: [GREATEREQUALP 1 1] output true , as expected.
PASS: [GREATEREQUALP 0 1] output false , as expected.
PASS: [GREATEREQUALP 1 0] output true , as expected.
PASS: [GREATEREQUALP 0 0] output true , as expected.
PASS: [GREATEREQUALP 1.5 1.5] output true , as expected.
PASS: [GREATEREQUALP 0.5 1.5] output false , as expected.
PASS: [GREATEREQUALP 1.5 0.5] output true , as expected.
PASS: [GREATEREQUALP -1 -2] output true , as expected.
PASS: [GREATEREQUALP -2 -1] output false , as expected.
PASS: [GREATEREQUALP 10 10.5] output false , as expected.
PASS: [GREATEREQUALP 10 9.5] output true , as expected.
PASS: [GREATEREQUALP 10.5 10] output true , as expected.
PASS: [GREATEREQUALP 10.5 11] output false , as expected.
PASS: [GREATEREQUAL? 1 1] output true , as expected.
PASS: [GREATEREQUAL? 0 1] output false , as expected.
PASS: [GREATEREQUAL? 1 0] output true , as expected.
PASS: [GREATEREQUAL? -1 0] output false , as expected.
PASS: [GREATEREQUAL? -5 -10] output true , as expected.
PASS: [GREATEREQUAL? 1.1 1.2] output false , as expected.
PASS: [GREATEREQUAL? -1.1 -1.2] output true , as expected.
PASS: [1 >= 1] output true , as expected.
PASS: [0 >= 1] output false , as expected.
PASS: [1 >= 0] output true , as expected.
PASS: [-1 >= 0] output false , as expected.
PASS: [-5 >= -10] output true , as expected.
PASS: [1.1 >= 1.2] output false , as expected.
PASS: [-1.1 >= -1.2] output true , as expected.
INFO: Running invalid instruction: [(GREATEREQUALP 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GREATEREQUALP .
INFO: Running invalid instruction: [(GREATEREQUALP 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GREATEREQUALP "one 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like one as input .
INFO: Running invalid instruction: [GREATEREQUALP [1] 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like [1] as input .
INFO: Running invalid instruction: [GREATEREQUALP [] 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like [] as input .
INFO: Running invalid instruction: [GREATEREQUALP {1} 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like {1} as input .
INFO: Running invalid instruction: [GREATEREQUALP 2 "one]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like one as input .
INFO: Running invalid instruction: [GREATEREQUALP 2 [1]]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like [1] as input .
INFO: Running invalid instruction: [GREATEREQUALP 2 []]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like [] as input .
INFO: Running invalid instruction: [GREATEREQUALP 2 {1}]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like {1} as input .
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [RANDOM 1] output 0 , as expected.
PASS: [RANDOM 0] output 0 , as expected.
INFO: Running invalid instruction: [(RANDOM)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RANDOM .
INFO: Running invalid instruction: [(RANDOM 10 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RANDOM {1}]
PASS: error code is 7 , as expected.
INFO: error text is RANDOM doesn't like {1} as input .
INFO: Running invalid instruction: [RANDOM [1]]
PASS: error code is 7 , as expected.
INFO: error text is RANDOM doesn't like [1] as input .
INFO: Running invalid instruction: [RANDOM 1.5]
PASS: error code is 7 , as expected.
INFO: error text is RANDOM doesn't like 1.5 as input .
INFO: Running invalid instruction: [RANDOM -1]
PASS: error code is 7 , as expected.
INFO: error text is RANDOM doesn't like -1 as input .
CALL: RERANDOM
CALL: REPEAT 10 [push "sequence1 RANDOM 1000]
CALL: RERANDOM
CALL: REPEAT 10 [push "sequence2 RANDOM 1000]
PASS: [:sequence1 = :sequence2] output true , as expected.
CALL: (RERANDOM 10)
CALL: REPEAT 10 [push "sequence1 RANDOM 1000]
CALL: (RERANDOM 10)
CALL: REPEAT 10 [push "sequence2 RANDOM 1000]
PASS: [:sequence1 = :sequence3] output false , as expected.
PASS: [:sequence3 = :sequence4] output true , as expected.
INFO: Running invalid instruction: [(RERANDOM 10 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(RERANDOM {1} )]
PASS: error code is 7 , as expected.
INFO: error text is RERANDOM doesn't like {1} as input .
INFO: Running invalid instruction: [(RERANDOM [1] )]
PASS: error code is 7 , as expected.
INFO: error text is RERANDOM doesn't like [1] as input .
INFO: Running invalid instruction: [(RERANDOM 1.5)]
PASS: error code is 7 , as expected.
INFO: error text is RERANDOM doesn't like 1.5 as input .
PASS: [(BITAND)] output -1 , as expected.
PASS: [(BITAND 123)] output 123 , as expected.
PASS: [(BITAND -123)] output -123 , as expected.
PASS: [(BITAND 5 2 )] output 0 , as expected.
PASS: [(BITAND 5 1 )] output 1 , as expected.
PASS: [(BITAND 0 -1 )] output 0 , as expected.
PASS: [(BITAND 5 -1 )] output 5 , as expected.
PASS: [(BITAND 5.0 1.0 )] output 1 , as expected.
PASS: [(BITAND 6 2 10)] output 2 , as expected.
INFO: Running invalid instruction: [(BITAND "word)]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like word as input .
INFO: Running invalid instruction: [(BITAND [123] )]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like [123] as input .
INFO: Running invalid instruction: [(BITAND {123} )]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like {123} as input .
INFO: Running invalid instruction: [(BITAND 12.30)]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like 12.3 as input .
INFO: Running invalid instruction: [(BITAND 1 "word)]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like word as input .
INFO: Running invalid instruction: [(BITAND 1 [123] )]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like [123] as input .
INFO: Running invalid instruction: [(BITAND 1 {123} )]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like {123} as input .
INFO: Running invalid instruction: [(BITAND 1 12.30)]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like 12.3 as input .
PASS: [(BITOR)] output 0 , as expected.
PASS: [(BITOR 123 )] output 123 , as expected.
PASS: [(BITOR -123 )] output -123 , as expected.
PASS: [(BITOR 5 2 )] output 7 , as expected.
PASS: [(BITOR 5 1 )] output 5 , as expected.
PASS: [(BITOR 0 0 )] output 0 , as expected.
PASS: [(BITOR 5 -1 )] output -1 , as expected.
PASS: [(BITOR 5.0 2.0 )] output 7 , as expected.
PASS: [(BITOR 6 2 10)] output 14 , as expected.
INFO: Running invalid instruction: [(BITOR "word)]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like word as input .
INFO: Running invalid instruction: [(BITOR [123] )]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like [123] as input .
INFO: Running invalid instruction: [(BITOR {123} )]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like {123} as input .
INFO: Running invalid instruction: [(BITOR 12.30)]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like 12.3 as input .
INFO: Running invalid instruction: [(BITOR 1 "word)]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like word as input .
INFO: Running invalid instruction: [(BITOR 1 [123] )]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like [123] as input .
INFO: Running invalid instruction: [(BITOR 1 {123} )]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like {123} as input .
INFO: Running invalid instruction: [(BITOR 1 12.30)]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like 12.3 as input .
PASS: [(BITXOR)] output 0 , as expected.
PASS: [(BITXOR 123 )] output 123 , as expected.
PASS: [(BITXOR -123 )] output -123 , as expected.
PASS: [(BITXOR 5 2 )] output 7 , as expected.
PASS: [(BITXOR 5 1 )] output 4 , as expected.
PASS: [(BITXOR 0 0 )] output 0 , as expected.
PASS: [(BITXOR 5 -1 )] output -6 , as expected.
PASS: [(BITXOR 5 5 )] output 0 , as expected.
PASS: [(BITXOR 5.0 1.0 )] output 4 , as expected.
PASS: [(BITXOR 6 2 10)] output 14 , as expected.
INFO: Running invalid instruction: [(BITXOR "word)]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like word as input .
INFO: Running invalid instruction: [(BITXOR [123] )]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like [123] as input .
INFO: Running invalid instruction: [(BITXOR {123} )]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like {123} as input .
INFO: Running invalid instruction: [(BITXOR 12.30)]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like 12.3 as input .
INFO: Running invalid instruction: [(BITXOR 1 "word)]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like word as input .
INFO: Running invalid instruction: [(BITXOR 1 [123] )]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like [123] as input .
INFO: Running invalid instruction: [(BITXOR 1 {123} )]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like {123} as input .
INFO: Running invalid instruction: [(BITXOR 1 12.30)]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like 12.3 as input .
PASS: [BITNOT 123] output -124 , as expected.
PASS: [BITNOT -124] output 123 , as expected.
PASS: [BITNOT 0] output -1 , as expected.
FAIL: [BITNOT 12.00] threw error.  code= 4 . BITNOT doesn't like 12 as input
INFO: Running invalid instruction: [(BITNOT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITNOT .
INFO: Running invalid instruction: [(BITNOT 123 456)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BITNOT "word]
INFO: error code is 7 .
INFO: error text is BITNOT doesn't like word as input .
INFO: Running invalid instruction: [BITNOT [123]]
INFO: error code is 7 .
INFO: error text is BITNOT doesn't like [123] as input .
INFO: Running invalid instruction: [BITNOT {123}]
INFO: error code is 7 .
INFO: error text is BITNOT doesn't like {123} as input .
INFO: Running invalid instruction: [BITNOT 12.30]
INFO: error code is 4 .
INFO: error text is BITNOT doesn't like 12.3 as input .
PASS: [LSHIFT 5 2] output 20 , as expected.
PASS: [LSHIFT 20 -2] output 5 , as expected.
PASS: [LSHIFT -20 -1] output 2147483638 , as expected.
PASS: [LSHIFT 5 0] output 5 , as expected.
PASS: [LSHIFT 0 5] output 0 , as expected.
PASS: [ASHIFT 5.0 2.00] output 20 , as expected.
INFO: Running invalid instruction: [(LSHIFT 5)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LSHIFT .
INFO: Running invalid instruction: [(LSHIFT 5 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LSHIFT "word 0]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like word as input .
INFO: Running invalid instruction: [LSHIFT [123] 0]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like [123] as input .
INFO: Running invalid instruction: [LSHIFT {123} 0]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like {123} as input .
INFO: Running invalid instruction: [LSHIFT 12.30 0]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like 12.3 as input .
INFO: Running invalid instruction: [LSHIFT 5 "word]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like word as input .
INFO: Running invalid instruction: [LSHIFT 5 [123]]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like [123] as input .
INFO: Running invalid instruction: [LSHIFT 5 {123}]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like {123} as input .
INFO: Running invalid instruction: [LSHIFT 5 12.30]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like 12.3 as input .
PASS: [ASHIFT 5 2] output 20 , as expected.
PASS: [ASHIFT 20 -2] output 5 , as expected.
PASS: [ASHIFT -20 -1] output -10 , as expected.
PASS: [ASHIFT 5 0] output 5 , as expected.
PASS: [ASHIFT 0 5] output 0 , as expected.
PASS: [ASHIFT 5.0 2.00] output 20 , as expected.
INFO: Running invalid instruction: [(ASHIFT 5)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ASHIFT .
INFO: Running invalid instruction: [(ASHIFT 5 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ASHIFT "word 0]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like word as input .
INFO: Running invalid instruction: [ASHIFT [123] 0]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like [123] as input .
INFO: Running invalid instruction: [ASHIFT {123} 0]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like {123} as input .
INFO: Running invalid instruction: [ASHIFT 12.30 0]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like 12.3 as input .
INFO: Running invalid instruction: [ASHIFT 5 "word]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like word as input .
INFO: Running invalid instruction: [ASHIFT 5 [123]]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like [123] as input .
INFO: Running invalid instruction: [ASHIFT 5 {123}]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like {123} as input .
INFO: Running invalid instruction: [ASHIFT 5 12.30]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like 12.3 as input .
PASS: [PROCEDURETEST.ÀCÇÊNT] output 3333 , as expected.
PASS: [proceduretest.àcçênt] output 3333 , as expected.
PASS: [ProcedureTest.Àcçênt] output 3333 , as expected.
PASS: [TEXT "SAMPLEPROC] output [[a b] [PRINT :a] [SHOW :b]] , as expected.
PASS: [TEXT "PROCEDURETEST.COMPLEXPROC] output [[a b [c 1] [d SUM 1 2] [e] 2] [PRINT :a] [SHOW :b] [OUTPUT SUM :c :d]] , as expected.
INFO: Running invalid instruction: [(TEXT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TEXT .
INFO: Running invalid instruction: [TEXT "nonexistent]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [TEXT [sampleproc]]
PASS: error code is 7 , as expected.
INFO: error text is TEXT doesn't like [sampleproc] as input .
INFO: Running invalid instruction: [TEXT {sampleproc}]
PASS: error code is 7 , as expected.
INFO: error text is TEXT doesn't like {sampleproc} as input .
INFO: Running invalid instruction: [TEXT 123]
PASS: error code is 7 , as expected.
INFO: error text is TEXT doesn't like 123 as input .
INFO: Running invalid instruction: [(TEXT "sampleproc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: MAKE "fulltext FULLTEXT "SAMPLEPROC
PASS: [LIST? :fulltext] output true , as expected.
PASS: [ITEM 1 :fulltext] output TO SAMPLEPROC  :a  :b , as expected.
PASS: [ITEM 2 :fulltext] output   PRINT :a ; print , as expected.
PASS: [ITEM 3 :fulltext] output   SHOW  :b ; show , as expected.
PASS: [ITEM 4 :fulltext] output END , as expected.
PASS: [COUNT :fulltext] output 4 , as expected.
CALL: MAKE "fulltext FULLTEXT "PROCEDURETEST.COMPLEXPROC
PASS: [LIST? :fulltext] output true , as expected.
PASS: [ITEM 1 :fulltext] output TO PROCEDURETEST.COMPLEXPROC :a :b [:c 1] [:d SUM 1 2] [:e] 2   , as expected.
PASS: [ITEM 2 :fulltext] output   PRINT :a ; print , as expected.
PASS: [ITEM 3 :fulltext] output   SHOW  :b ; show , as expected.
PASS: [ITEM 4 :fulltext] output  , as expected.
PASS: [ITEM 5 :fulltext] output   OUTPUT SUM :c :d ; output , as expected.
PASS: [ITEM 6 :fulltext] output END , as expected.
PASS: [COUNT :fulltext] output 6 , as expected.
INFO: Running invalid instruction: [(FULLTEXT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FULLTEXT .
INFO: Running invalid instruction: [FULLTEXT "nonexistent]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [FULLTEXT [sampleproc]]
PASS: error code is 7 , as expected.
INFO: error text is FULLTEXT doesn't like [sampleproc] as input .
INFO: Running invalid instruction: [FULLTEXT {sampleproc}]
PASS: error code is 7 , as expected.
INFO: error text is FULLTEXT doesn't like {sampleproc} as input .
INFO: Running invalid instruction: [FULLTEXT 12345]
PASS: error code is 7 , as expected.
INFO: error text is FULLTEXT doesn't like 12345 as input .
INFO: Running invalid instruction: [(FULLTEXT "sampleproc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [DEFINEDP "nonexistent] output false , as expected.
PASS: [DEFINED? "nonexistent] output false , as expected.
PASS: [DEFINED? "FORWARD] output false , as expected.
PASS: [DEFINED? "SAMPLEPROC] output true , as expected.
PASS: [DEFINED? "sampleproc] output true , as expected.
PASS: [DEFINED? "] output false , as expected.
CALL: ERASE "REVERSE
PASS: [DEFINED? "REVERSE] output true , as expected.
CALL: ERASE "FOREACH
PASS: [DEFINED? "FOREACH] output true , as expected.
INFO: Running invalid instruction: [(DEFINED?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DEFINED? .
INFO: Running invalid instruction: [(DEFINED? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is DEFINED? doesn't like {a} as input .
INFO: Running invalid instruction: [(DEFINED? [] )]
PASS: error code is 7 , as expected.
INFO: error text is DEFINED? doesn't like [] as input .
INFO: Running invalid instruction: [(DEFINED? 123)]
PASS: error code is 7 , as expected.
INFO: error text is DEFINED? doesn't like 123 as input .
INFO: Running invalid instruction: [(DEFINED? "sampleproc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PROCEDUREP "nonexistent] output false , as expected.
PASS: [PROCEDURE? "nonexistent] output false , as expected.
PASS: [PROCEDURE? "FORWARD] output true , as expected.
PASS: [PROCEDURE? "SAMPLEPROC] output true , as expected.
PASS: [PROCEDURE? "sampleproc] output true , as expected.
PASS: [PROCEDURE? 123] output false , as expected.
PASS: [PROCEDURE? "] output false , as expected.
CALL: ERASE "REVERSE
PASS: [PROCEDURE? "REVERSE] output true , as expected.
PASS: [PROCEDURE? "REVERSE] output true , as expected.
PASS: [PROCEDURE? "`] output true , as expected.
INFO: Running invalid instruction: [(PROCEDURE?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PROCEDURE? .
INFO: Running invalid instruction: [(PROCEDURE? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is PROCEDURE? doesn't like {a} as input .
INFO: Running invalid instruction: [(PROCEDURE? [] )]
PASS: error code is 7 , as expected.
INFO: error text is PROCEDURE? doesn't like [] as input .
INFO: Running invalid instruction: [(PROCEDURE? "sampleproc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NAMEP "nonexistent] output false , as expected.
PASS: [NAME? "nonexistent] output false , as expected.
PASS: [NAME? "FORWARD] output false , as expected.
PASS: [NAME? "] output false , as expected.
PASS: [NAME? 12345] output false , as expected.
PASS: [NAME? -1234] output false , as expected.
PASS: [NAME? "namepvariable] output true , as expected.
PASS: [NAME? "NAMEPVARIABLE] output true , as expected.
INFO: Running invalid instruction: [(NAME?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NAME? .
INFO: Running invalid instruction: [(NAME? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is NAME? doesn't like {a} as input .
INFO: Running invalid instruction: [(NAME? [] )]
PASS: error code is 7 , as expected.
INFO: error text is NAME? doesn't like [] as input .
INFO: Running invalid instruction: [(NAME? "namepvariable "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PRIMITIVEP "nonexistent] output false , as expected.
PASS: [PRIMITIVE? "nonexistent] output false , as expected.
PASS: [PRIMITIVE? "FORWARD] output true , as expected.
PASS: [PRIMITIVE? "FD] output true , as expected.
PASS: [PRIMITIVE? "] output false , as expected.
PASS: [PRIMITIVE? "namepvariable] output false , as expected.
PASS: [PRIMITIVE? "sampleproc] output false , as expected.
INFO: Running invalid instruction: [(PRIMITIVE?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PRIMITIVE? .
INFO: Running invalid instruction: [(PRIMITIVE? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is PRIMITIVE? doesn't like {a} as input .
INFO: Running invalid instruction: [(PRIMITIVE? [] )]
PASS: error code is 7 , as expected.
INFO: error text is PRIMITIVE? doesn't like [] as input .
INFO: Running invalid instruction: [(PRIMITIVE? 123)]
PASS: error code is 7 , as expected.
INFO: error text is PRIMITIVE? doesn't like 123 as input .
INFO: Running invalid instruction: [(PRIMITIVE? "namepvariable "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [MACROP "mymacro] output true , as expected.
PASS: [MACRO? "mymacro] output true , as expected.
PASS: [MACRO? "FORWARD] output false , as expected.
PASS: [MACRO? "FD] output false , as expected.
PASS: [MACRO? "] output false , as expected.
PASS: [MACRO? "namepvariable] output false , as expected.
PASS: [MACRO? "sampleproc] output false , as expected.
CALL: ERASE "FOREACH
PASS: [MACRO? "FOREACH] output true , as expected.
CALL: IGNORE REVERSE []
PASS: [MACRO? "REVERSE] output false , as expected.
INFO: Running invalid instruction: [(MACRO?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MACRO? .
INFO: Running invalid instruction: [(MACRO? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is MACRO? doesn't like {a} as input .
INFO: Running invalid instruction: [(MACRO? [] )]
PASS: error code is 7 , as expected.
INFO: error text is MACRO? doesn't like [] as input .
INFO: Running invalid instruction: [(MACRO? 123)]
PASS: error code is 7 , as expected.
INFO: error text is MACRO? doesn't like 123 as input .
INFO: Running invalid instruction: [(MACRO? "mymacro "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [ECHO "input] output input , as expected.
PASS: [DEFINEDP "ECHO] output true , as expected.
PASS: [DEFINED? "ECHO] output true , as expected.
CALL: DEFINE "DONOTHING [[]]
PASS: [DEFINED? "DONOTHING] output true , as expected.
CALL: DONOTHING
CALL: MAKE "linewascalled 0
CALL: DEFINE "BODYHASEMPTYLINES [[] [] [MAKE "linewascalled :linewascalled + 1] []]
CALL: BODYHASEMPTYLINES
CALL: BODYHASEMPTYLINES
PASS: [:linewascalled] output 2 , as expected.
CALL: DEFINE "BODYHASALLEMPTYLINES [[] [] [] []]
CALL: BODYHASALLEMPTYLINES
CALL: BODYHASALLEMPTYLINES
PASS: Bug #2790076 is fixed (running template with all empty lines twice didn't crash)
PASS: [DEFINETEST.REDEFINEDPROC 123] output 123 , as expected.
INFO: Running invalid instruction: [(DEFINE "BADPROCEDURE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DEFINE .
INFO: Running invalid instruction: [(DEFINE "BADPROCEDURE [[a] [output :a]] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [DEFINE 123 [[a] [output :a]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like 123 as input .
INFO: Running invalid instruction: [DEFINE [BADPROCEDURE] [[a] [output :a]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [BADPROCEDURE] as input .
INFO: Running invalid instruction: [DEFINE {BADPROCEDURE} [[a] [output :a]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like {BADPROCEDURE} as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE "badtext]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like badtext as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE []]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE {[a] [output :a]}]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like {[a] [output :a]} as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE ["a [output :a]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like ["a [output :a]] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE [[a] {output :a}]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [[a] {output :a}] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE [[a] output :a]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [[a] output :a] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE [{a b} [FORWARD 10]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [{a b} [FORWARD 10]] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE [[a b] [FORWARD 10] BADINPUT [FORWARD 10]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [[a b] [FORWARD 10] BADINPUT [FORWARD 10]] as input .
PASS: [DEFINED? "BADPROCEDURE] output false , as expected.
INFO: Running invalid instruction: [DEFINE "BUG1520950 [[] APPLY [OUTPUT ?] [3]] BUG1520950]
INFO: error code is 7 .
INFO: error text is DEFINE doesn't like [[] APPLY [OUTPUT ?] [3]] as input .
PASS: [DEFINED? "BUG1520950] output false , as expected.
PASS: [LOCALVARTEST "unknownlocalvar 42] output 42 , as expected.
PASS: [NAME? "unknownlocalvar] output false , as expected.
INFO: Running invalid instruction: [:thisvariableisunbound]
PASS: error code is 11 , as expected.
INFO: error text is thisvariableisunbound has no value .
INFO: Running invalid instruction: [:thisvariableisunbound]
PASS: error code is 11 , as expected.
INFO: error text is thisvariableisunbound has no value .
PASS: [:10] output ten , as expected.
PASS: [:11] output eleven , as expected.
PASS: [:10] output ten , as expected.
PASS: [:11] output eleven , as expected.
INFO: Running invalid instruction: [(LOCAL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOCAL .
INFO: Running invalid instruction: [LOCAL {a}]
FAIL: Running [LOCAL {a}] did not throw an error.
PASS: [LOCALVARTEST "mylocalvarname 42] output 42 , as expected.
PASS: [:mylocalvarname] output 32 , as expected.
INFO: Running invalid instruction: [(LOCALMAKE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOCALMAKE .
INFO: Running invalid instruction: [(CONTENTS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PROCEDURES] output [#test .eqtest a.colorization.test abstest activeareatest activeareatest.badinput activeareatest.smoketest andtest angleiscloseenough applytest applytest.applyoutput applytest.badinput applytest.bug1519088 applytest.lambdatemplate applytest.lambdatemplate.newscopetest applytest.nestedapply applytest.nonprimitive applytest.nooutput applytest.proceduretexttemplate applytest.proceduretexttemplate.newscopetest applytest.questionmarktemplate applytest.smoketest arcbadinputtest arccostest arcsintest arcsmoketest arctantest arctest arraybadinputtest arrayorigintest arrayptest arraysmoketest arraytest asciitest ashifttest.badinput ashifttest.smoketest backticktest backticktest.badinput backticktest.examplesfrommanual backticktest.smoketest backticktest.wordshorthand beforeptest bitandtest.badinput bitandtest.smoketest bitblocktest bitblocktest.badinput bitblocktest.smoketest bitcopytest bitfittest bitfittest.badinput bitfittest.smoketest bitload.badinput bitloadsizetest bitmaptest bitmodetest bitmodetest.badinput bitmodetest.smoketest bitnottest.badinput bitnottest.smoketest bitortest.badinput bitortest.smoketest bitpastetoindextest.badinput bitpastetoindextest.smoketest bitsave.badinput bitsave.withactivearea bitwisetest bitxortest.badinput bitxortest.smoketest bodyhasallemptylines bodyhasemptylines bug1349374test bug1377856test bug1383281test bug1384267test bug1388325test bug1397560test bug1438863test bug1448155test bug1458661test bug1563318.applysum bug1563318.crash bug1563318.defaultrest bug1563318.oneinput burytest burytest.badinput burytest.buriedprocedure burytest.buryall burytest.procedure burytest.propertylist burytest.variable butfirststest butfirststest.badinput butfirststest.smoketest butfirsttest butlasttest buttonptest byetest byetest.badinput cascadetest cascadetest.badinput cascadetest.smoketest cascadetest.vowel? catchtest catchtest.badinput catchtest.catchbuiltinerror catchtest.catchusererror catchtest.doublecatcherror catchtest.doublecatcherror.innercatcherror catchtest.doublecatcherror.throwerror catchtest.skiperrortag catchtest.skiperrortag.catcherror catchtest.skiperrortag.throw catchtest.skipthrowtag catchtest.skipthrowtag.catchthrowtag catchtest.skipthrowtag.throwerror catchtest.skipthrowtagwithvalue catchtest.skipthrowtagwithvalue.catchinnertag catchtest.skipthrowtagwithvalue.throwoutertag catchtest.smoketest catchtest.smoketest.throw catchtest.throw.builtin.error chdirtest client.onreadytosend colorerracttest colorindextest colornametest colorsetgettest colortest colortest.output.5 combinetest combinetest.badinput combinetest.smoketest commandlinetest commandlinetest.alreadyrunning commandlinetest.parameter.filename commandlinetest.parameter.l commandlinetest.runtest commandlinetest.widthheight controlflowtest copydef.allow.redefinitions copydefmaybeoutputtest copydefoptest copydefoutputtest copydefstoptest copydeftest copydeftest.badinput copydeftest.eraseoriginal copydeftest.infix copydeftest.innontailrecursiveprocedure copydeftest.libraryprocedure copydeftest.nontailrecursivecount copydeftest.primitive copydeftest.primitivewithinputs copydeftest.redefp copydeftest.specialform copydeftest.userdefined copydeftotest costest definedptest definedptest.badinput definedptest.smoketest definetest definetest.badinput definetest.bodyhasemptylines definetest.bodyisallemptylines definetest.smoketest differencetest difficultcomments1 difficultcomments2 directorysmoketest directorytest dllcalltest dllfreetest dllloadtest dllsmoketest dlltest donothing doorientationtest echo edalltest.badinput edalltest.displaybyhwnd editortest edittest.badinput edittest.manyvariables emptyptest equalptest equalptest.badinput equalptest.deeplynestedlist equalptest.international equalptest.smoketest erasetest erasetest.badinput erasetest.eraseall erasetest.eraseprocedure erasetest.erasepropertylist erasetest.erasevariable erasetest.ern erasetest.erpl erracttest erracttest.bug1517326 erracttest.bug1517326.continue5 erracttest.catchblockserract erracttest.changeerract.output.6 erracttest.changeerractinerract erracttest.erractaftercatch erracttest.errorinerract erracttest.output.5 erracttest.output.nexterractvalue erracttest.outputwrongvalue erracttest.recoverableerror.outputnothing erracttest.smoketest erracttest.unrecoverableerror.outputnothing erracttest.unrecoverableerror.outputvalue error.30.test errortest errortest.bug1577034 errortest.call.output.run.5 errortest.output.run.5 evaltest evaltest.catcherrormanytimes evaltest.catchtoomanyinputserror evaltest.nontailrecursive evaltest.nontailrecursivecount evaltest.tailrecursive evaltest.tailrecursivecount exptest fencetest fencetest.badinput fencetest.bug1573061 fencetest.smoketest filetest filetest.allopen filetest.badinput filetest.closeall filetest.closereader filetest.dribble filetest.eofponstdin filetest.erasefile filetest.openappend filetest.opendirectoryasfile filetest.openopenfile filetest.openupdate filetest.setread.closedfile filetest.setreadpos filetest.setwritepos filetest.smoketest filltest filltimerevent firststest firststest.badinput firststest.smoketest firsttest floodcolortest fontfacenamestest fontfacenamestest.badinput fontfacenamestest.manualtest fontfacenamestest.smoketest foreachtest foreachtest.badinput foreachtest.output foreachtest.output.from.variable foreachtest.output.from.variable.worker foreachtest.output.worker foreachtest.smoketest foreachtest.stop forevertest forevertest.badinput forevertest.errorinforever forevertest.outputinforever forevertest.smoketest forevertest.stopinforever formtest fputtest fputtest.badinput fputtest.smoketest fulltexttest fulltexttest.badinput fulltexttest.smoketest gif.smoketest gifload.badinput gifsave.badinput gifsave.overwritesfile gifsize.badinput gifsize.smoketest giftest goldenratiotest greaterequalptest greaterequalptest.badinput greaterequalptest.smoketest greaterptest greaterptest.badinput greaterptest.smoketest greatlogoatlastest greatlogoatlastest.tok1.1 greatlogoatlastest.tok1.10 greatlogoatlastest.tok1.11 greatlogoatlastest.tok1.2 greatlogoatlastest.tok1.3 greatlogoatlastest.tok1.4 greatlogoatlastest.tok1.5 greatlogoatlastest.tok1.6 greatlogoatlastest.tok1.7 greatlogoatlastest.tok1.8 greatlogoatlastest.tok1.9 greatlogoatlastest.tok2.1 greatlogoatlastest.tok2.2 greatlogoatlastest.tok2.3 greatlogoatlastest.tok2.4 greatlogoatlastest.tok2.5 greatlogoatlastest.tok3.1 greatlogoatlastest.tok3.2 greatlogoatlastest.tok3.3 greatlogoatlastest.tok3.4 greatlogoatlastest.tok3.5 greatlogoatlastest.tok3.6 greatlogoatlastest.tok3.7 greatlogoatlastest.tok3.8 greatlogoatlastest.tok3.9 helptest i.dont.know.what.to.do.with.value iftest inporttest inttest iseqtest itemtest itemtest.badinput itemtest.badinput.recoverable itemtest.output.2 itemtest.smoketest labelbadinputtest labelcircletest labeltest lasttest lessequalptest lessequalptest.badinput lessequalptest.smoketest lessptest lessptest.badinput lessptest.smoketest linecontinuation3 listptest listtest listtest.smoketest listtoarraytest listtoarraytest.badinput listtoarraytest.smoketest lntest loadtest localvartest log10test logictest logoversiontest logoversiontest.badinput logoversiontest.smoketest lowercasetest lowercasetest.badinput lowercasetest.international lowercasetest.smoketest lputtest lputtest.badinput lputtest.smoketest lshifttest.badinput lshifttest.smoketest macro.return.unbound.instead.of.list macroexpandtest macroexpandtest.badinput macroexpandtest.macroforward macroexpandtest.outputnothing macroexpandtest.smoketest macrotest macrotest.myrun macrotest.outputnothing macrotest.outputtest macrotest.smoketest macrotest.stoptest maptest maptest.badinput maptest.smoketest mathtest mdarraytest mdarraytest.badinput mdarraytest.onedimensional mdarraytest.origin mdarraytest.smoketest mditemtest.badinput mditemtest.smoketest mdsetitemtest.badinput mdsetitemtest.smoketest memberptest messageboxtest messageboxtest.badinput messageboxtest.smoketest miditest miditest.badinput miditest.devicezero miditest.longformat miditest.playtune miditest.runalreadyopentest miditest.rundevicenotopentest miditest.smoketest minustest misctest mkdirtest modulotest mousetest mousetest.badinput mousetest.simpletest multidllloadtest my.proc.to.step myadd mymacro nearest.decimal.places networktest networktest.client.echo networktest.client.receivelargepacket networktest.client.receiveunframedpacket networktest.client.shutdownrace networktest.client.smoketest networktest.hostname networktest.netshutdowncrash networktest.server.receiveunframedpacket networktest.server.shutdownrace networktest.server.twoconnections networktest.servercommand networktest.smoketest no.input.no.output nodestest notequalptest notequalptest.badinput notequalptest.smoketest nottest numberptest one.input.no.output orientationtest orientationtest.bug1429938 ortest outporttest output.373 parsetest parsetest.deeplynestedinfixexpression parsetest.deeplyparenthesizedexpression parsetest.expression parsetest.func parsetest.infixexpression parsetest.infixexpression.priority parsetest.longinstructionline parsetest.longinstructionlinewithcatch parsetest.lotsofnegationoperators parsetest.manyinputs parsetest.manynestedcalls parsetest.number parsetest.parsechar255 parsetest.symbolsofinclusion parsetest.word pasteincircle pencolortest penmodetest pensizetest pensizetest.badinput pensizetest.setgettest pensizetest.smoketest pentest penupdowntest perspectivetest perspectivetest.badinput perspectivetest.smoketest pitest pixeltest pixeltest.badinput pixeltest.smoketest plisttest polygontest polygontest.definepolygon polygontest.drawface polygontest.rotateperspective polygontest.smoketest porttest potest potest.badinput potest.smoketest powertest predicatetest printtest printtest.deeplynestedarray printtest.deeplynestedlist printtest.performance printtest.printdepthandwidthlimit printtest.printdepthlimit printtest.printwidthlimit printtest.pseudoloc printtest.runprintdepthlimittest printtest.runprintwidthlimittest printtest.smoketest procedure.shadows.myshadowedvar procedure.with.to.inside.it procedureinworkingdirectory procedureptest procedureptest.badinput procedureptest.smoketest proceduretest proceduretest.complexproc proceduretest.àcçênt producttest questionboxtest questionboxtest.badinput questionboxtest.smoketest queuetest queuetest.badinput queuetest.circulartest queuetest.smoketest quotedtest quotedtest.badinput quotedtest.smoketest quotienttest radarccostest radarcsintest radarctantest radcostest radsintest radtantest randomtest randomtest.badinput randomtest.smoketest rawasciitest readcharstest readcharstest.badinput readcharstest.commander readcharstest.eoftest readcharstest.readbinarydata readcharstest.smoketest readchartest readchartest.badinput readchartest.readbinarydata readchartest.smoketest readwordtest readwordtest.badinput readwordtest.readwordfromui readwordtest.smoketest readwordtest.ui readwordtest.uicancel reducetest reducetest.badinput reducetest.max reducetest.max.rest reducetest.smoketest refreshtest remaindertest remduptest remduptest.badinput remduptest.smoketest removetest removetest.badinput removetest.smoketest repcounttest repcounttest.badinput repcounttest.smoketest repcounttest.timercallback repcounttest.timertest repeattest repeattest.badinput repeattest.errorinrepeat repeattest.outputinrepeat repeattest.smoketest repeattest.stopinrepeat rerandomtest.badinput rerandomtest.smoketest reversetest reversetest.badinput reversetest.smoketest rmdirtest round.vector roundtest runparsetest runparsetest.badinput runparsetest.smoketest runresulttest runresulttest.badinput runresulttest.smoketest runtest sampleproc screencolortest screentest scrunchtest selectboxtest selectboxtest.badinput selectboxtest.smoketest sentencetest sentencetest.badinput sentencetest.noalias sentencetest.smoketest setbitindex.badinput setbitindex.smoketest setbitmodetest.badinputisrecoverable setbitmodetest.converttointeger setbitmodetest.output.2 setitemtest setlabelfonttest setpixeltest.badinput setpixeltest.smoketest setrandomorientation shellscripttest shelltest shelltest.badinput shelltest.smoketest shelltest.waityields signtest sintest slowdrawtest slowdrawtest.badinput slowdrawtest.buried slowdrawtest.redefptest slowdrawtest.smoketest slowdrawtest.timecommand sorttest sorttest.after? sorttest.badinput sorttest.nonpredicate sorttest.oneinputbydefault sorttest.oneinputproc sorttest.performance sorttest.regression sorttest.sortbylegs sorttest.sortbyname sorttest.threeinputproc soundtest soundtest.badinput soundtest.frequency.a4 soundtest.frequency.b4 soundtest.frequency.c4 soundtest.frequency.c5 soundtest.frequency.d4 soundtest.frequency.d5 soundtest.frequency.e4 soundtest.frequency.f4 soundtest.frequency.g4 soundtest.sound soundtest.tone sqrttest stacktest stacktest.badinput stacktest.circulartest stacktest.smoketest statustest statustest.badinput statustest.smoketest steptest steptest.badinput steptest.procedure steptest.propertylist steptest.shadowvariable steptest.stepall steptest.steppedprocedure steptest.variable sumtest tantest testall testlib.repeatword testsmallwindowhang testtest testtest.badinput testtest.scopetest testtest.smoketest texttest texttest.badinput texttest.smoketest thingtest thingtest.badinput thingtest.shadowedvariable thingtest.smoketest throwtest.badinput throwtest.usererror throwtest.usererror.actualthrowlocation tildainline timertest timertest.badinput timertest.largecallback timertest.runnotfoundtest timertest.smoketest timetest timetest.badinput timetest.smoketest timewait totest totest.baddefaultinputs totest.chaineddefaults totest.chaineddefaultstest totest.defaultinput totest.defaultnumberofinputs totest.nooutput totest.output5 totest.outputdefaultinput totest.outputdefaultinput.twoinputs totest.outputrest totest.outputrest.twoinputs totest.repeatedinput totest.repeatedinputtest totest.rest totest.singleinput totest.smoketest tracetest tracetest.badinput tracetest.capturetrace tracetest.checktrace tracetest.checktrace.inner tracetest.function tracetest.procedure tracetest.procedure.defaultinputs tracetest.procedure.restinput tracetest.propertylist tracetest.traceall tracetest.tracedfunction tracetest.tracedprocedure tracetest.tracedprocedure.withinputs tracetest.variable turtlemodetest turtlemodetest.badinput turtlemodetest.smoketest turtletest turtletest.badinput turtletest.characteristics turtletest.smoketest turtletest.withownpen typetest typetest.smoketest uppercasetest uppercasetest.badinput uppercasetest.international uppercasetest.smoketest waittest waittest.badinput waittest.smoketest windowfileedittest windowfileedittest.bug1330752 windowfileedittest.longfilename windowsettest windowsettest.badinput windowsettest.bug1429960 windowstest windowstest.button windowstest.button.badinput windowstest.checkbox windowstest.checkbox.badinput windowstest.checkbox.deletegroupbox windowstest.combobox windowstest.combobox.badinput windowstest.debugwindows windowstest.debugwindows.badinput windowstest.debugwindows.stress windowstest.dialog.badinput windowstest.dialog.badinput.fromcallback windowstest.dialog.smoketest windowstest.groupbox windowstest.groupbox.badinput windowstest.listbox windowstest.listbox.badinput windowstest.mainwindow.smoketest windowstest.radiobutton windowstest.radiobutton.badinput windowstest.radiobutton.deletegroupbox windowstest.regressiontest windowstest.scrollbar windowstest.scrollbar.badinput windowstest.scrollbar.badinput.output.5 windowstest.setup windowstest.static windowstest.static.badinput windowstest.window.badinput windowstest.window.smoketest windowtest windowtest.badinput windowtest.smoketest wordproctest wordptest wordtest workspacetest workspacetest.arraywithbinarydata.allvalues workspacetest.arraywithbinarydata.allvalues.saveandload workspacetest.arraywithbinarydata.eachvalueseparately workspacetest.saveandloadshortarray workspacetest.saveandloadshortword workspacetest.savepartofworkspace workspacetest.wordwithbinarydata.allvalues workspacetest.wordwithbinarydata.eachvalueseparately wraptest wraptest.badinput wraptest.smoketest yesnoboxtest yesnoboxtest.badinput yesnoboxtest.smoketest zoomtest zoomtest.badinput zoomtest.smoketest zoomtest.zoomstayscentered ~callme ~ignoreme] , as expected.
INFO: Running invalid instruction: [(PROCEDURES "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NAMES] output [[] [10 11 12 13 a array caseignoredp count erract erract.was.called expectedresult instruction lambda.function.ran mylocalvarname namepvariable something.to.break.tail.recursion startup sum testlog thesum word1 word2]] , as expected.
INFO: Running invalid instruction: [(NAMES "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PLISTS] output [[] [] []] , as expected.
INFO: Running invalid instruction: [(PLISTS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NAMELIST "a] output [[] [a]] , as expected.
PASS: [NAMELIST [a b]] output [[] [a b]] , as expected.
PASS: [NAMELIST "] output [[] []] , as expected.
PASS: [NAMELIST []] output [[] []] , as expected.
INFO: Running invalid instruction: [(NAMELIST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NAMELIST .
INFO: Running invalid instruction: [NAMELIST {a b}]
INFO: error code is 4 .
INFO: error text is NAMELIST doesn't like {a b} as input .
INFO: Running invalid instruction: [(NAMELIST "a "b)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: PO CONTENTS
CALL: PO NAMES
CALL: PO PROCEDURES
CALL: PO BURIED
CALL: PO PLISTS
CALL: PO []
CALL: POALL
CALL: POPS
CALL: PONS
CALL: POPLS
PASS: Running [POT "SAMPLEPROC] printed TO SAMPLEPROC  :a  :b , as expected.
PASS: Running [POT "PROCEDURETEST.COMPLEXPROC] printed TO PROCEDURETEST.COMPLEXPROC :a :b [:c 1] [:d SUM 1 2] [:e] 2   , as expected.
PASS: Running [PO "SAMPLEPROC] printed TO SAMPLEPROC  :a  :b , as expected.
PASS: Running [PO "SAMPLEPROC] printed   PRINT :a ; print , as expected.
PASS: Running [PO "SAMPLEPROC] printed   SHOW  :b ; show , as expected.
PASS: Running [PO "SAMPLEPROC] printed END , as expected.
PASS: Running [PO "SAMPLEPROC] printed  , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed TO PROCEDURETEST.COMPLEXPROC :a :b [:c 1] [:d SUM 1 2] [:e] 2   , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed   PRINT :a ; print , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed   SHOW  :b ; show , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed  , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed   OUTPUT SUM :c :d ; output , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed END , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed  , as expected.
PASS: Running [PON "namepvariable] printed Make "namepvariable 0 , as expected.
PASS: Running [PON [namepvariable]] printed Make "namepvariable 0 , as expected.
CALL: PPROP "wordtonumber "one 1
CALL: PPROP "wordtonumber "two 2
CALL: PPROP "numbertoword 1 "one
CALL: PPROP "numbertoword 2 "two
PASS: Running [POPL "wordtonumber] printed Pprop "wordtonumber "two 2 , as expected.
PASS: Running [POPL "wordtonumber] printed Pprop "wordtonumber "one 1 , as expected.
PASS: Running [POPL "numbertoword] printed Pprop "numbertoword 2 "two , as expected.
PASS: Running [POPL "numbertoword] printed Pprop "numbertoword 1 "one , as expected.
PASS: Running [POPL [wordtonumber numbertoword nonexistent]] printed Pprop "wordtonumber "two 2 , as expected.
PASS: Running [POPL [wordtonumber numbertoword nonexistent]] printed Pprop "wordtonumber "one 1 , as expected.
PASS: Running [POPL [wordtonumber numbertoword nonexistent]] printed Pprop "numbertoword 2 "two , as expected.
PASS: Running [POPL [wordtonumber numbertoword nonexistent]] printed Pprop "numbertoword 1 "one , as expected.
INFO: Running invalid instruction: [(POPL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POPL .
INFO: Running invalid instruction: [(POPL "numbertoword "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: Running [PON [noindex]] printed Make "noindex {1 2 3} , as expected.
PASS: Running [PON [positiveindex]] printed Make "positiveindex {1 2 3}@10 , as expected.
PASS: Running [PON [negativeindex]] printed Make "negativeindex {1 2 3}@-10 , as expected.
PASS: Running [PON [oneindex]] printed Make "oneindex {1 2 3} , as expected.
INFO: Running invalid instruction: [(PO)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PO .
INFO: Running invalid instruction: [(PO [[] [] []] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PO [[forward] [] []]]
PASS: error code is 22 , as expected.
INFO: error text is forward is a primitive .
INFO: Running invalid instruction: [PO [[nonexistent] [] []]]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [PO [[] [nonexistent] []]]
PASS: error code is 11 , as expected.
INFO: error text is nonexistent has no value .
INFO: Running invalid instruction: [PO {PROCEDURETEST}]
INFO: error code is 4 .
INFO: error text is PO doesn't like {PROCEDURETEST} as input .
INFO: Running invalid instruction: [PO [[PROCEDURETEST] [namepvariable] {c}]]
INFO: error code is 4 .
INFO: error text is PO doesn't like {c} as input .
INFO: Running invalid instruction: [PO [PROCEDURETEST SAMPLEPROC {c}]]
INFO: error code is 4 .
INFO: error text is PO doesn't like {c} as input .
INFO: Running invalid instruction: [PO [[PROCEDURETEST SAMPLEPROC {c}]]]
INFO: error code is 4 .
INFO: error text is PO doesn't like {c} as input .
INFO: Running invalid instruction: [PO [[PROCEDURETEST] [namepvariable] [c] [d]]]
INFO: error code is 4 .
INFO: error text is PO doesn't like [[PROCEDURETEST] [namepvariable] [c] [d]] as input .
INFO: Running invalid instruction: [PO [[[PROCEDURETEST]]]]
INFO: error code is 4 .
INFO: error text is PO doesn't like [PROCEDURETEST] as input .
INFO: Running invalid instruction: [(POALL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(POPS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(POPLS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(POTS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(PON)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PON .
INFO: Running invalid instruction: [PON "sampleproc]
INFO: error code is 21 .
INFO: error text is sampleproc has no value .
INFO: Running invalid instruction: [(PON "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PON {a b}]
INFO: error code is 21 .
INFO: error text is namelist doesn't like {a b} as input .
INFO: Running invalid instruction: [(POT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POT .
INFO: Running invalid instruction: [(POT "pot "pots)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [POT "forward]
INFO: error code is 22 .
INFO: error text is forward is a primitive .
INFO: Running invalid instruction: [POT "nonexistent]
INFO: error code is 24 .
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [POT [nonexistent]]
INFO: error code is 24 .
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [POT {a}]
INFO: error code is 4 .
INFO: error text is POT doesn't like {a} as input .
PASS: "Bug #1438863 is fixed; erasing a procedure in the middle of running it does not crash
INFO: Running a macro that should stop the caller
INFO: Running a macro that should output the caller
PASS: [MACROTEST.OUTPUTTEST] output 123 , as expected.
PASS: [REDUCE "REDUCETEST.MAX [2 3 8 7 9 0]] output 9 , as expected.
PASS: [(REDUCETEST.MAX.REST 2 3 8 7 9 0)] output 9 , as expected.
PASS: [REDUCE [IFELSE ?1 > ?2 [?1] [?2]] [2 3 8 7 9 0]] output 9 , as expected.
PASS: [REDUCE "DOESNOTEXIST [100]] output 100 , as expected.
PASS: [REDUCE "WORD "abcde] output abcde , as expected.
INFO: Running invalid instruction: [(REDUCE "REDUCETEST.MAX)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REDUCE .
INFO: Running invalid instruction: [(REDUCE "REDUCETEST.MAX [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REDUCE 100 [1]]
FAIL: Running [REDUCE 100 [1]] did not throw an error.
INFO: Running invalid instruction: [REDUCE "SUM {1 2 3}]
INFO: error code is 7 .
INFO: error text is bf doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [REDUCE "SUM []]
INFO: error code is 7 .
INFO: error text is bf doesn't like [] as input .
INFO: Running invalid instruction: [REDUCE "WORD "]
INFO: error code is 7 .
INFO: error text is bf doesn't like  as input .
PASS: [SUMCOPY 1 2] output 3 , as expected.
PASS: [(SUMCOPY 1 2 3)] output 6 , as expected.
PASS: [(SUMCOPY)] output 0 , as expected.
INFO: Running invalid instruction: [SUMCOPY 1 "ten]
PASS: error code is 7 , as expected.
INFO: error text is SUMCOPY doesn't like ten as input .
INFO: Running invalid instruction: [SUMCOPY "ten 1]
PASS: error code is 7 , as expected.
INFO: error text is SUMCOPY doesn't like ten as input .
PASS: [1 MYPLUS 2] output 3 , as expected.
PASS: [1 MYPLUS 2 MYPLUS 3] output 6 , as expected.
INFO: Running invalid instruction: [1 MYPLUS "ten]
PASS: error code is 7 , as expected.
INFO: error text is MYPLUS doesn't like ten as input .
INFO: Running invalid instruction: ["ten MYPLUS 1]
PASS: error code is 7 , as expected.
INFO: error text is MYPLUS doesn't like ten as input .
INFO: Running invalid instruction: [(MYPLUS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MYPLUS .
PASS: [MYADDCOPY 1 2] output 3 , as expected.
PASS: [MEMBERP "MYADDCOPY ITEM 1 BURIED] output true , as expected.
PASS: Running [POT "MYADDCOPY] printed TO MYADDCOPY :a :b , as expected.
CALL: COPYDEFSTOPTEST
PASS: [COPYDEFOUTPUTTEST] output 373 , as expected.
PASS: [COPYDEFOPTEST] output 373 , as expected.
PASS: [COPYDEFMAYBEOUTPUTTEST] output 373 , as expected.
PASS: [COPYDEFTOTEST] output 373 , as expected.
CALL: COPYDEF.ALLOW.REDEFINITIONS "COPYDEF.SETXY "SETXY
INFO: Running COPYDEF.SETXY 123 456
PASS: [POS] output [123 456] , as expected.
CALL: ERASE "XCOR
CALL: COPYDEF "COPYDEF.XCOR "XCOR
CALL: SETX 10
PASS: [COPYDEF.XCOR] output 10 , as expected.
CALL: MAKE "redefp "true
CALL: COPYDEF "mysum "sum
CALL: COPYDEF "mysum "sum
CALL: MAKE "redefp "false
INFO: Running invalid instruction: [COPYDEF "mysum "sum]
PASS: error code is 22 , as expected.
INFO: error text is mysum is a primitive .
CALL: DEFINE "COPYDEFTEST.ERASEME [[] [OUTPUT 12345]]
CALL: COPYDEF "COPYDEFTEST.ERASEMECOPY "COPYDEFTEST.ERASEME
CALL: ERASE "COPYDEFTEST.ERASEME
INFO: Running invalid instruction: [COPYDEFTEST.ERASEME]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to COPYDEFTEST.ERASEME .
PASS: [COPYDEFTEST.ERASEMECOPY] output 12345 , as expected.
INFO: Running invalid instruction: [(COPYDEF)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to COPYDEF .
INFO: Running invalid instruction: [(COPYDEF "MYLIST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to COPYDEF .
INFO: Running invalid instruction: [(COPYDEF "MYLIST "LIST "TOOMANY)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(COPYDEF "SUM "PRODUCT)]
PASS: error code is 22 , as expected.
INFO: error text is SUM is a primitive .
INFO: Running invalid instruction: [(COPYDEF "XXXCOPY "DOESNOTEXIT)]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to DOESNOTEXIT .
INFO: Running invalid instruction: [(COPYDEF [1] "SUM)]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like [1] as input .
INFO: Running invalid instruction: [(COPYDEF {1} "SUM)]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like {1} as input .
INFO: Running invalid instruction: [(COPYDEF 1 "SUM)]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like 1 as input .
INFO: Running invalid instruction: [(COPYDEF -1 "SUM)]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like -1 as input .
INFO: Running invalid instruction: [(COPYDEF "NEWCOPY [1] )]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like [1] as input .
INFO: Running invalid instruction: [(COPYDEF "NEWCOPY {1} )]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like {1} as input .
INFO: Running invalid instruction: [(COPYDEF "NEWCOPY 1 )]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like 1 as input .
INFO: Running invalid instruction: [(COPYDEF "NEWCOPY -1 )]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like -1 as input .
INFO: Running invalid instruction: [(NEWCOPY)]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to NEWCOPY .
INFO: Running invalid instruction: [(COPYDEF "SUMCOPY "SUM)]
PASS: error code is 22 , as expected.
INFO: error text is SUMCOPY is a primitive .
PASS: [GPROP "nonexistent "prop1] output [] , as expected.
PASS: [GPROP "testplist1 "nonexistent] output [] , as expected.
PASS: [GPROP "testplist1 "property1] output 1 , as expected.
PASS: [GPROP "testplist1 "property2] output abc , as expected.
PASS: [GPROP "testplist1 "property3] output [a b c] , as expected.
PASS: [GPROP "testplist1 "property4] output {a b c} , as expected.
PASS: [GPROP "testplist1 "property5] output [] , as expected.
PASS: [GPROP "testplist1 "property6] output  , as expected.
PASS: [GPROP "testplist1 "] output empty , as expected.
PASS: [GPROP "testplist1 "property1] output one , as expected.
PASS: [PLIST "nonexistent] output [] , as expected.
PASS: [COUNT :listcontents] output 14 , as expected.
PASS: [:value] output empty , as expected.
PASS: [:value] output  , as expected.
PASS: [:value] output [] , as expected.
PASS: [:value] output {a b c} , as expected.
PASS: [:value] output [a b c] , as expected.
PASS: [:value] output abc , as expected.
PASS: [:value] output one , as expected.
PASS: [COUNT :plistsoutput] output 3 , as expected.
PASS: [ITEM 1 :plistsoutput] output [] , as expected.
PASS: [ITEM 2 :plistsoutput] output [] , as expected.
PASS: [MEMBERP "testplist1 ITEM 3 :plistsoutput] output true , as expected.
PASS: [COUNT :plistsoutput] output 3 , as expected.
PASS: [ITEM 1 :plistsoutput] output [] , as expected.
PASS: [ITEM 2 :plistsoutput] output [] , as expected.
PASS: [MEMBERP "testplist1 ITEM 3 :plistsoutput] output false , as expected.
PASS: [GPROP "testplist1 "property1] output [] , as expected.
PASS: [GPROP "testplist1 "property2] output [] , as expected.
PASS: [GPROP "testplist1 "property3] output [] , as expected.
PASS: [GPROP "testplist1 "property4] output [] , as expected.
PASS: [GPROP "testplist1 "property5] output [] , as expected.
PASS: [GPROP "testplist1 "property6] output [] , as expected.
PASS: [GPROP "testplist1 "] output [] , as expected.
PASS: [PLIST "testplist1] output [] , as expected.
INFO: Running invalid instruction: [(PLIST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PLIST .
INFO: Running invalid instruction: [(PLIST "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PLIST [1 2 3]]
INFO: error code is 7 .
INFO: error text is PLIST doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [PLIST {1 2 3}]
INFO: error code is 7 .
INFO: error text is PLIST doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(REMPROP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMPROP .
INFO: Running invalid instruction: [(REMPROP "plist)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMPROP .
INFO: Running invalid instruction: [(REMPROP "plist "prop "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REMPROP [1 2 3] "prop]
INFO: error code is 7 .
INFO: error text is REMPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [REMPROP {1 2 3} "prop]
INFO: error code is 7 .
INFO: error text is REMPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [REMPROP "plist [1 2 3]]
INFO: error code is 7 .
INFO: error text is REMPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [REMPROP "plist {1 2 3}]
INFO: error code is 7 .
INFO: error text is REMPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(GPROP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GPROP .
INFO: Running invalid instruction: [(GPROP "plist)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GPROP .
INFO: Running invalid instruction: [(GPROP "plist "prop "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GPROP [1 2 3] "prop]
INFO: error code is 7 .
INFO: error text is GPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [GPROP {1 2 3} "prop]
INFO: error code is 7 .
INFO: error text is GPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [GPROP "plist [1 2 3]]
INFO: error code is 7 .
INFO: error text is GPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [GPROP "plist {1 2 3}]
INFO: error code is 7 .
INFO: error text is GPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(PPROP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PPROP .
INFO: Running invalid instruction: [(PPROP "plist)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PPROP .
INFO: Running invalid instruction: [(PPROP "plist "prop)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PPROP .
INFO: Running invalid instruction: [(PPROP "plist "name "value "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PPROP [1 2 3] "name "value]
INFO: error code is 7 .
INFO: error text is PPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [PPROP {1 2 3} "name "value]
INFO: error code is 7 .
INFO: error text is PPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [PPROP "plist [1 2 3] "value]
INFO: error code is 7 .
INFO: error text is PPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [PPROP "plist {1 2 3} "value]
INFO: error code is 7 .
INFO: error text is PPROP doesn't like {1 2 3} as input .
PASS: [PLLIST "a] output [[] [] [a]] , as expected.
PASS: [PLLIST "] output [[] [] []] , as expected.
PASS: [PLLIST [a b]] output [[] [] [a b]] , as expected.
PASS: [PLLIST []] output [[] [] []] , as expected.
INFO: Running invalid instruction: [(PLLIST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PLLIST .
INFO: Running invalid instruction: [(PLLIST "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PLLIST {a b}]
INFO: error code is 4 .
INFO: error text is PLLIST doesn't like {a b} as input .
PASS: "if "true ran the "true branch, as expected
PASS: if "false ran the "false branch, as expected
PASS: if "true ran the "true branch, as expected
PASS: IF could be used as an r-val, as expected.
INFO: Running invalid instruction: [if 1 []]
INFO: error code is 7 .
INFO: error text is if doesn't like 1 as input .
INFO: Running invalid instruction: [if 0 []]
INFO: error code is 7 .
INFO: error text is if doesn't like 0 as input .
INFO: Running invalid instruction: [if "yes []]
INFO: error code is 7 .
INFO: error text is if doesn't like yes as input .
INFO: Running invalid instruction: [if "no []]
INFO: error code is 7 .
INFO: error text is if doesn't like no as input .
INFO: Running invalid instruction: [if [1] []]
INFO: error code is 7 .
INFO: error text is if doesn't like [1] as input .
INFO: Running invalid instruction: [if {1} []]
INFO: error code is 7 .
INFO: error text is if doesn't like {1} as input .
INFO: Running invalid instruction: [if "true {1}]
INFO: error code is 7 .
INFO: error text is if doesn't like {1} as input .
INFO: Running invalid instruction: [(if)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to if .
INFO: Running invalid instruction: [(if "true)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to if .
INFO: Running invalid instruction: [(if "false)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to if .
INFO: Running invalid instruction: [(if "true [] [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [#] output -1 , as expected.
INFO: Running invalid instruction: [(# "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running [TEST "true]
CALL: MAKE "iftrue.was.run "false
CALL: MAKE "iffalse.was.run "false
CALL: IFTRUE [MAKE "iftrue.was.run "true]
CALL: IFFALSE [MAKE "iffalse.was.run "true]
PASS: [:iftrue.was.run] output true , as expected.
PASS: [:iffalse.was.run] output false , as expected.
CALL: MAKE "iftrue.was.run "false
CALL: MAKE "iffalse.was.run "false
CALL: IFTRUE [MAKE "iftrue.was.run "true]
CALL: IFFALSE [MAKE "iffalse.was.run "true]
PASS: [:iftrue.was.run] output true , as expected.
PASS: [:iffalse.was.run] output false , as expected.
INFO: Running [TEST "false]
CALL: MAKE "iftrue.was.run "false
CALL: MAKE "iffalse.was.run "false
CALL: IFTRUE [MAKE "iftrue.was.run "true]
CALL: IFFALSE [MAKE "iffalse.was.run "true]
PASS: [:iftrue.was.run] output false , as expected.
PASS: [:iffalse.was.run] output true , as expected.
INFO: Running invalid instruction: [(TEST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TEST .
INFO: Running invalid instruction: [(TEST "true "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [TEST "word]
INFO: error code is 7 .
INFO: error text is TEST doesn't like word as input .
INFO: Running invalid instruction: [TEST 1234]
INFO: error code is 7 .
INFO: error text is TEST doesn't like 1234 as input .
INFO: Running invalid instruction: [TEST [1234]]
INFO: error code is 7 .
INFO: error text is TEST doesn't like [1234] as input .
INFO: Running invalid instruction: [TEST {1234}]
INFO: error code is 7 .
INFO: error text is TEST doesn't like {1234} as input .
INFO: Running invalid instruction: [IFTRUE []]
PASS: error code is 25 , as expected.
INFO: error text is IFTRUE without TEST .
INFO: Running invalid instruction: [IFFALSE []]
PASS: error code is 25 , as expected.
INFO: error text is IFFALSE without TEST .
INFO: Running invalid instruction: [(IFTRUE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to IFTRUE .
INFO: Running invalid instruction: [(IFTRUE [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [IFTRUE {1234}]
INFO: error code is 7 .
INFO: error text is IFTRUE doesn't like {1234} as input .
INFO: Running invalid instruction: [(IFFALSE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to IFFALSE .
INFO: Running invalid instruction: [(IFFALSE [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [IFFALSE {1234}]
INFO: error code is 7 .
INFO: error text is IFFALSE doesn't like {1234} as input .
CALL: TEST "TRUE
INFO: Running invalid instruction: [IFTRUE []]
PASS: error code is 25 , as expected.
INFO: error text is IFTRUE without TEST .
INFO: Running invalid instruction: [IFFALSE []]
PASS: error code is 25 , as expected.
INFO: error text is IFFALSE without TEST .
INFO: executing regression test for bug #1383281
PASS: Bug #1382181 is fixed. 'FOREACH [1] [[] []] ' did not crash.
PASS: Bug #1448155 is fixed. 'IF' used the IF->IFELSE mapping.
PASS: [CASCADE 5 [LPUT # ?] []] output [1 2 3 4 5] , as expected.
PASS: [CASCADE [CASCADETEST.VOWEL? FIRST ?] [BUTFIRST ?] "spring] output ing , as expected.
PASS: [CASCADE 5 [# * ?] 1] output 120 , as expected.
INFO: Running invalid instruction: [(CASCADE 5 [LPUT # ?] )]
FAIL: error code is 4 .  We expected 6 .
INFO: error text is ? doesn't like 1 as input .
INFO: Running invalid instruction: [CASCADE -1 [LPUT # ?] []]
INFO: error code is 4 .
INFO: error text is CASCADE doesn't like -1 as input .
PASS: [ACTIVEAREA] output [0 100 200 300] , as expected.
PASS: [ACTIVEAREA] output [0 0 200 200] , as expected.
PASS: [ACTIVEAREA] output [-100 -100 100 100] , as expected.
PASS: [ACTIVEAREA] output [-500 -500 500 500] , as expected.
PASS: [ACTIVEAREA] output [-500 -500 500 500] , as expected.
INFO: Running invalid instruction: [(SETACTIVEAREA)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETACTIVEAREA .
INFO: Running invalid instruction: [(SETACTIVEAREA 0 0)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETACTIVEAREA 0 0 50)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETACTIVEAREA 0 0 50 50)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETACTIVEAREA [0] )]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0] as input .
INFO: Running invalid instruction: [(SETACTIVEAREA [0 0] )]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0] as input .
INFO: Running invalid instruction: [(SETACTIVEAREA [0 0 50] )]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50] as input .
INFO: Running invalid instruction: [(SETACTIVEAREA [0 0 50 50 50] )]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA 0]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like 0 as input .
INFO: Running invalid instruction: [SETACTIVEAREA "0,0,50,50]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like 0,0,50,50 as input .
INFO: Running invalid instruction: [SETACTIVEAREA {0 0 50 50}]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like {0 0 50 50} as input .
INFO: Running invalid instruction: [SETACTIVEAREA [zero 0 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [zero 0 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [[0] 0 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [[0] 0 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [{0} 0 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [{0} 0 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [-1e20 0 50 50]]
FAIL: Running [SETACTIVEAREA [-1e+20 0 50 50]] did not throw an error.
INFO: Running invalid instruction: [SETACTIVEAREA [0 zero 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 zero 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 [0] 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 [0] 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 {0} 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 {0} 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 -1e20 50 50]]
FAIL: Running [SETACTIVEAREA [0 -1e+20 50 50]] did not throw an error.
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 fifty 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 fifty 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 [50] 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 [50] 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 {50} 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 {50} 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 1e20 50]]
FAIL: Running [SETACTIVEAREA [0 0 1e+20 50]] did not throw an error.
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 fifty]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 fifty] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 [50]]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 [50]] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 {50}]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 {50}] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 1e20]]
FAIL: Running [SETACTIVEAREA [0 0 50 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 -50 50]]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETACTIVEAREA doesn't like [0 0 -50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 -50]]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 -50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 0 0]]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETACTIVEAREA doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [(ACTIVEAREA "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [ACTIVEAREA] output [0 0 50 2147483647] . We expected [1 1 2 2] .
PASS: [BITLOADSIZE "bitmap-test.bmp] output [100 100] , as expected.
PASS: [BITLOADSIZE "bitmap-test.bmp] output [100 101] , as expected.
PASS: [BITLOADSIZE "bitmap-test.bmp] output [101 100] , as expected.
INFO: Running invalid instruction: [(BITLOAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITLOAD .
INFO: Running invalid instruction: [(BITLOAD "file.gif "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BITLOAD "doesnotexist.bmp]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
INFO: Running invalid instruction: [BITLOAD {a b c}]
FAIL: error code is 1211 .  We expected 7 .
INFO: error text is Could not open .bmp .
INFO: Running invalid instruction: [BITLOAD [a b c]]
FAIL: error code is 1211 .  We expected 7 .
INFO: error text is Could not open .bmp .
INFO: Running invalid instruction: [BITLOAD "bitmap.lgo]
PASS: error code is 1214 , as expected.
PASS: error text is Not a Windows 3.0 bitmap , as expected.
CALL: MKDIR "bmptest.bmp POPDIR
INFO: Running invalid instruction: [BITLOAD "bmptest.bmp]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
CALL: RMDIR "bmptest.bmp
INFO: Running invalid instruction: [BITSAVE {1 2 3}]
FAIL: Running [BITSAVE {1 2 3}] did not throw an error.
INFO: Running invalid instruction: [BITSAVE [1 2 3]]
FAIL: Running [BITSAVE [1 2 3]] did not throw an error.
INFO: Running invalid instruction: [BITSAVE "]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
INFO: Running invalid instruction: [BITSAVE "bad>file.bmp]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
INFO: Running invalid instruction: [(BITSAVE "file.bmp 3 )]
FAIL: Running [(BITSAVE "file.bmp 3 )] did not throw an error.
INFO: Running invalid instruction: [(BITSAVE "file.bmp "nonint )]
PASS: error code is 7 , as expected.
INFO: error text is BITSAVE doesn't like nonint as input .
INFO: Running invalid instruction: [(BITSAVE "file.bmp [1 2 3] )]
PASS: error code is 7 , as expected.
INFO: error text is BITSAVE doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(BITSAVE "file.bmp {1 2 3} )]
PASS: error code is 7 , as expected.
INFO: error text is BITSAVE doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(BITSAVE "file.bmp -1 )]
FAIL: Running [(BITSAVE "file.bmp -1 )] did not throw an error.
FAIL: [FILEEXISTS "file.bmp] output true . We expected false .
CALL: ERASEFILE "file.bmp
CALL: MKDIR "bmptest.bmp POPDIR
INFO: Running invalid instruction: [BITSAVE "bmptest.bmp]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
CALL: RMDIR "bmptest.bmp
PASS: bitpaste-pattern was drawn correctly.
CALL: SETBITINDEX 1
CALL: BITCUT 100 100
INFO: Running invalid instruction: [(BITPASTETOINDEX 1 0)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITPASTETOINDEX .
INFO: Running invalid instruction: [(BITPASTETOINDEX 1 0 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BITPASTETOINDEX 10000 0 0]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [BITPASTETOINDEX -1 0 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like -1 as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1.5 0 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITPASTETOINDEX [1] 0 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like [1] as input .
INFO: Running invalid instruction: [BITPASTETOINDEX {1} 0 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like {1} as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 1.5 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 [0] 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like [0] as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 {0} 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like {0} as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 "one 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like one as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 0 1.5]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 0 [0]]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like [0] as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 0 {0}]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like {0} as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 0 "one]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like one as input .
CALL: SETBITINDEX 41
INFO: Running invalid instruction: [BITPASTETOINDEX 41 0 0]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
CALL: SETSCREENCOLOR 3
CALL: SETPENCOLOR 4
CALL: CLEARSCREEN
CALL: REPEAT 3 [FORWARD 20 RIGHT 120]
CALL: SETBITINDEX :sprite
CALL: BITCUT 25 25
CALL: SETBITINDEX :background
CALL: SETPENCOLOR 1
CALL: REPEAT 20 [CIRCLE2 100 RIGHT 18]
CALL: BITCUT 100 100
CALL: SETBITINDEX :backbuffer
CALL: BITCUT 100 100
CALL: SETSCREENCOLOR 5
CALL: HIDETURTLE
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SHOWTURTLE
CALL: SETBITINDEX 4
PASS: [BITINDEX] output 4 , as expected.
CALL: SETBITINDEX 4
INFO: Running invalid instruction: [(SETBITINDEX)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETBITINDEX .
INFO: Running invalid instruction: [(SETBITINDEX 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(BITINDEX "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETBITINDEX -1]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like -1 as input .
INFO: Running invalid instruction: [SETBITINDEX 1.5]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like 1.5 as input .
INFO: Running invalid instruction: [SETBITINDEX [1]]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like [1] as input .
INFO: Running invalid instruction: [SETBITINDEX {1}]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like {1} as input .
INFO: Running invalid instruction: [SETBITINDEX "one]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like one as input .
INFO: Running invalid instruction: [SETBITINDEX 100000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [SETBITINDEX 2000000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
PASS: [BITINDEX] output 4 , as expected.
PASS: bitsave-200x200 was drawn correctly.
CALL: SETBITINDEX 1
CALL: BITCOPY 200 200
CALL: SETBITINDEX 2
CALL: BITCOPY 200 200
CALL: SETBITINDEX 1
CALL: BITFIT 200 400
PASS: [BITSIZE] output [200 400] , as expected.
CALL: BITPASTE
PASS: bitfit-200x400 was drawn correctly.
CALL: SETBITINDEX 2
CALL: BITFIT 100 50
PASS: [BITSIZE] output [100 50] , as expected.
CALL: BITPASTE
PASS: bitfit-100x50 was drawn correctly.
CALL: SETBITINDEX 1
CALL: BITCUT 200 300
INFO: Running invalid instruction: [(BITFIT 100)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITFIT .
INFO: Running invalid instruction: [(BITFIT 100 100 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BITFIT 2000000000 100]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [BITFIT 100 2000000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [BITFIT -1 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like -1 as input .
INFO: Running invalid instruction: [BITFIT 0 100]
FAIL: Running [BITFIT 0 100] did not throw an error.
INFO: Running invalid instruction: [BITFIT 1.5 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITFIT [1] 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like [1] as input .
INFO: Running invalid instruction: [BITFIT {1} 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like {1} as input .
INFO: Running invalid instruction: [BITFIT 1e20 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like 1e+20 as input .
INFO: Running invalid instruction: [BITFIT 100 -1]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like -1 as input .
INFO: Running invalid instruction: [BITFIT 100 0]
FAIL: Running [BITFIT 100 0] did not throw an error.
INFO: Running invalid instruction: [BITFIT 100 1.5]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITFIT 100 [1]]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like [1] as input .
INFO: Running invalid instruction: [BITFIT 100 {1}]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like {1} as input .
INFO: Running invalid instruction: [BITFIT 100 1e20]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like 1e+20 as input .
PASS: [BITSIZE] output [200 300] , as expected.
PASS: gifsmoketest-200x200 was drawn correctly.
CALL: SETACTIVEAREA (list 0 0 :width :height)
CALL: GIFSAVE "gifsizetest.gif
PASS: [GIFSIZE "gifsizetest.gif] output [100 100] , as expected.
CALL: SETACTIVEAREA (list 0 0 :width :height)
CALL: GIFSAVE "gifsizetest.gif
PASS: [GIFSIZE "gifsizetest.gif] output [100 101] , as expected.
CALL: SETACTIVEAREA (list 0 0 :width :height)
CALL: GIFSAVE "gifsizetest.gif
PASS: [GIFSIZE "gifsizetest.gif] output [101 100] , as expected.
INFO: Running invalid instruction: [(GIFSIZE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GIFSIZE .
INFO: Running invalid instruction: [(GIFSIZE "file.gif "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GIFSIZE "doesnotexist.gif]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
INFO: Running invalid instruction: [GIFSIZE {1 2 3}]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
INFO: Running invalid instruction: [GIFSIZE [1 2 3]]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
INFO: Running invalid instruction: [GIFSIZE "gif.lgo]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
CALL: MKDIR "giftest.gif POPDIR
INFO: Running invalid instruction: [GIFSIZE "giftest.gif]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
CALL: RMDIR "giftest.gif
CALL: SETACTIVEAREA [0 0 100 100]
CALL: GIFSAVE :filename
CALL: SETACTIVEAREA [0 0 150 150]
CALL: GIFSAVE :filename
PASS: [GIFSIZE :filename] output [150 150] , as expected.
CALL: ERASEFILE "file.gif
INFO: Running invalid instruction: [(GIFSIZE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GIFSIZE .
INFO: Running invalid instruction: [(GIFSIZE "file.gif 0 "true 8 [255 0 255] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GIFSAVE {1 2 3}]
FAIL: Running [GIFSAVE {1 2 3}] did not throw an error.
INFO: Running invalid instruction: [GIFSAVE [1 2 3]]
FAIL: Running [GIFSAVE [1 2 3]] did not throw an error.
INFO: Running invalid instruction: [GIFSAVE "]
PASS: error code is 1202 , as expected.
PASS: error text is Problem Generating GIF, check memory and diskspace , as expected.
INFO: Running invalid instruction: [GIFSAVE "bad>file.gif]
PASS: error code is 1202 , as expected.
PASS: error text is Problem Generating GIF, check memory and diskspace , as expected.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 1.2 )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like 1.2 as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif "nonint )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like nonint as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif [1 2 3] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif {1 2 3} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif -1 )]
FAIL: Running [(GIFSAVE "file.gif -1 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 1 )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like 1 as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 1.2 )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like 1.2 as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 [1] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 {1} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {1} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "word )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like word as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false [1] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false {1} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {1} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false "one )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like one as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false -2 )]
FAIL: Running [(GIFSAVE "file.gif 100 "false -2 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 0 )]
FAIL: Running [(GIFSAVE "file.gif 100 "false 0 0 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 "one)]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like one as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 [1] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 {1} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {1} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 [1 2 3 4] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1 2 3 4] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 [1 2] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1 2] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 {255 255 255} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {255 255 255} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 100 )]
FAIL: Running [(GIFSAVE "file.gif 100 "false 0 8 100 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 1.5 )]
FAIL: Running [(GIFSAVE "file.gif 100 "false 0 8 1.5 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 1e20 )]
FAIL: Running [(GIFSAVE "file.gif 100 "false 0 8 1e20 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 "word )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like word as input .
FAIL: [FILEEXISTS "file.gif] output true . We expected false .
CALL: ERASEFILE "file.gif
CALL: MKDIR "giftest.gif POPDIR
INFO: Running invalid instruction: [GIFSAVE "giftest.gif]
PASS: error code is 1202 , as expected.
PASS: error text is Problem Generating GIF, check memory and diskspace , as expected.
CALL: RMDIR "giftest.gif
INFO: Running invalid instruction: [(GIFLOAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GIFLOAD .
INFO: Running invalid instruction: [(GIFLOAD "file.gif "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GIFLOAD "doesnotexist.gif]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
INFO: Running invalid instruction: [GIFLOAD {1 2 3}]
FAIL: Running [GIFLOAD {1 2 3}] did not throw an error.
INFO: Running invalid instruction: [GIFLOAD [1 2 3]]
FAIL: Running [GIFLOAD [1 2 3]] did not throw an error.
INFO: Running invalid instruction: [GIFLOAD "gif.lgo]
PASS: error code is 1201 , as expected.
PASS: error text is Problem Reading GIF, check memory and diskspace , as expected.
CALL: MKDIR "giftest.gif POPDIR
INFO: Running invalid instruction: [GIFLOAD "giftest.gif]
PASS: error code is 1201 , as expected.
PASS: error text is Problem Reading GIF, check memory and diskspace , as expected.
CALL: RMDIR "giftest.gif
CALL: SETBITMODE 1
PASS: [BITMODE] output 1 , as expected.
CALL: SETBITMODE 2
PASS: [BITMODE] output 2 , as expected.
CALL: SETBITMODE 3
PASS: [BITMODE] output 3 , as expected.
CALL: SETBITMODE 4
PASS: [BITMODE] output 4 , as expected.
CALL: SETBITMODE 5
PASS: [BITMODE] output 5 , as expected.
CALL: SETBITMODE 6
PASS: [BITMODE] output 6 , as expected.
CALL: SETBITMODE 7
PASS: [BITMODE] output 7 , as expected.
CALL: SETBITMODE 8
PASS: [BITMODE] output 8 , as expected.
CALL: SETBITMODE 9
PASS: [BITMODE] output 9 , as expected.
PASS: bitmode-pattern was drawn correctly.
CALL: SETBITMODE 3
INFO: Running invalid instruction: [(BITMODE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETBITMODE [2]]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like [2] as input .
INFO: Running invalid instruction: [SETBITMODE {2}]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like {2} as input .
INFO: Running invalid instruction: [SETBITMODE -10]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like -10 as input .
INFO: Running invalid instruction: [SETBITMODE 1.5]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like 1.5 as input .
INFO: Running invalid instruction: [SETBITMODE 0]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like 0 as input .
INFO: Running invalid instruction: [SETBITMODE 10]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like 10 as input .
INFO: Running invalid instruction: [SETBITMODE "two]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like two as input .
INFO: Running invalid instruction: [(SETBITMODE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETBITMODE .
INFO: Running invalid instruction: [(SETBITMODE 8 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [BITMODE] output 3 , as expected.
CALL: SETBITMODE 3
CALL: SETBITMODE 0
PASS: [BITMODE] output 2 , as expected.
CALL: SETBITMODE 3.0
PASS: [BITMODE] output 3 , as expected.
CALL: SETBITMODE "4
PASS: [BITMODE] output 4 , as expected.
INFO: Running invalid instruction: [BITBLOCK [10] 10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like [10] as input .
INFO: Running invalid instruction: [BITBLOCK {10} 10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like {10} as input .
INFO: Running invalid instruction: [BITBLOCK -10 10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like -10 as input .
INFO: Running invalid instruction: [BITBLOCK "ten 10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like ten as input .
INFO: Running invalid instruction: [BITBLOCK 10 [10]]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like [10] as input .
INFO: Running invalid instruction: [BITBLOCK 10 {10}]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like {10} as input .
INFO: Running invalid instruction: [BITBLOCK 10 -10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like -10 as input .
INFO: Running invalid instruction: [BITBLOCK 10 "ten]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like ten as input .
INFO: Running invalid instruction: [(BITBLOCK 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITBLOCK .
INFO: Running invalid instruction: [(BITBLOCK 10 10 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: CLEARSCREEN
PASS: [TURTLE] output 0 , as expected.
PASS: [TURTLES] output 0 , as expected.
CALL: SETTURTLE 2
PASS: [TURTLES] output 2 , as expected.
PASS: [TURTLE] output 2 , as expected.
CALL: SETTURTLE 1
PASS: [TURTLES] output 2 , as expected.
PASS: [TURTLE] output 1 , as expected.
CALL: SETTURTLE 3.0
PASS: [TURTLES] output 3 , as expected.
PASS: [TURTLE] output 3 , as expected.
CALL: SETTURTLE 1024
PASS: [TURTLES] output 1024 , as expected.
PASS: [TURTLE] output 1024 , as expected.
CALL: SETTURTLE -1
CALL: SETTURTLE -2
CALL: SETTURTLE -3
PASS: [TURTLES] output 1024 , as expected.
PASS: [TURTLE] output -3 , as expected.
CALL: CLEARSCREEN
PASS: [TURTLE] output 0 , as expected.
PASS: [TURTLES] output 0 , as expected.
CALL: CLEARSCREEN
PASS: [HASOWNPENP] output false , as expected.
CALL: SETPENSIZE 2
CALL: SETPENCOLOR 2
CALL: PENREVERSE
CALL: (SETTURTLE 2 "true)
PASS: [HASOWNPENP] output true , as expected.
CALL: SETPENSIZE 3
CALL: SETPENCOLOR 3
CALL: PENERASE
CALL: (SETTURTLE 3 "false)
PASS: [HASOWNPEN?] output false , as expected.
PASS: [PENSIZE] output [2 2] , as expected.
PASS: [PENCOLOR] output 2 , as expected.
PASS: [PENMODE] output reverse , as expected.
CALL: SETPENSIZE 4
CALL: SETPENCOLOR 4
CALL: PENPAINT
CALL: SETTURTLE 0
PASS: [HASOWNPEN?] output false , as expected.
PASS: [PENSIZE] output [4 4] , as expected.
PASS: [PENCOLOR] output 4 , as expected.
PASS: [PENMODE] output paint , as expected.
CALL: SETTURTLE 1
PASS: [HASOWNPEN?] output true , as expected.
PASS: [PENSIZE] output [1 1] , as expected.
PASS: [PENCOLOR] output 0 , as expected.
PASS: [PENMODE] output paint , as expected.
CALL: (SETTURTLE 2 "false)
PASS: [HASOWNPEN?] output false , as expected.
PASS: [PENSIZE] output [4 4] , as expected.
PASS: [PENCOLOR] output 4 , as expected.
PASS: [PENMODE] output paint , as expected.
CALL: (SETTURTLE 0 "true)
PASS: [HASOWNPENP] output true , as expected.
PASS: [PENSIZE] output [1 1] , as expected.
PASS: [PENCOLOR] output 0 , as expected.
PASS: [PENMODE] output paint , as expected.
CALL: SETTURTLE 3
PASS: [HASOWNPENP] output false , as expected.
PASS: [PENSIZE] output [4 4] , as expected.
PASS: [PENCOLOR] output 4 , as expected.
PASS: [PENMODE] output paint , as expected.
PASS: turtle-has-own-pen was drawn correctly.
CALL: CLEARSCREEN
CALL: SETXY 130 15
CALL: PENUP
CALL: SETTURTLE 1
PASS: [POS] output [0 0] , as expected.
PASS: [PENDOWNP] output true , as expected.
CALL: SETXY 70 120
CALL: SETTURTLE 0
PASS: [POS] output [130 15] , as expected.
PASS: [PENDOWNP] output false , as expected.
INFO: Running invalid instruction: [(TURTLE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(TURTLES "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETTURTLE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETTURTLE .
INFO: Running invalid instruction: [(SETTURTLE -1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETTURTLE 10 "true "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETTURTLE "ten]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like ten as input .
INFO: Running invalid instruction: [SETTURTLE [10]]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like [10] as input .
INFO: Running invalid instruction: [SETTURTLE {10}]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like {10} as input .
INFO: Running invalid instruction: [SETTURTLE 10.5]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like 10.5 as input .
INFO: Running invalid instruction: [SETTURTLE -4]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like -4 as input .
INFO: Running invalid instruction: [SETTURTLE 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like 1e+20 as input .
INFO: Running invalid instruction: [(SETTURTLE 10 "maybe )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like maybe as input .
INFO: Running invalid instruction: [(SETTURTLE 10 [true] )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like [true] as input .
INFO: Running invalid instruction: [(SETTURTLE 10 {true} )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like {true} as input .
INFO: Running invalid instruction: [(SETTURTLE 10 10 )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like 10 as input .
INFO: Running invalid instruction: [(SETTURTLE 10 1e20 )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETTURTLE 100000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [SETTURTLE 2000000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
PASS: [TURTLE] output 1 , as expected.
PASS: [TURTLES] output 1 , as expected.
INFO: Running invalid instruction: [(SETTURTLE -1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(HASOWNPENP "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(HASOWNPEN? "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: NOBITMAPTURTLE
CALL: SETTURTLEMODE 3
PASS: [TURTLEMODE] output 1 , as expected.
CALL: SETTURTLEMODE 1
PASS: [TURTLEMODE] output 1 , as expected.
CALL: SETTURTLEMODE 2
PASS: [TURTLEMODE] output 2 , as expected.
CALL: SETTURTLEMODE 3
PASS: [TURTLEMODE] output 3 , as expected.
CALL: SETTURTLEMODE 4
PASS: [TURTLEMODE] output 4 , as expected.
CALL: SETTURTLEMODE 5
PASS: [TURTLEMODE] output 5 , as expected.
CALL: SETTURTLEMODE 6
PASS: [TURTLEMODE] output 6 , as expected.
CALL: SETTURTLEMODE 7
PASS: [TURTLEMODE] output 7 , as expected.
CALL: SETTURTLEMODE 8
PASS: [TURTLEMODE] output 8 , as expected.
CALL: SETTURTLEMODE 9
PASS: [TURTLEMODE] output 9 , as expected.
CALL: SETTURTLEMODE 3
INFO: Running invalid instruction: [(TURTLEMODE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETTURTLEMODE [2]]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like [2] as input .
INFO: Running invalid instruction: [SETTURTLEMODE {2}]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like {2} as input .
INFO: Running invalid instruction: [SETTURTLEMODE -10]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like -10 as input .
INFO: Running invalid instruction: [SETTURTLEMODE 1.5]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like 1.5 as input .
INFO: Running invalid instruction: [SETTURTLEMODE 0]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like 0 as input .
INFO: Running invalid instruction: [SETTURTLEMODE 10]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like 10 as input .
INFO: Running invalid instruction: [SETTURTLEMODE "two]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like two as input .
INFO: Running invalid instruction: [(SETTURTLEMODE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETTURTLEMODE .
INFO: Running invalid instruction: [(SETTURTLEMODE 8 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [TURTLEMODE] output 3 , as expected.
PASS: [FORM 123.1 10 10] output 123.1000000000 , as expected.
INFO: Running invalid instruction: [FORM "string 10 10]
INFO: error code is 7 .
INFO: error text is FORM doesn't like string as input .
INFO: Running invalid instruction: [FORM 123.1 12.3 10]
INFO: error code is 7 .
INFO: error text is FORM doesn't like 12.3 as input .
INFO: Running invalid instruction: [FORM 123.1 10 12.3]
INFO: error code is 7 .
INFO: error text is FORM doesn't like 12.3 as input .
INFO: Running invalid instruction: [(FORM)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FORM .
INFO: Running invalid instruction: [(FORM 123.1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FORM .
INFO: Running invalid instruction: [(FORM 123.1 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FORM .
INFO: Running invalid instruction: [(FORM 123.1 10 10 10)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: 'FORM 123.1 10000 10' did not crash
PASS: 'FORM 123.1 10 10000' did not crash
INFO: Running invalid instruction: [FORM -1 -1 "%s%s]
INFO: error code is 7 .
INFO: error text is FORM doesn't like -1 as input .
PASS: 'FORM -1 -1 "%s%s' did not crash
PASS: Running [PRINT "ABC] printed ABC , as expected.
PASS: Running [PRINT "abc] printed abc , as expected.
PASS: Running [PRINT "a b c] printed a b c , as expected.
PASS: Running [PRINT 123] printed 123 , as expected.
PASS: Running [PRINT 12.3] printed 12.3 , as expected.
PASS: Running [PRINT 12.0] printed 12 , as expected.
PASS: Running [PRINT 1e5] printed 100000 , as expected.
PASS: Running [PRINT [a b c]] printed a b c , as expected.
PASS: Running [PRINT []] printed  , as expected.
PASS: Running [PRINT [[a] b [c]]] printed [a] b [c] , as expected.
PASS: Running [PRINT {1 2}] printed {1 2} , as expected.
PASS: Running [PRINT {1 2}] printed {1 2} , as expected.
PASS: Running [PRINT {1 2}] printed {1 2} , as expected.
PASS: Running [PRINT {}] printed {} , as expected.
PASS: Running [(PRINT)] printed  , as expected.
PASS: Running [(PRINT [a] [b] [c] )] printed a b c , as expected.
PASS: Running [(PRINT [a] {b} "c)] printed a {b} c , as expected.
CALL: PRINT :longlist
CALL: make "printdepthlimit 6
PASS: Running [print [[1 [2 [3 [4 [5]]]]]]] printed [1 [2 [3 [4 [5]]]]] , as expected.
CALL: make "printdepthlimit 4
PASS: Running [print [[1 [2 [3 [4 [5]]]]]]] printed [1 [2 [3 [... ...]]]] , as expected.
CALL: make "printdepthlimit 0
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed ... ... , as expected.
CALL: make "printdepthlimit 3
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [... ...]]] , as expected.
CALL: make "printdepthlimit 4
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [...]]]] , as expected.
CALL: make "printdepthlimit 5
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [4]]]] , as expected.
CALL: make "printdepthlimit 2
PASS: Running [print [0 [1 [2 [a b c]] abc [2 [d e f]]]]] printed 0 [1 [... ...] abc [... ...]] , as expected.
CALL: make "printdepthlimit 0
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed ... , as expected.
CALL: make "printdepthlimit 1
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed [... ...] , as expected.
CALL: make "printdepthlimit 4
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed [1 [2 [3 [... ...]]]] , as expected.
CALL: make "printdepthlimit 5
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed [1 [2 [3 [4 [...]]]]] , as expected.
CALL: make "printdepthlimit 6
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed [1 [2 [3 [4 [5]]]]] , as expected.
CALL: make "printdepthlimit 0
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed ... , as expected.
CALL: make "printdepthlimit 1
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed {... ...} , as expected.
CALL: make "printdepthlimit 4
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed {1 {2 {3 {... ...}}}} , as expected.
CALL: make "printdepthlimit 5
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed {1 {2 {3 {4 {...}}}}} , as expected.
CALL: make "printdepthlimit 6
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed {1 {2 {3 {4 {5}}}}} , as expected.
CALL: make "printdepthlimit -1
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [4]]]] , as expected.
CALL: make "printdepthlimit [1]
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [4]]]] , as expected.
CALL: make "printdepthlimit {1}
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [4]]]] , as expected.
CALL: make "printwidthlimit 6
PASS: Running [print [1 2 3 4 5 6]] printed 1 2 3 4 5 6 , as expected.
CALL: make "printwidthlimit 4
PASS: Running [print [1 2 3 4 5 6]] printed 1 2 3 4 ... , as expected.
CALL: make "printwidthlimit 50
PASS: Running [print "1234567890abcdefg] printed 1234567890abcdefg , as expected.
CALL: make "printwidthlimit 12
PASS: Running [print "1234567890abcdefg] printed 1234567890ab... , as expected.
CALL: make "printwidthlimit 2
PASS: Running [print "1234567890abcdefg] printed 1234567890... , as expected.
CALL: make "printwidthlimit 0
FAIL: Running [print [1 2 3 4]] printed 1 2 3 4 .  We expected ...
CALL: make "printwidthlimit 2
PASS: Running [print [1 2 3 4]] printed 1 2 ... , as expected.
CALL: make "printwidthlimit 3
PASS: Running [print [1 2 3 4]] printed 1 2 3 ... , as expected.
CALL: make "printwidthlimit 4
PASS: Running [print [1 2 3 4]] printed 1 2 3 4 , as expected.
CALL: make "printwidthlimit 2
PASS: Running [print [[a b c] [1 2 3] [x y z]]] printed [a b ...] [1 2 ...] ... , as expected.
CALL: make "printwidthlimit 0
FAIL: Running [show [1 2 3 4]] printed [1 2 3 4] .  We expected [...]
CALL: make "printwidthlimit 2
PASS: Running [show [1 2 3 4]] printed [1 2 ...] , as expected.
CALL: make "printwidthlimit 3
PASS: Running [show [1 2 3 4]] printed [1 2 3 ...] , as expected.
CALL: make "printwidthlimit 4
PASS: Running [show [1 2 3 4]] printed [1 2 3 4] , as expected.
CALL: make "printwidthlimit 0
PASS: Running [print {1 2 3 4}] printed {...} , as expected.
CALL: make "printwidthlimit 2
PASS: Running [print {1 2 3 4}] printed {1 2 ...} , as expected.
CALL: make "printwidthlimit 3
PASS: Running [print {1 2 3 4}] printed {1 2 3 ...} , as expected.
CALL: make "printwidthlimit 4
PASS: Running [print {1 2 3 4}] printed {1 2 3 4} , as expected.
CALL: make "printwidthlimit 0
PASS: Running [print "12345678901234567890] printed 1234567890... , as expected.
CALL: make "printwidthlimit 10
PASS: Running [print "12345678901234567890] printed 1234567890... , as expected.
CALL: make "printwidthlimit 11
PASS: Running [print "12345678901234567890] printed 12345678901... , as expected.
CALL: make "printwidthlimit 20
PASS: Running [print "12345678901234567890] printed 12345678901234567890 , as expected.
CALL: make "printwidthlimit -1
PASS: Running [print [1 2 3 4]] printed 1 2 3 4 , as expected.
CALL: make "printwidthlimit [1]
PASS: Running [print [1 2 3 4]] printed 1 2 3 4 , as expected.
CALL: make "printwidthlimit {1}
PASS: Running [print [1 2 3 4]] printed 1 2 3 4 , as expected.
CALL: make "printwidthlimit 4 make "printdepthlimit 3
PASS: Running [(show [1] [[2 2]] [[[3 3 3]]] [[[[4 4 4 4]]]] [[[[[5 5 5 5 5]]]]] [[[[[[6 6 6 6 6 6]]]]]] )] printed [1] [[2 2]] [[[... ... ...]]] [[[...]]] ... , as expected.
PASS: Running [SHOW "Hello] printed Hello , as expected.
PASS: Running [SHOW "Hello Hello] printed Hello Hello , as expected.
PASS: Running [SHOW "Hello~ SHOW "Hello] printed Hello~
Hello , as expected.
PASS: Running [SHOW "Hello~    SHOW "Hello] printed Hello~
Hello , as expected.
PASS: Running [SHOW "|ABC|] printed |ABC| , as expected.
PASS: Running [SHOW "A|B
C|] printed A|B
C| , as expected.
PASS: Running [SHOW "AB;CD] printed AB;CD , as expected.
PASS: Running [SHOW "A;B|C
D|] printed A;B|C
D| , as expected.
PASS: Running [SHOW "A\B\C] printed ABC , as expected.
PASS: [READWORDTEST.READWORDFROMUI "easytest] output easytest , as expected.
PASS: [READWORDTEST.READWORDFROMUI "Two Words] output Two Words , as expected.
INFO: Running invalid instruction: [IGNORE READWORD]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [(READWORD "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(RW "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [READCHAR] output 32 , as expected.
PASS: [READCHAR] output 33 , as expected.
PASS: [READCHAR] output 34 , as expected.
PASS: [READCHAR] output 35 , as expected.
PASS: [READCHAR] output 36 , as expected.
PASS: [READCHAR] output 37 , as expected.
PASS: [READCHAR] output 38 , as expected.
PASS: [READCHAR] output 39 , as expected.
PASS: [READCHAR] output 40 , as expected.
PASS: [READCHAR] output 41 , as expected.
PASS: [READCHAR] output 42 , as expected.
PASS: [READCHAR] output 43 , as expected.
PASS: [READCHAR] output 44 , as expected.
PASS: [READCHAR] output 45 , as expected.
PASS: [READCHAR] output 46 , as expected.
PASS: [READCHAR] output 47 , as expected.
PASS: [READCHAR] output 48 , as expected.
PASS: [READCHAR] output 49 , as expected.
PASS: [READCHAR] output 50 , as expected.
PASS: [READCHAR] output 51 , as expected.
PASS: [READCHAR] output 52 , as expected.
PASS: [READCHAR] output 53 , as expected.
PASS: [READCHAR] output 54 , as expected.
PASS: [READCHAR] output 55 , as expected.
PASS: [READCHAR] output 56 , as expected.
PASS: [READCHAR] output 57 , as expected.
PASS: [READCHAR] output 58 , as expected.
PASS: [READCHAR] output 59 , as expected.
PASS: [READCHAR] output 60 , as expected.
PASS: [READCHAR] output 61 , as expected.
PASS: [READCHAR] output 62 , as expected.
PASS: [READCHAR] output 63 , as expected.
PASS: [READCHAR] output 64 , as expected.
PASS: [READCHAR] output 65 , as expected.
PASS: [READCHAR] output 66 , as expected.
PASS: [READCHAR] output 67 , as expected.
PASS: [READCHAR] output 68 , as expected.
PASS: [READCHAR] output 69 , as expected.
PASS: [READCHAR] output 70 , as expected.
PASS: [READCHAR] output 71 , as expected.
PASS: [READCHAR] output 72 , as expected.
PASS: [READCHAR] output 73 , as expected.
PASS: [READCHAR] output 74 , as expected.
PASS: [READCHAR] output 75 , as expected.
PASS: [READCHAR] output 76 , as expected.
PASS: [READCHAR] output 77 , as expected.
PASS: [READCHAR] output 78 , as expected.
PASS: [READCHAR] output 79 , as expected.
PASS: [READCHAR] output 80 , as expected.
PASS: [READCHAR] output 81 , as expected.
PASS: [READCHAR] output 82 , as expected.
PASS: [READCHAR] output 83 , as expected.
PASS: [READCHAR] output 84 , as expected.
PASS: [READCHAR] output 85 , as expected.
PASS: [READCHAR] output 86 , as expected.
PASS: [READCHAR] output 87 , as expected.
PASS: [READCHAR] output 88 , as expected.
PASS: [READCHAR] output 89 , as expected.
PASS: [READCHAR] output 90 , as expected.
PASS: [READCHAR] output 91 , as expected.
PASS: [READCHAR] output 92 , as expected.
PASS: [READCHAR] output 93 , as expected.
PASS: [READCHAR] output 94 , as expected.
PASS: [READCHAR] output 95 , as expected.
PASS: [READCHAR] output 96 , as expected.
PASS: [READCHAR] output 97 , as expected.
PASS: [READCHAR] output 98 , as expected.
PASS: [READCHAR] output 99 , as expected.
PASS: [READCHAR] output 100 , as expected.
PASS: [READCHAR] output 101 , as expected.
PASS: [READCHAR] output 102 , as expected.
PASS: [READCHAR] output 103 , as expected.
PASS: [READCHAR] output 104 , as expected.
PASS: [READCHAR] output 105 , as expected.
PASS: [READCHAR] output 106 , as expected.
PASS: [READCHAR] output 107 , as expected.
PASS: [READCHAR] output 108 , as expected.
PASS: [READCHAR] output 109 , as expected.
PASS: [READCHAR] output 110 , as expected.
PASS: [READCHAR] output 111 , as expected.
PASS: [READCHAR] output 112 , as expected.
PASS: [READCHAR] output 113 , as expected.
PASS: [READCHAR] output 114 , as expected.
PASS: [READCHAR] output 115 , as expected.
PASS: [READCHAR] output 116 , as expected.
PASS: [READCHAR] output 117 , as expected.
PASS: [READCHAR] output 118 , as expected.
PASS: [READCHAR] output 119 , as expected.
PASS: [READCHAR] output 120 , as expected.
PASS: [READCHAR] output 121 , as expected.
PASS: [READCHAR] output 122 , as expected.
PASS: [READCHAR] output 123 , as expected.
PASS: [READCHAR] output 124 , as expected.
PASS: [READCHAR] output 125 , as expected.
PASS: [READCHAR] output 126 , as expected.
PASS: [READCHAR] output 127 , as expected.
PASS: [READCHAR] output 128 , as expected.
PASS: [READCHAR] output 129 , as expected.
PASS: [READCHAR] output 130 , as expected.
PASS: [READCHAR] output 131 , as expected.
PASS: [READCHAR] output 132 , as expected.
PASS: [READCHAR] output 133 , as expected.
PASS: [READCHAR] output 134 , as expected.
PASS: [READCHAR] output 135 , as expected.
PASS: [READCHAR] output 136 , as expected.
PASS: [READCHAR] output 137 , as expected.
PASS: [READCHAR] output 138 , as expected.
PASS: [READCHAR] output 139 , as expected.
PASS: [READCHAR] output 140 , as expected.
PASS: [READCHAR] output 141 , as expected.
PASS: [READCHAR] output 142 , as expected.
PASS: [READCHAR] output 143 , as expected.
PASS: [READCHAR] output 144 , as expected.
PASS: [READCHAR] output 145 , as expected.
PASS: [READCHAR] output 146 , as expected.
PASS: [READCHAR] output 147 , as expected.
PASS: [READCHAR] output 148 , as expected.
PASS: [READCHAR] output 149 , as expected.
PASS: [READCHAR] output 150 , as expected.
PASS: [READCHAR] output 151 , as expected.
PASS: [READCHAR] output 152 , as expected.
PASS: [READCHAR] output 153 , as expected.
PASS: [READCHAR] output 154 , as expected.
PASS: [READCHAR] output 155 , as expected.
PASS: [READCHAR] output 156 , as expected.
PASS: [READCHAR] output 157 , as expected.
PASS: [READCHAR] output 158 , as expected.
PASS: [READCHAR] output 159 , as expected.
PASS: [READCHAR] output 160 , as expected.
PASS: [READCHAR] output 161 , as expected.
PASS: [READCHAR] output 162 , as expected.
PASS: [READCHAR] output 163 , as expected.
PASS: [READCHAR] output 164 , as expected.
PASS: [READCHAR] output 165 , as expected.
PASS: [READCHAR] output 166 , as expected.
PASS: [READCHAR] output 167 , as expected.
PASS: [READCHAR] output 168 , as expected.
PASS: [READCHAR] output 169 , as expected.
PASS: [READCHAR] output 170 , as expected.
PASS: [READCHAR] output 171 , as expected.
PASS: [READCHAR] output 172 , as expected.
PASS: [READCHAR] output 173 , as expected.
PASS: [READCHAR] output 174 , as expected.
PASS: [READCHAR] output 175 , as expected.
PASS: [READCHAR] output 176 , as expected.
PASS: [READCHAR] output 177 , as expected.
PASS: [READCHAR] output 178 , as expected.
PASS: [READCHAR] output 179 , as expected.
PASS: [READCHAR] output 180 , as expected.
PASS: [READCHAR] output 181 , as expected.
PASS: [READCHAR] output 182 , as expected.
PASS: [READCHAR] output 183 , as expected.
PASS: [READCHAR] output 184 , as expected.
PASS: [READCHAR] output 185 , as expected.
PASS: [READCHAR] output 186 , as expected.
PASS: [READCHAR] output 187 , as expected.
PASS: [READCHAR] output 188 , as expected.
PASS: [READCHAR] output 189 , as expected.
PASS: [READCHAR] output 190 , as expected.
PASS: [READCHAR] output 191 , as expected.
PASS: [READCHAR] output 192 , as expected.
PASS: [READCHAR] output 193 , as expected.
PASS: [READCHAR] output 194 , as expected.
PASS: [READCHAR] output 195 , as expected.
PASS: [READCHAR] output 196 , as expected.
PASS: [READCHAR] output 197 , as expected.
PASS: [READCHAR] output 198 , as expected.
PASS: [READCHAR] output 199 , as expected.
PASS: [READCHAR] output 200 , as expected.
PASS: [READCHAR] output 201 , as expected.
PASS: [READCHAR] output 202 , as expected.
PASS: [READCHAR] output 203 , as expected.
PASS: [READCHAR] output 204 , as expected.
PASS: [READCHAR] output 205 , as expected.
PASS: [READCHAR] output 206 , as expected.
PASS: [READCHAR] output 207 , as expected.
PASS: [READCHAR] output 208 , as expected.
PASS: [READCHAR] output 209 , as expected.
PASS: [READCHAR] output 210 , as expected.
PASS: [READCHAR] output 211 , as expected.
PASS: [READCHAR] output 212 , as expected.
PASS: [READCHAR] output 213 , as expected.
PASS: [READCHAR] output 214 , as expected.
PASS: [READCHAR] output 215 , as expected.
PASS: [READCHAR] output 216 , as expected.
PASS: [READCHAR] output 217 , as expected.
PASS: [READCHAR] output 218 , as expected.
PASS: [READCHAR] output 219 , as expected.
PASS: [READCHAR] output 220 , as expected.
PASS: [READCHAR] output 221 , as expected.
PASS: [READCHAR] output 222 , as expected.
PASS: [READCHAR] output 223 , as expected.
PASS: [READCHAR] output 224 , as expected.
PASS: [READCHAR] output 225 , as expected.
PASS: [READCHAR] output 226 , as expected.
PASS: [READCHAR] output 227 , as expected.
PASS: [READCHAR] output 228 , as expected.
PASS: [READCHAR] output 229 , as expected.
PASS: [READCHAR] output 230 , as expected.
PASS: [READCHAR] output 231 , as expected.
PASS: [READCHAR] output 232 , as expected.
PASS: [READCHAR] output 233 , as expected.
PASS: [READCHAR] output 234 , as expected.
PASS: [READCHAR] output 235 , as expected.
PASS: [READCHAR] output 236 , as expected.
PASS: [READCHAR] output 237 , as expected.
PASS: [READCHAR] output 238 , as expected.
PASS: [READCHAR] output 239 , as expected.
PASS: [READCHAR] output 240 , as expected.
PASS: [READCHAR] output 241 , as expected.
PASS: [READCHAR] output 242 , as expected.
PASS: [READCHAR] output 243 , as expected.
PASS: [READCHAR] output 244 , as expected.
PASS: [READCHAR] output 245 , as expected.
PASS: [READCHAR] output 246 , as expected.
PASS: [READCHAR] output 247 , as expected.
PASS: [READCHAR] output 248 , as expected.
PASS: [READCHAR] output 249 , as expected.
PASS: [READCHAR] output 250 , as expected.
PASS: [READCHAR] output 251 , as expected.
PASS: [READCHAR] output 252 , as expected.
PASS: [READCHAR] output 253 , as expected.
PASS: [READCHAR] output 254 , as expected.
PASS: [READCHAR] output 255 , as expected.
PASS: [READCHAR] output [] , as expected.
INFO: Running invalid instruction: [(READCHAR "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(RC "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [READCHARS 0] output  , as expected.
PASS: [READCHARS 1] output   , as expected.
PASS: [READCHARS 2] output !" , as expected.
PASS: [READCHARS 1000] output #$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ , as expected.
PASS: [READCHARS 1] output [] , as expected.
PASS: [READCHARS 0] output [] , as expected.
CALL: READCHARS 256
PASS: [READCHARS 0] output [] , as expected.
CALL: SETREAD []
PASS: [READCHARS 0] output [] , as expected.
PASS: [READCHARS 100] output [] , as expected.
INFO: Running invalid instruction: [(READCHARS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to READCHARS .
INFO: Running invalid instruction: [(READCHARS 100 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [READCHARS 12.5]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like 12.5 as input .
INFO: Running invalid instruction: [READCHARS []]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like [] as input .
INFO: Running invalid instruction: [READCHARS [1]]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like [1] as input .
INFO: Running invalid instruction: [READCHARS -1]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like -1 as input .
INFO: Running invalid instruction: [READCHARS {1}]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like {1} as input .
INFO: Running invalid instruction: [READCHARS "ten]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like ten as input .
INFO: Running invalid instruction: [READCHARS 2147483646]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [READCHARS 2147483647]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like 2147483647 as input .
PASS: The editor window was displayed, as expected.
INFO: Running invalid instruction: [(EDALL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: The editor saved the values of all 10000 variables.
INFO: Running invalid instruction: [(EDIT [[] [] []] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [EDIT {1}]
INFO: error code is 4 .
INFO: error text is EDIT doesn't like {1} as input .
INFO: Running invalid instruction: [EDIT [{1}]]
INFO: error code is 4 .
INFO: error text is EDIT doesn't like {1} as input .
INFO: Running invalid instruction: [EDIT [[] {1}]]
INFO: error code is 4 .
INFO: error text is EDIT doesn't like {1} as input .
INFO: Running invalid instruction: [EDIT [[] [] {1}]]
INFO: error code is 4 .
INFO: error text is EDIT doesn't like {1} as input .
CALL: WINDOWFILEEDIT :longfilename (LIST "REPORTTESTPASSED [WINDOWFILEEDIT did not crash on a long filename] "ERASEFILE QUOTED :longfilename )
PASS: INPORT did not crash
INFO: Running invalid instruction: [(INPORT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to INPORT .
INFO: Running invalid instruction: [INPORT [192]]
INFO: error code is 7 .
INFO: error text is INPORT doesn't like [192] as input .
INFO: Running invalid instruction: [INPORT -1]
INFO: error code is 7 .
INFO: error text is INPORT doesn't like -1 as input .
INFO: Running invalid instruction: [INPORT {}]
INFO: error code is 7 .
INFO: error text is INPORT doesn't like {} as input .
INFO: Running invalid instruction: [INPORT "hello]
INFO: error code is 7 .
INFO: error text is INPORT doesn't like hello as input .
INFO: Running invalid instruction: [(INPORT "198 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: INPORTB did not crash
INFO: Running invalid instruction: [(INPORTB)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to INPORTB .
INFO: Running invalid instruction: [INPORTB [192]]
INFO: error code is 7 .
INFO: error text is INPORTB doesn't like [192] as input .
INFO: Running invalid instruction: [INPORTB -1]
INFO: error code is 7 .
INFO: error text is INPORTB doesn't like -1 as input .
INFO: Running invalid instruction: [INPORTB {}]
INFO: error code is 7 .
INFO: error text is INPORTB doesn't like {} as input .
INFO: Running invalid instruction: [INPORTB "hello]
INFO: error code is 7 .
INFO: error text is INPORTB doesn't like hello as input .
INFO: Running invalid instruction: [(INPORTB "198 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: OUTPORT did not crash
INFO: Running invalid instruction: [(OUTPORT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OUTPORT .
INFO: Running invalid instruction: [(OUTPORT 192)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OUTPORT .
INFO: Running invalid instruction: [OUTPORT [192] 0]
INFO: error code is 7 .
INFO: error text is OUTPORT doesn't like [192] as input .
INFO: Running invalid instruction: [OUTPORT -1 0]
INFO: error code is 7 .
INFO: error text is OUTPORT doesn't like -1 as input .
INFO: Running invalid instruction: [OUTPORT {} 0]
INFO: error code is 7 .
INFO: error text is OUTPORT doesn't like {} as input .
INFO: Running invalid instruction: [OUTPORT "hello 0]
INFO: error code is 7 .
INFO: error text is OUTPORT doesn't like hello as input .
INFO: Running invalid instruction: [(OUTPORT 198 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: OUTPORTB did not crash
INFO: Running invalid instruction: [(OUTPORTB)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OUTPORTB .
INFO: Running invalid instruction: [(OUTPORTB 192)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OUTPORTB .
INFO: Running invalid instruction: [OUTPORTB [192] 0]
INFO: error code is 7 .
INFO: error text is OUTPORTB doesn't like [192] as input .
INFO: Running invalid instruction: [OUTPORTB -1 0]
INFO: error code is 7 .
INFO: error text is OUTPORTB doesn't like -1 as input .
INFO: Running invalid instruction: [OUTPORTB {} 0]
INFO: error code is 7 .
INFO: error text is OUTPORTB doesn't like {} as input .
INFO: Running invalid instruction: [OUTPORTB "hello 0]
INFO: error code is 7 .
INFO: error text is OUTPORTB doesn't like hello as input .
INFO: Running invalid instruction: [(OUTPORTB 198 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [MEMBER? [System] FONTFACENAMES] output true , as expected.
INFO: Running invalid instruction: [(FONTFACENAMES "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: font-circle was drawn correctly.
INFO: Running invalid instruction: [(LABEL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LABEL .
INFO: Running invalid instruction: [(LABEL 1 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: system-font was drawn correctly.
PASS: arial-font was drawn correctly.
PASS: [LIST? LABELFONT] output true , as expected.
PASS: [COUNT LABELFONT] output 13 , as expected.
PASS: [ITEM 1 LABELFONT] output [Arial] , as expected.
PASS: [ITEM 2 LABELFONT] output 24 , as expected.
PASS: [ITEM 3 LABELFONT] output 0 , as expected.
PASS: [ITEM 4 LABELFONT] output 0 , as expected.
PASS: [ITEM 5 LABELFONT] output 400 , as expected.
PASS: [ITEM 6 LABELFONT] output 0 , as expected.
PASS: [ITEM 7 LABELFONT] output 0 , as expected.
PASS: [ITEM 8 LABELFONT] output 0 , as expected.
PASS: [ITEM 9 LABELFONT] output 0 , as expected.
PASS: [ITEM 10 LABELFONT] output 0 , as expected.
PASS: [ITEM 11 LABELFONT] output 0 , as expected.
PASS: [ITEM 12 LABELFONT] output 0 , as expected.
PASS: [ITEM 13 LABELFONT] output 0 , as expected.
INFO: Running invalid instruction: [SETLABELFONT "Courier]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like Courier as input .
INFO: Running invalid instruction: [SETLABELFONT 1.1]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like 1.1 as input .
INFO: Running invalid instruction: [SETLABELFONT {0}]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like {0} as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] bad 0 0 400 0 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 bad 0 400 0 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 bad 400 0 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 bad 0 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 bad 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 bad 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 bad 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 bad 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 bad 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 bad 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 bad 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 0 bad]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [(SETLABELFONT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETLABELFONT .
INFO: Running invalid instruction: [(SETLABELFONT [[Arial]] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Testing that SETLABELFONT doesn't modify its input list on error
INFO: Now comparing the original instruction to the one that was used
FAIL: [[SETLABELFONT [[Arial] 24 0 0 400 0 0 bad 0 0 0 0 0]] = [SETLABELFONT [[Arial] 24 0 0 400 0 0 Unbound 0 0 0 0 0]]] output false . We expected true .
PASS: [PENDOWNP] output true , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [ITEM 1 PEN] output pendown , as expected.
PASS: [PENDOWN?] output false , as expected.
PASS: [ITEM 1 PEN] output penup , as expected.
INFO: Running invalid instruction: [(PENDOWN "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(PENUP "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(PENDOWN? "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PENMODE] output paint , as expected.
PASS: [ITEM 2 PEN] output paint , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output erase , as expected.
PASS: [ITEM 2 PEN] output erase , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output reverse , as expected.
PASS: [ITEM 2 PEN] output reverse , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output paint , as expected.
PASS: [ITEM 2 PEN] output paint , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output erase , as expected.
PASS: [ITEM 2 PEN] output erase , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output reverse , as expected.
PASS: [ITEM 2 PEN] output reverse , as expected.
PASS: [PENDOWN?] output true , as expected.
INFO: Running invalid instruction: [(ARC)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARC .
INFO: Running invalid instruction: [(ARC 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARC .
INFO: Running invalid instruction: [(ARC 10 10 10)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ARC [10] 10]
INFO: error code is 7 .
INFO: error text is ellipsearc doesn't like [10] as input .
INFO: Running invalid instruction: [ARC {10} 10]
INFO: error code is 7 .
INFO: error text is ellipsearc doesn't like {10} as input .
INFO: Running invalid instruction: [ARC 10 [10]]
INFO: error code is 7 .
INFO: error text is ellipsearc doesn't like [10] as input .
INFO: Running invalid instruction: [ARC 10 {10}]
INFO: error code is 7 .
INFO: error text is ellipsearc doesn't like {10} as input .
INFO: executing regression test for bug #1388325
PASS: "bug #1388325 is fixed; 'ELLIPSEARC 1e20 50 50 0' did not crash.
PASS: WINDOWFILEEDIT did not crash on a long filename
PASS: The circle was drawn correctly
PASS: solid-green was drawn correctly.
INFO: Running invalid instruction: [(FILL 10)]
INFO: error code is 7 .
INFO: error text is FILL doesn't like 10 as input .
INFO: Running invalid instruction: [(FILL ["true] )]
INFO: error code is 7 .
INFO: error text is FILL doesn't like ["true] as input .
INFO: Running invalid instruction: [(FILL "true "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [WRITER] output smoketest.txt , as expected.
PASS: [WRITEPOS] output 0 , as expected.
PASS: [WRITEPOS] output 7 , as expected.
PASS: [WRITEPOS] output 17 , as expected.
PASS: [WRITER] output [] , as expected.
PASS: [READER] output smoketest.txt , as expected.
PASS: [READPOS] output 0 , as expected.
PASS: [EOFP] output false , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READPOS] output 7 , as expected.
PASS: [EOFP] output false , as expected.
PASS: [READLIST] output [Good Bye] , as expected.
PASS: [READPOS] output 17 , as expected.
PASS: [EOFP] output true , as expected.
PASS: [READER] output [] , as expected.
CALL: CLOSE WRITER
PASS: [WRITER] output [] , as expected.
PASS: [READWORD] output This is line 1 , as expected.
CALL: CLOSE READER
PASS: [READER] output [] , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Jello] , as expected.
CALL: OPENWRITE :filename1
CALL: OPENWRITE :filename2
PASS: [MEMBERP :filename1 ALLOPEN] output true , as expected.
PASS: [MEMBERP :filename2 ALLOPEN] output true , as expected.
CALL: CLOSE :filename1
CALL: CLOSE :filename2
PASS: [MEMBERP :filename1 ALLOPEN] output false , as expected.
PASS: [MEMBERP :filename2 ALLOPEN] output false , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Good Bye] , as expected.
INFO: Running invalid instruction: [OPENREAD :filename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [And how are you today] , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Good Bye] , as expected.
PASS: [MEMBERP "mytestfile FILES] output true , as expected.
PASS: [MEMBERP "mytestfile FILES] output false , as expected.
PASS: [MEMBERP "mytestdir DIRECTORIES] output true , as expected.
INFO: Running invalid instruction: [OPENREAD "mytestfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENWRITE "mytestfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENAPPEND "mytestfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENUPDATE "mytestfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENREAD "mytestfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENWRITE "mytestfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENAPPEND "mytestfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENUPDATE "mytestfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
PASS: [MEMBERP "mytestfile FILES] output false , as expected.
INFO: Running invalid instruction: [OPENREAD "testdir]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENWRITE "testdir]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENAPPEND "testdir]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENUPDATE "testdir]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
PASS: [MEMBERP "mytestfile DIRECTORIES] output false , as expected.
CALL: SETREAD []
PASS: [EOFP] output false , as expected.
PASS: [EOF?] output false , as expected.
INFO: Running invalid instruction: [(OPENREAD "testfile.txt 1)]
INFO: error code is 7 .
INFO: error text is OPENREAD doesn't like 1 as input .
INFO: Running invalid instruction: [(OPENWRITE "testfile.txt 1)]
INFO: error code is 7 .
INFO: error text is OPENWRITE doesn't like 1 as input .
INFO: Running invalid instruction: [(OPENAPPEND "testfile.txt 1)]
INFO: error code is 7 .
INFO: error text is OPENAPPEND doesn't like 1 as input .
INFO: Running invalid instruction: [(OPENUPDATE "testfile.txt 1)]
INFO: error code is 7 .
INFO: error text is OPENUPDATE doesn't like 1 as input .
INFO: Running invalid instruction: [(OPENREAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OPENREAD .
INFO: Running invalid instruction: [(OPENWRITE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OPENWRITE .
INFO: Running invalid instruction: [(OPENAPPEND)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OPENAPPEND .
INFO: Running invalid instruction: [(OPENUPDATE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OPENUPDATE .
INFO: Running invalid instruction: [(OPENREAD "testfile.txt LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(OPENWRITE "testfile.txt LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(OPENAPPEND "testfile.txt LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(OPENUPDATE "testfile.txt LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [OPENREAD []]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENWRITE []]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENAPPEND []]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENUPDATE []]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENREAD {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENWRITE {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENAPPEND {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENUPDATE {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENREAD :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENWRITE :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENAPPEND :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENUPDATE :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [CLOSE :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [CLOSE "nonexistent.txt]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [CLOSE []]
PASS: error code is 7 , as expected.
INFO: error text is CLOSE doesn't like [] as input .
INFO: Running invalid instruction: [CLOSE [testfile.txt]]
PASS: error code is 7 , as expected.
INFO: error text is CLOSE doesn't like [testfile.txt] as input .
INFO: Running invalid instruction: [CLOSE {testfile.txt}]
PASS: error code is 7 , as expected.
INFO: error text is CLOSE doesn't like {testfile.txt} as input .
INFO: Running invalid instruction: [(CLOSE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to CLOSE .
INFO: Running invalid instruction: [(CLOSE "testfile.txt "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ERASEFILE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ERASEFILE .
INFO: Running invalid instruction: [(ERASEFILE "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(CLOSEALL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ALLOPEN "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(EOFP "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETREAD {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [SETREAD :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [(SETREAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETREAD .
INFO: Running invalid instruction: [(SETREAD "file.txt "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETWRITE {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [SETWRITE :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [(SETWRITE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETWRITE .
INFO: Running invalid instruction: [(SETWRITE "file.txt "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETWRITE :closedfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
PASS: [WRITER] output openfile.txt , as expected.
INFO: Running invalid instruction: [SETREAD :closedfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
PASS: [READER] output openfile.txt , as expected.
PASS: [PENCOLOR] output 0 , as expected.
PASS: [PENCOLOR] output 15 , as expected.
PASS: [PENCOLOR] output 7 , as expected.
PASS: [PENCOLOR] output 1 , as expected.
PASS: [PENCOLOR] output [128 64 32] , as expected.
PASS: [PENCOLOR] output [128 64 32] , as expected.
PASS: [PENCOLOR] output [255 255 255] , as expected.
PASS: [PENCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETPENCOLOR 1e20]
FAIL: Running [SETPENCOLOR 1e20] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOR -1]
FAIL: Running [SETPENCOLOR -1] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOR 4.5]
FAIL: Running [SETPENCOLOR 4.5] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like {} as input .
INFO: Running invalid instruction: [SETPENCOLOR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [1e20 0 0]]
FAIL: Running [SETPENCOLOR [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [4.5 0 0]]
FAIL: Running [SETPENCOLOR [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOR [0 1e20 0]]
FAIL: Running [SETPENCOLOR [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [0 4.5 0]]
FAIL: Running [SETPENCOLOR [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOR [0 0 1e20]]
FAIL: Running [SETPENCOLOR [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETPENCOLOR [0 0 4.5]]
FAIL: Running [SETPENCOLOR [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR "notacolor]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETPENCOLOR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETPENCOLOR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPENCOLOR .
INFO: Running invalid instruction: [( SETPENCOLOR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [PENCOLOR] output [0 0 4] . We expected [255 160 122] .
PASS: [PENCOLOUR] output 0 , as expected.
PASS: [PENCOLOUR] output 15 , as expected.
PASS: [PENCOLOUR] output 7 , as expected.
PASS: [PENCOLOUR] output 1 , as expected.
PASS: [PENCOLOUR] output [128 64 32] , as expected.
PASS: [PENCOLOUR] output [128 64 32] , as expected.
PASS: [PENCOLOUR] output [255 255 255] , as expected.
PASS: [PENCOLOUR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETPENCOLOUR 1e20]
FAIL: Running [SETPENCOLOUR 1e20] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOUR -1]
FAIL: Running [SETPENCOLOUR -1] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOUR 4.5]
FAIL: Running [SETPENCOLOUR 4.5] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOUR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like {} as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [1e+20 0 0]]
FAIL: Running [SETPENCOLOUR [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOUR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [4.5 0 0]]
FAIL: Running [SETPENCOLOUR [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOUR [0 1e+20 0]]
FAIL: Running [SETPENCOLOUR [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOUR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0 4.5 0]]
FAIL: Running [SETPENCOLOUR [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOUR [0 0 1e+20]]
FAIL: Running [SETPENCOLOUR [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOUR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0 0 4.5]]
FAIL: Running [SETPENCOLOUR [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETPENCOLOUR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR "notacolor]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETPENCOLOUR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETPENCOLOUR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPENCOLOUR .
INFO: Running invalid instruction: [( SETPENCOLOUR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [PENCOLOUR] output [0 0 4] . We expected [255 160 122] .
PASS: [PENCOLOR] output 0 , as expected.
PASS: [PENCOLOR] output 15 , as expected.
PASS: [PENCOLOR] output 7 , as expected.
PASS: [PENCOLOR] output 1 , as expected.
PASS: [PENCOLOR] output [128 64 32] , as expected.
PASS: [PENCOLOR] output [128 64 32] , as expected.
PASS: [PENCOLOR] output [255 255 255] , as expected.
PASS: [PENCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETPC 1e20]
FAIL: Running [SETPC 1e20] did not throw an error.
INFO: Running invalid instruction: [SETPC -1]
FAIL: Running [SETPC -1] did not throw an error.
INFO: Running invalid instruction: [SETPC 4.5]
FAIL: Running [SETPC 4.5] did not throw an error.
INFO: Running invalid instruction: [SETPC {}]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like {} as input .
INFO: Running invalid instruction: [SETPC [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0] as input .
INFO: Running invalid instruction: [SETPC [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETPC [1e+20 0 0]]
FAIL: Running [SETPC [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETPC [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETPC [4.5 0 0]]
FAIL: Running [SETPC [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETPC [0 1e+20 0]]
FAIL: Running [SETPC [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETPC [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETPC [0 4.5 0]]
FAIL: Running [SETPC [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETPC [0 0 1e+20]]
FAIL: Running [SETPC [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETPC [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETPC [0 0 4.5]]
FAIL: Running [SETPC [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETPC [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETPC "notacolor]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETPC doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETPC )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPC .
INFO: Running invalid instruction: [( SETPC 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [PENCOLOR] output [0 0 4] . We expected [255 160 122] .
PASS: [FLOODCOLOR] output 0 , as expected.
PASS: [FLOODCOLOR] output 15 , as expected.
PASS: [FLOODCOLOR] output 7 , as expected.
PASS: [FLOODCOLOR] output 1 , as expected.
PASS: [FLOODCOLOR] output [128 64 32] , as expected.
PASS: [FLOODCOLOR] output [128 64 32] , as expected.
PASS: [FLOODCOLOR] output [255 255 255] , as expected.
PASS: [FLOODCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETFLOODCOLOR 1e20]
FAIL: Running [SETFLOODCOLOR 1e20] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOR -1]
FAIL: Running [SETFLOODCOLOR -1] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOR 4.5]
FAIL: Running [SETFLOODCOLOR 4.5] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like {} as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [1e+20 0 0]]
FAIL: Running [SETFLOODCOLOR [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [4.5 0 0]]
FAIL: Running [SETFLOODCOLOR [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOR [0 1e+20 0]]
FAIL: Running [SETFLOODCOLOR [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0 4.5 0]]
FAIL: Running [SETFLOODCOLOR [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOR [0 0 1e+20]]
FAIL: Running [SETFLOODCOLOR [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0 0 4.5]]
FAIL: Running [SETFLOODCOLOR [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR "notacolor]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETFLOODCOLOR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETFLOODCOLOR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETFLOODCOLOR .
INFO: Running invalid instruction: [( SETFLOODCOLOR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [FLOODCOLOR] output [0 0 4] . We expected [255 160 122] .
PASS: [FLOODCOLOUR] output 0 , as expected.
PASS: [FLOODCOLOUR] output 15 , as expected.
PASS: [FLOODCOLOUR] output 7 , as expected.
PASS: [FLOODCOLOUR] output 1 , as expected.
PASS: [FLOODCOLOUR] output [128 64 32] , as expected.
PASS: [FLOODCOLOUR] output [128 64 32] , as expected.
PASS: [FLOODCOLOUR] output [255 255 255] , as expected.
PASS: [FLOODCOLOUR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETFLOODCOLOUR 1e20]
FAIL: Running [SETFLOODCOLOUR 1e20] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOUR -1]
FAIL: Running [SETFLOODCOLOUR -1] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOUR 4.5]
FAIL: Running [SETFLOODCOLOUR 4.5] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOUR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like {} as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [1e+20 0 0]]
FAIL: Running [SETFLOODCOLOUR [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOUR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [4.5 0 0]]
FAIL: Running [SETFLOODCOLOUR [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 1e+20 0]]
FAIL: Running [SETFLOODCOLOUR [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 4.5 0]]
FAIL: Running [SETFLOODCOLOUR [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 0 1e+20]]
FAIL: Running [SETFLOODCOLOUR [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 0 4.5]]
FAIL: Running [SETFLOODCOLOUR [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR "notacolor]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETFLOODCOLOUR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETFLOODCOLOUR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETFLOODCOLOUR .
INFO: Running invalid instruction: [( SETFLOODCOLOUR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [FLOODCOLOUR] output [0 0 4] . We expected [255 160 122] .
PASS: [FLOODCOLOR] output 0 , as expected.
PASS: [FLOODCOLOR] output 15 , as expected.
PASS: [FLOODCOLOR] output 7 , as expected.
PASS: [FLOODCOLOR] output 1 , as expected.
PASS: [FLOODCOLOR] output [128 64 32] , as expected.
PASS: [FLOODCOLOR] output [128 64 32] , as expected.
PASS: [FLOODCOLOR] output [255 255 255] , as expected.
PASS: [FLOODCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETFC 1e20]
FAIL: Running [SETFC 1e20] did not throw an error.
INFO: Running invalid instruction: [SETFC -1]
FAIL: Running [SETFC -1] did not throw an error.
INFO: Running invalid instruction: [SETFC 4.5]
FAIL: Running [SETFC 4.5] did not throw an error.
INFO: Running invalid instruction: [SETFC {}]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like {} as input .
INFO: Running invalid instruction: [SETFC [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0] as input .
INFO: Running invalid instruction: [SETFC [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETFC [1e+20 0 0]]
FAIL: Running [SETFC [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETFC [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETFC [4.5 0 0]]
FAIL: Running [SETFC [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETFC [0 1e+20 0]]
FAIL: Running [SETFC [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETFC [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETFC [0 4.5 0]]
FAIL: Running [SETFC [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETFC [0 0 1e+20]]
FAIL: Running [SETFC [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETFC [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETFC [0 0 4.5]]
FAIL: Running [SETFC [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETFC [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETFC "notacolor]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETFC doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETFC )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETFC .
INFO: Running invalid instruction: [( SETFC 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [FLOODCOLOR] output [0 0 4] . We expected [255 160 122] .
PASS: [SCREENCOLOR] output 0 , as expected.
PASS: [SCREENCOLOR] output 15 , as expected.
PASS: [SCREENCOLOR] output 7 , as expected.
PASS: [SCREENCOLOR] output 1 , as expected.
PASS: [SCREENCOLOR] output [128 64 32] , as expected.
PASS: [SCREENCOLOR] output [128 64 32] , as expected.
PASS: [SCREENCOLOR] output [255 255 255] , as expected.
PASS: [SCREENCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETSCREENCOLOR 1e20]
FAIL: Running [SETSCREENCOLOR 1e20] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOR -1]
FAIL: Running [SETSCREENCOLOR -1] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOR 4.5]
FAIL: Running [SETSCREENCOLOR 4.5] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like {} as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [1e+20 0 0]]
FAIL: Running [SETSCREENCOLOR [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [4.5 0 0]]
FAIL: Running [SETSCREENCOLOR [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOR [0 1e+20 0]]
FAIL: Running [SETSCREENCOLOR [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0 4.5 0]]
FAIL: Running [SETSCREENCOLOR [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOR [0 0 1e+20]]
FAIL: Running [SETSCREENCOLOR [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0 0 4.5]]
FAIL: Running [SETSCREENCOLOR [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR "notacolor]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETSCREENCOLOR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETSCREENCOLOR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCREENCOLOR .
INFO: Running invalid instruction: [( SETSCREENCOLOR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [SCREENCOLOR] output [0 0 4] . We expected [255 160 122] .
PASS: [SCREENCOLOUR] output 0 , as expected.
PASS: [SCREENCOLOUR] output 15 , as expected.
PASS: [SCREENCOLOUR] output 7 , as expected.
PASS: [SCREENCOLOUR] output 1 , as expected.
PASS: [SCREENCOLOUR] output [128 64 32] , as expected.
PASS: [SCREENCOLOUR] output [128 64 32] , as expected.
PASS: [SCREENCOLOUR] output [255 255 255] , as expected.
PASS: [SCREENCOLOUR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETSCREENCOLOUR 1e20]
FAIL: Running [SETSCREENCOLOUR 1e20] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOUR -1]
FAIL: Running [SETSCREENCOLOUR -1] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOUR 4.5]
FAIL: Running [SETSCREENCOLOUR 4.5] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOUR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like {} as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [1e+20 0 0]]
FAIL: Running [SETSCREENCOLOUR [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOUR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [4.5 0 0]]
FAIL: Running [SETSCREENCOLOUR [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 1e+20 0]]
FAIL: Running [SETSCREENCOLOUR [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 4.5 0]]
FAIL: Running [SETSCREENCOLOUR [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 0 1e+20]]
FAIL: Running [SETSCREENCOLOUR [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 0 4.5]]
FAIL: Running [SETSCREENCOLOUR [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR "notacolor]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETSCREENCOLOUR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETSCREENCOLOUR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCREENCOLOUR .
INFO: Running invalid instruction: [( SETSCREENCOLOUR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [SCREENCOLOUR] output [0 0 4] . We expected [255 160 122] .
PASS: [SCREENCOLOR] output 0 , as expected.
PASS: [SCREENCOLOR] output 15 , as expected.
PASS: [SCREENCOLOR] output 7 , as expected.
PASS: [SCREENCOLOR] output 1 , as expected.
PASS: [SCREENCOLOR] output [128 64 32] , as expected.
PASS: [SCREENCOLOR] output [128 64 32] , as expected.
PASS: [SCREENCOLOR] output [255 255 255] , as expected.
PASS: [SCREENCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETSC 1e20]
FAIL: Running [SETSC 1e20] did not throw an error.
INFO: Running invalid instruction: [SETSC -1]
FAIL: Running [SETSC -1] did not throw an error.
INFO: Running invalid instruction: [SETSC 4.5]
FAIL: Running [SETSC 4.5] did not throw an error.
INFO: Running invalid instruction: [SETSC {}]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like {} as input .
INFO: Running invalid instruction: [SETSC [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0] as input .
INFO: Running invalid instruction: [SETSC [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETSC [1e+20 0 0]]
FAIL: Running [SETSC [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETSC [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETSC [4.5 0 0]]
FAIL: Running [SETSC [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETSC [0 1e+20 0]]
FAIL: Running [SETSC [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETSC [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETSC [0 4.5 0]]
FAIL: Running [SETSC [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETSC [0 0 1e+20]]
FAIL: Running [SETSC [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETSC [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETSC [0 0 4.5]]
FAIL: Running [SETSC [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETSC [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETSC "notacolor]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETSC doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETSC )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSC .
INFO: Running invalid instruction: [( SETSC 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [SCREENCOLOR] output [0 0 4] . We expected [255 160 122] .
CALL: SETPENCOLOR 0
PASS: [PENCOLOR] output [0 0 0] , as expected.
CALL: SETPENCOLOR 1
PASS: [PENCOLOR] output [0 0 255] , as expected.
CALL: SETPENCOLOR 2
PASS: [PENCOLOR] output [0 255 0] , as expected.
CALL: SETPENCOLOR 3
PASS: [PENCOLOR] output [0 255 255] , as expected.
CALL: SETPENCOLOR 4
PASS: [PENCOLOR] output [255 0 0] , as expected.
CALL: SETPENCOLOR 5
PASS: [PENCOLOR] output [255 0 255] , as expected.
CALL: SETPENCOLOR 6
PASS: [PENCOLOR] output [255 255 0] , as expected.
CALL: SETPENCOLOR 7
PASS: [PENCOLOR] output [255 255 255] , as expected.
CALL: SETPENCOLOR 8
PASS: [PENCOLOR] output [155 96 59] , as expected.
CALL: SETPENCOLOR 9
PASS: [PENCOLOR] output [197 136 18] , as expected.
CALL: SETPENCOLOR 10
PASS: [PENCOLOR] output [100 162 64] , as expected.
CALL: SETPENCOLOR 11
PASS: [PENCOLOR] output [120 187 187] , as expected.
CALL: SETPENCOLOR 12
PASS: [PENCOLOR] output [255 149 119] , as expected.
CALL: SETPENCOLOR 13
PASS: [PENCOLOR] output [144 113 208] , as expected.
CALL: SETPENCOLOR 14
PASS: [PENCOLOR] output [255 163 0] , as expected.
CALL: SETPENCOLOR 15
PASS: [PENCOLOR] output [183 183 183] , as expected.
CALL: SETPENCOLOR "AliceBlue
PASS: [PENCOLOR] output [240 248 255] , as expected.
CALL: SETPENCOLOR "AntiqueWhite
PASS: [PENCOLOR] output [250 235 215] , as expected.
CALL: SETPENCOLOR "Aqua
PASS: [PENCOLOR] output [0 255 255] , as expected.
CALL: SETPENCOLOR "Aquamarine
PASS: [PENCOLOR] output [127 255 212] , as expected.
CALL: SETPENCOLOR "Azure
PASS: [PENCOLOR] output [240 255 255] , as expected.
CALL: SETPENCOLOR "Beige
PASS: [PENCOLOR] output [245 245 220] , as expected.
CALL: SETPENCOLOR "Bisque
PASS: [PENCOLOR] output [255 228 196] , as expected.
CALL: SETPENCOLOR "Black
PASS: [PENCOLOR] output [0 0 0] , as expected.
CALL: SETPENCOLOR "BlanchedAlmond
PASS: [PENCOLOR] output [255 235 205] , as expected.
CALL: SETPENCOLOR "Blue
PASS: [PENCOLOR] output [0 0 255] , as expected.
CALL: SETPENCOLOR "BlueViolet
PASS: [PENCOLOR] output [138 43 226] , as expected.
CALL: SETPENCOLOR "Brown
PASS: [PENCOLOR] output [165 42 42] , as expected.
CALL: SETPENCOLOR "BurlyWood
PASS: [PENCOLOR] output [222 184 135] , as expected.
CALL: SETPENCOLOR "CadetBlue
PASS: [PENCOLOR] output [95 158 160] , as expected.
CALL: SETPENCOLOR "Chartreuse
PASS: [PENCOLOR] output [127 255 0] , as expected.
CALL: SETPENCOLOR "Chocolate
PASS: [PENCOLOR] output [210 105 30] , as expected.
CALL: SETPENCOLOR "Coral
PASS: [PENCOLOR] output [255 127 80] , as expected.
CALL: SETPENCOLOR "CornflowerBlue
PASS: [PENCOLOR] output [100 149 237] , as expected.
CALL: SETPENCOLOR "Cornsilk
PASS: [PENCOLOR] output [255 248 220] , as expected.
CALL: SETPENCOLOR "Crimson
PASS: [PENCOLOR] output [220 20 60] , as expected.
CALL: SETPENCOLOR "Cyan
PASS: [PENCOLOR] output [0 255 255] , as expected.
CALL: SETPENCOLOR "DarkBlue
PASS: [PENCOLOR] output [0 0 139] , as expected.
CALL: SETPENCOLOR "DarkCyan
PASS: [PENCOLOR] output [0 139 139] , as expected.
CALL: SETPENCOLOR "DarkGoldenRod
PASS: [PENCOLOR] output [184 134 11] , as expected.
CALL: SETPENCOLOR "DarkGray
PASS: [PENCOLOR] output [169 169 169] , as expected.
CALL: SETPENCOLOR "DarkGreen
PASS: [PENCOLOR] output [0 100 0] , as expected.
CALL: SETPENCOLOR "DarkGrey
PASS: [PENCOLOR] output [169 169 169] , as expected.
CALL: SETPENCOLOR "DarkKhaki
PASS: [PENCOLOR] output [189 183 107] , as expected.
CALL: SETPENCOLOR "DarkMagenta
PASS: [PENCOLOR] output [139 0 139] , as expected.
CALL: SETPENCOLOR "DarkOliveGreen
PASS: [PENCOLOR] output [85 107 47] , as expected.
CALL: SETPENCOLOR "DarkOrchid
PASS: [PENCOLOR] output [153 50 204] , as expected.
CALL: SETPENCOLOR "DarkRed
PASS: [PENCOLOR] output [139 0 0] , as expected.
CALL: SETPENCOLOR "DarkSalmon
PASS: [PENCOLOR] output [233 150 122] , as expected.
CALL: SETPENCOLOR "DarkSeaGreen
PASS: [PENCOLOR] output [143 188 143] , as expected.
CALL: SETPENCOLOR "DarkSlateBlue
PASS: [PENCOLOR] output [72 61 139] , as expected.
CALL: SETPENCOLOR "DarkSlateGray
PASS: [PENCOLOR] output [47 79 79] , as expected.
CALL: SETPENCOLOR "DarkSlateGrey
PASS: [PENCOLOR] output [47 79 79] , as expected.
CALL: SETPENCOLOR "DarkTurquoise
PASS: [PENCOLOR] output [0 206 209] , as expected.
CALL: SETPENCOLOR "DarkViolet
PASS: [PENCOLOR] output [148 0 211] , as expected.
CALL: SETPENCOLOR "Darkorange
PASS: [PENCOLOR] output [255 140 0] , as expected.
CALL: SETPENCOLOR "DeepPink
PASS: [PENCOLOR] output [255 20 147] , as expected.
CALL: SETPENCOLOR "DeepSkyBlue
PASS: [PENCOLOR] output [0 191 255] , as expected.
CALL: SETPENCOLOR "DimGray
PASS: [PENCOLOR] output [105 105 105] , as expected.
CALL: SETPENCOLOR "DimGrey
PASS: [PENCOLOR] output [105 105 105] , as expected.
CALL: SETPENCOLOR "DodgerBlue
PASS: [PENCOLOR] output [30 144 255] , as expected.
CALL: SETPENCOLOR "FireBrick
PASS: [PENCOLOR] output [178 34 34] , as expected.
CALL: SETPENCOLOR "FloralWhite
PASS: [PENCOLOR] output [255 250 240] , as expected.
CALL: SETPENCOLOR "ForestGreen
PASS: [PENCOLOR] output [34 139 34] , as expected.
CALL: SETPENCOLOR "Fuchsia
PASS: [PENCOLOR] output [255 0 255] , as expected.
CALL: SETPENCOLOR "Gainsboro
PASS: [PENCOLOR] output [220 220 220] , as expected.
CALL: SETPENCOLOR "GhostWhite
PASS: [PENCOLOR] output [248 248 255] , as expected.
CALL: SETPENCOLOR "Gold
PASS: [PENCOLOR] output [255 215 0] , as expected.
CALL: SETPENCOLOR "GoldenRod
PASS: [PENCOLOR] output [218 165 32] , as expected.
CALL: SETPENCOLOR "Gray
PASS: [PENCOLOR] output [128 128 128] , as expected.
CALL: SETPENCOLOR "Green
PASS: [PENCOLOR] output [0 128 0] , as expected.
CALL: SETPENCOLOR "GreenYellow
PASS: [PENCOLOR] output [173 255 47] , as expected.
CALL: SETPENCOLOR "Grey
PASS: [PENCOLOR] output [128 128 128] , as expected.
CALL: SETPENCOLOR "HoneyDew
PASS: [PENCOLOR] output [240 255 240] , as expected.
CALL: SETPENCOLOR "HotPink
PASS: [PENCOLOR] output [255 105 180] , as expected.
CALL: SETPENCOLOR "IndianRed
PASS: [PENCOLOR] output [205 92 92] , as expected.
CALL: SETPENCOLOR "Indigo
PASS: [PENCOLOR] output [75 0 130] , as expected.
CALL: SETPENCOLOR "Ivory
PASS: [PENCOLOR] output [255 255 240] , as expected.
CALL: SETPENCOLOR "Khaki
PASS: [PENCOLOR] output [240 230 140] , as expected.
CALL: SETPENCOLOR "Lavender
PASS: [PENCOLOR] output [230 230 250] , as expected.
CALL: SETPENCOLOR "LavenderBlush
PASS: [PENCOLOR] output [255 240 245] , as expected.
CALL: SETPENCOLOR "LawnGreen
PASS: [PENCOLOR] output [124 252 0] , as expected.
CALL: SETPENCOLOR "LemonChiffon
PASS: [PENCOLOR] output [255 250 205] , as expected.
CALL: SETPENCOLOR "LightBlue
PASS: [PENCOLOR] output [173 216 230] , as expected.
CALL: SETPENCOLOR "LightCoral
PASS: [PENCOLOR] output [240 128 128] , as expected.
CALL: SETPENCOLOR "LightCyan
PASS: [PENCOLOR] output [224 255 255] , as expected.
CALL: SETPENCOLOR "LightGoldenRodYellow
PASS: [PENCOLOR] output [250 250 210] , as expected.
CALL: SETPENCOLOR "LightGray
PASS: [PENCOLOR] output [211 211 211] , as expected.
CALL: SETPENCOLOR "LightGreen
PASS: [PENCOLOR] output [144 238 144] , as expected.
CALL: SETPENCOLOR "LightGrey
PASS: [PENCOLOR] output [211 211 211] , as expected.
CALL: SETPENCOLOR "LightPink
PASS: [PENCOLOR] output [255 182 193] , as expected.
CALL: SETPENCOLOR "LightSalmon
PASS: [PENCOLOR] output [255 160 122] , as expected.
CALL: SETPENCOLOR "LightSeaGreen
PASS: [PENCOLOR] output [32 178 170] , as expected.
CALL: SETPENCOLOR "LightSkyBlue
PASS: [PENCOLOR] output [135 206 250] , as expected.
CALL: SETPENCOLOR "LightSlateGray
PASS: [PENCOLOR] output [119 136 153] , as expected.
CALL: SETPENCOLOR "LightSlateGrey
PASS: [PENCOLOR] output [119 136 153] , as expected.
CALL: SETPENCOLOR "LightSteelBlue
PASS: [PENCOLOR] output [176 196 222] , as expected.
CALL: SETPENCOLOR "LightYellow
PASS: [PENCOLOR] output [255 255 224] , as expected.
CALL: SETPENCOLOR "Lime
PASS: [PENCOLOR] output [0 255 0] , as expected.
CALL: SETPENCOLOR "LimeGreen
PASS: [PENCOLOR] output [50 205 50] , as expected.
CALL: SETPENCOLOR "Linen
PASS: [PENCOLOR] output [250 240 230] , as expected.
CALL: SETPENCOLOR "Magenta
PASS: [PENCOLOR] output [255 0 255] , as expected.
CALL: SETPENCOLOR "Maroon
PASS: [PENCOLOR] output [128 0 0] , as expected.
CALL: SETPENCOLOR "MediumAquaMarine
PASS: [PENCOLOR] output [102 205 170] , as expected.
CALL: SETPENCOLOR "MediumBlue
PASS: [PENCOLOR] output [0 0 205] , as expected.
CALL: SETPENCOLOR "MediumOrchid
PASS: [PENCOLOR] output [186 85 211] , as expected.
CALL: SETPENCOLOR "MediumPurple
PASS: [PENCOLOR] output [147 112 216] , as expected.
CALL: SETPENCOLOR "MediumSeaGreen
PASS: [PENCOLOR] output [60 179 113] , as expected.
CALL: SETPENCOLOR "MediumSlateBlue
PASS: [PENCOLOR] output [123 104 238] , as expected.
CALL: SETPENCOLOR "MediumSpringGreen
PASS: [PENCOLOR] output [0 250 154] , as expected.
CALL: SETPENCOLOR "MediumTurquoise
PASS: [PENCOLOR] output [72 209 204] , as expected.
CALL: SETPENCOLOR "MediumVioletRed
PASS: [PENCOLOR] output [199 21 133] , as expected.
CALL: SETPENCOLOR "MidnightBlue
PASS: [PENCOLOR] output [25 25 112] , as expected.
CALL: SETPENCOLOR "MintCream
PASS: [PENCOLOR] output [245 255 250] , as expected.
CALL: SETPENCOLOR "MistyRose
PASS: [PENCOLOR] output [255 228 225] , as expected.
CALL: SETPENCOLOR "Moccasin
PASS: [PENCOLOR] output [255 228 181] , as expected.
CALL: SETPENCOLOR "NavajoWhite
PASS: [PENCOLOR] output [255 222 173] , as expected.
CALL: SETPENCOLOR "Navy
PASS: [PENCOLOR] output [0 0 128] , as expected.
CALL: SETPENCOLOR "OldLace
PASS: [PENCOLOR] output [253 245 230] , as expected.
CALL: SETPENCOLOR "Olive
PASS: [PENCOLOR] output [128 128 0] , as expected.
CALL: SETPENCOLOR "OliveDrab
PASS: [PENCOLOR] output [107 142 35] , as expected.
CALL: SETPENCOLOR "Orange
PASS: [PENCOLOR] output [255 165 0] , as expected.
CALL: SETPENCOLOR "OrangeRed
PASS: [PENCOLOR] output [255 69 0] , as expected.
CALL: SETPENCOLOR "Orchid
PASS: [PENCOLOR] output [218 112 214] , as expected.
CALL: SETPENCOLOR "PaleGoldenRod
PASS: [PENCOLOR] output [238 232 170] , as expected.
CALL: SETPENCOLOR "PaleGreen
PASS: [PENCOLOR] output [152 251 152] , as expected.
CALL: SETPENCOLOR "PaleTurquoise
PASS: [PENCOLOR] output [175 238 238] , as expected.
CALL: SETPENCOLOR "PaleVioletRed
PASS: [PENCOLOR] output [216 112 147] , as expected.
CALL: SETPENCOLOR "PapayaWhip
PASS: [PENCOLOR] output [255 239 213] , as expected.
CALL: SETPENCOLOR "PeachPuff
PASS: [PENCOLOR] output [255 218 185] , as expected.
CALL: SETPENCOLOR "Peru
PASS: [PENCOLOR] output [205 133 63] , as expected.
CALL: SETPENCOLOR "Pink
PASS: [PENCOLOR] output [255 192 203] , as expected.
CALL: SETPENCOLOR "Plum
PASS: [PENCOLOR] output [221 160 221] , as expected.
CALL: SETPENCOLOR "PowderBlue
PASS: [PENCOLOR] output [176 224 230] , as expected.
CALL: SETPENCOLOR "Purple
PASS: [PENCOLOR] output [128 0 128] , as expected.
CALL: SETPENCOLOR "Red
PASS: [PENCOLOR] output [255 0 0] , as expected.
CALL: SETPENCOLOR "RosyBrown
PASS: [PENCOLOR] output [188 143 143] , as expected.
CALL: SETPENCOLOR "RoyalBlue
PASS: [PENCOLOR] output [65 105 225] , as expected.
CALL: SETPENCOLOR "SaddleBrown
PASS: [PENCOLOR] output [139 69 19] , as expected.
CALL: SETPENCOLOR "Salmon
PASS: [PENCOLOR] output [250 128 114] , as expected.
CALL: SETPENCOLOR "SandyBrown
PASS: [PENCOLOR] output [244 164 96] , as expected.
CALL: SETPENCOLOR "SeaGreen
PASS: [PENCOLOR] output [46 139 87] , as expected.
CALL: SETPENCOLOR "SeaShell
PASS: [PENCOLOR] output [255 245 238] , as expected.
CALL: SETPENCOLOR "Sienna
PASS: [PENCOLOR] output [160 82 45] , as expected.
CALL: SETPENCOLOR "Silver
PASS: [PENCOLOR] output [192 192 192] , as expected.
CALL: SETPENCOLOR "SkyBlue
PASS: [PENCOLOR] output [135 206 235] , as expected.
CALL: SETPENCOLOR "SlateBlue
PASS: [PENCOLOR] output [106 90 205] , as expected.
CALL: SETPENCOLOR "SlateGray
PASS: [PENCOLOR] output [112 128 144] , as expected.
CALL: SETPENCOLOR "SlateGrey
PASS: [PENCOLOR] output [112 128 144] , as expected.
CALL: SETPENCOLOR "Snow
PASS: [PENCOLOR] output [255 250 250] , as expected.
CALL: SETPENCOLOR "SpringGreen
PASS: [PENCOLOR] output [0 255 127] , as expected.
CALL: SETPENCOLOR "SteelBlue
PASS: [PENCOLOR] output [70 130 180] , as expected.
CALL: SETPENCOLOR "Tan
PASS: [PENCOLOR] output [210 180 140] , as expected.
CALL: SETPENCOLOR "Teal
PASS: [PENCOLOR] output [0 128 128] , as expected.
CALL: SETPENCOLOR "Thistle
PASS: [PENCOLOR] output [216 191 216] , as expected.
CALL: SETPENCOLOR "Tomato
PASS: [PENCOLOR] output [255 99 71] , as expected.
CALL: SETPENCOLOR "Turquoise
PASS: [PENCOLOR] output [64 224 208] , as expected.
CALL: SETPENCOLOR "Violet
PASS: [PENCOLOR] output [238 130 238] , as expected.
CALL: SETPENCOLOR "Wheat
PASS: [PENCOLOR] output [245 222 179] , as expected.
CALL: SETPENCOLOR "White
PASS: [PENCOLOR] output [255 255 255] , as expected.
CALL: SETPENCOLOR "WhiteSmoke
PASS: [PENCOLOR] output [245 245 245] , as expected.
CALL: SETPENCOLOR "Yellow
PASS: [PENCOLOR] output [255 255 0] , as expected.
CALL: SETPENCOLOR "YellowGreen
PASS: [PENCOLOR] output [154 205 50] , as expected.
INFO: Running invalid instruction: [SETPENCOLOR "yellow]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETPENCOLOR doesn't like yellow as input .
PASS: [PENCOLOR] output 5 , as expected.
CALL: SETPENSIZE [10 10]
PASS: [PENSIZE] output [10 10] , as expected.
CALL: SETPENSIZE [1 1]
PASS: [PENSIZE] output [1 1] , as expected.
CALL: SETPENSIZE [0 0]
PASS: [PENSIZE] output [0 0] , as expected.
CALL: SETPENSIZE [1.9 1.9]
PASS: [PENSIZE] output [1 1] , as expected.
CALL: SETPENSIZE 5
PASS: [PENSIZE] output [5 5] , as expected.
INFO: Running invalid instruction: [(PENSIZE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: SETPENSIZE [11 11]
INFO: Running invalid instruction: [(SETPENSIZE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPENSIZE .
INFO: Running invalid instruction: [(SETPENSIZE [5 5] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETPENSIZE -1]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like -1 as input .
INFO: Running invalid instruction: [SETPENSIZE 5.5]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like 5.5 as input .
INFO: Running invalid instruction: [SETPENSIZE 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETPENSIZE "5x5]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like 5x5 as input .
INFO: Running invalid instruction: [SETPENSIZE {5 5}]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like {5 5} as input .
INFO: Running invalid instruction: [SETPENSIZE [5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 5 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 5 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [-1 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [-1 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [five 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [five 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [[5] 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [[5] 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [{5} 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [{5} 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [1e20 5]]
FAIL: Running [SETPENSIZE [1e+20 5]] did not throw an error.
INFO: Running invalid instruction: [SETPENSIZE [5 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 -1] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 five]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 five] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 [5]]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 [5]] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 {5}]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 {5}] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 1e20]]
FAIL: Running [SETPENSIZE [5 1e+20]] did not throw an error.
FAIL: [PENSIZE] output [2147483647 2147483647] . We expected [11 11] .
CALL: SETPIXEL 5
PASS: [PIXEL] output 5 , as expected.
CALL: SETPIXEL [255 255 255]
PASS: [PIXEL] output [255 255 255] , as expected.
CALL: SETPIXEL [255 0 0]
PASS: [PIXEL] output [255 0 0] , as expected.
CALL: SETPIXEL [0 255 0]
PASS: [PIXEL] output [0 255 0] , as expected.
CALL: SETPIXEL [0 0 255]
PASS: [PIXEL] output [0 0 255] , as expected.
CALL: SETPIXEL 5.9
PASS: [PIXEL] output 5 , as expected.
INFO: Running invalid instruction: [(SETPIXEL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPIXEL .
INFO: Running invalid instruction: [(SETPIXEL 5 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETPIXEL "word]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like word as input .
INFO: Running invalid instruction: [SETPIXEL -1]
FAIL: Running [SETPIXEL -1] did not throw an error.
INFO: Running invalid instruction: [SETPIXEL 1e20]
FAIL: Running [SETPIXEL 1e20] did not throw an error.
INFO: Running invalid instruction: [SETPIXEL 4.5]
FAIL: Running [SETPIXEL 4.5] did not throw an error.
INFO: Running invalid instruction: [SETPIXEL [255]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [255] as input .
INFO: Running invalid instruction: [SETPIXEL [255 255]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [255 255] as input .
INFO: Running invalid instruction: [SETPIXEL [-1 0 0]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETPIXEL [1e20 0 0]]
FAIL: Running [SETPIXEL [1e+20 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETPIXEL [4.5 0 0]]
FAIL: Running [SETPIXEL [4.5 0 0]] did not throw an error.
INFO: Running invalid instruction: [SETPIXEL [0 -1 0]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETPIXEL [0 1e20 0]]
FAIL: Running [SETPIXEL [0 1e+20 0]] did not throw an error.
INFO: Running invalid instruction: [SETPIXEL [0 4.5 0]]
FAIL: Running [SETPIXEL [0 4.5 0]] did not throw an error.
INFO: Running invalid instruction: [SETPIXEL [0 0 -1]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETPIXEL [0 0 1e20]]
FAIL: Running [SETPIXEL [0 0 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETPIXEL [0 0 4.5]]
FAIL: Running [SETPIXEL [0 0 4.5]] did not throw an error.
INFO: Running invalid instruction: [SETPIXEL [255 255 255 255]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [255 255 255 255] as input .
INFO: Running invalid instruction: [SETPIXEL {255 255 255}]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like {255 255 255} as input .
CALL: SETPENCOLOR 5
CALL: FORWARD 1
CALL: BACK 1
PASS: [PIXEL] output 5 , as expected.
CALL: SETPENCOLOR [255 255 255]
CALL: FORWARD 1
CALL: BACK 1
PASS: [PIXEL] output [255 255 255] , as expected.
INFO: Running invalid instruction: [(PIXEL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETTIMER 0 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like 0 as input .
INFO: Running invalid instruction: [SETTIMER 32 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like 32 as input .
INFO: Running invalid instruction: [SETTIMER 1.5 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like 1.5 as input .
INFO: Running invalid instruction: [SETTIMER "badvalue 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like badvalue as input .
INFO: Running invalid instruction: [SETTIMER [1] 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like [1] as input .
INFO: Running invalid instruction: [SETTIMER [] 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like [] as input .
INFO: Running invalid instruction: [SETTIMER {1} 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like {1} as input .
INFO: Running invalid instruction: [SETTIMER 1 -100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like -100 as input .
INFO: Running invalid instruction: [SETTIMER 1 100.5 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like 100.5 as input .
INFO: Running invalid instruction: [SETTIMER 1 [100] [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like [100] as input .
INFO: Running invalid instruction: [SETTIMER 1 [] [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like [] as input .
INFO: Running invalid instruction: [SETTIMER 1 "badvalue [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like badvalue as input .
INFO: Running invalid instruction: [SETTIMER 1 {100} [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like {100} as input .
INFO: Running invalid instruction: [(SETTIMER 1 100)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETTIMER .
INFO: Running invalid instruction: [(SETTIMER 1 100 [FD 1] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [CLEARTIMER 32]
PASS: error code is 7 , as expected.
INFO: error text is CLEARTIMER doesn't like 32 as input .
INFO: Running invalid instruction: [CLEARTIMER 31]
PASS: error code is 1401 , as expected.
PASS: error text is Timer not found , as expected.
INFO: Running invalid instruction: [(CLEARTIMER)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to CLEARTIMER .
INFO: Running invalid instruction: [(CLEARTIMER 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SPLITSCREEN 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(TEXTSCREEN 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(FULLSCREEN 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: [WAIT 0] took 0 ms to execute
PASS: [WAIT 0] ran in 0 ms. Anywhere between 0 ms and 20 is acceptable.
INFO: [WAIT 1] took 20 ms to execute
PASS: [WAIT 1] ran in 20 ms. Anywhere between 16.6666666666667 ms and 36.6666666666667 is acceptable.
INFO: [WAIT 6] took 100 ms to execute
PASS: [WAIT 6] ran in 100 ms. Anywhere between 100 ms and 120 is acceptable.
INFO: [WAIT 10] took 170 ms to execute
PASS: [WAIT 10] ran in 170 ms. Anywhere between 166.666666666667 ms and 186.666666666667 is acceptable.
INFO: [WAIT 60] took 1002 ms to execute
PASS: [WAIT 60] ran in 1002 ms. Anywhere between 1000 ms and 1020 is acceptable.
INFO: [WAIT 100] took 1672 ms to execute
PASS: [WAIT 100] ran in 1672 ms. Anywhere between 1666.66666666667 ms and 1686.66666666667 is acceptable.
INFO: [WAIT 60.5] took 1011 ms to execute
PASS: [WAIT 60.5] ran in 1011 ms. Anywhere between 1008.33333333333 ms and 1028.33333333333 is acceptable.
INFO: Running invalid instruction: [(WAIT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to WAIT .
INFO: Running invalid instruction: [(WAIT 10 10)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [WAIT -0.1]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like -0.1 as input .
INFO: Running invalid instruction: [WAIT -1]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like -1 as input .
INFO: Running invalid instruction: [WAIT "ABC]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like ABC as input .
INFO: Running invalid instruction: [WAIT [1]]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like [1] as input .
INFO: Running invalid instruction: [WAIT {1}]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like {1} as input .
PASS: [LIST? TIME] output true , as expected.
PASS: [COUNT TIME] output 5 , as expected.
INFO: Running invalid instruction: [(TIME "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [SHELL [perl -v]] output true , as expected.
PASS: [SHELL [doesnotexist.exe]] output false , as expected.
PASS: [SHELL {1}] output false , as expected.
PASS: [SHELL [1]] output false , as expected.
PASS: [SHELL 1] output false , as expected.
INFO: [MAKE "rval (SHELL [perl -e "sleep 5"] "true)] took 5197 ms to execute
PASS: [MAKE "rval (SHELL [perl -e "sleep 5"] "true)] output true . , as expected.
PASS: [MAKE "rval (SHELL [perl -e "sleep 5"] "true)] ran in 5197 ms. Anywhere between 4000 ms and 6000 is acceptable.
INFO: [MAKE "rval (SHELL [perl -e "sleep 5"] "false)] took 10 ms to execute
PASS: [MAKE "rval (SHELL [perl -e "sleep 5"] "false)] output true . , as expected.
PASS: [MAKE "rval (SHELL [perl -e "sleep 5"] "false)] ran in 10 ms. Anywhere between 0 ms and 500 is acceptable.
INFO: [MAKE "rval SHELL [perl -e "sleep 5"]] took 0 ms to execute
PASS: [MAKE "rval SHELL [perl -e "sleep 5"]] output true . , as expected.
PASS: [MAKE "rval SHELL [perl -e "sleep 5"]] ran in 0 ms. Anywhere between 0 ms and 500 is acceptable.
INFO: Running invalid instruction: [(SHELL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SHELL .
INFO: Running invalid instruction: [(SHELL [perl -v] LOCALEFALSE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -v] 1)]
INFO: error code is 7 .
INFO: error text is SHELL doesn't like 1 as input .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -v] 0)]
INFO: error code is 7 .
INFO: error text is SHELL doesn't like 0 as input .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -v] [true] )]
INFO: error code is 7 .
INFO: error text is SHELL doesn't like [true] as input .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -v] {false} )]
INFO: error code is 7 .
INFO: error text is SHELL doesn't like {false} as input .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -e "sleep 10"] LOCALETRUE)]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: [RUNEXPECTERRORTEST [IGNORE (SHELL [perl -e "sleep 10"] LOCALETRUE)] 16] took 5018 ms to execute
PASS: [IGNORE (SHELL [perl -e "sleep 10"] LOCALETRUE)] ran in 5018 ms. Anywhere between 0 ms and 6000 is acceptable.
PASS: [FILES] output [] , as expected.
PASS: [DIRECTORIES] output [.. .] , as expected.
PASS: [FILES] output [file1.txt] , as expected.
PASS: [DIRECTORIES] output [.. .] , as expected.
PASS: [FILES] output [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] output [.. .] , as expected.
PASS: [FILES] output [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] output [dir1 .. .] , as expected.
PASS: [FILES] output [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] output [dir2 dir1 .. .] , as expected.
PASS: [FILES] output [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] output [dir1 .. .] , as expected.
PASS: [FILES] output [file2.txt] , as expected.
PASS: [DIRECTORIES] output [dir1 .. .] , as expected.
PASS: [FILES] output [] , as expected.
PASS: [DIRECTORIES] output [.. .] , as expected.
PASS: [MEMBERP "mytestdir DIRECTORIES] output false , as expected.
INFO: Running invalid instruction: [(MKDIR)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MKDIR .
INFO: Running invalid instruction: [(MKDIR "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(RMDIR)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RMDIR .
INFO: Running invalid instruction: [(RMDIR "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(CHDIR)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to CHDIR .
INFO: Running invalid instruction: [(CHDIR "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [LIST? NODES] output true , as expected.
PASS: [COUNT NODES] output 2 , as expected.
PASS: [NUMBER? ITEM 1 NODES] output true , as expected.
PASS: [NUMBER? ITEM 2 NODES] output true , as expected.
INFO: Running invalid instruction: [(NODES "too-many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [BUTTONP] output false , as expected.
PASS: [BUTTON?] output false , as expected.
INFO: Running invalid instruction: [(BUTTON? "too-many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: HOME RT 0 SETPC 1
INFO: Running invalid instruction: [FD 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: HOME RT 90 SETPC 2
INFO: Running invalid instruction: [FD 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: HOME RT 180 SETPC 3
INFO: Running invalid instruction: [FD 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: HOME RT 270 SETPC 4
INFO: Running invalid instruction: [FD 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: SETXY 0 500
CALL: SETXY 500 0
CALL: SETXY 0 -500
CALL: SETXY -500 0
INFO: Running invalid instruction: [SETXY 0 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
INFO: Running invalid instruction: [SETXY 501 0]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
INFO: Running invalid instruction: [SETXY 0 -501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
INFO: Running invalid instruction: [SETXY -501 0]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
PASS: fence-test was drawn correctly.
INFO: Running invalid instruction: [(FENCE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: wrap-test was drawn correctly.
INFO: Running invalid instruction: [(WRAP "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FD 1000]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: (TYPE)
CALL: (TYPE "a "b "c)
CALL: (TYPE "d "e "f "
)
CALL: TYPE [1 2 3]
CALL: TYPE "456

PASS: [READWORD] output abcdef , as expected.
PASS: [READWORD] output 1 2 3456 , as expected.
PASS: [EOFP] output true , as expected.
PASS: window-test was drawn correctly.
INFO: Running invalid instruction: [(WINDOW "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FD 1000]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
PASS: 3d-smoke-test was drawn correctly.
INFO: executing regression test for bug #1384267
PASS: "bug #1384267 is fixed; turning by a large number in perspective mode did not crash.
INFO: Running invalid instruction: [(PERSPECTIVE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FD 1000]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
INFO: Calling SETORIENTATION [0 0 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [1 2 3]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0.999999999999978 , as expected.
PASS: [PITCH] output 2 , as expected.
PASS: [HEADING] output 2.99999999999999 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0.999999999999989 1] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2 2] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2.99999999999999 3] output true , as expected.
INFO: Calling SETORIENTATION [105 0 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 105 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 105 105] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [0 105 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 180 , as expected.
PASS: [PITCH] output 75 , as expected.
PASS: [HEADING] output 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 75 75] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
INFO: Calling SETORIENTATION [0 0 105]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 105 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 105 105] output true , as expected.
INFO: Calling SETORIENTATION [0 -90 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 270 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 270 270] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [0 -105 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 180 , as expected.
PASS: [PITCH] output 285 , as expected.
PASS: [HEADING] output 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 285 285] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
INFO: Calling SETORIENTATION [0 465 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 180 , as expected.
PASS: [PITCH] output 75 , as expected.
PASS: [HEADING] output 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 75 75] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
INFO: Calling SETORIENTATION [360 360 360]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [-360 -360 -360]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [14.6204327571122 270.000000000001 113.186828010276]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 270 , as expected.
PASS: [HEADING] output 98.5663952531638 , as expected.
FAIL: [ANGLEISCLOSEENOUGH 0 14.6204327571122] output false . We expected true .
PASS: [ANGLEISCLOSEENOUGH 270 270.000000000001] output true , as expected.
FAIL: [ANGLEISCLOSEENOUGH 98.5663952531638 113.186828010276] output false . We expected true .
INFO: Running invalid instruction: [(SETORIENTATION)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETORIENTATION .
INFO: Running invalid instruction: [(SETORIENTATION 0)]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like 0 as input .
INFO: Running invalid instruction: [(SETORIENTATION 0 0)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETORIENTATION 0 0 0)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETORIENTATION [0] )]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like [0] as input .
INFO: Running invalid instruction: [(SETORIENTATION [0 0] )]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like [0 0] as input .
INFO: Running invalid instruction: [(SETORIENTATION [a b c] )]
INFO: error code is 7 .
INFO: error text is setroll doesn't like a as input .
INFO: Running invalid instruction: [(SETORIENTATION [0 0 0 0] )]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [(SETORIENTATION {0 0 0} )]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like {0 0 0} as input .
INFO: Running invalid instruction: [(SETORIENTATION [0 0 0] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ORIENTATION "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: tetrahedron-in-perspective was drawn correctly.
PASS: [SCRUNCH] output [1 1] , as expected.
PASS: [SCRUNCH] output [2 0.1] , as expected.
INFO: Running invalid instruction: [(SETSCRUNCH)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCRUNCH .
INFO: Running invalid instruction: [(SETSCRUNCH [1 1] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCRUNCH .
INFO: Running invalid instruction: [(SETSCRUNCH 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCRUNCH .
INFO: Running invalid instruction: [(SETSCRUNCH "a 1)]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like a as input .
INFO: Running invalid instruction: [(SETSCRUNCH [1] 1)]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like [1] as input .
INFO: Running invalid instruction: [(SETSCRUNCH {1} 1)]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like {1} as input .
INFO: Running invalid instruction: [(SETSCRUNCH 1 "a )]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like a as input .
INFO: Running invalid instruction: [(SETSCRUNCH 1 [1] )]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like [1] as input .
INFO: Running invalid instruction: [(SETSCRUNCH 1 {1} )]
INFO: error code is 7 .
INFO: error text is SET