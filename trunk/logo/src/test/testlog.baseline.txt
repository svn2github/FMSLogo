PASS: Running [load "greatlogoatlas\tok-1.1.logo] printed 5 , as expected.
PASS: Running [load "greatlogoatlas\tok-1.2.logo] printed 2 , as expected.
PASS: Running [load "greatlogoatlas\tok-1.3.logo] printed 2 , as expected.
PASS: Running [load "greatlogoatlas\tok-1.5.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-1.6-CRLF.logo] printed Longword , as expected.
PASS: Running [load "greatlogoatlas\tok-1.6-LF.logo] printed Longword , as expected.
PASS: Running [load "greatlogoatlas\tok-1.7.logo] printed Backslashed word , as expected.
PASS: Running [load "greatlogoatlas\tok-1.7.logo] printed Bracket[word , as expected.
PASS: Running [load "greatlogoatlas\tok-1.8.logo] printed bars and spaces , as expected.
PASS: Running [load "greatlogoatlas\tok-1.8.logo] printed bars and  , as expected.
PASS: Running [load "greatlogoatlas\tok-1.8.logo] printed new lines , as expected.
PASS: Running [load "greatlogoatlas\tok-1.10.logo] printed Shell comment , as expected.
PASS: Running [load "greatlogoatlas\tok-1.11.logo] printed one , as expected.
PASS: Running [load "greatlogoatlas\tok-2.1.logo] printed 21 , as expected.
PASS: Running [load "greatlogoatlas\tok-2.3.logo] printed 7 , as expected.
PASS: Running [load "greatlogoatlas\tok-2.4.logo] printed 1+2*3 , as expected.
PASS: Running [load "greatlogoatlas\tok-2.5.logo] printed 1 + ( ? 37 ) , as expected.
PASS: Running [load "greatlogoatlas\tok-2.5.logo] printed 1 + ?37 , as expected.
PASS: Running [load "greatlogoatlas\tok-3.1-CRLF.logo] printed Two-line , as expected.
PASS: Running [load "greatlogoatlas\tok-3.1-CRLF.logo] printed word , as expected.
PASS: Running [load "greatlogoatlas\tok-3.1-LF.logo] printed Two-line , as expected.
PASS: Running [load "greatlogoatlas\tok-3.1-LF.logo] printed word , as expected.
PASS: Running [load "greatlogoatlas\tok-3.2-CRLF.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-3.2-LF.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-CRLF.logo] printed one , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-CRLF.logo] printed two , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-CRLF.logo] printed three , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-LF.logo] printed one , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-LF.logo] printed two , as expected.
PASS: Running [load "greatlogoatlas\tok-3.3-LF.logo] printed three , as expected.
PASS: Running [load "greatlogoatlas\tok-3.4-CRLF.logo] printed Helloagain , as expected.
PASS: Running [load "greatlogoatlas\tok-3.4-LF.logo] printed Helloagain , as expected.
PASS: Running [load "greatlogoatlas\tok-3.5-CRLF.logo] printed bar;red~
comment , as expected.
PASS: Running [load "greatlogoatlas\tok-3.5-LF.logo] printed bar;red~
comment , as expected.
PASS: Running [load "greatlogoatlas\tok-3.6-CRLF.logo] printed line andthe~ lastline , as expected.
PASS: Running [load "greatlogoatlas\tok-3.6-LF.logo] printed line andthe~ lastline , as expected.
PASS: Running [load "greatlogoatlas\tok-3.7.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-3.8.logo] printed Hello , as expected.
PASS: Running [load "greatlogoatlas\tok-3.9.logo] printed bars in .. bars , as expected.
PASS: Running [load "greatlogoatlas\tok-3.9.logo] printed bars in |..| bars , as expected.
PASS: [-0] output 0 , as expected.
PASS: [-0.0] output 0 , as expected.
PASS: [.00] output 0 , as expected.
PASS: [0e10] output 0 , as expected.
PASS: [0e+10] output 0 , as expected.
PASS: [0e-10] output 0 , as expected.
PASS: [00012] output 12 , as expected.
PASS: [1e3] output 1000 , as expected.
PASS: [1.234e3] output 1234 , as expected.
PASS: [1.234e+3] output 1234 , as expected.
PASS: [1.23e-1] output 0.123 , as expected.
PASS: [.5] output 0.5 , as expected.
PASS: [-.5] output -0.5 , as expected.
PASS: [0.50000] output 0.5 , as expected.
PASS: [5000000000000000000000000000000000000000000000000] output 5e+48 , as expected.
INFO: Running invalid instruction: [1e1e]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 1e1e .
INFO: Running invalid instruction: [1e1.5]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 1e1.5 .
INFO: Running invalid instruction: [1.1.]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 1.1. .
INFO: Running invalid instruction: [1..]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 1.. .
INFO: Running invalid instruction: [.1.]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to .1. .
INFO: Running invalid instruction: [50000000000000000000000000000000000000000000000000]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to 50000000000000000000000000000000000000000000000000 .
PASS: ["WORD] output WORD , as expected.
PASS: ["A B] output A B , as expected.
PASS: [DIFFICULTCOMMENTS1] output 1 , as expected.
PASS: [DIFFICULTCOMMENTS2] output 2 , as expected.
PASS: [LINECONTINUATION3] output 3 , as expected.
PASS: [TILDAINLINE] output 4 , as expected.
PASS: [:~IGNOREMEWASCALLED] output 0 , as expected.
PASS: [:~CALLMEWASCALLED] output 1 , as expected.
PASS: [ITEM 1 [{]] output { , as expected.
PASS: [ITEM 1 [}]] output } , as expected.
PASS: [ITEM 1 []]] output ] , as expected.
PASS: [ITEM 1 [[]] output [ , as expected.
PASS: [ITEM 1 [|]] output | , as expected.
PASS: [[]] output [] , as expected.
PASS: [ITEM 1 {[}] output [ , as expected.
PASS: [ITEM 1 {]}] output ] , as expected.
PASS: [ITEM 1 {{}] output { , as expected.
PASS: [ITEM 1 {}}] output } , as expected.
PASS: [ITEM 1 {|}] output | , as expected.
PASS: [ITEM 1 ["]] output " , as expected.
PASS: [ITEM 1 {"}] output " , as expected.
INFO: Running invalid instruction: [5**5]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to * .
INFO: Running invalid instruction: [*5]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to * .
INFO: Running invalid instruction: [5*]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to * .
INFO: Running invalid instruction: [-]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to -- .
INFO: Running invalid instruction: [MODULO 100 * 100]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MODULO .
PASS: [(1 + 2) * 3] output 9 , as expected.
PASS: [1 + (2 * 3)] output 7 , as expected.
PASS: [1 + 2 * 3] output 7 , as expected.
PASS: [(2 * 3) + 4] output 10 , as expected.
PASS: [2 * (3 + 4)] output 14 , as expected.
PASS: [2 * 3 + 4] output 10 , as expected.
PASS: [1 + 1 = 2] output true , as expected.
PASS: [2 = 1 + 1] output true , as expected.
PASS: [2 = 1 = 1] output false , as expected.
PASS: [1 < 2] output true , as expected.
PASS: [1 <= 2] output true , as expected.
PASS: [1 > 2] output false , as expected.
PASS: [1 >= 2] output false , as expected.
PASS: [1 = 2] output false , as expected.
PASS: [1 < 2] output true , as expected.
PASS: [1 <> 2] output true , as expected.
PASS: [1<2] output true , as expected.
PASS: [1<=2] output true , as expected.
PASS: [1>2] output false , as expected.
PASS: [1>=2] output false , as expected.
PASS: [1=2] output false , as expected.
PASS: [1<2] output true , as expected.
PASS: [1<>2] output true , as expected.
INFO: Running invalid instruction: [1 < > 2]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to > .
INFO: Running invalid instruction: [1 < = 2]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to = .
INFO: Running invalid instruction: [1 > = 2]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to = .
INFO: Running invalid instruction: [1>]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to > .
INFO: Running invalid instruction: [1<]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to < .
PASS: [1+2*2] output 5 , as expected.
PASS: [2*2+1] output 5 , as expected.
PASS: [1-2/2] output 0 , as expected.
PASS: [2/2+1] output 2 , as expected.
PASS: [PRODUCT 2 2 + 1] output 6 , as expected.
PASS: [PRODUCT 2 2 - 1] output 2 , as expected.
PASS: [2 - - 1] output 3 , as expected.
PASS: [2 * - 1] output -2 , as expected.
PASS: [- 2 + 3] output 1 , as expected.
PASS: [1 + 2 < 3 * 4] output true , as expected.
PASS: [1 + 2 <= 3 * 4] output true , as expected.
PASS: [1 + 2 <> 3 * 4] output true , as expected.
PASS: [1 + 2 > 3 * 4] output false , as expected.
PASS: [1 + 2 >= 3 * 4] output false , as expected.
PASS: [1 + 2 = 3 * 4] output false , as expected.
PASS: [FIRST 1 = 2] output f , as expected.
PASS: [FIRST 1 < 2] output t , as expected.
PASS: [FIRST 1 <= 2] output t , as expected.
PASS: [FIRST 1 <> 2] output t , as expected.
PASS: [FIRST 1 > 2] output f , as expected.
PASS: [FIRST 1 >= 2] output f , as expected.
PASS: [:sum] output 5000050000 , as expected.
PASS: Bug #1539716 is fixed; running an expression with a long list of inputs didn't crash.
PASS: 100000 output 100000 , as expected.
PASS: Bug #1566166 is fixed; running a long list of infix expressions didn't crash.
PASS: 100000 output 100000 , as expected.
PASS: Bug #1565788 is fixed; running a long list of expressions didn't crash.
PASS: 100000 output 100000 , as expected.
PASS: Bug #1565788 is fixed; running a long list of expressions didn't crash.
PASS: [:myvalue] output ÿ , as expected.
INFO: Running invalid instruction: [(LOAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOAD .
INFO: Running invalid instruction: [(LOAD "testlib.lgo "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LOAD "doesnotexist.lgo]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
CALL: ERASE "procedureinworkingdirectory
PASS: [procedureinworkingdirectory] output 123 , as expected.
INFO: Running invalid instruction
INFO: error code is 13 .
INFO: error text is I don't know how to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA .
INFO: Running invalid instruction: [(RUN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RUN .
INFO: Running invalid instruction: [RUN {"FD 100}]
INFO: error code is 7 .
INFO: error text is RUN doesn't like {"FD 100} as input .
INFO: Running invalid instruction: [(RUN [FD 100] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [RUNRESULT [FIRST [1 2 3]]] output [1] , as expected.
PASS: [RUNRESULT [PENDOWN]] output [] , as expected.
PASS: [RUNRESULT []] output [] , as expected.
PASS: [RUNRESULT 100] output [100] , as expected.
PASS: [RUNRESULT [100]] output [100] , as expected.
INFO: Running invalid instruction: [(RUNRESULT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RUNRESULT .
INFO: Running invalid instruction: [(RUNRESULT "SUM "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RUNRESULT {1 2 3}]
INFO: error code is 7 .
INFO: error text is RUNRESULT doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [RUNRESULT DOES.NOT.EXIST]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to DOES.NOT.EXIST .
INFO: Running invalid instruction: [RUNRESULT [1 2 3]]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with 1 .
PASS: [RUNPARSE "1+2*3/4] output [1 + 2 * 3 / 4] , as expected.
PASS: [RUNPARSE "1<2>3=4<=5>=6<>7] output [1 < 2 > 3 = 4 <= 5 >= 6 <> 7] , as expected.
PASS: [RUNPARSE "1(2(3)4(5)6)] output [1 ( 2 ( 3 ) 4 ( 5 ) 6 )] , as expected.
PASS: [RUNPARSE "1[2[3]4]5] output [1 [2 [3] 4] 5] , as expected.
CALL: make "runparsedvalue RUNPARSE "1{2{3}4}5
PASS: [list? :runparsedvalue] output true , as expected.
PASS: [count :runparsedvalue] output 3 , as expected.
PASS: [array? item 2 :runparsedvalue] output true , as expected.
PASS: [count item 2 :runparsedvalue] output 3 , as expected.
PASS: [array? item 2 item 2 :runparsedvalue] output true , as expected.
PASS: [count item 2 item 2 :runparsedvalue] output 1 , as expected.
PASS: [item 1 :runparsedvalue] output 1 , as expected.
PASS: [item 1 item 2 :runparsedvalue] output 2 , as expected.
PASS: [item 1 item 2 item 2 :runparsedvalue] output 3 , as expected.
PASS: [item 3 item 2 :runparsedvalue] output 4 , as expected.
PASS: [item 3 :runparsedvalue] output 5 , as expected.
PASS: [runparse "1 2 3; 4 5 6] output [1 2 3] , as expected.
PASS: [runparse "1~
2] output [12] , as expected.
PASS: [runparse "1~ 
2] output [1~ 2] , as expected.
PASS: [runparse "12ab] output [12ab] , as expected.
INFO: Running invalid instruction: [RUNPARSE {badinput}]
PASS: error code is 7 , as expected.
INFO: error text is RUNPARSE doesn't like {badinput} as input .
INFO: Running invalid instruction: [(RUNPARSE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RUNPARSE .
INFO: Running invalid instruction: [(RUNPARSE "A<B "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: TOTEST.NOOUTPUT
PASS: [TOTEST.OUTPUT5] output 5 , as expected.
PASS: [TOTEST.SINGLEINPUT 123] output 123 , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTDEFAULTINPUT]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TOTEST.OUTPUTDEFAULTINPUT .
PASS: [TOTEST.OUTPUTDEFAULTINPUT 1] output 123 , as expected.
PASS: [(TOTEST.OUTPUTDEFAULTINPUT 1)] output 123 , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTDEFAULTINPUT 1 321]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with 123 .
PASS: [(TOTEST.OUTPUTDEFAULTINPUT 1 321)] output 321 , as expected.
INFO: Running invalid instruction: [(TOTEST.OUTPUTDEFAULTINPUT 1 321 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS .
PASS: [(TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1)] output 123 , as expected.
PASS: [TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1 321] output 321 , as expected.
PASS: [(TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1 321)] output 321 , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1 321 "toomany]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with 321 .
INFO: Running invalid instruction: [(TOTEST.OUTPUTDEFAULTINPUT.TWOINPUTS 1 321 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [TOTEST.OUTPUTREST] output [] , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTREST 1]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with [] .
PASS: [(TOTEST.OUTPUTREST 1)] output [1] , as expected.
PASS: [(TOTEST.OUTPUTREST 1 2)] output [1 2] , as expected.
PASS: [(TOTEST.OUTPUTREST 1 2 3)] output [1 2 3] , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTREST.TWOINPUTS 1]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TOTEST.OUTPUTREST.TWOINPUTS .
PASS: [TOTEST.OUTPUTREST.TWOINPUTS 1 2] output [1 2] , as expected.
INFO: Running invalid instruction: [TOTEST.OUTPUTREST.TWOINPUTS 1 2 3]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with [1 2] .
PASS: [(TOTEST.OUTPUTREST.TWOINPUTS 1)] output [1] , as expected.
PASS: [(TOTEST.OUTPUTREST.TWOINPUTS 1 2)] output [1 2] , as expected.
PASS: [(TOTEST.OUTPUTREST.TWOINPUTS 1 2 3)] output [1 2 3] , as expected.
PASS: [TOTEST.REPEATEDINPUT 123 456] output 456 , as expected.
PASS: [(TOTEST.CHAINEDDEFAULTS 1 2 3)] output 3 , as expected.
PASS: [(TOTEST.CHAINEDDEFAULTS 1 2)] output 8 , as expected.
PASS: [(TOTEST.CHAINEDDEFAULTS 1)] output 12 , as expected.
PASS: [(TOTEST.CHAINEDDEFAULTS)] output 408 , as expected.
PASS: [DEFINED? "TOTEST.BADINPUT] output false , as expected.
FAIL: [DEFINED? "TOTEST.BADDEFAULTINPUTS] output true . We expected false .
PASS: error code is 4 , as expected.
PASS: error text is / doesn't like 0 as input , as expected.
PASS: error procedure is ERRORTEST , as expected.
PASS: error line is [CATCH "ERROR [1 / 0]] , as expected.
INFO: Running invalid instruction: [FORWARD 1e10]
PASS: error code is 3 , as expected.
PASS: error text is turtle out of bounds , as expected.
INFO: Running invalid instruction: [1 / 0]
PASS: error code is 4 , as expected.
PASS: error text is / doesn't like 0 as input , as expected.
INFO: Running invalid instruction: [(THROW "ERROR 4 [1 2 3] )]
PASS: error code is 4 , as expected.
PASS: error text is RUNEXPECTERRORTEST doesn't like [1 2 3] as input , as expected.
INFO: Running invalid instruction: [(THROW "ERROR 4.0 [1 2 3] )]
PASS: error code is 4 , as expected.
PASS: error text is RUNEXPECTERRORTEST doesn't like [1 2 3] as input , as expected.
INFO: Running invalid instruction: [(THROW "ERROR "4 [1 2 3] )]
PASS: error code is 4 , as expected.
PASS: error text is RUNEXPECTERRORTEST doesn't like [1 2 3] as input , as expected.
INFO: Running invalid instruction: [IGNORE NO.INPUT.NO.OUTPUT]
PASS: error code is 5 , as expected.
PASS: error text is NO.INPUT.NO.OUTPUT didn't output to IGNORE , as expected.
INFO: Running invalid instruction: [(ONE.INPUT.NO.OUTPUT)]
PASS: error code is 6 , as expected.
PASS: error text is not enough inputs to ONE.INPUT.NO.OUTPUT , as expected.
INFO: Running invalid instruction: [FORWARD "tensteps]
PASS: error code is 7 , as expected.
PASS: error text is FORWARD doesn't like tensteps as input , as expected.
INFO: Running invalid instruction: [(NO.INPUT.NO.OUTPUT "toomany)]
PASS: error code is 8 , as expected.
PASS: error text is too much inside ()'s , as expected.
INFO: Running invalid instruction: [I.DONT.KNOW.WHAT.TO.DO.WITH.VALUE]
PASS: error code is 9 , as expected.
PASS: error text is You don't say what to do with 1 , as expected.
INFO: Running invalid instruction: [(ONE.INPUT.NO.OUTPUT]
PASS: error code is 10 , as expected.
PASS: error text is too many ('s , as expected.
INFO: Running invalid instruction: [ONE.INPUT.NO.OUTPUT :novalue]
PASS: error code is 11 , as expected.
PASS: error text is novalue has no value , as expected.
INFO: Running invalid instruction: [)]
PASS: error code is 12 , as expected.
PASS: error text is unexpected ')' , as expected.
INFO: Running invalid instruction: [UNKNOWN.PROC]
PASS: error code is 13 , as expected.
PASS: error text is I don't know how to UNKNOWN.PROC , as expected.
INFO: Running invalid instruction: [MY.PROC.TO.STEP]
PASS: error code is 16 , as expected.
PASS: error text is Stopping... , as expected.
INFO: Running invalid instruction: [DRIBBLE "DELETEME.TXT]
PASS: error code is 17 , as expected.
PASS: error text is Already dribbling , as expected.
INFO: Running invalid instruction: [OPENREAD "DELETEME.TXT]
PASS: error code is 18 , as expected.
PASS: error text is File system error: Could not open file , as expected.
INFO: Running invalid instruction: [THROW "ERROR]
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
INFO: Running invalid instruction: [(THROW "ERROR "errormessage)]
PASS: error code is 21 , as expected.
PASS: error text is errormessage , as expected.
INFO: Running invalid instruction: [(THROW "ERROR 4)]
PASS: error code is 21 , as expected.
PASS: error text is 4 , as expected.
INFO: Running invalid instruction: [DEFINE "forward [[]]]
PASS: error code is 22 , as expected.
PASS: error text is forward is a primitive , as expected.
INFO: Running invalid instruction: [PROCEDURE.WITH.TO.INSIDE.IT]
PASS: error code is 23 , as expected.
PASS: error text is Can't use TO inside a procedure , as expected.
INFO: Running invalid instruction: [TEXT "NO.SUCH.PROCEDURE.IS.DEFINED]
PASS: error code is 24 , as expected.
PASS: error text is I don't know how to NO.SUCH.PROCEDURE.IS.DEFINED , as expected.
INFO: Running invalid instruction: [IFTRUE "x]
PASS: error code is 25 , as expected.
PASS: error text is IFTRUE without TEST , as expected.
INFO: Running invalid instruction: [LOAD "unexpectedclosebracket.lgo]
PASS: error code is 26 , as expected.
PASS: error text is unexpected ']' , as expected.
INFO: Running invalid instruction: [LOAD "unexpectedclosebrace.lgo]
PASS: error code is 27 , as expected.
PASS: error text is unexpected '}' , as expected.
INFO: Running invalid instruction: [MACRO.RETURN.UNBOUND.INSTEAD.OF.LIST]
PASS: error code is 29 , as expected.
PASS: error text is Macro output Unbound instead of a list , as expected.
INFO: Running invalid instruction: [APPLY "ONE.INPUT.NO.OUTPUT 1]
PASS: error code is 32 , as expected.
PASS: error text is APPLY doesn't like 1 as input , as expected.
INFO: Running invalid instruction: [LOAD "endinmultilineinstruction.lgo]
PASS: error code is 33 , as expected.
PASS: error text is END inside multi-line instruction in END.INSIDE.MULTILINE.INSTRUCTION , as expected.
INFO: Setting ERRACT to a procedure that outputs 5
INFO: Calling "SUM 1 [1] ", which should run :erract to replace [1] with 5
PASS: [:thesum] output 6 , as expected.
INFO: Calling "SUM 1 [1] " again. This used to crash (bug #1517326)
PASS: [:thesum] output 6 , as expected.
INFO: Setting ERRACT to a value such that we can verify if it is called
INFO: Causing an unrecoverable error outside of a CATCH block
INFO: Running invalid instruction: [FUNCTION.DOES.NOT.EXIST]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to FUNCTION.DOES.NOT.EXIST .
PASS: [:erract.was.called] output false , as expected.
PASS: [:erract] output [MAKE "erract.was.called "true] , as expected.
INFO: Setting ERRACT to a procedure outputs the next value in :erractvalues
CALL: MAKE "erractvalues [[100] 5]
INFO: Calling "SUM 1 [1] " this should keep calling :ERRACT until it gets a good value
INFO: ERRACT handler outputs 100
INFO: ERRACT handler outputs 5
PASS: [:thesum] output 6 , as expected.
INFO: Setting ERRACT to a procedure changes erract and outputs 6
INFO: Calling "SUM 1 [1] ", which should run :erract to replace [1] with 6
INFO: Entering ERRACTTEST.CHANGEERRACT.OUTPUT.6
PASS: [:erract] output [ERRACTTEST.CHANGEERRACT.OUTPUT.6] , as expected.
INFO: Changing the value of :erract to [ERRACTTEST.OUTPUT.5]
PASS: [:erract] output [ERRACTTEST.OUTPUT.5] , as expected.
INFO: Exiting ERRACTTEST.CHANGEERRACT.OUTPUT.6
PASS: [:thesum] output 7 , as expected.
INFO: Calling "SUM 1 [1] " again. This should use the new erract value
PASS: [:thesum] output 6 , as expected.
INFO: Setting ERRACT to a value that outputs 5
INFO: Causing a recoverable error just after a CATCH block
PASS: [:outputvalue] output 6 , as expected.
INFO: Running test where CATCH instruction list doesn't output or throw
INFO: Running test where CATCH instruction list outputs a value
PASS: [:outputvalue] output 3 , as expected.
INFO: Running test where CATCH instruction list throws
INFO: Running test where CATCH instruction list throws a value
INFO: Entering CATCHTEST.SMOKETEST.THROW
PASS: [:outputvalue] output [1 2 3 4 5] , as expected.
INFO: Running invalid instruction: [CATCHTEST.THROW.BUILTIN.ERROR]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to FUNCTION.DOES.NOT.EXIST .
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
PASS: error procedure is CATCHTEST.CATCHUSERERROR , as expected.
PASS: error line is [CATCH "ERROR [THROW "ERROR]] , as expected.
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
PASS: error procedure is CATCHTEST.CATCHUSERERROR , as expected.
PASS: error line is [CATCH "ERROR [throw "error]] , as expected.
PASS: error code is 21 , as expected.
PASS: error text is 1234 , as expected.
PASS: error procedure is CATCHTEST , as expected.
PASS: error line is [CATCHTEST.CATCHUSERERROR] , as expected.
INFO: Entering CATCHTEST.SKIPERRORTAG.CATCHERROR
INFO: Entering CATCHTEST.SKIPERRORTAG.THROW
PASS: [ERROR] output [] , as expected.
INFO: Exiting CATCHTEST.SKIPERRORTEST
INFO: Entering CATCHTEST.SKIPTHROWTAG.CATCHTHROWTAG
INFO: Entering CATCHTEST.SKIPTHROWTAG.THROWERROR
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
PASS: error procedure is CATCHTEST.SKIPTHROWTAG.THROWERROR , as expected.
PASS: error line is [Throw "Error] , as expected.
INFO: Exiting CATCHTEST.SKIPTHROWTAG
INFO: Entering CATCHTEST.SKIPTHROWTAG.CATCHINNERTAG
INFO: Entering CATCHTEST.SKIPTHROWTAGWTIHVALUE.THROWOUTERTAG
PASS: [:throwvalue] output 12345 , as expected.
INFO: Exiting CATCHTEST.SKIPTHROWTAGWITHVALUE
INFO: Entering CATCHTEST.DOUBLECATCHERROR.INNERCATCHERROR
INFO: Entering CATCHTEST.DOUBLECATCHERROR.THROWERROR
PASS: error code is 21 , as expected.
PASS: error text is Throw "Error , as expected.
PASS: error procedure is CATCHTEST.DOUBLECATCHERROR.THROWERROR , as expected.
PASS: error line is [Throw "Error] , as expected.
INFO: Exiting CATCHTEST.DOUBLECATCHERROR.INNERCATCHERROR
PASS: [ERROR] output [] , as expected.
INFO: Exiting CATCHTEST.DOUBLECATCHERROR
INFO: Running invalid instruction: [(CATCH "error)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to CATCH .
INFO: Running invalid instruction: [(CATCH "error [instructionlist] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: error code is 21 , as expected.
PASS: error text is abc , as expected.
PASS: error procedure is THROWTEST.USERERROR , as expected.
PASS: error line is [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION "abc]] , as expected.
PASS: error code is 21 , as expected.
PASS: error text is a b c , as expected.
PASS: error procedure is THROWTEST.USERERROR , as expected.
PASS: error line is [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION [a b c]]] , as expected.
PASS: error code is 21 , as expected.
PASS: error text is {a b c} , as expected.
PASS: error procedure is THROWTEST.USERERROR , as expected.
PASS: error line is [CATCH "ERROR [THROWTEST.USERERROR.ACTUALTHROWLOCATION :array]] , as expected.
INFO: Running invalid instruction: [(THROW)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to THROW .
INFO: Running invalid instruction: [(THROW "tag "value "secondvalue "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: The "catch 'too many inputs' error many times" test did not crash.
PASS: [EVALTEST.TAILRECURSIVECOUNT 120] output 120 , as expected.
PASS: [EVALTEST.TAILRECURSIVECOUNT 100000] output 100000 , as expected.
PASS: [EVALTEST.NONTAILRECURSIVECOUNT 120] output 120 , as expected.
PASS: [EVALTEST.NONTAILRECURSIVECOUNT 100000] output 100000 , as expected.
PASS: [(LIST)] output [] , as expected.
PASS: [(LIST 1)] output [1] , as expected.
PASS: [(LIST 1 2)] output [1 2] , as expected.
PASS: [(LIST 1 2 3)] output [1 2 3] , as expected.
PASS: [(LIST [1] )] output [[1]] , as expected.
PASS: [(LIST [] )] output [[]] , as expected.
PASS: [LPUT 3 [1 2]] output [1 2 3] , as expected.
PASS: [LPUT 1 []] output [1] , as expected.
PASS: [LPUT [3] [[1] [2]]] output [[1] [2] [3]] , as expected.
INFO: Testing that LPUT can put an array into a list
PASS: [LPUT :array [1 2 3]] output [1 2 3 {1 2 3}] , as expected.
INFO: Testing that LPUT isn't destructive
PASS: [LPUT 3 :originallist] output [1 2 3] , as expected.
PASS: [:originallist] output [1 2] , as expected.
INFO: Running invalid instruction: [(LPUT 3)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LPUT .
INFO: Running invalid instruction: [(LPUT 3 [1 2] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LPUT 3 12]
INFO: error code is 7 .
INFO: error text is LPUT doesn't like 12 as input .
INFO: Running invalid instruction: [LPUT "c "ab]
INFO: error code is 7 .
INFO: error text is LPUT doesn't like ab as input .
INFO: Running invalid instruction: [LPUT "3 {1 2}]
INFO: error code is 7 .
INFO: error text is LPUT doesn't like {1 2} as input .
PASS: [FPUT 1 [2 3]] output [1 2 3] , as expected.
PASS: [FPUT 1 []] output [1] , as expected.
PASS: [FPUT [1] [[2] [3]]] output [[1] [2] [3]] , as expected.
INFO: Testing that FPUT can put an array into a list
PASS: [FPUT :array [1 2 3]] output [{1 2 3} 1 2 3] , as expected.
INFO: Testing that FPUT isn't destructive
PASS: [FPUT 1 :originallist] output [1 2 3] , as expected.
PASS: [:originallist] output [2 3] , as expected.
INFO: Running invalid instruction: [(FPUT 3)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FPUT .
INFO: Running invalid instruction: [(FPUT 3 [1 2] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FPUT 3 12]
INFO: error code is 7 .
INFO: error text is FPUT doesn't like 12 as input .
INFO: Running invalid instruction: [FPUT "c "ab]
INFO: error code is 7 .
INFO: error text is FPUT doesn't like ab as input .
INFO: Running invalid instruction: [FPUT "3 {1 2}]
INFO: error code is 7 .
INFO: error text is FPUT doesn't like {1 2} as input .
PASS: [SE "abc "def] output [abc def] , as expected.
PASS: [SENTENCE "abc "def] output [abc def] , as expected.
PASS: [SENTENCE "abc [def]] output [abc def] , as expected.
PASS: [SENTENCE [abc] "def] output [abc def] , as expected.
PASS: [SENTENCE [abc def] "ghi] output [abc def ghi] , as expected.
PASS: [SENTENCE [abc def] [ghi jlk]] output [abc def ghi jlk] , as expected.
PASS: [SENTENCE [] [abc]] output [abc] , as expected.
PASS: [SENTENCE [] []] output [] , as expected.
PASS: [SENTENCE [[abc]] "def] output [[abc] def] , as expected.
PASS: [(SE "A "sentence "is "simply "a "list "of "words)] output [A sentence is simply a list of words] , as expected.
PASS: [(SENTENCE "A "sentence "is "simply "a "list "of "words)] output [A sentence is simply a list of words] , as expected.
PASS: [(SENTENCE [] [abc] [] )] output [abc] , as expected.
PASS: [(SE)] output [] , as expected.
PASS: [(SENTENCE)] output [] , as expected.
PASS: [(SE "abc)] output [abc] , as expected.
PASS: [(SENTENCE "abc)] output [abc] , as expected.
INFO: Running invalid instruction: [SENTENCE "abc {def}]
INFO: error code is 7 .
INFO: error text is SENTENCE doesn't like {def} as input .
INFO: Running invalid instruction: [SENTENCE {abc} "def]
INFO: error code is 7 .
INFO: error text is SENTENCE doesn't like {abc} as input .
INFO: Running invalid instruction: [(SENTENCE "abc {def} "ghi)]
INFO: error code is 7 .
INFO: error text is SENTENCE doesn't like {def} as input .
CALL: MAKE "list1 [1 2 3]
CALL: MAKE "list2 [4 5 6]
CALL: MAKE "sentence (SENTENCE :list1 :list2)
PASS: [:sentence] output [1 2 3 4 5 6] , as expected.
PASS: [:list1] output [1 2 3] , as expected.
PASS: [:list2] output [4 5 6] , as expected.
PASS: [.EQ 1000 1000] output false , as expected.
PASS: [.EQ :x :y] output false , as expected.
PASS: [.EQ :x :x] output true , as expected.
PASS: [.EQ " "] output true , as expected.
PASS: [.EQ "false "false] output true , as expected.
PASS: [.EQ "true "true] output true , as expected.
PASS: [.EQ [] []] output true , as expected.
INFO: Running invalid instruction: [(.EQ)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to .EQ .
INFO: Running invalid instruction: [(.EQ 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to .EQ .
INFO: Running invalid instruction: [(.EQ 1 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [EQUALP 1 1] output true , as expected.
PASS: [EQUALP 0 0] output true , as expected.
PASS: [EQUALP 3.14 3.14] output true , as expected.
PASS: [EQUALP "hi "hi] output true , as expected.
PASS: [EQUAL? ["a 1 "ab] ["a 1 "ab]] output true , as expected.
PASS: [EQUAL? [[1 2 3] [1]] [[1 2 3] [1]]] output true , as expected.
PASS: [EQUAL? 0 0] output true , as expected.
PASS: [EQUALP " "] output true , as expected.
PASS: [EQUALP "true "TRUE] output true , as expected.
PASS: [EQUALP "false "FALSE] output true , as expected.
PASS: [EQUALP "HELLO "hello] output true , as expected.
PASS: [EQUALP "hello "HELLO] output true , as expected.
PASS: [EQUALP "HELLO "HELLO] output true , as expected.
PASS: [EQUALP "hello "hello] output true , as expected.
PASS: [EQUAL? :myarray :myarray] output true , as expected.
PASS: [EQUAL? :myarray :myarray] output true , as expected.
PASS: [EQUAL? {} {}] output false , as expected.
PASS: [EQUAL? {1 2 3} {1 2 3}] output false , as expected.
PASS: [EQUALP 1 1.1] output false , as expected.
PASS: [EQUALP 0 1] output false , as expected.
PASS: [EQUALP "hi "hil] output false , as expected.
PASS: [EQUALP "hil "hi] output false , as expected.
PASS: [EQUALP "true "false] output false , as expected.
PASS: [EQUALP [] "false] output false , as expected.
PASS: [EQUALP "false []] output false , as expected.
PASS: [EQUALP [1 2] [1 2 3]] output false , as expected.
PASS: [EQUALP [1 2 3] [1 2]] output false , as expected.
PASS: [EQUALP {1} [1]] output false , as expected.
PASS: [EQUALP [1] {1}] output false , as expected.
PASS: [1 = 1] output true , as expected.
PASS: [0 = 0] output true , as expected.
PASS: [3.14 = 3.14] output true , as expected.
PASS: [" = "] output true , as expected.
PASS: ["true = "TRUE] output true , as expected.
PASS: ["false = "FALSE] output true , as expected.
PASS: ["HELLO = "hello] output true , as expected.
PASS: ["hello = "HELLO] output true , as expected.
PASS: ["HELLO = "HELLO] output true , as expected.
PASS: ["hello = "hello] output true , as expected.
PASS: [["a 1 "ab] = ["a 1 "ab]] output true , as expected.
PASS: [[[1 2 3] [1]] = [[1 2 3] [1]]] output true , as expected.
PASS: [EQUALP 1e-16 0] output false , as expected.
PASS: [EQUALP -1e-16 0] output false , as expected.
PASS: [EQUALP 0 1e-16] output false , as expected.
PASS: [EQUALP 0 -1e-16] output false , as expected.
CALL: MAKE "CASEIGNOREDP LOCALEFALSE
PASS: [EQUALP "true "true] output true , as expected.
PASS: [EQUALP "false "false] output true , as expected.
PASS: [EQUALP "true "TRUE] output false , as expected.
PASS: [EQUALP "false "FALSE] output false , as expected.
PASS: [EQUALP "HELLO "HELLO] output true , as expected.
PASS: [EQUALP "hello "hello] output true , as expected.
PASS: [EQUALP "HELLO "hello] output false , as expected.
PASS: [EQUALP "hello "HELLO] output false , as expected.
PASS: [EQUALP "ýÝ "Ýý] output true , as expected.
PASS: [EQUALP "ñÑ "Ññ] output true , as expected.
PASS: [EQUALP "áÁ "Áá] output true , as expected.
PASS: [EQUALP "âÂ "Ââ] output true , as expected.
PASS: [EQUALP "ãÃ "Ãã] output true , as expected.
PASS: [EQUALP "äÄ "Ää] output true , as expected.
PASS: [EQUALP "çÇ "Çç] output true , as expected.
PASS: [EQUALP "èÈ "Èè] output true , as expected.
PASS: [EQUALP "éÉ "Éé] output true , as expected.
PASS: [EQUALP "êÊ "Êê] output true , as expected.
PASS: [EQUALP "ëË "Ëë] output true , as expected.
PASS: [EQUALP "ìÌ "Ìì] output true , as expected.
PASS: [EQUALP "íÍ "Íí] output true , as expected.
PASS: [EQUALP "îÎ "Îî] output true , as expected.
PASS: [EQUALP "ïÏ "Ïï] output true , as expected.
PASS: [EQUALP "ðÐ "Ðð] output true , as expected.
PASS: [EQUALP "ñÑ "Ññ] output true , as expected.
PASS: [EQUALP "óÓ "Óó] output true , as expected.
PASS: [EQUALP "ôÔ "Ôô] output true , as expected.
PASS: [EQUALP "õÕ "Õõ] output true , as expected.
PASS: [EQUALP "öÖ "Öö] output true , as expected.
PASS: [EQUALP "øØ "Øø] output true , as expected.
PASS: [EQUALP "ùÙ "Ùù] output true , as expected.
INFO: Running invalid instruction: [(EQUAL?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to EQUAL? .
INFO: Running invalid instruction: [(EQUAL? 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to EQUAL? .
INFO: Running invalid instruction: [(EQUAL? 1 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NOTEQUALP 1 1] output false , as expected.
PASS: [NOTEQUALP 0 0] output false , as expected.
PASS: [NOTEQUALP 3.14 3.14] output false , as expected.
PASS: [NOTEQUALP "hi "hi] output false , as expected.
PASS: [NOTEQUAL? ["a 1 "ab] ["a 1 "ab]] output false , as expected.
PASS: [NOTEQUAL? [[1 2 3] [1]] [[1 2 3] [1]]] output false , as expected.
PASS: [NOTEQUAL? 0 0] output false , as expected.
PASS: [NOTEQUALP " "] output false , as expected.
PASS: [NOTEQUALP "true "TRUE] output false , as expected.
PASS: [NOTEQUALP "false "FALSE] output false , as expected.
PASS: [NOTEQUALP "HELLO "hello] output false , as expected.
PASS: [NOTEQUALP "hello "HELLO] output false , as expected.
PASS: [NOTEQUALP "HELLO "HELLO] output false , as expected.
PASS: [NOTEQUALP "hello "hello] output false , as expected.
PASS: [NOTEQUAL? :myarray :myarray] output false , as expected.
PASS: [NOTEQUAL? :myarray :myarray] output false , as expected.
PASS: [NOTEQUAL? {} {}] output true , as expected.
PASS: [NOTEQUAL? {1 2 3} {1 2 3}] output true , as expected.
PASS: [NOTEQUALP 1 1.1] output true , as expected.
PASS: [NOTEQUALP 0 1] output true , as expected.
PASS: [NOTEQUALP "hi "hil] output true , as expected.
PASS: [NOTEQUALP "hil "hi] output true , as expected.
PASS: [NOTEQUALP "true "false] output true , as expected.
PASS: [NOTEQUALP [] "false] output true , as expected.
PASS: [NOTEQUALP "false []] output true , as expected.
PASS: [NOTEQUALP [1 2] [1 2 3]] output true , as expected.
PASS: [NOTEQUALP [1 2 3] [1 2]] output true , as expected.
PASS: [NOTEQUALP {1} [1]] output true , as expected.
PASS: [NOTEQUALP [1] {1}] output true , as expected.
PASS: [1 <> 1] output false , as expected.
PASS: [0 <> 0] output false , as expected.
PASS: [3.14 <> 3.14] output false , as expected.
PASS: [" <> "] output false , as expected.
PASS: ["true <> "TRUE] output false , as expected.
PASS: ["false <> "FALSE] output false , as expected.
PASS: ["HELLO <> "hello] output false , as expected.
PASS: ["hello <> "HELLO] output false , as expected.
PASS: ["HELLO <> "HELLO] output false , as expected.
PASS: ["hello <> "hello] output false , as expected.
PASS: [["a 1 "ab] <> ["a 1 "ab]] output false , as expected.
PASS: [[[1 2 3] [1]] <> [[1 2 3] [1]]] output false , as expected.
CALL: MAKE "CASEIGNOREDP LOCALEFALSE
PASS: [NOTEQUALP "true "true] output false , as expected.
PASS: [NOTEQUALP "false "false] output false , as expected.
PASS: [NOTEQUALP "true "TRUE] output true , as expected.
PASS: [NOTEQUALP "false "FALSE] output true , as expected.
PASS: [NOTEQUALP "HELLO "HELLO] output false , as expected.
PASS: [NOTEQUALP "hello "hello] output false , as expected.
PASS: [NOTEQUALP "HELLO "hello] output true , as expected.
PASS: [NOTEQUALP "hello "HELLO] output true , as expected.
INFO: Running invalid instruction: [(NOTEQUAL?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NOTEQUAL? .
INFO: Running invalid instruction: [(NOTEQUAL? 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NOTEQUAL? .
INFO: Running invalid instruction: [(NOTEQUAL? 1 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [EMPTYP []] output true , as expected.
PASS: [EMPTY? []] output true , as expected.
PASS: [EMPTY? [1]] output false , as expected.
PASS: [EMPTY? [0]] output false , as expected.
PASS: [EMPTY? 0] output false , as expected.
PASS: [EMPTY? "] output true , as expected.
PASS: [EMPTY? " ] output false , as expected.
PASS: [EMPTY? {}] output false , as expected.
INFO: Running invalid instruction: [(EMPTY?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to EMPTY? .
INFO: Running invalid instruction: [(EMPTY? [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NUMBERP 1] output true , as expected.
PASS: [NUMBER? 1] output true , as expected.
PASS: [NUMBER? 0] output true , as expected.
PASS: [NUMBER? -1] output true , as expected.
PASS: [NUMBER? 3.14] output true , as expected.
PASS: [NUMBER? "-1] output true , as expected.
PASS: [NUMBER? "0] output true , as expected.
PASS: [NUMBER? "1] output true , as expected.
PASS: [NUMBER? "2] output true , as expected.
PASS: [NUMBER? "3] output true , as expected.
PASS: [NUMBER? "4] output true , as expected.
PASS: [NUMBER? "5] output true , as expected.
PASS: [NUMBER? "6] output true , as expected.
PASS: [NUMBER? "7] output true , as expected.
PASS: [NUMBER? "8] output true , as expected.
PASS: [NUMBER? "9] output true , as expected.
PASS: [NUMBER? "/] output false , as expected.
PASS: [NUMBER? ":] output false , as expected.
PASS: [NUMBER? {}] output false , as expected.
PASS: [NUMBER? {2}] output false , as expected.
PASS: [NUMBER? []] output false , as expected.
PASS: [NUMBER? [1]] output false , as expected.
PASS: [NUMBER? "one] output false , as expected.
PASS: [NUMBER? "1A] output false , as expected.
PASS: [NUMBER? "A1] output false , as expected.
PASS: [NUMBER? "] output false , as expected.
PASS: [NUMBER? "Â] output false , as expected.
INFO: Running invalid instruction: [(NUMBER?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NUMBER? .
INFO: Running invalid instruction: [(NUMBER? 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [LISTP [1 2 3]] output true , as expected.
PASS: [LIST? [1 2 3]] output true , as expected.
PASS: [LIST? []] output true , as expected.
PASS: [LIST? "list] output false , as expected.
PASS: [LIST? "[1]] output false , as expected.
PASS: [LIST? 1] output false , as expected.
PASS: [LIST? 3.14] output false , as expected.
PASS: [LIST? {1}] output false , as expected.
PASS: [LIST? {}] output false , as expected.
PASS: [LIST? "] output false , as expected.
INFO: Running invalid instruction: [(LIST?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LIST? .
INFO: Running invalid instruction: [(LIST? [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [WORDP "hello] output true , as expected.
PASS: [WORD? "hello] output true , as expected.
PASS: [WORD? 123] output true , as expected.
PASS: [WORD? 3.14] output true , as expected.
PASS: [WORD? "] output true , as expected.
PASS: [WORD? "[1]] output true , as expected.
PASS: [WORD? []] output false , as expected.
PASS: [WORD? ["hello]] output false , as expected.
PASS: [WORD? {}] output false , as expected.
PASS: [WORD? {"hello}] output false , as expected.
INFO: Running invalid instruction: [(WORD?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to WORD? .
INFO: Running invalid instruction: [(WORD? [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [ARRAYP {1 2 3}] output true , as expected.
PASS: [ARRAY? {1 2 3}] output true , as expected.
PASS: [ARRAY? {}] output true , as expected.
PASS: [ARRAY? "word] output false , as expected.
PASS: [ARRAY? "{}] output false , as expected.
PASS: [ARRAY? 1] output false , as expected.
PASS: [ARRAY? 3.14] output false , as expected.
PASS: [ARRAY? [1]] output false , as expected.
PASS: [ARRAY? []] output false , as expected.
PASS: [ARRAY? "] output false , as expected.
INFO: Running invalid instruction: [(ARRAY?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARRAY? .
INFO: Running invalid instruction: [(ARRAY? {1} "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [MEMBERP 2 [1 2 3]] output true , as expected.
PASS: [MEMBER? 2 [1 2 3]] output true , as expected.
PASS: [MEMBER? 1 [1]] output true , as expected.
PASS: [MEMBER? 1 [1 1 1]] output true , as expected.
PASS: [MEMBER? 0 [1 2 3]] output false , as expected.
PASS: [MEMBER? [2] [[1] [2] [3]]] output true , as expected.
PASS: [MEMBER? 2 [[1] [2] [3]]] output false , as expected.
PASS: [MEMBER? [2] [1 2 3]] output false , as expected.
PASS: [MEMBER? 1 []] output false , as expected.
PASS: [MEMBER? 1 {1}] output true , as expected.
PASS: [MEMBER? 1 {1 1 1}] output true , as expected.
PASS: [MEMBER? 12 {11 12 13}] output true , as expected.
PASS: [MEMBER? 12 {}] output false , as expected.
PASS: [MEMBER? 1 123] output true , as expected.
PASS: [MEMBER? 4 123] output false , as expected.
PASS: [MEMBER? 23 123] output false , as expected.
PASS: [MEMBER? 1 "] output false , as expected.
PASS: [MEMBER? [1] "123] output false , as expected.
PASS: [MEMBER? " "hello] output false , as expected.
PASS: [MEMBER? " (LIST ")] output true , as expected.
PASS: [MEMBER? " :arrayofemptystring] output true , as expected.
INFO: Running invalid instruction: [(MEMBER?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MEMBER? .
INFO: Running invalid instruction: [(MEMBER? 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MEMBER? .
INFO: Running invalid instruction: [(MEMBER? 2 [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [BEFOREP "ABC "ABD] output true , as expected.
PASS: [BEFORE? "ABC "ABD] output true , as expected.
PASS: [BEFORE? "ABD "ABC] output false , as expected.
PASS: [BEFORE? "ABC "ABC] output false , as expected.
PASS: [BEFORE? "ABC "ABCD] output true , as expected.
PASS: [BEFORE? "ABCD "ABC] output false , as expected.
PASS: [BEFORE? " "A] output true , as expected.
PASS: [BEFORE? "Z "] output false , as expected.
INFO: Running invalid instruction: [(BEFORE?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BEFORE? .
INFO: Running invalid instruction: [(BEFORE? "ABC)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BEFORE? .
INFO: Running invalid instruction: [(BEFORE? "ABC [] )]
INFO: error code is 7 .
INFO: error text is BEFORE? doesn't like [] as input .
INFO: Running invalid instruction: [(BEFORE? [] "ABC)]
INFO: error code is 7 .
INFO: error text is BEFORE? doesn't like [] as input .
INFO: Running invalid instruction: [(BEFORE? "ABC "ABC "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [WORD "o "k] output ok , as expected.
PASS: [WORD "4 "2] output 42 , as expected.
PASS: [(WORD)] output  , as expected.
PASS: [(WORD "o)] output o , as expected.
PASS: [(WORD "o "k "ay)] output okay , as expected.
PASS: [(WORD " ")] output  , as expected.
PASS: [(WORD " "a ")] output a , as expected.
INFO: Running invalid instruction: [WORD [] "a]
PASS: error code is 7 , as expected.
INFO: error text is WORD doesn't like [] as input .
INFO: Running invalid instruction: [WORD "a []]
PASS: error code is 7 , as expected.
INFO: error text is WORD doesn't like [] as input .
INFO: Running invalid instruction: [WORD "a {}]
PASS: error code is 7 , as expected.
INFO: error text is WORD doesn't like {} as input .
INFO: Running invalid instruction: [WORD {} "a]
PASS: error code is 7 , as expected.
INFO: error text is WORD doesn't like {} as input .
PASS: [ASCII "a] output 97 , as expected.
PASS: [ASCII "A] output 65 , as expected.
PASS: [ASCII 1] output 49 , as expected.
PASS: [ASCII "(] output 40 , as expected.
INFO: Running invalid instruction: [(ASCII)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ASCII .
INFO: Running invalid instruction: [(ASCII "a "b)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ASCII [a]]
PASS: error code is 7 , as expected.
INFO: error text is ASCII doesn't like [a] as input .
INFO: Running invalid instruction: [ASCII {a}]
PASS: error code is 7 , as expected.
INFO: error text is ASCII doesn't like {a} as input .
INFO: Running invalid instruction: [ASCII "ab]
PASS: error code is 7 , as expected.
INFO: error text is ASCII doesn't like ab as input .
INFO: Running invalid instruction: [ASCII 1.2]
PASS: error code is 7 , as expected.
INFO: error text is ASCII doesn't like 1.2 as input .
PASS: [RAWASCII "a] output 97 , as expected.
PASS: [RAWASCII "A] output 65 , as expected.
PASS: [RAWASCII 1] output 49 , as expected.
PASS: [RAWASCII CHAR 0] output 0 , as expected.
PASS: [RAWASCII CHAR 5] output 5 , as expected.
PASS: [RAWASCII CHAR 192] output 192 , as expected.
INFO: Running invalid instruction: [(RAWASCII)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RAWASCII .
INFO: Running invalid instruction: [(RAWASCII "a "b)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RAWASCII [a]]
PASS: error code is 7 , as expected.
INFO: error text is RAWASCII doesn't like [a] as input .
INFO: Running invalid instruction: [RAWASCII {a}]
PASS: error code is 7 , as expected.
INFO: error text is RAWASCII doesn't like {a} as input .
INFO: Running invalid instruction: [RAWASCII "ab]
PASS: error code is 7 , as expected.
INFO: error text is RAWASCII doesn't like ab as input .
INFO: Running invalid instruction: [RAWASCII 1.2]
PASS: error code is 7 , as expected.
INFO: error text is RAWASCII doesn't like 1.2 as input .
PASS: [CHAR 65] output A , as expected.
PASS: [CHAR (256+65)] output A , as expected.
PASS: [CHAR 65.0] output A , as expected.
PASS: [CHAR 2147483647] output ÿ , as expected.
PASS: [CHAR 2147483647.0] output ÿ , as expected.
INFO: Running invalid instruction: [CHAR "zero]
PASS: error code is 7 , as expected.
INFO: error text is CHAR doesn't like zero as input .
INFO: Running invalid instruction: [CHAR []]
PASS: error code is 7 , as expected.
INFO: error text is CHAR doesn't like [] as input .
INFO: Running invalid instruction: [CHAR [1]]
PASS: error code is 7 , as expected.
INFO: error text is CHAR doesn't like [1] as input .
INFO: Running invalid instruction: [CHAR {1}]
PASS: error code is 7 , as expected.
INFO: error text is CHAR doesn't like {1} as input .
INFO: Running invalid instruction: [CHAR 0.5]
PASS: error code is 7 , as expected.
INFO: error text is CHAR doesn't like 0.5 as input .
INFO: Running invalid instruction: [CHAR -0.5]
PASS: error code is 7 , as expected.
INFO: error text is CHAR doesn't like -0.5 as input .
INFO: Running invalid instruction: [CHAR 2147483648]
PASS: error code is 7 , as expected.
INFO: error text is CHAR doesn't like 2147483648 as input .
INFO: Running invalid instruction: [CHAR 2147483647.1]
PASS: error code is 7 , as expected.
INFO: error text is CHAR doesn't like 2147483647.1 as input .
PASS: [UPPERCASE "hello] output HELLO , as expected.
PASS: [UPPERCASE "HELLO] output HELLO , as expected.
PASS: [UPPERCASE "HeLlo] output HELLO , as expected.
PASS: [UPPERCASE "] output  , as expected.
PASS: [UPPERCASE 12345] output 12345 , as expected.
PASS: [UPPERCASE 12.34] output 12.34 , as expected.
PASS: [UPPERCASE "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_] output ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_ , as expected.
PASS: [UPPERCASE " `~!@#$%^&*()_+-=[]{}|\;:'",<.>/?] output  `~!@#$%^&*()_+-=[]{}|\;:'",<.>/? , as expected.
PASS: [UPPERCASE "ýÝ] output ÝÝ , as expected.
PASS: [UPPERCASE "ñÑ] output ÑÑ , as expected.
PASS: [UPPERCASE "áÁ] output ÁÁ , as expected.
PASS: [UPPERCASE "âÂ] output ÂÂ , as expected.
PASS: [UPPERCASE "ãÃ] output ÃÃ , as expected.
PASS: [UPPERCASE "äÄ] output ÄÄ , as expected.
PASS: [UPPERCASE "çÇ] output ÇÇ , as expected.
PASS: [UPPERCASE "èÈ] output ÈÈ , as expected.
PASS: [UPPERCASE "éÉ] output ÉÉ , as expected.
PASS: [UPPERCASE "êÊ] output ÊÊ , as expected.
PASS: [UPPERCASE "ëË] output ËË , as expected.
PASS: [UPPERCASE "ìÌ] output ÌÌ , as expected.
PASS: [UPPERCASE "íÍ] output ÍÍ , as expected.
PASS: [UPPERCASE "îÎ] output ÎÎ , as expected.
PASS: [UPPERCASE "ïÏ] output ÏÏ , as expected.
PASS: [UPPERCASE "ðÐ] output ÐÐ , as expected.
PASS: [UPPERCASE "ñÑ] output ÑÑ , as expected.
PASS: [UPPERCASE "óÓ] output ÓÓ , as expected.
PASS: [UPPERCASE "ôÔ] output ÔÔ , as expected.
PASS: [UPPERCASE "õÕ] output ÕÕ , as expected.
PASS: [UPPERCASE "öÖ] output ÖÖ , as expected.
PASS: [UPPERCASE "øØ] output ØØ , as expected.
PASS: [UPPERCASE "ùÙ] output ÙÙ , as expected.
INFO: Running invalid instruction: [(UPPERCASE "hello "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(UPPERCASE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to UPPERCASE .
INFO: Running invalid instruction: [UPPERCASE [1 2 3]]
INFO: error code is 7 .
INFO: error text is UPPERCASE doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [UPPERCASE {1 2 3}]
INFO: error code is 7 .
INFO: error text is UPPERCASE doesn't like {1 2 3} as input .
PASS: [LOWERCASE "hello] output hello , as expected.
PASS: [LOWERCASE "HELLO] output hello , as expected.
PASS: [LOWERCASE "HeLlo] output hello , as expected.
PASS: [LOWERCASE "] output  , as expected.
PASS: [LOWERCASE 12345] output 12345 , as expected.
PASS: [LOWERCASE 12.34] output 12.34 , as expected.
PASS: [LOWERCASE "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_] output abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789_ , as expected.
PASS: [LOWERCASE " `~!@#$%^&*()_+-=[]{}|\;:'",<.>/?] output  `~!@#$%^&*()_+-=[]{}|\;:'",<.>/? , as expected.
PASS: [LOWERCASE "ýÝ] output ýý , as expected.
PASS: [LOWERCASE "ñÑ] output ññ , as expected.
PASS: [LOWERCASE "áÁ] output áá , as expected.
PASS: [LOWERCASE "âÂ] output ââ , as expected.
PASS: [LOWERCASE "ãÃ] output ãã , as expected.
PASS: [LOWERCASE "äÄ] output ää , as expected.
PASS: [LOWERCASE "çÇ] output çç , as expected.
PASS: [LOWERCASE "èÈ] output èè , as expected.
PASS: [LOWERCASE "éÉ] output éé , as expected.
PASS: [LOWERCASE "êÊ] output êê , as expected.
PASS: [LOWERCASE "ëË] output ëë , as expected.
PASS: [LOWERCASE "ìÌ] output ìì , as expected.
PASS: [LOWERCASE "íÍ] output íí , as expected.
PASS: [LOWERCASE "îÎ] output îî , as expected.
PASS: [LOWERCASE "ïÏ] output ïï , as expected.
PASS: [LOWERCASE "ðÐ] output ðð , as expected.
PASS: [LOWERCASE "ñÑ] output ññ , as expected.
PASS: [LOWERCASE "óÓ] output óó , as expected.
PASS: [LOWERCASE "ôÔ] output ôô , as expected.
PASS: [LOWERCASE "õÕ] output õõ , as expected.
PASS: [LOWERCASE "öÖ] output öö , as expected.
PASS: [LOWERCASE "øØ] output øø , as expected.
PASS: [LOWERCASE "ùÙ] output ùù , as expected.
INFO: Running invalid instruction: [(LOWERCASE "hello "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(LOWERCASE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOWERCASE .
INFO: Running invalid instruction: [LOWERCASE [1 2 3]]
INFO: error code is 7 .
INFO: error text is LOWERCASE doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [LOWERCASE {1 2 3}]
INFO: error code is 7 .
INFO: error text is LOWERCASE doesn't like {1 2 3} as input .
PASS: [THING "myvariable] output 1234 , as expected.
PASS: [THING "myvariable] output [1 2 3] , as expected.
PASS: [THING 1234] output 4321 , as expected.
INFO: Running invalid instruction: [(THING)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to THING .
INFO: Running invalid instruction: [(THING "myvariable "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [THING "unboundvariable]
PASS: error code is 11 , as expected.
INFO: error text is unboundvariable has no value .
INFO: Running invalid instruction: [THING [1]]
PASS: error code is 7 , as expected.
INFO: error text is THING doesn't like [1] as input .
INFO: Running invalid instruction: [THING {1}]
PASS: error code is 7 , as expected.
INFO: error text is THING doesn't like {1} as input .
PASS: [ITEM 1 [a b c]] output a , as expected.
PASS: [ITEM 2 [a b c]] output b , as expected.
PASS: [ITEM 3 [a b c]] output c , as expected.
PASS: [ITEM 3.0 [a b c]] output c , as expected.
PASS: [ITEM 1 "abc] output a , as expected.
PASS: [ITEM 2 "abc] output b , as expected.
PASS: [ITEM 3 "abc] output c , as expected.
PASS: [ITEM 3.0 "abc] output c , as expected.
PASS: [ITEM 1 {a b c}] output a , as expected.
PASS: [ITEM 2 {a b c}] output b , as expected.
PASS: [ITEM 3 {a b c}] output c , as expected.
PASS: [ITEM 3.0 {a b c}] output c , as expected.
INFO: Running invalid instruction: [(ITEM 12)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ITEM .
INFO: Running invalid instruction: [(ITEM 1 [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ITEM -1 [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like -1 as input .
INFO: Running invalid instruction: [ITEM 0 [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 0 as input .
INFO: Running invalid instruction: [ITEM 4 [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 4 as input .
INFO: Running invalid instruction: [ITEM 1.5 [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 1.5 as input .
INFO: Running invalid instruction: [ITEM 1 []]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like [] as input .
INFO: Running invalid instruction: [ITEM [] [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like [] as input .
INFO: Running invalid instruction: [ITEM {0} [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like {0} as input .
INFO: Running invalid instruction: [ITEM "ten [1 2 3]]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like ten as input .
INFO: Running invalid instruction: [ITEM -1 "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like -1 as input .
INFO: Running invalid instruction: [ITEM 0 "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 0 as input .
INFO: Running invalid instruction: [ITEM 4 "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 4 as input .
INFO: Running invalid instruction: [ITEM 1.5 "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 1.5 as input .
INFO: Running invalid instruction: [ITEM 1 "]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like  as input .
INFO: Running invalid instruction: [ITEM [] "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like [] as input .
INFO: Running invalid instruction: [ITEM {0} "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like {0} as input .
INFO: Running invalid instruction: [ITEM "ten "abc]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like ten as input .
INFO: Running invalid instruction: [ITEM -1 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like -1 as input .
INFO: Running invalid instruction: [ITEM 0 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 0 as input .
INFO: Running invalid instruction: [ITEM 4 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 4 as input .
INFO: Running invalid instruction: [ITEM 1.5 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 1.5 as input .
INFO: Running invalid instruction: [ITEM 1 {}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like 1 as input .
INFO: Running invalid instruction: [ITEM [] {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like [] as input .
INFO: Running invalid instruction: [ITEM {0} {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like {0} as input .
INFO: Running invalid instruction: [ITEM "ten {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is ITEM doesn't like ten as input .
CALL: MAKE "ERRACT [ITEMTEST.OUTPUT.2]
PASS: [ITEM [4] [a b c]] output b , as expected.
PASS: [ITEM {4} [a b c]] output b , as expected.
PASS: [ITEM 0.5 [a b c]] output b , as expected.
PASS: [ITEM 0 [a b c]] output b , as expected.
PASS: [ITEM 4 [a b c]] output b , as expected.
PASS: [ITEM 0 "abc] output b , as expected.
PASS: [ITEM 4 "abc] output b , as expected.
PASS: [ITEM -1 {a b c}] output c , as expected.
PASS: [ITEM 3 {a b c}] output c , as expected.
PASS: [FIRST [1 2 3]] output 1 , as expected.
PASS: [FIRST [1]] output 1 , as expected.
PASS: [FIRST {a b c}] output 1 , as expected.
PASS: [FIRST {a b c}] output 2 , as expected.
PASS: [FIRST "hello] output h , as expected.
PASS: [FIRST "h] output h , as expected.
INFO: Running invalid instruction: [(FIRST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FIRST .
INFO: Running invalid instruction: [(FIRST "word "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FIRST []]
INFO: error code is 7 .
INFO: error text is FIRST doesn't like [] as input .
INFO: Running invalid instruction: [FIRST "]
INFO: error code is 7 .
INFO: error text is FIRST doesn't like  as input .
INFO: Running invalid instruction: [FIRST {}]
INFO: error code is 7 .
INFO: error text is FIRST doesn't like {} as input .
PASS: [FIRSTS [[1 2 3]]] output [1] , as expected.
PASS: [FIRSTS [[1 2 3] [a b c]]] output [1 a] , as expected.
PASS: [FIRSTS [[1 2 3] hello [1] h]] output [1 h 1 h] , as expected.
PASS: [FIRSTS []] output [] , as expected.
INFO: Running invalid instruction: [(FIRSTS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FIRSTS .
INFO: Running invalid instruction: [(FIRSTS [[1 2 3]] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FIRSTS (LIST [1 2 3] [] [1 2 3] )]
INFO: error code is 7 .
INFO: error text is FIRSTS doesn't like [] as input .
INFO: Running invalid instruction: [FIRSTS (LIST [1 2 3] " [1 2 3] )]
INFO: error code is 7 .
INFO: error text is FIRSTS doesn't like  as input .
INFO: Running invalid instruction: [FIRSTS (LIST [1 2 3] {} [1 2 3] )]
INFO: error code is 7 .
INFO: error text is FIRSTS doesn't like {} as input .
PASS: [BF [1 2 3]] output [2 3] , as expected.
PASS: [BUTFIRST [1 2 3]] output [2 3] , as expected.
PASS: [BUTFIRST [1]] output [] , as expected.
PASS: [BUTFIRST "hello] output ello , as expected.
PASS: [BUTFIRST "h] output  , as expected.
INFO: Running invalid instruction: [(BUTFIRST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BUTFIRST .
INFO: Running invalid instruction: [(BUTFIRST "word "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BUTFIRST []]
INFO: error code is 7 .
INFO: error text is BUTFIRST doesn't like [] as input .
INFO: Running invalid instruction: [BUTFIRST "]
INFO: error code is 7 .
INFO: error text is BUTFIRST doesn't like  as input .
INFO: Running invalid instruction: [BUTFIRST {1}]
INFO: error code is 7 .
INFO: error text is BUTFIRST doesn't like {1} as input .
PASS: [BFS [[1 2 3]]] output [[2 3]] , as expected.
PASS: [BUTFIRSTS [[1 2 3]]] output [[2 3]] , as expected.
PASS: [BUTFIRSTS [[1 2 3] [a b c]]] output [[2 3] [b c]] , as expected.
PASS: [BUTFIRSTS [[1 2 3] hello [1] h]] output [[2 3] ello [] ] , as expected.
PASS: [BUTFIRSTS []] output [] , as expected.
INFO: Running invalid instruction: [(BUTFIRSTS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BUTFIRSTS .
INFO: Running invalid instruction: [(BUTFIRSTS [[1 2 3]] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BUTFIRSTS (LIST [1 2 3] [] [1 2 3] )]
INFO: error code is 7 .
INFO: error text is BUTFIRSTS doesn't like [] as input .
INFO: Running invalid instruction: [BUTFIRSTS (LIST [1 2 3] " [1 2 3] )]
INFO: error code is 7 .
INFO: error text is BUTFIRSTS doesn't like  as input .
INFO: Running invalid instruction: [BUTFIRSTS (LIST [1 2 3] {1} [1 2 3] )]
INFO: error code is 7 .
INFO: error text is BUTFIRSTS doesn't like {1} as input .
PASS: [BL [1 2 3]] output [1 2] , as expected.
PASS: [BUTLAST [1 2 3]] output [1 2] , as expected.
PASS: [BUTLAST [1]] output [] , as expected.
PASS: [BUTLAST "hello] output hell , as expected.
PASS: [BUTLAST "h] output  , as expected.
INFO: Running invalid instruction: [(BUTLAST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BUTLAST .
INFO: Running invalid instruction: [(BUTLAST "word "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BUTLAST []]
INFO: error code is 7 .
INFO: error text is BUTLAST doesn't like [] as input .
INFO: Running invalid instruction: [BUTLAST "]
INFO: error code is 7 .
INFO: error text is BUTLAST doesn't like  as input .
INFO: Running invalid instruction: [BUTLAST {1}]
INFO: error code is 7 .
INFO: error text is BUTLAST doesn't like {1} as input .
PASS: [LAST [1 2 3]] output 3 , as expected.
PASS: [LAST [1 2]] output 2 , as expected.
PASS: [LAST [1]] output 1 , as expected.
PASS: [LAST "hello] output o , as expected.
PASS: [LAST "h] output h , as expected.
INFO: Running invalid instruction: [(LAST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LAST .
INFO: Running invalid instruction: [(LAST "word "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LAST []]
INFO: error code is 7 .
INFO: error text is LAST doesn't like [] as input .
INFO: Running invalid instruction: [LAST "]
INFO: error code is 7 .
INFO: error text is LAST doesn't like  as input .
INFO: Running invalid instruction: [LAST {1}]
INFO: error code is 7 .
INFO: error text is LAST doesn't like {1} as input .
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM 1 :myarray] output [] , as expected.
PASS: [ITEM 2 :myarray] output [] , as expected.
PASS: [ITEM 3 :myarray] output [] , as expected.
PASS: [ITEM 4 :myarray] output [] , as expected.
PASS: [ITEM 1 :myarray] output 42 , as expected.
PASS: [ITEM 2 :myarray] output hi , as expected.
PASS: [ITEM 3 :myarray] output [list] , as expected.
PASS: [ITEM 1 :myarray] output 1 , as expected.
PASS: [ITEM 2 :myarray] output 2 , as expected.
PASS: [ITEM 3 :myarray] output 3 , as expected.
PASS: [ITEM 4 :myarray] output 4 , as expected.
PASS: [COUNT :newarray] output 4 , as expected.
PASS: [ITEM 1 :newarray] output 1 , as expected.
PASS: [ITEM 2 :newarray] output 2 , as expected.
PASS: [ITEM 3 :newarray] output 3 , as expected.
PASS: [ITEM 4 :newarray] output 4 , as expected.
PASS: [COUNT :myarray] output 3 , as expected.
PASS: [ITEM 0 :myarray] output [] , as expected.
PASS: [ITEM 1 :myarray] output [] , as expected.
PASS: [ITEM 2 :myarray] output [] , as expected.
PASS: [ITEM 0 :myarray] output 0 , as expected.
PASS: [ITEM 1 :myarray] output 1 , as expected.
PASS: [ITEM 2 :myarray] output 2 , as expected.
PASS: [ITEM 0 :myarray] output [0] , as expected.
PASS: [ITEM 1 :myarray] output [1] , as expected.
PASS: [ITEM 2 :myarray] output [2] , as expected.
PASS: [COUNT :myarray] output 3 , as expected.
PASS: [ITEM -100 :myarray] output 0 , as expected.
PASS: [ITEM -99 :myarray] output 1 , as expected.
PASS: [ITEM -98 :myarray] output 2 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM 2 :myarray] output 1 , as expected.
PASS: [ITEM 3 :myarray] output 2 , as expected.
PASS: [ITEM 4 :myarray] output 3 , as expected.
PASS: [ITEM 5 :myarray] output 4 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM -2 :myarray] output 1 , as expected.
PASS: [ITEM -1 :myarray] output 2 , as expected.
PASS: [ITEM 0 :myarray] output 3 , as expected.
PASS: [ITEM 1 :myarray] output 4 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM 0 :myarray] output 1 , as expected.
PASS: [ITEM 1 :myarray] output 2 , as expected.
PASS: [ITEM 2 :myarray] output 3 , as expected.
PASS: [ITEM 3 :myarray] output 4 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM -100 :myarray] output 1 , as expected.
PASS: [ITEM -99 :myarray] output 2 , as expected.
PASS: [ITEM -98 :myarray] output 3 , as expected.
PASS: [ITEM -97 :myarray] output 4 , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [ITEM 12345 :myarray] output 1 , as expected.
PASS: [ITEM 12346 :myarray] output 2 , as expected.
PASS: [ITEM 12347 :myarray] output 3 , as expected.
PASS: [ITEM 12348 :myarray] output 4 , as expected.
INFO: Running invalid instruction: [MAKE "myarray {1 2 3 4} e10]
PASS: error code is 13 , as expected.
PASS: error text is I don't know how to e10 , as expected.
INFO: Running invalid instruction: [MAKE "myarray {1 2 3 4} .23 SHOW 1]
PASS: error code is 9 , as expected.
PASS: error text is You don't say what to do with 0.23 , as expected.
INFO: Running invalid instruction: [ARRAY -1]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like -1 as input .
INFO: Running invalid instruction: [ARRAY 1.23]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like 1.23 as input .
INFO: Running invalid instruction: [ARRAY "two]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like two as input .
INFO: Running invalid instruction: [ARRAY {}]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like {} as input .
INFO: Running invalid instruction: [ARRAY []]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like [] as input .
INFO: Running invalid instruction: [(ARRAY 5 "origin)]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like origin as input .
INFO: Running invalid instruction: [(ARRAY 5 1.23)]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like 1.23 as input .
INFO: Running invalid instruction: [(ARRAY 5 {5} )]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like {5} as input .
INFO: Running invalid instruction: [(ARRAY 5 [5] )]
INFO: error code is 7 .
INFO: error text is ARRAY doesn't like [5] as input .
INFO: Running invalid instruction: [ARRAY 2000000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Creating an empty array (regression test for bug #1349374)
INFO: Running invalid instruction: [(SETITEM)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETITEM .
INFO: Running invalid instruction: [(SETITEM 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETITEM .
INFO: Running invalid instruction: [(SETITEM 1 {1 2 3} )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETITEM .
INFO: Running invalid instruction: [(SETITEM 1 {1 2 3} "value "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETITEM "one {1 2 3} "value]
INFO: error code is 7 .
INFO: error text is SETITEM doesn't like one as input .
INFO: Running invalid instruction: [SETITEM 1 [1 2 3] "value]
INFO: error code is 7 .
INFO: error text is SETITEM doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [SETITEM 1 "string "value]
INFO: error code is 7 .
INFO: error text is SETITEM doesn't like string as input .
INFO: Running invalid instruction: [SETITEM 5 {1} "value]
INFO: error code is 4 .
INFO: error text is SETITEM doesn't like 5 as input .
INFO: Running invalid instruction: [SETITEM 1 :myarray :myarray]
INFO: error code is 7 .
INFO: error text is SETITEM doesn't like {1 2 3} as input .
CALL: MAKE "testqueue []
CALL: QUEUE "testqueue 1
PASS: [:testqueue] output [1] , as expected.
CALL: QUEUE "testqueue 2
PASS: [:testqueue] output [1 2] , as expected.
PASS: [DEQUEUE "testqueue] output 1 , as expected.
PASS: [:testqueue] output [2] , as expected.
PASS: [DEQUEUE "testqueue] output 2 , as expected.
PASS: [:testqueue] output [] , as expected.
CALL: QUEUE "testqueue :testqueue
PASS: [:testqueue] output [[]] , as expected.
PASS: [DEQUEUE "testqueue] output [] , as expected.
PASS: [:testqueue] output [] , as expected.
INFO: Running invalid instruction: [(DEQUEUE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DEQUEUE .
INFO: Running invalid instruction: [(DEQUEUE "samplequeue "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(DEQUEUE {1 2 3} )]
INFO: error code is 7 .
INFO: error text is thing doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(DEQUEUE [1 2 3] )]
INFO: error code is 7 .
INFO: error text is thing doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(DEQUEUE "queuetest.doesnotexist)]
PASS: error code is 11 , as expected.
INFO: error text is queuetest.doesnotexist has no value .
INFO: Running invalid instruction: [(DEQUEUE "samplequeue)]
INFO: error code is 7 .
INFO: error text is first doesn't like [] as input .
INFO: Running invalid instruction: [(QUEUE "samplequeue)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to QUEUE .
INFO: Running invalid instruction: [(QUEUE "samplequeue 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(QUEUE {1 2 3} 1)]
INFO: error code is 7 .
INFO: error text is thing doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(QUEUE [1 2 3] 1)]
INFO: error code is 7 .
INFO: error text is thing doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(QUEUE "queuetest.doesnotexist 1)]
PASS: error code is 11 , as expected.
INFO: error text is queuetest.doesnotexist has no value .
CALL: MAKE "teststack []
CALL: PUSH "teststack 1
PASS: [:teststack] output [1] , as expected.
CALL: PUSH "teststack 2
PASS: [:teststack] output [2 1] , as expected.
PASS: [POP "teststack] output 2 , as expected.
PASS: [:teststack] output [1] , as expected.
PASS: [POP "teststack] output 1 , as expected.
PASS: [:teststack] output [] , as expected.
CALL: PUSH "teststack :teststack
PASS: [:teststack] output [[]] , as expected.
PASS: [POP "teststack] output [] , as expected.
PASS: [:teststack] output [] , as expected.
INFO: Running invalid instruction: [(POP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POP .
INFO: Running invalid instruction: [(POP "samplestack "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(POP {1 2 3} )]
INFO: error code is 7 .
INFO: error text is thing doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(POP [1 2 3] )]
INFO: error code is 7 .
INFO: error text is thing doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(POP "stacktest.doesnotexist)]
PASS: error code is 11 , as expected.
INFO: error text is stacktest.doesnotexist has no value .
INFO: Running invalid instruction: [(POP "samplestack)]
INFO: error code is 11 .
INFO: error text is samplestack has no value .
INFO: Running invalid instruction: [(PUSH "samplestack)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PUSH .
INFO: Running invalid instruction: [(PUSH "samplestack 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(PUSH {1 2 3} 1)]
INFO: error code is 7 .
INFO: error text is thing doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(PUSH [1 2 3] 1)]
INFO: error code is 7 .
INFO: error text is thing doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(PUSH "stacktest.doesnotexist 1)]
PASS: error code is 11 , as expected.
INFO: error text is stacktest.doesnotexist has no value .
PASS: [COMBINE "o "k] output ok , as expected.
PASS: [COMBINE "4 "2] output 42 , as expected.
PASS: [COMBINE "o []] output [o] , as expected.
PASS: [COMBINE "1 [2 3]] output [1 2 3] , as expected.
PASS: [COMBINE [] []] output [[]] , as expected.
INFO: Running invalid instruction: [(COMBINE "a)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to COMBINE .
INFO: Running invalid instruction: [(COMBINE "a "b "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [COMBINE [] "a]
INFO: error code is 7 .
INFO: error text is word doesn't like [] as input .
INFO: Running invalid instruction: [COMBINE {} "a]
INFO: error code is 7 .
INFO: error text is word doesn't like {} as input .
INFO: Running invalid instruction: [COMBINE "a {}]
INFO: error code is 7 .
INFO: error text is fput doesn't like {} as input .
PASS: [ARRAYP LISTTOARRAY [a b c]] output true , as expected.
PASS: [COUNT LISTTOARRAY [a b c]] output 3 , as expected.
PASS: [ITEM 1 LISTTOARRAY [a b c]] output a , as expected.
PASS: [ITEM 2 LISTTOARRAY [a b c]] output b , as expected.
PASS: [ITEM 3 LISTTOARRAY [a b c]] output c , as expected.
PASS: [ARRAYP LISTTOARRAY []] output true , as expected.
PASS: [COUNT LISTTOARRAY []] output 0 , as expected.
PASS: [ARRAYP (LISTTOARRAY [a b c] 0)] output true , as expected.
PASS: [COUNT (LISTTOARRAY [a b c] 0)] output 3 , as expected.
PASS: [ITEM 0 (LISTTOARRAY [a b c] 0)] output a , as expected.
PASS: [ITEM 1 (LISTTOARRAY [a b c] 0)] output b , as expected.
PASS: [ITEM 2 (LISTTOARRAY [a b c] 0)] output c , as expected.
PASS: [ARRAYP (LISTTOARRAY [a b c] -5)] output true , as expected.
PASS: [COUNT (LISTTOARRAY [a b c] -5)] output 3 , as expected.
PASS: [ITEM -5 (LISTTOARRAY [a b c] -5)] output a , as expected.
PASS: [ITEM -4 (LISTTOARRAY [a b c] -5)] output b , as expected.
PASS: [ITEM -3 (LISTTOARRAY [a b c] -5)] output c , as expected.
INFO: Running invalid instruction: [(LISTTOARRAY)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LISTTOARRAY .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LISTTOARRAY {a b c}]
PASS: error code is 7 , as expected.
INFO: error text is bf doesn't like {a b c} as input .
INFO: Running invalid instruction: [LISTTOARRAY "abc]
FAIL: Running [LISTTOARRAY "abc] did not throw an error.
INFO: Running invalid instruction: [LISTTOARRAY 123]
FAIL: Running [LISTTOARRAY 123] did not throw an error.
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] 10.5 )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like 10.5 as input .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] "ten )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like ten as input .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] [] )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like [] as input .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] [1 2 3] )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(LISTTOARRAY [1 2 3] {1 2 3} )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like {1 2 3} as input .
PASS: [REVERSE "abc] output cba , as expected.
PASS: [REVERSE "a] output a , as expected.
PASS: [REVERSE "] output  , as expected.
PASS: [REVERSE 123] output 321 , as expected.
PASS: [REVERSE 12.34] output 43.21 , as expected.
PASS: [REVERSE 1e5] output 000001 , as expected.
PASS: [REVERSE [1 2 3]] output [3 2 1] , as expected.
PASS: [REVERSE [1]] output [1] , as expected.
PASS: [REVERSE []] output [] , as expected.
INFO: Running invalid instruction: [(REVERSE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REVERSE .
INFO: Running invalid instruction: [(REVERSE [1 2 3] [4 5 6] )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REVERSE {1 2 3}]
INFO: error code is 7 .
INFO: error text is bf doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [REVERSE {}]
INFO: error code is 7 .
INFO: error text is bf doesn't like {} as input .
PASS: [REMOVE "b [a b c b]] output [a c] , as expected.
PASS: [REMOVE "e "Hello] output Hllo , as expected.
PASS: [REMOVE "ab [ab cd ef]] output [cd ef] , as expected.
PASS: [REMOVE "ab "ababab] output ababab , as expected.
PASS: [REMOVE "a "aaaa] output  , as expected.
PASS: [REMOVE "a [a a a]] output [] , as expected.
PASS: [REMOVE "a "] output  , as expected.
PASS: [REMOVE 2 []] output [] , as expected.
PASS: [REMOVE " "abc] output abc , as expected.
PASS: [REMOVE [] [a [] b]] output [a b] , as expected.
PASS: [REMOVE "z [a b c d e]] output [a b c d e] , as expected.
PASS: [REMOVE "z "abcde] output abcde , as expected.
PASS: [REMOVE :myarray (LIST :myarray "a "b "c :myarray)] output [a b c] , as expected.
PASS: [REMOVE :myarray "abc] output abc , as expected.
INFO: Running invalid instruction: [(REMOVE "a)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMOVE .
INFO: Running invalid instruction: [(REMOVE "a "abc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REMOVE "1 {1 2 3}]
PASS: error code is 7 , as expected.
INFO: error text is bf doesn't like {1 2 3} as input .
PASS: [REMDUP [a b c c b]] output [a c b] , as expected.
PASS: [REMDUP "Hello] output Helo , as expected.
PASS: [REMDUP [q w e r T y]] output [q w e r T y] , as expected.
PASS: [REMDUP "qwerTy] output qwerTy , as expected.
PASS: [REMDUP [ab ac ad ae af]] output [ab ac ad ae af] , as expected.
PASS: [REMDUP []] output [] , as expected.
PASS: [REMDUP "] output  , as expected.
PASS: [REMDUP [abc abc abc abc abc]] output [abc] , as expected.
PASS: [REMDUP "aaaaaaaaaaaaaaaaaaa] output a , as expected.
PASS: [REMDUP [[a] [a] a b [a] [a] c [a]]] output [a b c [a]] , as expected.
INFO: Running invalid instruction: [(REMDUP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMDUP .
INFO: Running invalid instruction: [(REMDUP [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REMDUP {1 2 3}]
INFO: error code is 7 .
INFO: error text is bf doesn't like {1 2 3} as input .
PASS: [(OR)] output false , as expected.
PASS: [(OR "true)] output true , as expected.
PASS: [(OR "false)] output false , as expected.
PASS: [(OR "false "false)] output false , as expected.
PASS: [(OR "true "false)] output true , as expected.
PASS: [(OR "false "true)] output true , as expected.
PASS: [(OR "true "true)] output true , as expected.
PASS: [(OR "false "FALSE "false "FALSE)] output false , as expected.
PASS: [(OR "false "FALSE "false "TRUE)] output true , as expected.
INFO: Running invalid instruction: [(OR 1)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 1 as input .
INFO: Running invalid instruction: [(OR 0)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 0 as input .
INFO: Running invalid instruction: [(OR "truex)]
INFO: error code is 7 .
INFO: error text is OR doesn't like truex as input .
INFO: Running invalid instruction: [(OR "falsex)]
INFO: error code is 7 .
INFO: error text is OR doesn't like falsex as input .
INFO: Running invalid instruction: [(OR "true 1)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 1 as input .
INFO: Running invalid instruction: [(OR 1 "true)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 1 as input .
INFO: Running invalid instruction: [(OR "false 0)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 0 as input .
INFO: Running invalid instruction: [(OR 0 "false)]
INFO: error code is 7 .
INFO: error text is OR doesn't like 0 as input .
PASS: [(AND)] output true , as expected.
PASS: [(AND "true)] output true , as expected.
PASS: [(AND "false)] output false , as expected.
PASS: [(AND "false "false)] output false , as expected.
PASS: [(AND "true "false)] output false , as expected.
PASS: [(AND "false "true)] output false , as expected.
PASS: [(AND "true "true)] output true , as expected.
PASS: [(AND "TRUE "true "TRUE "false)] output false , as expected.
PASS: [(AND "TRUE "true "TRUE "true)] output true , as expected.
INFO: Running invalid instruction: [(AND 1)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 1 as input .
INFO: Running invalid instruction: [(AND 0)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 0 as input .
INFO: Running invalid instruction: [(AND "truex)]
INFO: error code is 7 .
INFO: error text is AND doesn't like truex as input .
INFO: Running invalid instruction: [(AND "falsex)]
INFO: error code is 7 .
INFO: error text is AND doesn't like falsex as input .
INFO: Running invalid instruction: [(AND "true 1)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 1 as input .
INFO: Running invalid instruction: [(AND 1 "true)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 1 as input .
INFO: Running invalid instruction: [(AND "false 0)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 0 as input .
INFO: Running invalid instruction: [(AND 0 "false)]
INFO: error code is 7 .
INFO: error text is AND doesn't like 0 as input .
PASS: [(NOT "true)] output false , as expected.
PASS: [(NOT "false)] output true , as expected.
INFO: Running invalid instruction: [(NOT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NOT .
INFO: Running invalid instruction: [(NOT 0)]
INFO: error code is 7 .
INFO: error text is NOT doesn't like 0 as input .
INFO: Running invalid instruction: [(NOT "truex)]
INFO: error code is 7 .
INFO: error text is NOT doesn't like truex as input .
INFO: Running invalid instruction: [(NOT "true "true)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [APPLY "SUM [123]] output 123 , as expected.
PASS: [APPLY "SUM [100 20 3]] output 123 , as expected.
PASS: [APPLY "APPLYTEST.NONPRIMITIVE [120 3]] output 123 , as expected.
CALL: ERASE "ARRAYTOLIST
PASS: [APPLY "ARRAYTOLIST [{1 2 3}]] output [1 2 3] , as expected.
CALL: ERASE "procedureinworkingdirectory
PASS: [APPLY "procedureinworkingdirectory []] output 123 , as expected.
CALL: APPLY "APPLYTEST.NOOUTPUT []
PASS: [APPLY [1] []] output 1 , as expected.
PASS: [APPLY "APPLY [SUM [100 20 3]]] output 123 , as expected.
INFO: Running invalid instruction: [(APPLY "SUM)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to APPLY .
INFO: Running invalid instruction: [(APPLY "SUM [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [APPLY "NONEXISTENT [1 2 3]]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to NONEXISTENT .
INFO: Running invalid instruction: [APPLY "TO []]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to TO .
INFO: Running invalid instruction: [APPLY 1 []]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to 1 .
INFO: Running invalid instruction: [APPLY {1 2 3} [1 2 3]]
INFO: error code is 32 .
INFO: error text is APPLY doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [APPLY [1 2 3] [1 2 3]]
INFO: error code is 9 .
INFO: error text is You don't say what to do with 1 .
INFO: Running invalid instruction: [APPLY "SUM {1 2 3}]
INFO: error code is 32 .
INFO: error text is APPLY doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [APPLY "APPLYTEST.NONPRIMITIVE [1]]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to APPLYTEST.NONPRIMITIVE .
INFO: Running invalid instruction: [APPLY "APPLYTEST.NONPRIMITIVE [1 2 3]]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [APPLY [[A] IGNORE :A] []]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to [A] IGNORE :A .
INFO: Running invalid instruction: [APPLY [[A] IGNORE :A] [1 2]]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [APPLY [[A] [IGNORE :A]] []]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to [A] [IGNORE :A] .
INFO: Running invalid instruction: [APPLY [[A] [IGNORE :A]] [1 2]]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [APPLY [IGNORE ?2] [1]]
INFO: error code is 4 .
INFO: error text is ? doesn't like 2 as input .
INFO: Running invalid instruction: [APPLY [SHOW ?0] [a b c]]
PASS: error code is 7 , as expected.
INFO: error text is ? doesn't like 0 as input .
CALL: APPLY [] [1 2 3 4 5]
INFO: Running invalid instruction: [SHOW ?]
FAIL: Running [SHOW ?] did not throw an error.
PASS: [APPLYTEST.APPLYOUTPUT] output 3 , as expected.
PASS: [APPLY [APPLY [IGNORE ?1] ? ?] [[1 2 3]]] output [1 2 3] , as expected.
CALL: MAKE "lambda.function.ran 0
CALL: APPLY [[] MAKE "lambda.function.ran 1] []
PASS: [:lambda.function.ran] output 1 , as expected.
CALL: MAKE "lambda.function.ran 0
CALL: APPLY [[A] MAKE "lambda.function.ran :A] [1]
PASS: [:lambda.function.ran] output 1 , as expected.
PASS: [APPLY [[A] SUM 1 :A] [2]] output 3 , as expected.
PASS: [NAME? "ignored] output true , as expected.
PASS: [:input] output 6 , as expected.
PASS: [NAME? "ignored] output false , as expected.
PASS: [:input.before] output 5 , as expected.
CALL: APPLY [[] []] []
CALL: MAKE "lambda.function.ran 0
CALL: APPLY [[] [MAKE "lambda.function.ran 1]] []
PASS: [:lambda.function.ran] output 1 , as expected.
CALL: MAKE "lambda.function.ran 0
CALL: APPLY [[A] [MAKE "lambda.function.ran :A]] [1]
PASS: [:lambda.function.ran] output 1 , as expected.
CALL: MAKE "lambda.function.ran "0
CALL: APPLY [[A] [] [MAKE "lambda.function.ran :A] []] [1]
PASS: [:lambda.function.ran] output 1 , as expected.
PASS: [APPLY [[A] [OUTPUT SUM 1 :A]] [2]] output 3 , as expected.
PASS: [NAME? "ignored] output true , as expected.
PASS: [:input] output 6 , as expected.
PASS: [NAME? "ignored] output false , as expected.
PASS: [:input.before] output 5 , as expected.
CALL: MAKE "lambda.function.ran "false
CALL: APPLY [MAKE "lambda.function.ran "true] []
PASS: [:lambda.function.ran] output true , as expected.
CALL: MAKE "lambda.function.ran "false
CALL: APPLY [MAKE "lambda.function.ran ?] [true]
PASS: [:lambda.function.ran] output true , as expected.
CALL: MAKE "lambda.function.ran "false
CALL: APPLY [APPLY [MAKE "lambda.function.ran ?] ?] [[true]]
PASS: [:lambda.function.ran] output true , as expected.
PASS: [APPLY [SUM 1 ?] [2]] output 3 , as expected.
PASS: [APPLY [IGNORE APPLY [1] [BAD] ?] [GOOD]] output GOOD , as expected.
CALL: MAKE "list []
CALL: REPEAT 5 [MAKE "list LPUT REPCOUNT :list]
PASS: [:list] output [1 2 3 4 5] , as expected.
CALL: REPEAT 0 [REPORTTESTFAILED [REPEAT 0 executed the body]]
CALL: MAKE "list []
CALL: REPEAT 2 [MAKE "list LPUT "X :list REPEAT 3 [MAKE "list LPUT "Y :list]]
PASS: [:list] output [X Y Y Y X Y Y Y] , as expected.
CALL: REPEATTEST.STOPINREPEAT
PASS: [REPEATTEST.OUTPUTINREPEAT] output 50 , as expected.
INFO: Running invalid instruction: [REPEATTEST.ERRORINREPEAT]
PASS: error code is 21 , as expected.
INFO: error text is Throw "Error .
INFO: Running invalid instruction: [(REPEAT 100)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REPEAT .
INFO: Running invalid instruction: [(REPEAT 100 [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REPEAT "word []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like word as input .
INFO: Running invalid instruction: [REPEAT [1] []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like [1] as input .
INFO: Running invalid instruction: [REPEAT {1} []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like {1} as input .
INFO: Running invalid instruction: [REPEAT 12.3 []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like 12.3 as input .
INFO: Running invalid instruction: [REPEAT -1 []]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like -1 as input .
INFO: Running invalid instruction: [REPEAT 0 {}]
INFO: error code is 7 .
INFO: error text is REPEAT doesn't like {} as input .
CALL: FOREVERTEST.STOPINFOREVER
PASS: [FOREVERTEST.OUTPUTINFOREVER] output [1 2 3 4 5] , as expected.
INFO: Running invalid instruction: [FOREVERTEST.ERRORINFOREVER]
PASS: error code is 21 , as expected.
INFO: error text is Throw "Error .
INFO: Running invalid instruction: [FOREVER [FOREVER [IF REPCOUNT = 100 [THROW "ERROR]]]]
PASS: error code is 21 , as expected.
INFO: error text is Throw "Error .
INFO: Running invalid instruction: [(FOREVER)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FOREVER .
INFO: Running invalid instruction: [(FOREVER [FORWARD 1] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FOREVER {}]
INFO: error code is 7 .
INFO: error text is FOREVER doesn't like {} as input .
INFO: Running invalid instruction: [FOREVER 100]
PASS: error code is 9 , as expected.
INFO: error text is You don't say what to do with 100 .
PASS: [REPCOUNT] output -1 , as expected.
PASS: [REPCOUNT] output -1 , as expected.
CALL: MAKE "list []
CALL: REPEAT 2 [MAKE "list LPUT REPCOUNT :list REPEAT 3 [MAKE "list LPUT REPCOUNT :list]]
PASS: [:list] output [1 1 2 3 2 1 2 3] , as expected.
PASS: [COUNT :word] output 1000 , as expected.
PASS: REPEAT in main loop did not change REPCOUNT in timer event
PASS: REPEAT in main loop did not change REPCOUNT in timer event
INFO: Running invalid instruction: [(REPCOUNT "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: FOREACH [abc def ghi] [QUEUE "questionmarklist ? QUEUE "hashlist # QUEUE "restlist ?REST]
PASS: [:questionmarklist] output [abc def ghi] , as expected.
PASS: [:hashlist] output [1 2 3] , as expected.
PASS: [:restlist] output [[def ghi] [ghi] []] , as expected.
CALL: FOREACH "xyz [QUEUE "questionmarklist ? QUEUE "hashlist # QUEUE "restlist ?REST]
PASS: [:questionmarklist] output [x y z] , as expected.
PASS: [:hashlist] output [1 2 3] , as expected.
PASS: [:restlist] output [yz z ] , as expected.
CALL: (FOREACH [a b c] [x y z] [QUEUE "questionmarklist (LIST ?1 ?2) QUEUE "hashlist # QUEUE "restlist (LIST (?REST 1) (?REST 2))] )
PASS: [:questionmarklist] output [[a x] [b y] [c z]] , as expected.
PASS: [:hashlist] output [1 2 3] , as expected.
PASS: [:restlist] output [[[b c] [y z]] [[c] [z]] [[] []]] , as expected.
INFO: Running FOREACH [1 2 3] [STOP]
INFO: Running FOREACH with an OUTPUT in the instruction list
PASS: [FOREACHTEST.OUTPUT.WORKER] output 2 , as expected.
INFO: Running FOREACH with an OUTPUT ? in the instruction list
PASS: [FOREACHTEST.OUTPUT.FROM.VARIABLE.WORKER [a b c]] output a , as expected.
INFO: Running invalid instruction: [(FOREACH [1 2 3] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FOREACH .
INFO: Running invalid instruction: [FOREACH {1 2 3} [PRINT ?]]
PASS: error code is 7 , as expected.
INFO: error text is bfs doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [FOREACH [1 2 3] "badinput]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to badinput .
PASS: [0 + 0] output 0 , as expected.
PASS: [0 + 1] output 1 , as expected.
PASS: [0 + -1] output -1 , as expected.
PASS: [5 + 0] output 5 , as expected.
PASS: [5 + 1] output 6 , as expected.
PASS: [5 + -1] output 4 , as expected.
PASS: [-5 + 0] output -5 , as expected.
PASS: [-5 + 1] output -4 , as expected.
PASS: [-5 + -1] output -6 , as expected.
PASS: [SUM 0 0] output 0 , as expected.
PASS: [SUM 0 1] output 1 , as expected.
PASS: [SUM 0 -1] output -1 , as expected.
PASS: [SUM 5 0] output 5 , as expected.
PASS: [SUM 5 1] output 6 , as expected.
PASS: [SUM 5 -1] output 4 , as expected.
PASS: [SUM "1 "2] output 3 , as expected.
PASS: [SUM 1e40 2e39] output 1.2e+40 , as expected.
PASS: [(SUM)] output 0 , as expected.
PASS: [(SUM 5)] output 5 , as expected.
PASS: [(SUM 1 2 3 4 5)] output 15 , as expected.
PASS: [(SUM 1 2.5 3 4.5 5)] output 16 , as expected.
INFO: Running invalid instruction: [[] + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like [] as input .
INFO: Running invalid instruction: [[1] + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like [1] as input .
INFO: Running invalid instruction: [{} + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like {} as input .
INFO: Running invalid instruction: [{1} + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like {1} as input .
INFO: Running invalid instruction: ["one + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like one as input .
INFO: Running invalid instruction: ["1a + 2]
INFO: error code is 7 .
INFO: error text is + doesn't like 1a as input .
INFO: Running invalid instruction: [1 + []]
INFO: error code is 7 .
INFO: error text is + doesn't like [] as input .
INFO: Running invalid instruction: [1 + [2]]
INFO: error code is 7 .
INFO: error text is + doesn't like [2] as input .
INFO: Running invalid instruction: [1 + {}]
INFO: error code is 7 .
INFO: error text is + doesn't like {} as input .
INFO: Running invalid instruction: [1 + {2}]
INFO: error code is 7 .
INFO: error text is + doesn't like {2} as input .
INFO: Running invalid instruction: [1 + "two]
INFO: error code is 7 .
INFO: error text is + doesn't like two as input .
INFO: Running invalid instruction: [1 + "2a]
INFO: error code is 7 .
INFO: error text is + doesn't like 2a as input .
INFO: Running invalid instruction: [SUM [] 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [] as input .
INFO: Running invalid instruction: [SUM [1] 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [1] as input .
INFO: Running invalid instruction: [SUM {} 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {} as input .
INFO: Running invalid instruction: [SUM {1} 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {1} as input .
INFO: Running invalid instruction: [SUM "one 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like one as input .
INFO: Running invalid instruction: [SUM "1a 2]
INFO: error code is 7 .
INFO: error text is SUM doesn't like 1a as input .
INFO: Running invalid instruction: [SUM 1 []]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [] as input .
INFO: Running invalid instruction: [SUM 1 [2]]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [2] as input .
INFO: Running invalid instruction: [SUM 1 {}]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {} as input .
INFO: Running invalid instruction: [SUM 1 {2}]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {2} as input .
INFO: Running invalid instruction: [SUM 1 "two]
INFO: error code is 7 .
INFO: error text is SUM doesn't like two as input .
INFO: Running invalid instruction: [SUM 1 "2a]
INFO: error code is 7 .
INFO: error text is SUM doesn't like 2a as input .
INFO: Running invalid instruction: [(SUM 1 2 [] )]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [] as input .
INFO: Running invalid instruction: [(SUM 1 2 [3] )]
INFO: error code is 7 .
INFO: error text is SUM doesn't like [3] as input .
INFO: Running invalid instruction: [(SUM 1 2 {} )]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {} as input .
INFO: Running invalid instruction: [(SUM 1 2 {3} )]
INFO: error code is 7 .
INFO: error text is SUM doesn't like {3} as input .
INFO: Running invalid instruction: [(SUM 1 2 "three)]
INFO: error code is 7 .
INFO: error text is SUM doesn't like three as input .
INFO: Running invalid instruction: [(SUM 1 2 "3a)]
INFO: error code is 7 .
INFO: error text is SUM doesn't like 3a as input .
PASS: [0 - 0] output 0 , as expected.
PASS: [0 - 1] output -1 , as expected.
PASS: [0 - -1] output 1 , as expected.
PASS: [5 - 0] output 5 , as expected.
PASS: [5 - 1] output 4 , as expected.
PASS: [5 - -1] output 6 , as expected.
PASS: [-5 - 0] output -5 , as expected.
PASS: [-5 - 1] output -6 , as expected.
PASS: [-5 - -1] output -4 , as expected.
PASS: [DIFFERENCE 0 0] output 0 , as expected.
PASS: [DIFFERENCE 0 1] output -1 , as expected.
PASS: [DIFFERENCE 0 -1] output 1 , as expected.
PASS: [DIFFERENCE 5 0] output 5 , as expected.
PASS: [DIFFERENCE 5 1] output 4 , as expected.
PASS: [DIFFERENCE 5 -1] output 6 , as expected.
PASS: [DIFFERENCE "3 "2] output 1 , as expected.
PASS: [DIFFERENCE 1.2e40 2e39] output 1e+40 , as expected.
INFO: Running invalid instruction: [(DIFFERENCE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DIFFERENCE .
INFO: Running invalid instruction: [(DIFFERENCE 5)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DIFFERENCE .
INFO: Running invalid instruction: [(DIFFERENCE 5 6 7)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [[] - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like [] as input .
INFO: Running invalid instruction: [[1] - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like [1] as input .
INFO: Running invalid instruction: [{} - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like {} as input .
INFO: Running invalid instruction: [{1} - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like {1} as input .
INFO: Running invalid instruction: ["one - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like one as input .
INFO: Running invalid instruction: ["1a - 2]
INFO: error code is 7 .
INFO: error text is - doesn't like 1a as input .
INFO: Running invalid instruction: [1 - []]
INFO: error code is 7 .
INFO: error text is - doesn't like [] as input .
INFO: Running invalid instruction: [1 - [2]]
INFO: error code is 7 .
INFO: error text is - doesn't like [2] as input .
INFO: Running invalid instruction: [1 - {}]
INFO: error code is 7 .
INFO: error text is - doesn't like {} as input .
INFO: Running invalid instruction: [1 - {2}]
INFO: error code is 7 .
INFO: error text is - doesn't like {2} as input .
INFO: Running invalid instruction: [1 - "two]
INFO: error code is 7 .
INFO: error text is - doesn't like two as input .
INFO: Running invalid instruction: [1 - "2a]
INFO: error code is 7 .
INFO: error text is - doesn't like 2a as input .
INFO: Running invalid instruction: [DIFFERENCE [] 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like [] as input .
INFO: Running invalid instruction: [DIFFERENCE [1] 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like [1] as input .
INFO: Running invalid instruction: [DIFFERENCE {} 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like {} as input .
INFO: Running invalid instruction: [DIFFERENCE {1} 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like {1} as input .
INFO: Running invalid instruction: [DIFFERENCE "one 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like one as input .
INFO: Running invalid instruction: [DIFFERENCE "1a 2]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like 1a as input .
INFO: Running invalid instruction: [DIFFERENCE 1 []]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like [] as input .
INFO: Running invalid instruction: [DIFFERENCE 1 [2]]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like [2] as input .
INFO: Running invalid instruction: [DIFFERENCE 1 {}]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like {} as input .
INFO: Running invalid instruction: [DIFFERENCE 1 {2}]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like {2} as input .
INFO: Running invalid instruction: [DIFFERENCE 1 "two]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like two as input .
INFO: Running invalid instruction: [DIFFERENCE 1 "2a]
INFO: error code is 7 .
INFO: error text is DIFFERENCE doesn't like 2a as input .
PASS: [-0] output 0 , as expected.
PASS: [MINUS 0] output 0 , as expected.
PASS: [MINUS 0] output 0 , as expected.
PASS: [MINUS 2] output -2 , as expected.
PASS: [MINUS -2] output 2 , as expected.
PASS: [MINUS -2e20] output 2e+20 , as expected.
INFO: Running invalid instruction: [MINUS []]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like [] as input .
INFO: Running invalid instruction: [MINUS [1]]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like [1] as input .
INFO: Running invalid instruction: [MINUS {}]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like {} as input .
INFO: Running invalid instruction: [MINUS {1}]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like {1} as input .
INFO: Running invalid instruction: [MINUS "one]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like one as input .
INFO: Running invalid instruction: [MINUS "1a]
INFO: error code is 7 .
INFO: error text is MINUS doesn't like 1a as input .
INFO: Running invalid instruction: [(MINUS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MINUS .
INFO: Running invalid instruction: [(MINUS 1 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [0 * 0] output 0 , as expected.
PASS: [0 * 1] output 0 , as expected.
PASS: [1 * 0] output 0 , as expected.
PASS: [2 * 4] output 8 , as expected.
PASS: [4 * 2] output 8 , as expected.
PASS: [-2 * 4] output -8 , as expected.
PASS: [2 * -4] output -8 , as expected.
PASS: [-2 * -4] output 8 , as expected.
PASS: ["2 * "4] output 8 , as expected.
PASS: [1e10 * 2e20] output 2e+30 , as expected.
PASS: [1e200 * 1e200] output +INF , as expected.
PASS: [1e200 * -1e200] output -INF , as expected.
PASS: [-1e200 * -1e200] output +INF , as expected.
PASS: [1e200 * 1e-200] output 1 , as expected.
PASS: [PRODUCT 0 0] output 0 , as expected.
PASS: [PRODUCT 0 1] output 0 , as expected.
PASS: [PRODUCT 1 0] output 0 , as expected.
PASS: [PRODUCT 2 4] output 8 , as expected.
PASS: [PRODUCT 4 2] output 8 , as expected.
PASS: [PRODUCT -2 4] output -8 , as expected.
PASS: [PRODUCT 2 -4] output -8 , as expected.
PASS: [PRODUCT -2 -4] output 8 , as expected.
PASS: [PRODUCT "2 "4] output 8 , as expected.
PASS: [PRODUCT 1e10 2e20] output 2e+30 , as expected.
PASS: [PRODUCT 1e200 1e200] output +INF , as expected.
PASS: [PRODUCT 1e200 -1e200] output -INF , as expected.
PASS: [PRODUCT -1e200 -1e200] output +INF , as expected.
PASS: [PRODUCT 1e200 1e-200] output 1 , as expected.
PASS: [(PRODUCT)] output 1 , as expected.
PASS: [(PRODUCT 5)] output 5 , as expected.
PASS: [(PRODUCT 1 2 3 4 5)] output 120 , as expected.
PASS: [(PRODUCT 1 2 3 4 5 0.5)] output 60 , as expected.
PASS: [(PRODUCT 1.10 1 2 3 4 5)] output 132 , as expected.
FAIL: [(PRODUCT 1.01 1 2 3 4 5)] output 121.2 . We expected 121.2 .
INFO: Running invalid instruction: [[] * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like [] as input .
INFO: Running invalid instruction: [[1] * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like [1] as input .
INFO: Running invalid instruction: [{} * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like {} as input .
INFO: Running invalid instruction: [{1} * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like {1} as input .
INFO: Running invalid instruction: ["one * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like one as input .
INFO: Running invalid instruction: ["1a * 2]
INFO: error code is 7 .
INFO: error text is * doesn't like 1a as input .
INFO: Running invalid instruction: [1 * []]
INFO: error code is 7 .
INFO: error text is * doesn't like [] as input .
INFO: Running invalid instruction: [1 * [2]]
INFO: error code is 7 .
INFO: error text is * doesn't like [2] as input .
INFO: Running invalid instruction: [1 * {}]
INFO: error code is 7 .
INFO: error text is * doesn't like {} as input .
INFO: Running invalid instruction: [1 * {2}]
INFO: error code is 7 .
INFO: error text is * doesn't like {2} as input .
INFO: Running invalid instruction: [1 * "two]
INFO: error code is 7 .
INFO: error text is * doesn't like two as input .
INFO: Running invalid instruction: [1 * "2a]
INFO: error code is 7 .
INFO: error text is * doesn't like 2a as input .
INFO: Running invalid instruction: [PRODUCT [] 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [] as input .
INFO: Running invalid instruction: [PRODUCT [1] 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [1] as input .
INFO: Running invalid instruction: [PRODUCT {} 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {} as input .
INFO: Running invalid instruction: [PRODUCT {1} 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {1} as input .
INFO: Running invalid instruction: [PRODUCT "one 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like one as input .
INFO: Running invalid instruction: [PRODUCT "1a 2]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like 1a as input .
INFO: Running invalid instruction: [PRODUCT 1 []]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [] as input .
INFO: Running invalid instruction: [PRODUCT 1 [2]]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [2] as input .
INFO: Running invalid instruction: [PRODUCT 1 {}]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {} as input .
INFO: Running invalid instruction: [PRODUCT 1 {2}]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {2} as input .
INFO: Running invalid instruction: [PRODUCT 1 "two]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like two as input .
INFO: Running invalid instruction: [PRODUCT 1 "2a]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like 2a as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 [] )]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [] as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 [3] )]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like [3] as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 {} )]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {} as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 {3} )]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like {3} as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 "three)]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like three as input .
INFO: Running invalid instruction: [(PRODUCT 1 2 "3a)]
INFO: error code is 7 .
INFO: error text is PRODUCT doesn't like 3a as input .
PASS: [5 / 2] output 2.5 , as expected.
PASS: [5 / -2] output -2.5 , as expected.
PASS: [-5 / 2] output -2.5 , as expected.
PASS: [-5 / -2] output 2.5 , as expected.
PASS: [4 / 2] output 2 , as expected.
PASS: [0 / 2] output 0 , as expected.
PASS: [2.2 / 2] output 1.1 , as expected.
FAIL: [6.6 / 2.2] output 3 . We expected 3 .
PASS: [2e40 / 2e20] output 1e+20 , as expected.
PASS: [QUOTIENT 5 2] output 2.5 , as expected.
PASS: [QUOTIENT 5 -2] output -2.5 , as expected.
PASS: [QUOTIENT -5 2] output -2.5 , as expected.
PASS: [QUOTIENT -5 -2] output 2.5 , as expected.
PASS: [QUOTIENT 4 2] output 2 , as expected.
PASS: [QUOTIENT 0 2] output 0 , as expected.
PASS: [QUOTIENT 2.2 2] output 1.1 , as expected.
FAIL: [QUOTIENT 6.6 2.2] output 3 . We expected 3 .
PASS: [QUOTIENT "5 "2] output 2.5 , as expected.
PASS: [QUOTIENT 2e40 2e20] output 1e+20 , as expected.
PASS: [(QUOTIENT 1)] output 1 , as expected.
PASS: [(QUOTIENT 10)] output 0.1 , as expected.
PASS: [(QUOTIENT 0.5)] output 2 , as expected.
PASS: [(QUOTIENT 1e40)] output 1e-40 , as expected.
INFO: Running invalid instruction: [(QUOTIENT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to QUOTIENT .
INFO: Running invalid instruction: [(QUOTIENT 5 6 7)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [[] / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like [] as input .
INFO: Running invalid instruction: [[1] / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like [1] as input .
INFO: Running invalid instruction: [{} / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like {} as input .
INFO: Running invalid instruction: [{1} / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like {1} as input .
INFO: Running invalid instruction: ["one / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like one as input .
INFO: Running invalid instruction: ["1a / 2]
INFO: error code is 7 .
INFO: error text is / doesn't like 1a as input .
INFO: Running invalid instruction: [1 / 0]
INFO: error code is 4 .
INFO: error text is / doesn't like 0 as input .
INFO: Running invalid instruction: [1 / []]
INFO: error code is 7 .
INFO: error text is / doesn't like [] as input .
INFO: Running invalid instruction: [1 / [2]]
INFO: error code is 7 .
INFO: error text is / doesn't like [2] as input .
INFO: Running invalid instruction: [1 / {}]
INFO: error code is 7 .
INFO: error text is / doesn't like {} as input .
INFO: Running invalid instruction: [1 / {2}]
INFO: error code is 7 .
INFO: error text is / doesn't like {2} as input .
INFO: Running invalid instruction: [1 / "two]
INFO: error code is 7 .
INFO: error text is / doesn't like two as input .
INFO: Running invalid instruction: [1 / "2a]
INFO: error code is 7 .
INFO: error text is / doesn't like 2a as input .
INFO: Running invalid instruction: [(QUOTIENT 0 )]
INFO: error code is 4 .
INFO: error text is QUOTIENT doesn't like 0 as input .
INFO: Running invalid instruction: [(QUOTIENT [] )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [] as input .
INFO: Running invalid instruction: [(QUOTIENT [1] )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [1] as input .
INFO: Running invalid instruction: [(QUOTIENT {} )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {} as input .
INFO: Running invalid instruction: [(QUOTIENT {1} )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {1} as input .
INFO: Running invalid instruction: [(QUOTIENT "one )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like one as input .
INFO: Running invalid instruction: [(QUOTIENT "1a )]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like 1a as input .
INFO: Running invalid instruction: [QUOTIENT [] 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [] as input .
INFO: Running invalid instruction: [QUOTIENT [1] 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [1] as input .
INFO: Running invalid instruction: [QUOTIENT {} 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {} as input .
INFO: Running invalid instruction: [QUOTIENT {1} 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {1} as input .
INFO: Running invalid instruction: [QUOTIENT "one 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like one as input .
INFO: Running invalid instruction: [QUOTIENT "1a 2]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like 1a as input .
INFO: Running invalid instruction: [QUOTIENT 1 0]
INFO: error code is 4 .
INFO: error text is QUOTIENT doesn't like 0 as input .
INFO: Running invalid instruction: [QUOTIENT 1 []]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [] as input .
INFO: Running invalid instruction: [QUOTIENT 1 [2]]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like [2] as input .
INFO: Running invalid instruction: [QUOTIENT 1 {}]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {} as input .
INFO: Running invalid instruction: [QUOTIENT 1 {2}]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like {2} as input .
INFO: Running invalid instruction: [QUOTIENT 1 "two]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like two as input .
INFO: Running invalid instruction: [QUOTIENT 1 "2a]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like 2a as input .
INFO: Running invalid instruction: [QUOTIENT 0 "2a]
INFO: error code is 7 .
INFO: error text is QUOTIENT doesn't like 2a as input .
PASS: [REMAINDER 5 6] output 5 , as expected.
PASS: [REMAINDER 6 2] output 0 , as expected.
PASS: [REMAINDER 0 2] output 0 , as expected.
PASS: [REMAINDER 5 5] output 0 , as expected.
PASS: [REMAINDER 6 4] output 2 , as expected.
PASS: [REMAINDER -6 4] output -2 , as expected.
PASS: [REMAINDER 6 -4] output 2 , as expected.
PASS: [REMAINDER -6 -4] output -2 , as expected.
PASS: [REMAINDER "5 "2] output 1 , as expected.
INFO: Running invalid instruction: [(REMAINDER)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMAINDER .
INFO: Running invalid instruction: [(REMAINDER 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMAINDER .
INFO: Running invalid instruction: [(REMAINDER 5 6 7)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REMAINDER [] 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like [] as input .
INFO: Running invalid instruction: [REMAINDER [1] 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like [1] as input .
INFO: Running invalid instruction: [REMAINDER {} 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like {} as input .
INFO: Running invalid instruction: [REMAINDER {1} 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like {1} as input .
INFO: Running invalid instruction: [REMAINDER "one 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like one as input .
INFO: Running invalid instruction: [REMAINDER "1a 2]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like 1a as input .
INFO: Running invalid instruction: [REMAINDER 1 0]
INFO: error code is 4 .
INFO: error text is REMAINDER doesn't like 0 as input .
INFO: Running invalid instruction: [REMAINDER 1 []]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like [] as input .
INFO: Running invalid instruction: [REMAINDER 1 [2]]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like [2] as input .
INFO: Running invalid instruction: [REMAINDER 1 {}]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like {} as input .
INFO: Running invalid instruction: [REMAINDER 1 {2}]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like {2} as input .
INFO: Running invalid instruction: [REMAINDER 1 "two]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like two as input .
INFO: Running invalid instruction: [REMAINDER 1 "2a]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like 2a as input .
INFO: Running invalid instruction: [REMAINDER 0 "2a]
INFO: error code is 7 .
INFO: error text is REMAINDER doesn't like 2a as input .
PASS: [MODULO 5 6] output 5 , as expected.
PASS: [MODULO 6 2] output 0 , as expected.
PASS: [MODULO 0 2] output 0 , as expected.
PASS: [MODULO 5 5] output 0 , as expected.
PASS: [MODULO 6 4] output 2 , as expected.
PASS: [MODULO 6 -4] output -2 , as expected.
PASS: [MODULO -6 4] output 2 , as expected.
PASS: [MODULO -6 -4] output -2 , as expected.
PASS: [MODULO "5 "2] output 1 , as expected.
INFO: Running invalid instruction: [(MODULO)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MODULO .
INFO: Running invalid instruction: [(MODULO 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MODULO .
INFO: Running invalid instruction: [(MODULO 5 6 7)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [MODULO [] 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like [] as input .
INFO: Running invalid instruction: [MODULO [1] 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like [1] as input .
INFO: Running invalid instruction: [MODULO {} 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like {} as input .
INFO: Running invalid instruction: [MODULO {1} 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like {1} as input .
INFO: Running invalid instruction: [MODULO "one 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like one as input .
INFO: Running invalid instruction: [MODULO "1a 2]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like 1a as input .
INFO: Running invalid instruction: [MODULO 1 0]
INFO: error code is 4 .
INFO: error text is MODULO doesn't like 0 as input .
INFO: Running invalid instruction: [MODULO 1 []]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like [] as input .
INFO: Running invalid instruction: [MODULO 1 [2]]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like [2] as input .
INFO: Running invalid instruction: [MODULO 1 {}]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like {} as input .
INFO: Running invalid instruction: [MODULO 1 {2}]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like {2} as input .
INFO: Running invalid instruction: [MODULO 1 "two]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like two as input .
INFO: Running invalid instruction: [MODULO 1 "2a]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like 2a as input .
INFO: Running invalid instruction: [MODULO 0 "2a]
INFO: error code is 7 .
INFO: error text is MODULO doesn't like 2a as input .
PASS: [INT 0] output 0 , as expected.
PASS: [INT 8] output 8 , as expected.
PASS: [INT -8] output -8 , as expected.
PASS: [INT 8.9] output 8 , as expected.
PASS: [INT 8.1] output 8 , as expected.
PASS: [INT 8.9999999] output 8 , as expected.
PASS: [INT -8.9999999] output -8 , as expected.
PASS: [INT 2.3e40] output 2.3e+40 , as expected.
INFO: Running invalid instruction: [(INT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to INT .
INFO: Running invalid instruction: [(INT 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [INT []]
INFO: error code is 7 .
INFO: error text is INT doesn't like [] as input .
INFO: Running invalid instruction: [INT [1]]
INFO: error code is 7 .
INFO: error text is INT doesn't like [1] as input .
INFO: Running invalid instruction: [INT {}]
INFO: error code is 7 .
INFO: error text is INT doesn't like {} as input .
INFO: Running invalid instruction: [INT {1}]
INFO: error code is 7 .
INFO: error text is INT doesn't like {1} as input .
INFO: Running invalid instruction: [INT "one]
INFO: error code is 7 .
INFO: error text is INT doesn't like one as input .
INFO: Running invalid instruction: [INT "1a]
INFO: error code is 7 .
INFO: error text is INT doesn't like 1a as input .
PASS: [ROUND 0] output 0 , as expected.
PASS: [ROUND 8] output 8 , as expected.
PASS: [ROUND -8] output -8 , as expected.
PASS: [ROUND 8.1] output 8 , as expected.
PASS: [ROUND 8.9] output 9 , as expected.
PASS: [ROUND 8.5] output 9 , as expected.
PASS: [ROUND 8.49] output 8 , as expected.
PASS: [ROUND -8.9] output -9 , as expected.
PASS: [ROUND -8.1] output -8 , as expected.
PASS: [ROUND 2.3e40] output 2.3e+40 , as expected.
INFO: Running invalid instruction: [(ROUND)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ROUND .
INFO: Running invalid instruction: [(ROUND 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ROUND []]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like [] as input .
INFO: Running invalid instruction: [ROUND [1]]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like [1] as input .
INFO: Running invalid instruction: [ROUND {}]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like {} as input .
INFO: Running invalid instruction: [ROUND {1}]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like {1} as input .
INFO: Running invalid instruction: [ROUND "one]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like one as input .
INFO: Running invalid instruction: [ROUND "1a]
INFO: error code is 7 .
INFO: error text is ROUND doesn't like 1a as input .
PASS: [ABS 0] output 0 , as expected.
PASS: [ABS 8] output 8 , as expected.
PASS: [ABS -8] output 8 , as expected.
PASS: [ABS 8.1] output 8.1 , as expected.
PASS: [ABS -8.1] output 8.1 , as expected.
PASS: [ABS 2.3e40] output 2.3e+40 , as expected.
INFO: Running invalid instruction: [(ABS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ABS .
INFO: Running invalid instruction: [(ABS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ABS []]
INFO: error code is 7 .
INFO: error text is > doesn't like [] as input .
INFO: Running invalid instruction: [ABS [1]]
INFO: error code is 7 .
INFO: error text is > doesn't like [1] as input .
INFO: Running invalid instruction: [ABS {}]
INFO: error code is 7 .
INFO: error text is > doesn't like {} as input .
INFO: Running invalid instruction: [ABS {1}]
INFO: error code is 7 .
INFO: error text is > doesn't like {1} as input .
INFO: Running invalid instruction: [ABS "one]
INFO: error code is 7 .
INFO: error text is > doesn't like one as input .
INFO: Running invalid instruction: [ABS "1a]
INFO: error code is 7 .
INFO: error text is > doesn't like 1a as input .
PASS: [SIGN 0] output 0 , as expected.
PASS: [SIGN 8] output 1 , as expected.
PASS: [SIGN -8] output -1 , as expected.
PASS: [SIGN 0.01] output 1 , as expected.
PASS: [SIGN -0.01] output -1 , as expected.
PASS: [SIGN 98.6] output 1 , as expected.
PASS: [SIGN -98.6] output -1 , as expected.
PASS: [SIGN 2.3e40] output 1 , as expected.
INFO: Running invalid instruction: [(SIGN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SIGN .
INFO: Running invalid instruction: [(SIGN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SIGN []]
INFO: error code is 7 .
INFO: error text is > doesn't like [] as input .
INFO: Running invalid instruction: [SIGN [1]]
INFO: error code is 7 .
INFO: error text is > doesn't like [1] as input .
INFO: Running invalid instruction: [SIGN {}]
INFO: error code is 7 .
INFO: error text is > doesn't like {} as input .
INFO: Running invalid instruction: [SIGN {1}]
INFO: error code is 7 .
INFO: error text is > doesn't like {1} as input .
INFO: Running invalid instruction: [SIGN "one]
INFO: error code is 7 .
INFO: error text is > doesn't like one as input .
INFO: Running invalid instruction: [SIGN "1a]
INFO: error code is 7 .
INFO: error text is > doesn't like 1a as input .
PASS: [SQRT 0] output 0 , as expected.
PASS: [SQRT 4] output 2 , as expected.
PASS: [SQRT 9] output 3 , as expected.
PASS: [SQRT 1.44] output 1.2 , as expected.
FAIL: [SQRT 2] output 1.4142135623731 . We expected 1.4142135623731 .
PASS: [SQRT 1e40] output 1e+20 , as expected.
INFO: Running invalid instruction: [(SQRT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SQRT .
INFO: Running invalid instruction: [(SQRT 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SQRT -1]
INFO: error code is 4 .
INFO: error text is SQRT doesn't like -1 as input .
INFO: Running invalid instruction: [SQRT []]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like [] as input .
INFO: Running invalid instruction: [SQRT [1]]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like [1] as input .
INFO: Running invalid instruction: [SQRT {}]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like {} as input .
INFO: Running invalid instruction: [SQRT {1}]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like {1} as input .
INFO: Running invalid instruction: [SQRT "one]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like one as input .
INFO: Running invalid instruction: [SQRT "1a]
INFO: error code is 7 .
INFO: error text is SQRT doesn't like 1a as input .
PASS: [POWER 1 0] output 1 , as expected.
PASS: [POWER -1 0] output 1 , as expected.
PASS: [POWER 2 0] output 1 , as expected.
PASS: [POWER 1.23 0] output 1 , as expected.
PASS: [POWER 1e40 0] output 1 , as expected.
PASS: [POWER 0 1] output 0 , as expected.
PASS: [POWER 1 1] output 1 , as expected.
PASS: [POWER -1 1] output -1 , as expected.
PASS: [POWER 2 1] output 2 , as expected.
PASS: [POWER 1.23 1] output 1.23 , as expected.
PASS: [POWER 1e40 1] output 1e+40 , as expected.
PASS: [POWER 0 2] output 0 , as expected.
PASS: [POWER 1 2] output 1 , as expected.
PASS: [POWER -1 2] output 1 , as expected.
PASS: [POWER 2 2] output 4 , as expected.
PASS: [POWER 1.23 2] output 1.5129 , as expected.
PASS: [POWER 1e40 2] output 1e+80 , as expected.
PASS: [POWER 0 5] output 0 , as expected.
PASS: [POWER 1 5] output 1 , as expected.
PASS: [POWER -1 5] output -1 , as expected.
PASS: [POWER 2 5] output 32 , as expected.
FAIL: [POWER 1.1 5] output 1.61051 . We expected 1.61051 .
FAIL: [POWER -1.1 5] output -1.61051 . We expected -1.61051 .
PASS: [POWER 1e2 5] output 10000000000 , as expected.
FAIL: [POWER 1e-2 5] output 1e-10 . We expected 1e-10 .
PASS: [POWER 1 -1] output 1 , as expected.
PASS: [POWER 2 -1] output 0.5 , as expected.
PASS: [POWER 0.5 -1] output 2 , as expected.
PASS: [POWER 1e40 -1] output 1e-40 , as expected.
PASS: [POWER -1 -1] output -1 , as expected.
PASS: [POWER 1 2] output 1 , as expected.
PASS: [POWER 2 2] output 4 , as expected.
PASS: [POWER 1.23 2] output 1.5129 , as expected.
PASS: [POWER 1e40 -1] output 1e-40 , as expected.
PASS: [POWER -1 -1] output -1 , as expected.
PASS: [POWER 0 0.5] output 0 , as expected.
PASS: [POWER 4 0.5] output 2 , as expected.
PASS: [POWER 9 0.5] output 3 , as expected.
PASS: [POWER 1.44 0.5] output 1.2 , as expected.
FAIL: [POWER 2 0.5] output 1.4142135623731 . We expected 1.41421356237309 .
PASS: [POWER 1e40 0.5] output 1e+20 , as expected.
INFO: Running invalid instruction: [POWER 1e100 5]
INFO: error code is 4 .
INFO: error text is POWER doesn't like 5 as input .
INFO: Running invalid instruction: [POWER -1e100 5]
INFO: error code is 4 .
INFO: error text is POWER doesn't like 5 as input .
INFO: Running invalid instruction: [POWER 0 0]
INFO: error code is 4 .
INFO: error text is POWER doesn't like 0 as input .
INFO: Running invalid instruction: [POWER 0 -1]
INFO: error code is 4 .
INFO: error text is POWER doesn't like -1 as input .
INFO: Running invalid instruction: [POWER -1 0.5]
INFO: error code is 4 .
INFO: error text is POWER doesn't like 0.5 as input .
INFO: Running invalid instruction: [(POWER)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POWER .
INFO: Running invalid instruction: [(POWER 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POWER .
INFO: Running invalid instruction: [(POWER 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [POWER [] 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like [] as input .
INFO: Running invalid instruction: [POWER [1] 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like [1] as input .
INFO: Running invalid instruction: [POWER {} 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like {} as input .
INFO: Running invalid instruction: [POWER {1} 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like {1} as input .
INFO: Running invalid instruction: [POWER "one 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like one as input .
INFO: Running invalid instruction: [POWER "1a 2]
INFO: error code is 7 .
INFO: error text is POWER doesn't like 1a as input .
INFO: Running invalid instruction: [POWER 1 []]
INFO: error code is 7 .
INFO: error text is POWER doesn't like [] as input .
INFO: Running invalid instruction: [POWER 1 [2]]
INFO: error code is 7 .
INFO: error text is POWER doesn't like [2] as input .
INFO: Running invalid instruction: [POWER 1 {}]
INFO: error code is 7 .
INFO: error text is POWER doesn't like {} as input .
INFO: Running invalid instruction: [POWER 1 {2}]
INFO: error code is 7 .
INFO: error text is POWER doesn't like {2} as input .
INFO: Running invalid instruction: [POWER 1 "two]
INFO: error code is 7 .
INFO: error text is POWER doesn't like two as input .
INFO: Running invalid instruction: [POWER 1 "2a]
INFO: error code is 7 .
INFO: error text is POWER doesn't like 2a as input .
PASS: [EXP 0] output 1 , as expected.
FAIL: [EXP 1] output 2.71828182845905 . We expected 2.71828182845905 .
PASS: [EXP 2] output 7.38905609893065 , as expected.
FAIL: [EXP -1] output 0.367879441171442 . We expected 0.367879441171442 .
INFO: Running invalid instruction: [EXP 1e40]
INFO: error code is 4 .
INFO: error text is EXP doesn't like 1e+40 as input .
INFO: Running invalid instruction: [(EXP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to EXP .
INFO: Running invalid instruction: [(EXP 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [EXP []]
INFO: error code is 7 .
INFO: error text is EXP doesn't like [] as input .
INFO: Running invalid instruction: [EXP [1]]
INFO: error code is 7 .
INFO: error text is EXP doesn't like [1] as input .
INFO: Running invalid instruction: [EXP {}]
INFO: error code is 7 .
INFO: error text is EXP doesn't like {} as input .
INFO: Running invalid instruction: [EXP {1}]
INFO: error code is 7 .
INFO: error text is EXP doesn't like {1} as input .
INFO: Running invalid instruction: [EXP "one]
INFO: error code is 7 .
INFO: error text is EXP doesn't like one as input .
INFO: Running invalid instruction: [EXP "1a]
INFO: error code is 7 .
INFO: error text is EXP doesn't like 1a as input .
PASS: [LOG10 1] output 0 , as expected.
PASS: [LOG10 1e1] output 1 , as expected.
PASS: [LOG10 1e2] output 2 , as expected.
PASS: [LOG10 1e-2] output -2 , as expected.
PASS: [LOG10 1e100] output 100 , as expected.
FAIL: [LOG10 50] output 1.69897000433602 . We expected 1.69897000433602 .
INFO: Running invalid instruction: [(LOG10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOG10 .
INFO: Running invalid instruction: [(LOG10 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LOG10 0]
INFO: error code is 4 .
INFO: error text is LOG10 doesn't like 0 as input .
INFO: Running invalid instruction: [LOG10 -1]
INFO: error code is 4 .
INFO: error text is LOG10 doesn't like -1 as input .
INFO: Running invalid instruction: [LOG10 []]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like [] as input .
INFO: Running invalid instruction: [LOG10 [1]]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like [1] as input .
INFO: Running invalid instruction: [LOG10 {}]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like {} as input .
INFO: Running invalid instruction: [LOG10 {1}]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like {1} as input .
INFO: Running invalid instruction: [LOG10 "one]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like one as input .
INFO: Running invalid instruction: [LOG10 "1a]
INFO: error code is 7 .
INFO: error text is LOG10 doesn't like 1a as input .
PASS: [LN 1] output 0 , as expected.
FAIL: [LN 2.71828182845905] output 1 . We expected 1 .
FAIL: [LN 500] output 6.21460809842219 . We expected 6.21460809842219 .
INFO: Running invalid instruction: [(LN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LN .
INFO: Running invalid instruction: [(LN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LN 0]
INFO: error code is 4 .
INFO: error text is LN doesn't like 0 as input .
INFO: Running invalid instruction: [LN -1]
INFO: error code is 4 .
INFO: error text is LN doesn't like -1 as input .
INFO: Running invalid instruction: [LN []]
INFO: error code is 7 .
INFO: error text is LN doesn't like [] as input .
INFO: Running invalid instruction: [LN [1]]
INFO: error code is 7 .
INFO: error text is LN doesn't like [1] as input .
INFO: Running invalid instruction: [LN {}]
INFO: error code is 7 .
INFO: error text is LN doesn't like {} as input .
INFO: Running invalid instruction: [LN {1}]
INFO: error code is 7 .
INFO: error text is LN doesn't like {1} as input .
INFO: Running invalid instruction: [LN "one]
INFO: error code is 7 .
INFO: error text is LN doesn't like one as input .
INFO: Running invalid instruction: [LN "1a]
INFO: error code is 7 .
INFO: error text is LN doesn't like 1a as input .
PASS: [PI] output 3.14159265358979 , as expected.
INFO: Running invalid instruction: [(PI 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [GOLDENRATIO] output 1.61803398874989 , as expected.
INFO: Running invalid instruction: [(GOLDENRATIO 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [TAN 0] output 0 , as expected.
FAIL: [TAN 45] output 1 . We expected 1 .
FAIL: [TAN -45] output -1 . We expected -1 .
FAIL: [TAN 135] output -1 . We expected -1 .
FAIL: [TAN 225] output 1 . We expected 1 .
FAIL: [TAN 180] output -1.22514845490862e-16 . We expected 0 .
FAIL: [TAN 360] output -2.45029690981724e-16 . We expected 0 .
FAIL: [TAN 3600] output -2.45029690981724e-15 . We expected 0 .
PASS: [TAN 14.5] output 0.25861758435589 , as expected.
INFO: Running invalid instruction: [(TAN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TAN .
INFO: Running invalid instruction: [(TAN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [TAN 90]
FAIL: Running [TAN 90] did not throw an error.
INFO: Running invalid instruction: [TAN -90]
FAIL: Running [TAN -90] did not throw an error.
INFO: Running invalid instruction: [TAN 270]
FAIL: Running [TAN 270] did not throw an error.
INFO: Running invalid instruction: [TAN 3690]
FAIL: Running [TAN 3690] did not throw an error.
INFO: Running invalid instruction: [TAN []]
INFO: error code is 7 .
INFO: error text is TAN doesn't like [] as input .
INFO: Running invalid instruction: [TAN [1]]
INFO: error code is 7 .
INFO: error text is TAN doesn't like [1] as input .
INFO: Running invalid instruction: [TAN {}]
INFO: error code is 7 .
INFO: error text is TAN doesn't like {} as input .
INFO: Running invalid instruction: [TAN {1}]
INFO: error code is 7 .
INFO: error text is TAN doesn't like {1} as input .
INFO: Running invalid instruction: [TAN "one]
INFO: error code is 7 .
INFO: error text is TAN doesn't like one as input .
INFO: Running invalid instruction: [TAN "1a]
INFO: error code is 7 .
INFO: error text is TAN doesn't like 1a as input .
PASS: [RADTAN ( 0 )] output 0 , as expected.
FAIL: [RADTAN ( 0.25 * PI)] output 1 . We expected 1 .
FAIL: [RADTAN (-0.25 * PI)] output -1 . We expected -1 .
FAIL: [RADTAN ( 0.75 * PI)] output -1 . We expected -1 .
FAIL: [RADTAN ( 1.25 * PI)] output 1 . We expected 1 .
FAIL: [RADTAN ( PI )] output -1.22514845490862e-16 . We expected 0 .
FAIL: [RADTAN ( 2 * PI )] output -2.45029690981724e-16 . We expected 0 .
FAIL: [RADTAN ( 10 * PI )] output -1.22514845490862e-15 . We expected 0 .
PASS: [RADTAN ( 14.5 )] output -2.63406913250383 , as expected.
INFO: Running invalid instruction: [(RADTAN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADTAN .
INFO: Running invalid instruction: [(RADTAN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADTAN ( 0.5 * PI)]
FAIL: Running [RADTAN ( 0.5 * PI)] did not throw an error.
INFO: Running invalid instruction: [RADTAN (-0.5 * PI)]
FAIL: Running [RADTAN (-0.5 * PI)] did not throw an error.
INFO: Running invalid instruction: [RADTAN ( 1.5 * PI)]
FAIL: Running [RADTAN ( 1.5 * PI)] did not throw an error.
INFO: Running invalid instruction: [RADTAN ( 100 * PI)]
FAIL: Running [RADTAN ( 100 * PI)] did not throw an error.
INFO: Running invalid instruction: [RADTAN []]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like [] as input .
INFO: Running invalid instruction: [RADTAN [1]]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like [1] as input .
INFO: Running invalid instruction: [RADTAN {}]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like {} as input .
INFO: Running invalid instruction: [RADTAN {1}]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like {1} as input .
INFO: Running invalid instruction: [RADTAN "one]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like one as input .
INFO: Running invalid instruction: [RADTAN "1a]
INFO: error code is 7 .
INFO: error text is RADTAN doesn't like 1a as input .
PASS: [ARCTAN 0] output 0 , as expected.
PASS: [ARCTAN 1] output 45 , as expected.
PASS: [ARCTAN -1] output -45 , as expected.
PASS: [ARCTAN 14.5] output 86.0548137709624 , as expected.
PASS: [(ARCTAN 1 0 )] output 0 , as expected.
PASS: [(ARCTAN 1 1 )] output 45 , as expected.
PASS: [(ARCTAN 1 -1 )] output -45 , as expected.
PASS: [(ARCTAN -1 1 )] output 135 , as expected.
PASS: [(ARCTAN -1 -1 )] output -135 , as expected.
PASS: [(ARCTAN 1 14.5)] output 86.0548137709624 , as expected.
PASS: [(ARCTAN 2 0)] output 0 , as expected.
PASS: [(ARCTAN 2 2)] output 45 , as expected.
PASS: [(ARCTAN 2 -2)] output -45 , as expected.
PASS: [(ARCTAN 2 29)] output 86.0548137709624 , as expected.
PASS: [(ARCTAN 0 1)] output 90 , as expected.
PASS: [(ARCTAN 1 100)] output 89.4270613023165 , as expected.
INFO: Running invalid instruction: [(ARCTAN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARCTAN .
INFO: Running invalid instruction: [(ARCTAN 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ARCTAN []]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [ARCTAN [1]]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [ARCTAN {}]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [ARCTAN {1}]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [ARCTAN "one]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like one as input .
INFO: Running invalid instruction: [ARCTAN "1a]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like 1a as input .
INFO: Running invalid instruction: [(ARCTAN [] 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [(ARCTAN [1] 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [(ARCTAN {} 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [(ARCTAN {1} 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [(ARCTAN "one 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like one as input .
INFO: Running invalid instruction: [(ARCTAN "1a 1)]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like 1a as input .
INFO: Running invalid instruction: [(ARCTAN 1 [] )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [(ARCTAN 1 [1] )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [(ARCTAN 1 {} )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [(ARCTAN 1 {1} )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [(ARCTAN 1 "one )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like one as input .
INFO: Running invalid instruction: [(ARCTAN 1 "1a )]
INFO: error code is 7 .
INFO: error text is ARCTAN doesn't like 1a as input .
PASS: [RADARCTAN 0] output 0 , as expected.
PASS: [RADARCTAN 1] output 0.785398163397448 , as expected.
PASS: [RADARCTAN -1] output -0.785398163397448 , as expected.
PASS: [RADARCTAN 14.5] output 1.50193983749385 , as expected.
PASS: [(RADARCTAN 1 0 )] output 0 , as expected.
PASS: [(RADARCTAN 1 1 )] output 0.785398163397448 , as expected.
PASS: [(RADARCTAN 1 -1 )] output -0.785398163397448 , as expected.
PASS: [(RADARCTAN -1 1 )] output 2.35619449019234 , as expected.
PASS: [(RADARCTAN -1 -1 )] output -2.35619449019234 , as expected.
PASS: [(RADARCTAN 1 14.5 )] output 1.50193983749385 , as expected.
PASS: [(RADARCTAN 2 0 )] output 0 , as expected.
PASS: [(RADARCTAN 2 2 )] output 0.785398163397448 , as expected.
PASS: [(RADARCTAN 2 -2 )] output -0.785398163397448 , as expected.
PASS: [(RADARCTAN 2 29 )] output 1.50193983749385 , as expected.
PASS: [(RADARCTAN 0 1 )] output 1.5707963267949 , as expected.
PASS: [(RADARCTAN 1 100)] output 1.56079666010823 , as expected.
INFO: Running invalid instruction: [(RADARCTAN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADARCTAN .
INFO: Running invalid instruction: [(RADARCTAN 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADARCTAN []]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [RADARCTAN [1]]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [RADARCTAN {}]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [RADARCTAN {1}]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [RADARCTAN "one]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like one as input .
INFO: Running invalid instruction: [RADARCTAN "1a]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like 1a as input .
INFO: Running invalid instruction: [(RADARCTAN [] 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [(RADARCTAN [1] 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [(RADARCTAN {} 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [(RADARCTAN {1} 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [(RADARCTAN "one 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like one as input .
INFO: Running invalid instruction: [(RADARCTAN "1a 1)]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like 1a as input .
INFO: Running invalid instruction: [(RADARCTAN 1 [] )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [] as input .
INFO: Running invalid instruction: [(RADARCTAN 1 [1] )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like [1] as input .
INFO: Running invalid instruction: [(RADARCTAN 1 {} )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {} as input .
INFO: Running invalid instruction: [(RADARCTAN 1 {1} )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like {1} as input .
INFO: Running invalid instruction: [(RADARCTAN 1 "one )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like one as input .
INFO: Running invalid instruction: [(RADARCTAN 1 "1a )]
INFO: error code is 7 .
INFO: error text is RADARCTAN doesn't like 1a as input .
PASS: [SIN 0] output 0 , as expected.
FAIL: [SIN 30] output 0.5 . We expected 0.5 .
FAIL: [SIN 45] output 0.707106781186547 . We expected 0.707106781186548 .
FAIL: [SIN -45] output -0.707106781186547 . We expected -0.707106781186548 .
PASS: [SIN 90] output 1 , as expected.
FAIL: [SIN 180] output 1.22514845490862e-16 . We expected 0 .
PASS: [SIN 270] output -1 , as expected.
FAIL: [SIN 360] output -2.45029690981724e-16 . We expected 0 .
FAIL: [SIN 3600] output -2.45029690981724e-15 . We expected 0 .
PASS: [SIN 3690] output 1 , as expected.
PASS: [SIN 14.5] output 0.250380004054441 , as expected.
INFO: Running invalid instruction: [(SIN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SIN .
INFO: Running invalid instruction: [(SIN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SIN []]
INFO: error code is 7 .
INFO: error text is SIN doesn't like [] as input .
INFO: Running invalid instruction: [SIN [1]]
INFO: error code is 7 .
INFO: error text is SIN doesn't like [1] as input .
INFO: Running invalid instruction: [SIN {}]
INFO: error code is 7 .
INFO: error text is SIN doesn't like {} as input .
INFO: Running invalid instruction: [SIN {1}]
INFO: error code is 7 .
INFO: error text is SIN doesn't like {1} as input .
INFO: Running invalid instruction: [SIN "one]
INFO: error code is 7 .
INFO: error text is SIN doesn't like one as input .
INFO: Running invalid instruction: [SIN "1a]
INFO: error code is 7 .
INFO: error text is SIN doesn't like 1a as input .
PASS: [RADSIN 0] output 0 , as expected.
FAIL: [RADSIN ( 0.25 * PI)] output 0.707106781186547 . We expected 0.707106781186548 .
FAIL: [RADSIN (-0.25 * PI)] output -0.707106781186547 . We expected -0.707106781186548 .
FAIL: [RADSIN (1/6 * PI)] output 0.5 . We expected 0.5 .
PASS: [RADSIN ( 0.5 * PI)] output 1 , as expected.
FAIL: [RADSIN PI] output 1.22514845490862e-16 . We expected 0 .
PASS: [RADSIN (1.5 * PI)] output -1 , as expected.
FAIL: [RADSIN ( 2 * PI)] output -2.45029690981724e-16 . We expected 0 .
FAIL: [RADSIN ( 10 * PI)] output -1.22514845490862e-15 . We expected 0 .
PASS: [RADSIN ( 10.50 * PI)] output 1 , as expected.
PASS: [RADSIN 14.5] output 0.934895055524683 , as expected.
INFO: Running invalid instruction: [(RADSIN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADSIN .
INFO: Running invalid instruction: [(RADSIN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADSIN []]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like [] as input .
INFO: Running invalid instruction: [RADSIN [1]]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like [1] as input .
INFO: Running invalid instruction: [RADSIN {}]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like {} as input .
INFO: Running invalid instruction: [RADSIN {1}]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like {1} as input .
INFO: Running invalid instruction: [RADSIN "one]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like one as input .
INFO: Running invalid instruction: [RADSIN "1a]
INFO: error code is 7 .
INFO: error text is RADSIN doesn't like 1a as input .
PASS: [ARCSIN 0] output 0 , as expected.
FAIL: [ARCSIN ( 0.5 * SQRT 2)] output 45 . We expected 45 .
FAIL: [ARCSIN (-0.5 * SQRT 2)] output -45 . We expected -45 .
PASS: [ARCSIN 1] output 90 , as expected.
PASS: [ARCSIN -1] output -90 , as expected.
PASS: [ARCSIN 0.5] output 30 , as expected.
PASS: [ARCSIN -0.5] output -30 , as expected.
INFO: Running invalid instruction: [(ARCSIN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARCSIN .
INFO: Running invalid instruction: [(ARCSIN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ARCSIN 1.1]
INFO: error code is 4 .
INFO: error text is ARCSIN doesn't like 1.1 as input .
INFO: Running invalid instruction: [ARCSIN -1.1]
INFO: error code is 4 .
INFO: error text is ARCSIN doesn't like -1.1 as input .
INFO: Running invalid instruction: [ARCSIN []]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like [] as input .
INFO: Running invalid instruction: [ARCSIN [1]]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like [1] as input .
INFO: Running invalid instruction: [ARCSIN {}]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like {} as input .
INFO: Running invalid instruction: [ARCSIN {1}]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like {1} as input .
INFO: Running invalid instruction: [ARCSIN "one]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like one as input .
INFO: Running invalid instruction: [ARCSIN "1a]
INFO: error code is 7 .
INFO: error text is ARCSIN doesn't like 1a as input .
PASS: [RADARCSIN 0] output 0 , as expected.
FAIL: [RADARCSIN ( 0.5 * SQRT 2)] output 0.785398163397448 . We expected 0.785398163397448 .
FAIL: [RADARCSIN (-0.5 * SQRT 2)] output -0.785398163397448 . We expected -0.785398163397448 .
PASS: [RADARCSIN 1] output 1.5707963267949 , as expected.
PASS: [RADARCSIN -1] output -1.5707963267949 , as expected.
FAIL: [RADARCSIN 0.5] output 0.523598775598299 . We expected 0.523598775598299 .
FAIL: [RADARCSIN -0.5] output -0.523598775598299 . We expected -0.523598775598299 .
INFO: Running invalid instruction: [(RADARCSIN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADARCSIN .
INFO: Running invalid instruction: [(RADARCSIN 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADARCSIN 1.1]
INFO: error code is 4 .
INFO: error text is RADARCSIN doesn't like 1.1 as input .
INFO: Running invalid instruction: [RADARCSIN -1.1]
INFO: error code is 4 .
INFO: error text is RADARCSIN doesn't like -1.1 as input .
INFO: Running invalid instruction: [RADARCSIN []]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like [] as input .
INFO: Running invalid instruction: [RADARCSIN [1]]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like [1] as input .
INFO: Running invalid instruction: [RADARCSIN {}]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like {} as input .
INFO: Running invalid instruction: [RADARCSIN {1}]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like {1} as input .
INFO: Running invalid instruction: [RADARCSIN "one]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like one as input .
INFO: Running invalid instruction: [RADARCSIN "1a]
INFO: error code is 7 .
INFO: error text is RADARCSIN doesn't like 1a as input .
PASS: [COS 0] output 1 , as expected.
PASS: [COS 45] output 0.707106781186548 , as expected.
PASS: [COS -45] output 0.707106781186548 , as expected.
FAIL: [COS 225] output -0.707106781186548 . We expected -0.707106781186548 .
FAIL: [COS 60] output 0.5 . We expected 0.5 .
FAIL: [COS 90] output 6.1257422745431e-17 . We expected 0 .
PASS: [COS 180] output -1 , as expected.
FAIL: [COS 270] output -1.83772268236293e-16 . We expected 0 .
PASS: [COS 360] output 1 , as expected.
PASS: [COS 3600] output 1 , as expected.
FAIL: [COS 3690] output 7.84062485076342e-15 . We expected 0 .
PASS: [COS 14.5] output 0.968147640378108 , as expected.
INFO: Running invalid instruction: [(COS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to COS .
INFO: Running invalid instruction: [(COS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [COS []]
INFO: error code is 7 .
INFO: error text is COS doesn't like [] as input .
INFO: Running invalid instruction: [COS [1]]
INFO: error code is 7 .
INFO: error text is COS doesn't like [1] as input .
INFO: Running invalid instruction: [COS {}]
INFO: error code is 7 .
INFO: error text is COS doesn't like {} as input .
INFO: Running invalid instruction: [COS {1}]
INFO: error code is 7 .
INFO: error text is COS doesn't like {1} as input .
INFO: Running invalid instruction: [COS "one]
INFO: error code is 7 .
INFO: error text is COS doesn't like one as input .
INFO: Running invalid instruction: [COS "1a]
INFO: error code is 7 .
INFO: error text is COS doesn't like 1a as input .
PASS: [RADCOS 0] output 1 , as expected.
PASS: [RADCOS ( 0.25 * PI)] output 0.707106781186548 , as expected.
PASS: [RADCOS (-0.25 * PI)] output 0.707106781186548 , as expected.
FAIL: [RADCOS ( 1.25 * PI)] output -0.707106781186548 . We expected -0.707106781186548 .
FAIL: [RADCOS ( 1/3 * PI)] output 0.5 . We expected 0.5 .
FAIL: [RADCOS ( 0.5 * PI)] output 6.1257422745431e-17 . We expected 0 .
PASS: [RADCOS PI] output -1 , as expected.
FAIL: [RADCOS 1.5 * PI] output -1.83772268236293e-16 . We expected 0 .
PASS: [RADCOS 2 * PI] output 1 , as expected.
PASS: [RADCOS 10 * PI] output 1 , as expected.
FAIL: [RADCOS 10.50 * PI] output -4.89950961746199e-16 . We expected 0 .
PASS: [RADCOS 14.5] output -0.354924266788705 , as expected.
INFO: Running invalid instruction: [(RADCOS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADCOS .
INFO: Running invalid instruction: [(RADCOS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADCOS []]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like [] as input .
INFO: Running invalid instruction: [RADCOS [1]]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like [1] as input .
INFO: Running invalid instruction: [RADCOS {}]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like {} as input .
INFO: Running invalid instruction: [RADCOS {1}]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like {1} as input .
INFO: Running invalid instruction: [RADCOS "one]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like one as input .
INFO: Running invalid instruction: [RADCOS "1a]
INFO: error code is 7 .
INFO: error text is RADCOS doesn't like 1a as input .
PASS: [ARCCOS 1] output 0 , as expected.
PASS: [ARCCOS ( 0.5 * SQRT 2)] output 45 , as expected.
PASS: [ARCCOS (-0.5 * SQRT 2)] output 135 , as expected.
PASS: [ARCCOS 0.5] output 60 , as expected.
PASS: [ARCCOS 0] output 90 , as expected.
PASS: [ARCCOS -0.5] output 120 , as expected.
PASS: [ARCCOS -1] output 180 , as expected.
INFO: Running invalid instruction: [(ARCCOS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARCCOS .
INFO: Running invalid instruction: [(ARCCOS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ARCCOS 1.1]
INFO: error code is 4 .
INFO: error text is ARCCOS doesn't like 1.1 as input .
INFO: Running invalid instruction: [ARCCOS -1.1]
INFO: error code is 4 .
INFO: error text is ARCCOS doesn't like -1.1 as input .
INFO: Running invalid instruction: [ARCCOS []]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like [] as input .
INFO: Running invalid instruction: [ARCCOS [1]]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like [1] as input .
INFO: Running invalid instruction: [ARCCOS {}]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like {} as input .
INFO: Running invalid instruction: [ARCCOS {1}]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like {1} as input .
INFO: Running invalid instruction: [ARCCOS "one]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like one as input .
INFO: Running invalid instruction: [ARCCOS "1a]
INFO: error code is 7 .
INFO: error text is ARCCOS doesn't like 1a as input .
PASS: [RADARCCOS 1] output 0 , as expected.
PASS: [RADARCCOS ( 0.5 * SQRT 2)] output 0.785398163397448 , as expected.
PASS: [RADARCCOS (-0.5 * SQRT 2)] output 2.35619449019234 , as expected.
FAIL: [RADARCCOS 0.5] output 1.0471975511966 . We expected 1.0471975511966 .
PASS: [RADARCCOS 0] output 1.5707963267949 , as expected.
FAIL: [RADARCCOS -0.5] output 2.0943951023932 . We expected 2.0943951023932 .
PASS: [RADARCCOS -1] output 3.14159265358979 , as expected.
INFO: Running invalid instruction: [(RADCOS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RADCOS .
INFO: Running invalid instruction: [(RADCOS 1 2)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RADARCCOS 1.1]
INFO: error code is 4 .
INFO: error text is RADARCCOS doesn't like 1.1 as input .
INFO: Running invalid instruction: [RADARCCOS -1.1]
INFO: error code is 4 .
INFO: error text is RADARCCOS doesn't like -1.1 as input .
INFO: Running invalid instruction: [RADARCCOS []]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like [] as input .
INFO: Running invalid instruction: [RADARCCOS [1]]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like [1] as input .
INFO: Running invalid instruction: [RADARCCOS {}]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like {} as input .
INFO: Running invalid instruction: [RADARCCOS {1}]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like {1} as input .
INFO: Running invalid instruction: [RADARCCOS "one]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like one as input .
INFO: Running invalid instruction: [RADARCCOS "1a]
INFO: error code is 7 .
INFO: error text is RADARCCOS doesn't like 1a as input .
PASS: [PRODUCT 1e200 2e200] output +INF , as expected.
PASS: [ROUND 2.3e40] output 2.3e+40 , as expected.
PASS: [PRODUCT 1e200 2e200] output +INF , as expected.
PASS: Bug #1397560 is fixed. Multiple floating point exceptions do not crash.
PASS: [LESSP 1 1] output false , as expected.
PASS: [LESSP 0 1] output true , as expected.
PASS: [LESSP 1 0] output false , as expected.
PASS: [LESSP 0 0] output false , as expected.
PASS: [LESSP 1.5 1.5] output false , as expected.
PASS: [LESSP 0.5 1.5] output true , as expected.
PASS: [LESSP 1.5 0.5] output false , as expected.
PASS: [LESSP 1e-16 0] output false , as expected.
PASS: [LESSP -1e-16 0] output true , as expected.
PASS: [LESSP 0 1e-16] output true , as expected.
PASS: [LESSP 0 -1e-16] output false , as expected.
PASS: [LESSP -1 -2] output false , as expected.
PASS: [LESSP -2 -1] output true , as expected.
PASS: [LESSP 10 10.5] output true , as expected.
PASS: [LESSP 10 9.5] output false , as expected.
PASS: [LESSP 10.5 10] output false , as expected.
PASS: [LESSP 10.5 11] output true , as expected.
PASS: [LESS? 1 1] output false , as expected.
PASS: [LESS? 0 1] output true , as expected.
PASS: [LESS? 1 0] output false , as expected.
PASS: [LESS? -1 0] output true , as expected.
PASS: [LESS? -5 -10] output false , as expected.
PASS: [LESS? 1.1 1.2] output true , as expected.
PASS: [LESS? -1.1 -1.2] output false , as expected.
PASS: [1 < 1] output false , as expected.
PASS: [0 < 1] output true , as expected.
PASS: [1 < 0] output false , as expected.
PASS: [-1 < 0] output true , as expected.
PASS: [-5 < -10] output false , as expected.
PASS: [1.1 < 1.2] output true , as expected.
PASS: [-1.1 < -1.2] output false , as expected.
INFO: Running invalid instruction: [(LESSP 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LESSP .
INFO: Running invalid instruction: [(LESSP 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LESSP "one 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like one as input .
INFO: Running invalid instruction: [LESSP [1] 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like [1] as input .
INFO: Running invalid instruction: [LESSP [] 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like [] as input .
INFO: Running invalid instruction: [LESSP {1} 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like {1} as input .
INFO: Running invalid instruction: [LESSP 2 "one]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like one as input .
INFO: Running invalid instruction: [LESSP 2 [1]]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like [1] as input .
INFO: Running invalid instruction: [LESSP 2 []]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like [] as input .
INFO: Running invalid instruction: [LESSP 2 {1}]
PASS: error code is 7 , as expected.
INFO: error text is LESSP doesn't like {1} as input .
PASS: [LESSEQUALP 1 1] output true , as expected.
PASS: [LESSEQUALP 0 1] output true , as expected.
PASS: [LESSEQUALP 1 0] output false , as expected.
PASS: [LESSEQUALP 0 0] output true , as expected.
PASS: [LESSEQUALP 1.5 1.5] output true , as expected.
PASS: [LESSEQUALP 0.5 1.5] output true , as expected.
PASS: [LESSEQUALP 1.5 0.5] output false , as expected.
PASS: [LESSEQUALP -1 -2] output false , as expected.
PASS: [LESSEQUALP -2 -1] output true , as expected.
PASS: [LESSEQUALP 10 10.5] output true , as expected.
PASS: [LESSEQUALP 10 9.5] output false , as expected.
PASS: [LESSEQUALP 10.5 10] output false , as expected.
PASS: [LESSEQUALP 10.5 11] output true , as expected.
PASS: [LESSEQUAL? 1 1] output true , as expected.
PASS: [LESSEQUAL? 0 1] output true , as expected.
PASS: [LESSEQUAL? 1 0] output false , as expected.
PASS: [LESSEQUAL? -1 0] output true , as expected.
PASS: [LESSEQUAL? -5 -10] output false , as expected.
PASS: [LESSEQUAL? 1.1 1.2] output true , as expected.
PASS: [LESSEQUAL? -1.1 -1.2] output false , as expected.
PASS: [1 <= 1] output true , as expected.
PASS: [0 <= 1] output true , as expected.
PASS: [1 <= 0] output false , as expected.
PASS: [-1 <= 0] output true , as expected.
PASS: [-5 <= -10] output false , as expected.
PASS: [1.1 <= 1.2] output true , as expected.
PASS: [-1.1 <= -1.2] output false , as expected.
INFO: Running invalid instruction: [(LESSEQUALP 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LESSEQUALP .
INFO: Running invalid instruction: [(LESSEQUALP 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LESSEQUALP "one 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like one as input .
INFO: Running invalid instruction: [LESSEQUALP [1] 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like [1] as input .
INFO: Running invalid instruction: [LESSEQUALP [] 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like [] as input .
INFO: Running invalid instruction: [LESSEQUALP {1} 2]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like {1} as input .
INFO: Running invalid instruction: [LESSEQUALP 2 "one]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like one as input .
INFO: Running invalid instruction: [LESSEQUALP 2 [1]]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like [1] as input .
INFO: Running invalid instruction: [LESSEQUALP 2 []]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like [] as input .
INFO: Running invalid instruction: [LESSEQUALP 2 {1}]
PASS: error code is 7 , as expected.
INFO: error text is LESSEQUALP doesn't like {1} as input .
PASS: [GREATERP 1 1] output false , as expected.
PASS: [GREATERP 0 1] output false , as expected.
PASS: [GREATERP 1 0] output true , as expected.
PASS: [GREATERP 0 0] output false , as expected.
PASS: [GREATERP 1.5 1.5] output false , as expected.
PASS: [GREATERP 0.5 1.5] output false , as expected.
PASS: [GREATERP 1.5 0.5] output true , as expected.
PASS: [GREATERP 1e-16 0] output true , as expected.
PASS: [GREATERP -1e-16 0] output false , as expected.
PASS: [GREATERP 0 1e-16] output false , as expected.
PASS: [GREATERP 0 -1e-16] output true , as expected.
PASS: [GREATERP -1 -2] output true , as expected.
PASS: [GREATERP -2 -1] output false , as expected.
PASS: [GREATERP 10 10.5] output false , as expected.
PASS: [GREATERP 10 9.5] output true , as expected.
PASS: [GREATERP 10.5 10] output true , as expected.
PASS: [GREATERP 10.5 11] output false , as expected.
PASS: [GREATER? 1 1] output false , as expected.
PASS: [GREATER? 0 1] output false , as expected.
PASS: [GREATER? 1 0] output true , as expected.
PASS: [GREATER? -1 0] output false , as expected.
PASS: [GREATER? -5 -10] output true , as expected.
PASS: [GREATER? 1.1 1.2] output false , as expected.
PASS: [GREATER? -1.1 -1.2] output true , as expected.
PASS: [1 > 1] output false , as expected.
PASS: [0 > 1] output false , as expected.
PASS: [1 > 0] output true , as expected.
PASS: [-1 > 0] output false , as expected.
PASS: [-5 > -10] output true , as expected.
PASS: [1.1 > 1.2] output false , as expected.
PASS: [-1.1 > -1.2] output true , as expected.
INFO: Running invalid instruction: [(GREATERP 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GREATERP .
INFO: Running invalid instruction: [(GREATERP 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GREATERP "one 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like one as input .
INFO: Running invalid instruction: [GREATERP [1] 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like [1] as input .
INFO: Running invalid instruction: [GREATERP [] 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like [] as input .
INFO: Running invalid instruction: [GREATERP {1} 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like {1} as input .
INFO: Running invalid instruction: [GREATERP 2 "one]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like one as input .
INFO: Running invalid instruction: [GREATERP 2 [1]]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like [1] as input .
INFO: Running invalid instruction: [GREATERP 2 []]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like [] as input .
INFO: Running invalid instruction: [GREATERP 2 {1}]
PASS: error code is 7 , as expected.
INFO: error text is GREATERP doesn't like {1} as input .
PASS: [GREATEREQUALP 1 1] output true , as expected.
PASS: [GREATEREQUALP 0 1] output false , as expected.
PASS: [GREATEREQUALP 1 0] output true , as expected.
PASS: [GREATEREQUALP 0 0] output true , as expected.
PASS: [GREATEREQUALP 1.5 1.5] output true , as expected.
PASS: [GREATEREQUALP 0.5 1.5] output false , as expected.
PASS: [GREATEREQUALP 1.5 0.5] output true , as expected.
PASS: [GREATEREQUALP -1 -2] output true , as expected.
PASS: [GREATEREQUALP -2 -1] output false , as expected.
PASS: [GREATEREQUALP 10 10.5] output false , as expected.
PASS: [GREATEREQUALP 10 9.5] output true , as expected.
PASS: [GREATEREQUALP 10.5 10] output true , as expected.
PASS: [GREATEREQUALP 10.5 11] output false , as expected.
PASS: [GREATEREQUAL? 1 1] output true , as expected.
PASS: [GREATEREQUAL? 0 1] output false , as expected.
PASS: [GREATEREQUAL? 1 0] output true , as expected.
PASS: [GREATEREQUAL? -1 0] output false , as expected.
PASS: [GREATEREQUAL? -5 -10] output true , as expected.
PASS: [GREATEREQUAL? 1.1 1.2] output false , as expected.
PASS: [GREATEREQUAL? -1.1 -1.2] output true , as expected.
PASS: [1 >= 1] output true , as expected.
PASS: [0 >= 1] output false , as expected.
PASS: [1 >= 0] output true , as expected.
PASS: [-1 >= 0] output false , as expected.
PASS: [-5 >= -10] output true , as expected.
PASS: [1.1 >= 1.2] output false , as expected.
PASS: [-1.1 >= -1.2] output true , as expected.
INFO: Running invalid instruction: [(GREATEREQUALP 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GREATEREQUALP .
INFO: Running invalid instruction: [(GREATEREQUALP 1 2 3)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GREATEREQUALP "one 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like one as input .
INFO: Running invalid instruction: [GREATEREQUALP [1] 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like [1] as input .
INFO: Running invalid instruction: [GREATEREQUALP [] 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like [] as input .
INFO: Running invalid instruction: [GREATEREQUALP {1} 2]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like {1} as input .
INFO: Running invalid instruction: [GREATEREQUALP 2 "one]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like one as input .
INFO: Running invalid instruction: [GREATEREQUALP 2 [1]]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like [1] as input .
INFO: Running invalid instruction: [GREATEREQUALP 2 []]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like [] as input .
INFO: Running invalid instruction: [GREATEREQUALP 2 {1}]
PASS: error code is 7 , as expected.
INFO: error text is GREATEREQUALP doesn't like {1} as input .
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [(RANDOM 10) >= 0] output true , as expected.
PASS: [(RANDOM 10) < 10] output true , as expected.
PASS: [RANDOM 1] output 0 , as expected.
PASS: [RANDOM 0] output 0 , as expected.
INFO: Running invalid instruction: [(RANDOM)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RANDOM .
INFO: Running invalid instruction: [(RANDOM 10 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [RANDOM {1}]
PASS: error code is 7 , as expected.
INFO: error text is RANDOM doesn't like {1} as input .
INFO: Running invalid instruction: [RANDOM [1]]
PASS: error code is 7 , as expected.
INFO: error text is RANDOM doesn't like [1] as input .
INFO: Running invalid instruction: [RANDOM 1.5]
PASS: error code is 7 , as expected.
INFO: error text is RANDOM doesn't like 1.5 as input .
INFO: Running invalid instruction: [RANDOM -1]
PASS: error code is 7 , as expected.
INFO: error text is RANDOM doesn't like -1 as input .
CALL: RERANDOM
CALL: REPEAT 10 [push "sequence1 RANDOM 1000]
CALL: RERANDOM
CALL: REPEAT 10 [push "sequence2 RANDOM 1000]
PASS: [:sequence1 = :sequence2] output true , as expected.
CALL: (RERANDOM 10)
CALL: REPEAT 10 [push "sequence1 RANDOM 1000]
CALL: (RERANDOM 10)
CALL: REPEAT 10 [push "sequence2 RANDOM 1000]
PASS: [:sequence1 = :sequence3] output false , as expected.
PASS: [:sequence3 = :sequence4] output true , as expected.
INFO: Running invalid instruction: [(RERANDOM 10 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(RERANDOM {1} )]
PASS: error code is 7 , as expected.
INFO: error text is RERANDOM doesn't like {1} as input .
INFO: Running invalid instruction: [(RERANDOM [1] )]
PASS: error code is 7 , as expected.
INFO: error text is RERANDOM doesn't like [1] as input .
INFO: Running invalid instruction: [(RERANDOM 1.5)]
PASS: error code is 7 , as expected.
INFO: error text is RERANDOM doesn't like 1.5 as input .
PASS: [(BITAND)] output -1 , as expected.
PASS: [(BITAND 123)] output 123 , as expected.
PASS: [(BITAND -123)] output -123 , as expected.
PASS: [(BITAND 5 2 )] output 0 , as expected.
PASS: [(BITAND 5 1 )] output 1 , as expected.
PASS: [(BITAND 0 -1 )] output 0 , as expected.
PASS: [(BITAND 5 -1 )] output 5 , as expected.
PASS: [(BITAND 5.0 1.0 )] output 1 , as expected.
PASS: [(BITAND 6 2 10)] output 2 , as expected.
INFO: Running invalid instruction: [(BITAND "word)]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like word as input .
INFO: Running invalid instruction: [(BITAND [123] )]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like [123] as input .
INFO: Running invalid instruction: [(BITAND {123} )]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like {123} as input .
INFO: Running invalid instruction: [(BITAND 12.30)]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like 12.3 as input .
INFO: Running invalid instruction: [(BITAND 1 "word)]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like word as input .
INFO: Running invalid instruction: [(BITAND 1 [123] )]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like [123] as input .
INFO: Running invalid instruction: [(BITAND 1 {123} )]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like {123} as input .
INFO: Running invalid instruction: [(BITAND 1 12.30)]
INFO: error code is 7 .
INFO: error text is BITAND doesn't like 12.3 as input .
PASS: [(BITOR)] output 0 , as expected.
PASS: [(BITOR 123 )] output 123 , as expected.
PASS: [(BITOR -123 )] output -123 , as expected.
PASS: [(BITOR 5 2 )] output 7 , as expected.
PASS: [(BITOR 5 1 )] output 5 , as expected.
PASS: [(BITOR 0 0 )] output 0 , as expected.
PASS: [(BITOR 5 -1 )] output -1 , as expected.
PASS: [(BITOR 5.0 2.0 )] output 7 , as expected.
PASS: [(BITOR 6 2 10)] output 14 , as expected.
INFO: Running invalid instruction: [(BITOR "word)]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like word as input .
INFO: Running invalid instruction: [(BITOR [123] )]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like [123] as input .
INFO: Running invalid instruction: [(BITOR {123} )]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like {123} as input .
INFO: Running invalid instruction: [(BITOR 12.30)]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like 12.3 as input .
INFO: Running invalid instruction: [(BITOR 1 "word)]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like word as input .
INFO: Running invalid instruction: [(BITOR 1 [123] )]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like [123] as input .
INFO: Running invalid instruction: [(BITOR 1 {123} )]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like {123} as input .
INFO: Running invalid instruction: [(BITOR 1 12.30)]
INFO: error code is 7 .
INFO: error text is BITOR doesn't like 12.3 as input .
PASS: [(BITXOR)] output 0 , as expected.
PASS: [(BITXOR 123 )] output 123 , as expected.
PASS: [(BITXOR -123 )] output -123 , as expected.
PASS: [(BITXOR 5 2 )] output 7 , as expected.
PASS: [(BITXOR 5 1 )] output 4 , as expected.
PASS: [(BITXOR 0 0 )] output 0 , as expected.
PASS: [(BITXOR 5 -1 )] output -6 , as expected.
PASS: [(BITXOR 5 5 )] output 0 , as expected.
PASS: [(BITXOR 5.0 1.0 )] output 4 , as expected.
PASS: [(BITXOR 6 2 10)] output 14 , as expected.
INFO: Running invalid instruction: [(BITXOR "word)]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like word as input .
INFO: Running invalid instruction: [(BITXOR [123] )]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like [123] as input .
INFO: Running invalid instruction: [(BITXOR {123} )]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like {123} as input .
INFO: Running invalid instruction: [(BITXOR 12.30)]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like 12.3 as input .
INFO: Running invalid instruction: [(BITXOR 1 "word)]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like word as input .
INFO: Running invalid instruction: [(BITXOR 1 [123] )]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like [123] as input .
INFO: Running invalid instruction: [(BITXOR 1 {123} )]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like {123} as input .
INFO: Running invalid instruction: [(BITXOR 1 12.30)]
INFO: error code is 7 .
INFO: error text is BITXOR doesn't like 12.3 as input .
PASS: [BITNOT 123] output -124 , as expected.
PASS: [BITNOT -124] output 123 , as expected.
PASS: [BITNOT 0] output -1 , as expected.
FAIL: [BITNOT 12.00] threw error.  code= 4 . BITNOT doesn't like 12 as input
INFO: Running invalid instruction: [(BITNOT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITNOT .
INFO: Running invalid instruction: [(BITNOT 123 456)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BITNOT "word]
INFO: error code is 7 .
INFO: error text is BITNOT doesn't like word as input .
INFO: Running invalid instruction: [BITNOT [123]]
INFO: error code is 7 .
INFO: error text is BITNOT doesn't like [123] as input .
INFO: Running invalid instruction: [BITNOT {123}]
INFO: error code is 7 .
INFO: error text is BITNOT doesn't like {123} as input .
INFO: Running invalid instruction: [BITNOT 12.30]
INFO: error code is 4 .
INFO: error text is BITNOT doesn't like 12.3 as input .
PASS: [LSHIFT 5 2] output 20 , as expected.
PASS: [LSHIFT 20 -2] output 5 , as expected.
PASS: [LSHIFT -20 -1] output 2147483638 , as expected.
PASS: [LSHIFT 5 0] output 5 , as expected.
PASS: [LSHIFT 0 5] output 0 , as expected.
PASS: [ASHIFT 5.0 2.00] output 20 , as expected.
INFO: Running invalid instruction: [(LSHIFT 5)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LSHIFT .
INFO: Running invalid instruction: [(LSHIFT 5 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [LSHIFT "word 0]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like word as input .
INFO: Running invalid instruction: [LSHIFT [123] 0]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like [123] as input .
INFO: Running invalid instruction: [LSHIFT {123} 0]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like {123} as input .
INFO: Running invalid instruction: [LSHIFT 12.30 0]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like 12.3 as input .
INFO: Running invalid instruction: [LSHIFT 5 "word]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like word as input .
INFO: Running invalid instruction: [LSHIFT 5 [123]]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like [123] as input .
INFO: Running invalid instruction: [LSHIFT 5 {123}]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like {123} as input .
INFO: Running invalid instruction: [LSHIFT 5 12.30]
INFO: error code is 7 .
INFO: error text is LSHIFT doesn't like 12.3 as input .
PASS: [ASHIFT 5 2] output 20 , as expected.
PASS: [ASHIFT 20 -2] output 5 , as expected.
PASS: [ASHIFT -20 -1] output -10 , as expected.
PASS: [ASHIFT 5 0] output 5 , as expected.
PASS: [ASHIFT 0 5] output 0 , as expected.
PASS: [ASHIFT 5.0 2.00] output 20 , as expected.
INFO: Running invalid instruction: [(ASHIFT 5)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ASHIFT .
INFO: Running invalid instruction: [(ASHIFT 5 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ASHIFT "word 0]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like word as input .
INFO: Running invalid instruction: [ASHIFT [123] 0]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like [123] as input .
INFO: Running invalid instruction: [ASHIFT {123} 0]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like {123} as input .
INFO: Running invalid instruction: [ASHIFT 12.30 0]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like 12.3 as input .
INFO: Running invalid instruction: [ASHIFT 5 "word]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like word as input .
INFO: Running invalid instruction: [ASHIFT 5 [123]]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like [123] as input .
INFO: Running invalid instruction: [ASHIFT 5 {123}]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like {123} as input .
INFO: Running invalid instruction: [ASHIFT 5 12.30]
INFO: error code is 7 .
INFO: error text is ASHIFT doesn't like 12.3 as input .
PASS: [PROCEDURETEST.ÀCÇÊNT] output 3333 , as expected.
PASS: [proceduretest.àcçênt] output 3333 , as expected.
PASS: [ProcedureTest.Àcçênt] output 3333 , as expected.
PASS: [TEXT "SAMPLEPROC] output [[a b] [PRINT :a] [SHOW :b]] , as expected.
PASS: [TEXT "PROCEDURETEST.COMPLEXPROC] output [[a b [c 1] [d SUM 1 2] [e] 2] [PRINT :a] [SHOW :b] [OUTPUT SUM :c :d]] , as expected.
INFO: Running invalid instruction: [(TEXT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TEXT .
INFO: Running invalid instruction: [TEXT "nonexistent]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [TEXT [sampleproc]]
PASS: error code is 7 , as expected.
INFO: error text is TEXT doesn't like [sampleproc] as input .
INFO: Running invalid instruction: [TEXT {sampleproc}]
PASS: error code is 7 , as expected.
INFO: error text is TEXT doesn't like {sampleproc} as input .
INFO: Running invalid instruction: [TEXT 123]
PASS: error code is 7 , as expected.
INFO: error text is TEXT doesn't like 123 as input .
INFO: Running invalid instruction: [(TEXT "sampleproc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: MAKE "fulltext FULLTEXT "SAMPLEPROC
PASS: [LIST? :fulltext] output true , as expected.
PASS: [ITEM 1 :fulltext] output TO SAMPLEPROC  :a  :b , as expected.
PASS: [ITEM 2 :fulltext] output   PRINT :a ; print , as expected.
PASS: [ITEM 3 :fulltext] output   SHOW  :b ; show , as expected.
PASS: [ITEM 4 :fulltext] output END , as expected.
PASS: [COUNT :fulltext] output 4 , as expected.
CALL: MAKE "fulltext FULLTEXT "PROCEDURETEST.COMPLEXPROC
PASS: [LIST? :fulltext] output true , as expected.
PASS: [ITEM 1 :fulltext] output TO PROCEDURETEST.COMPLEXPROC :a :b [:c 1] [:d SUM 1 2] [:e] 2   , as expected.
PASS: [ITEM 2 :fulltext] output   PRINT :a ; print , as expected.
PASS: [ITEM 3 :fulltext] output   SHOW  :b ; show , as expected.
PASS: [ITEM 4 :fulltext] output  , as expected.
PASS: [ITEM 5 :fulltext] output   OUTPUT SUM :c :d ; output , as expected.
PASS: [ITEM 6 :fulltext] output END , as expected.
PASS: [COUNT :fulltext] output 6 , as expected.
INFO: Running invalid instruction: [(FULLTEXT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FULLTEXT .
INFO: Running invalid instruction: [FULLTEXT "nonexistent]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [FULLTEXT [sampleproc]]
PASS: error code is 7 , as expected.
INFO: error text is FULLTEXT doesn't like [sampleproc] as input .
INFO: Running invalid instruction: [FULLTEXT {sampleproc}]
PASS: error code is 7 , as expected.
INFO: error text is FULLTEXT doesn't like {sampleproc} as input .
INFO: Running invalid instruction: [FULLTEXT 12345]
PASS: error code is 7 , as expected.
INFO: error text is FULLTEXT doesn't like 12345 as input .
INFO: Running invalid instruction: [(FULLTEXT "sampleproc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [DEFINEDP "nonexistent] output false , as expected.
PASS: [DEFINED? "nonexistent] output false , as expected.
PASS: [DEFINED? "FORWARD] output false , as expected.
PASS: [DEFINED? "SAMPLEPROC] output true , as expected.
PASS: [DEFINED? "sampleproc] output true , as expected.
PASS: [DEFINED? "] output false , as expected.
CALL: ERASE "REVERSE
PASS: [DEFINED? "REVERSE] output true , as expected.
CALL: ERASE "FOREACH
PASS: [DEFINED? "FOREACH] output true , as expected.
INFO: Running invalid instruction: [(DEFINED?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DEFINED? .
INFO: Running invalid instruction: [(DEFINED? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is DEFINED? doesn't like {a} as input .
INFO: Running invalid instruction: [(DEFINED? [] )]
PASS: error code is 7 , as expected.
INFO: error text is DEFINED? doesn't like [] as input .
INFO: Running invalid instruction: [(DEFINED? 123)]
PASS: error code is 7 , as expected.
INFO: error text is DEFINED? doesn't like 123 as input .
INFO: Running invalid instruction: [(DEFINED? "sampleproc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PROCEDUREP "nonexistent] output false , as expected.
PASS: [PROCEDURE? "nonexistent] output false , as expected.
PASS: [PROCEDURE? "FORWARD] output true , as expected.
PASS: [PROCEDURE? "SAMPLEPROC] output true , as expected.
PASS: [PROCEDURE? "sampleproc] output true , as expected.
PASS: [PROCEDURE? 123] output false , as expected.
PASS: [PROCEDURE? "] output false , as expected.
CALL: ERASE "REVERSE
PASS: [PROCEDURE? "REVERSE] output true , as expected.
PASS: [PROCEDURE? "REVERSE] output true , as expected.
PASS: [PROCEDURE? "`] output true , as expected.
INFO: Running invalid instruction: [(PROCEDURE?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PROCEDURE? .
INFO: Running invalid instruction: [(PROCEDURE? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is PROCEDURE? doesn't like {a} as input .
INFO: Running invalid instruction: [(PROCEDURE? [] )]
PASS: error code is 7 , as expected.
INFO: error text is PROCEDURE? doesn't like [] as input .
INFO: Running invalid instruction: [(PROCEDURE? "sampleproc "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NAMEP "nonexistent] output false , as expected.
PASS: [NAME? "nonexistent] output false , as expected.
PASS: [NAME? "FORWARD] output false , as expected.
PASS: [NAME? "] output false , as expected.
PASS: [NAME? 12345] output false , as expected.
PASS: [NAME? -1234] output false , as expected.
PASS: [NAME? "namepvariable] output true , as expected.
PASS: [NAME? "NAMEPVARIABLE] output true , as expected.
INFO: Running invalid instruction: [(NAME?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NAME? .
INFO: Running invalid instruction: [(NAME? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is NAME? doesn't like {a} as input .
INFO: Running invalid instruction: [(NAME? [] )]
PASS: error code is 7 , as expected.
INFO: error text is NAME? doesn't like [] as input .
INFO: Running invalid instruction: [(NAME? "namepvariable "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PRIMITIVEP "nonexistent] output false , as expected.
PASS: [PRIMITIVE? "nonexistent] output false , as expected.
PASS: [PRIMITIVE? "FORWARD] output true , as expected.
PASS: [PRIMITIVE? "FD] output true , as expected.
PASS: [PRIMITIVE? "] output false , as expected.
PASS: [PRIMITIVE? "namepvariable] output false , as expected.
PASS: [PRIMITIVE? "sampleproc] output false , as expected.
INFO: Running invalid instruction: [(PRIMITIVE?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PRIMITIVE? .
INFO: Running invalid instruction: [(PRIMITIVE? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is PRIMITIVE? doesn't like {a} as input .
INFO: Running invalid instruction: [(PRIMITIVE? [] )]
PASS: error code is 7 , as expected.
INFO: error text is PRIMITIVE? doesn't like [] as input .
INFO: Running invalid instruction: [(PRIMITIVE? 123)]
PASS: error code is 7 , as expected.
INFO: error text is PRIMITIVE? doesn't like 123 as input .
INFO: Running invalid instruction: [(PRIMITIVE? "namepvariable "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [MACROP "mymacro] output true , as expected.
PASS: [MACRO? "mymacro] output true , as expected.
PASS: [MACRO? "FORWARD] output false , as expected.
PASS: [MACRO? "FD] output false , as expected.
PASS: [MACRO? "] output false , as expected.
PASS: [MACRO? "namepvariable] output false , as expected.
PASS: [MACRO? "sampleproc] output false , as expected.
CALL: ERASE "FOREACH
PASS: [MACRO? "FOREACH] output true , as expected.
CALL: IGNORE REVERSE []
PASS: [MACRO? "REVERSE] output false , as expected.
INFO: Running invalid instruction: [(MACRO?)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MACRO? .
INFO: Running invalid instruction: [(MACRO? {a} )]
PASS: error code is 7 , as expected.
INFO: error text is MACRO? doesn't like {a} as input .
INFO: Running invalid instruction: [(MACRO? [] )]
PASS: error code is 7 , as expected.
INFO: error text is MACRO? doesn't like [] as input .
INFO: Running invalid instruction: [(MACRO? 123)]
PASS: error code is 7 , as expected.
INFO: error text is MACRO? doesn't like 123 as input .
INFO: Running invalid instruction: [(MACRO? "mymacro "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [ECHO "input] output input , as expected.
PASS: [DEFINEDP "ECHO] output true , as expected.
PASS: [DEFINED? "ECHO] output true , as expected.
CALL: DEFINE "DONOTHING [[]]
PASS: [DEFINED? "DONOTHING] output true , as expected.
CALL: DONOTHING
CALL: MAKE "linewascalled 0
CALL: DEFINE "BODYHASEMPTYLINES [[] [] [MAKE "linewascalled :linewascalled + 1] []]
CALL: BODYHASEMPTYLINES
CALL: BODYHASEMPTYLINES
PASS: [:linewascalled] output 2 , as expected.
CALL: DEFINE "BODYHASALLEMPTYLINES [[] [] [] []]
CALL: BODYHASALLEMPTYLINES
CALL: BODYHASALLEMPTYLINES
PASS: Bug #2790076 is fixed (running template with all empty lines twice didn't crash)
PASS: [DEFINETEST.REDEFINEDPROC 123] output 123 , as expected.
INFO: Running invalid instruction: [(DEFINE "BADPROCEDURE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DEFINE .
INFO: Running invalid instruction: [(DEFINE "BADPROCEDURE [[a] [output :a]] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [DEFINE 123 [[a] [output :a]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like 123 as input .
INFO: Running invalid instruction: [DEFINE [BADPROCEDURE] [[a] [output :a]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [BADPROCEDURE] as input .
INFO: Running invalid instruction: [DEFINE {BADPROCEDURE} [[a] [output :a]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like {BADPROCEDURE} as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE "badtext]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like badtext as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE []]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE {[a] [output :a]}]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like {[a] [output :a]} as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE ["a [output :a]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like ["a [output :a]] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE [[a] {output :a}]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [[a] {output :a}] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE [[a] output :a]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [[a] output :a] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE [{a b} [FORWARD 10]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [{a b} [FORWARD 10]] as input .
INFO: Running invalid instruction: [DEFINE "BADPROCEDURE [[a b] [FORWARD 10] BADINPUT [FORWARD 10]]]
PASS: error code is 7 , as expected.
INFO: error text is DEFINE doesn't like [[a b] [FORWARD 10] BADINPUT [FORWARD 10]] as input .
PASS: [DEFINED? "BADPROCEDURE] output false , as expected.
INFO: Running invalid instruction: [DEFINE "BUG1520950 [[] APPLY [OUTPUT ?] [3]] BUG1520950]
INFO: error code is 7 .
INFO: error text is DEFINE doesn't like [[] APPLY [OUTPUT ?] [3]] as input .
PASS: [DEFINED? "BUG1520950] output false , as expected.
PASS: [LOCALVARTEST "unknownlocalvar 42] output 42 , as expected.
PASS: [NAME? "unknownlocalvar] output false , as expected.
INFO: Running invalid instruction: [:thisvariableisunbound]
PASS: error code is 11 , as expected.
INFO: error text is thisvariableisunbound has no value .
INFO: Running invalid instruction: [:thisvariableisunbound]
PASS: error code is 11 , as expected.
INFO: error text is thisvariableisunbound has no value .
PASS: [:10] output ten , as expected.
PASS: [:11] output eleven , as expected.
PASS: [:10] output ten , as expected.
PASS: [:11] output eleven , as expected.
INFO: Running invalid instruction: [(LOCAL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOCAL .
INFO: Running invalid instruction: [LOCAL {a}]
FAIL: Running [LOCAL {a}] did not throw an error.
PASS: [LOCALVARTEST "mylocalvarname 42] output 42 , as expected.
PASS: [:mylocalvarname] output 32 , as expected.
INFO: Running invalid instruction: [(LOCALMAKE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LOCALMAKE .
INFO: Running invalid instruction: [(CONTENTS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PROCEDURES] output [#test .eqtest a.colorization.test abstest activeareatest activeareatest.badinput activeareatest.smoketest andtest angleiscloseenough applytest applytest.applyoutput applytest.badinput applytest.bug1519088 applytest.lambdatemplate applytest.lambdatemplate.newscopetest applytest.nestedapply applytest.nonprimitive applytest.nooutput applytest.proceduretexttemplate applytest.proceduretexttemplate.newscopetest applytest.questionmarktemplate applytest.smoketest arcbadinputtest arccostest arcsintest arcsmoketest arctantest arctest arraybadinputtest arrayorigintest arrayptest arraysmoketest arraytest asciitest ashifttest.badinput ashifttest.smoketest backticktest backticktest.badinput backticktest.examplesfrommanual backticktest.smoketest backticktest.wordshorthand beforeptest bitandtest.badinput bitandtest.smoketest bitblocktest bitblocktest.badinput bitblocktest.smoketest bitcopytest bitfittest bitfittest.badinput bitfittest.smoketest bitload.badinput bitloadsizetest bitmaptest bitmodetest bitmodetest.badinput bitmodetest.smoketest bitnottest.badinput bitnottest.smoketest bitortest.badinput bitortest.smoketest bitpastetoindextest.badinput bitpastetoindextest.smoketest bitsave.badinput bitsave.withactivearea bitwisetest bitxortest.badinput bitxortest.smoketest bodyhasallemptylines bodyhasemptylines bug1349374test bug1377856test bug1383281test bug1384267test bug1388325test bug1397560test bug1438863test bug1448155test bug1458661test bug1563318.applysum bug1563318.crash bug1563318.defaultrest bug1563318.oneinput burytest burytest.badinput burytest.buriedprocedure burytest.buryall burytest.procedure burytest.propertylist burytest.variable butfirststest butfirststest.badinput butfirststest.smoketest butfirsttest butlasttest buttonptest byetest byetest.badinput cascadetest cascadetest.badinput cascadetest.smoketest cascadetest.vowel? catchtest catchtest.badinput catchtest.catchbuiltinerror catchtest.catchusererror catchtest.doublecatcherror catchtest.doublecatcherror.innercatcherror catchtest.doublecatcherror.throwerror catchtest.skiperrortag catchtest.skiperrortag.catcherror catchtest.skiperrortag.throw catchtest.skipthrowtag catchtest.skipthrowtag.catchthrowtag catchtest.skipthrowtag.throwerror catchtest.skipthrowtagwithvalue catchtest.skipthrowtagwithvalue.catchinnertag catchtest.skipthrowtagwithvalue.throwoutertag catchtest.smoketest catchtest.smoketest.throw catchtest.throw.builtin.error chartest chdirtest client.onreadytosend colorerracttest colorindextest colornametest colorsetgettest colortest colortest.output.5 combinetest combinetest.badinput combinetest.smoketest commandlinetest commandlinetest.alreadyrunning commandlinetest.parameter.filename commandlinetest.parameter.l commandlinetest.runtest commandlinetest.widthheight controlflowtest copydef.allow.redefinitions copydefmaybeoutputtest copydefoptest copydefoutputtest copydefstoptest copydeftest copydeftest.badinput copydeftest.eraseoriginal copydeftest.infix copydeftest.innontailrecursiveprocedure copydeftest.libraryprocedure copydeftest.nontailrecursivecount copydeftest.primitive copydeftest.primitivewithinputs copydeftest.redefp copydeftest.specialform copydeftest.userdefined copydeftotest costest definedptest definedptest.badinput definedptest.smoketest definetest definetest.badinput definetest.bodyhasemptylines definetest.bodyisallemptylines definetest.smoketest differencetest difficultcomments1 difficultcomments2 directorysmoketest directorytest dllcalltest dllfreetest dllloadtest dllsmoketest dlltest donothing doorientationtest echo edalltest.badinput edalltest.displaybyhwnd editortest edittest.badinput edittest.manyvariables emptyptest equalptest equalptest.badinput equalptest.deeplynestedlist equalptest.international equalptest.smoketest erasetest erasetest.badinput erasetest.eraseall erasetest.eraseprocedure erasetest.erasepropertylist erasetest.erasevariable erasetest.ern erasetest.erpl erracttest erracttest.bug1517326 erracttest.bug1517326.continue5 erracttest.catchblockserract erracttest.changeerract.output.6 erracttest.changeerractinerract erracttest.erractaftercatch erracttest.errorinerract erracttest.output.5 erracttest.output.nexterractvalue erracttest.outputwrongvalue erracttest.recoverableerror.outputnothing erracttest.smoketest erracttest.unrecoverableerror.outputnothing erracttest.unrecoverableerror.outputvalue error.30.test errortest errortest.bug1577034 errortest.call.output.run.5 errortest.output.run.5 evaltest evaltest.catcherrormanytimes evaltest.catchtoomanyinputserror evaltest.nontailrecursive evaltest.nontailrecursivecount evaltest.tailrecursive evaltest.tailrecursivecount exptest fencetest fencetest.badinput fencetest.bug1573061 fencetest.smoketest filetest filetest.allopen filetest.badinput filetest.closeall filetest.closereader filetest.dribble filetest.eofponstdin filetest.erasefile filetest.openappend filetest.opendirectoryasfile filetest.openopenfile filetest.openopenfile.helper filetest.openupdate filetest.setread.closedfile filetest.setreadpos filetest.setwritepos filetest.smoketest filltest filltimerevent firststest firststest.badinput firststest.smoketest firsttest floodcolortest fontfacenamestest fontfacenamestest.badinput fontfacenamestest.manualtest fontfacenamestest.smoketest foreachtest foreachtest.badinput foreachtest.output foreachtest.output.from.variable foreachtest.output.from.variable.worker foreachtest.output.worker foreachtest.smoketest foreachtest.stop forevertest forevertest.badinput forevertest.errorinforever forevertest.outputinforever forevertest.smoketest forevertest.stopinforever formtest formtest.badinput formtest.bug1327706 formtest.smoketest fputtest fputtest.badinput fputtest.smoketest fulltexttest fulltexttest.badinput fulltexttest.smoketest gif.smoketest gifload.badinput gifsave.badinput gifsave.overwritesfile gifsize.badinput gifsize.smoketest giftest goldenratiotest greaterequalptest greaterequalptest.badinput greaterequalptest.smoketest greaterptest greaterptest.badinput greaterptest.smoketest greatlogoatlastest greatlogoatlastest.tok1.1 greatlogoatlastest.tok1.10 greatlogoatlastest.tok1.11 greatlogoatlastest.tok1.2 greatlogoatlastest.tok1.3 greatlogoatlastest.tok1.4 greatlogoatlastest.tok1.5 greatlogoatlastest.tok1.6 greatlogoatlastest.tok1.7 greatlogoatlastest.tok1.8 greatlogoatlastest.tok1.9 greatlogoatlastest.tok2.1 greatlogoatlastest.tok2.2 greatlogoatlastest.tok2.3 greatlogoatlastest.tok2.4 greatlogoatlastest.tok2.5 greatlogoatlastest.tok3.1 greatlogoatlastest.tok3.2 greatlogoatlastest.tok3.3 greatlogoatlastest.tok3.4 greatlogoatlastest.tok3.5 greatlogoatlastest.tok3.6 greatlogoatlastest.tok3.7 greatlogoatlastest.tok3.8 greatlogoatlastest.tok3.9 helptest i.dont.know.what.to.do.with.value iftest inporttest inttest iseqtest itemtest itemtest.badinput itemtest.badinput.recoverable itemtest.output.2 itemtest.smoketest labelbadinputtest labelcircletest labeltest lasttest lessequalptest lessequalptest.badinput lessequalptest.smoketest lessptest lessptest.badinput lessptest.smoketest linecontinuation3 listptest listtest listtest.smoketest listtoarraytest listtoarraytest.badinput listtoarraytest.smoketest lntest loadtest localvartest log10test logictest logoversiontest logoversiontest.badinput logoversiontest.smoketest lowercasetest lowercasetest.badinput lowercasetest.international lowercasetest.smoketest lputtest lputtest.badinput lputtest.smoketest lshifttest.badinput lshifttest.smoketest macro.return.unbound.instead.of.list macroexpandtest macroexpandtest.badinput macroexpandtest.macroforward macroexpandtest.outputnothing macroexpandtest.smoketest macrotest macrotest.myrun macrotest.outputnothing macrotest.outputtest macrotest.smoketest macrotest.stoptest maptest maptest.badinput maptest.smoketest mathtest mdarraytest mdarraytest.badinput mdarraytest.onedimensional mdarraytest.origin mdarraytest.smoketest mditemtest.badinput mditemtest.smoketest mdsetitemtest.badinput mdsetitemtest.smoketest memberptest messageboxtest messageboxtest.badinput messageboxtest.smoketest miditest miditest.badinput miditest.devicezero miditest.longformat miditest.playtune miditest.runalreadyopentest miditest.rundevicenotopentest miditest.smoketest minustest misctest mkdirtest modulotest mousetest mousetest.badinput mousetest.simpletest multidllloadtest my.proc.to.step myadd mymacro nearest.decimal.places networktest networktest.client.echo networktest.client.receivelargepacket networktest.client.receiveunframedpacket networktest.client.shutdownrace networktest.client.smoketest networktest.hostname networktest.netshutdowncrash networktest.server.receiveunframedpacket networktest.server.shutdownrace networktest.server.twoconnections networktest.servercommand networktest.smoketest no.input.no.output nodestest notequalptest notequalptest.badinput notequalptest.smoketest nottest numberptest one.input.no.output orientationtest orientationtest.bug1429938 ortest outporttest output.373 parsetest parsetest.deeplynestedinfixexpression parsetest.deeplyparenthesizedexpression parsetest.expression parsetest.func parsetest.infixexpression parsetest.infixexpression.priority parsetest.longinstructionline parsetest.longinstructionlinewithcatch parsetest.lotsofnegationoperators parsetest.manyinputs parsetest.manynestedcalls parsetest.number parsetest.parsechar255 parsetest.symbolsofinclusion parsetest.word pasteincircle pencolortest penmodetest pensizetest pensizetest.badinput pensizetest.setgettest pensizetest.smoketest pentest penupdowntest perspectivetest perspectivetest.badinput perspectivetest.smoketest pitest pixeltest pixeltest.badinput pixeltest.smoketest plisttest polygontest polygontest.definepolygon polygontest.drawface polygontest.rotateperspective polygontest.smoketest porttest potest potest.badinput potest.smoketest powertest predicatetest printtest printtest.deeplynestedarray printtest.deeplynestedlist printtest.performance printtest.printdepthandwidthlimit printtest.printdepthlimit printtest.printwidthlimit printtest.pseudoloc printtest.runprintdepthlimittest printtest.runprintwidthlimittest printtest.smoketest procedure.shadows.myshadowedvar procedure.with.to.inside.it procedureinworkingdirectory procedureptest procedureptest.badinput procedureptest.smoketest proceduretest proceduretest.complexproc proceduretest.àcçênt producttest questionboxtest questionboxtest.badinput questionboxtest.smoketest queuetest queuetest.badinput queuetest.circulartest queuetest.smoketest quotedtest quotedtest.badinput quotedtest.smoketest quotienttest radarccostest radarcsintest radarctantest radcostest radsintest radtantest randomtest randomtest.badinput randomtest.smoketest rawasciitest readcharstest readcharstest.badinput readcharstest.commander readcharstest.eoftest readcharstest.readbinarydata readcharstest.smoketest readchartest readchartest.badinput readchartest.readdata readchartest.smoketest readrawlinetest readrawlinetest.badinput readrawlinetest.readrawlinefromui readrawlinetest.smoketest readrawlinetest.ui readrawlinetest.uicancel readwordtest readwordtest.badinput readwordtest.readwordfromui readwordtest.smoketest readwordtest.ui readwordtest.uicancel reducetest reducetest.badinput reducetest.max reducetest.max.rest reducetest.smoketest refreshtest remaindertest remduptest remduptest.badinput remduptest.smoketest removetest removetest.badinput removetest.smoketest repcounttest repcounttest.badinput repcounttest.smoketest repcounttest.timercallback repcounttest.timertest repeattest repeattest.badinput repeattest.errorinrepeat repeattest.outputinrepeat repeattest.smoketest repeattest.stopinrepeat rerandomtest.badinput rerandomtest.smoketest reversetest reversetest.badinput reversetest.smoketest rmdirtest round.vector roundtest runparsetest runparsetest.badinput runparsetest.smoketest runresulttest runresulttest.badinput runresulttest.smoketest runtest sampleproc screencolortest screentest scrunchtest selectboxtest selectboxtest.badinput selectboxtest.smoketest sentencetest sentencetest.badinput sentencetest.noalias sentencetest.smoketest setbitindex.badinput setbitindex.smoketest setbitmodetest.badinputisrecoverable setbitmodetest.converttointeger setbitmodetest.output.2 setitemtest setlabelfonttest setpixeltest.badinput setpixeltest.smoketest setrandomorientation shellscripttest shelltest shelltest.badinput shelltest.smoketest shelltest.waityields signtest sintest slowdrawtest slowdrawtest.badinput slowdrawtest.buried slowdrawtest.redefptest slowdrawtest.smoketest slowdrawtest.timecommand sorttest sorttest.after? sorttest.badinput sorttest.nonpredicate sorttest.oneinputbydefault sorttest.oneinputproc sorttest.performance sorttest.regression sorttest.sortbylegs sorttest.sortbyname sorttest.threeinputproc soundtest soundtest.badinput soundtest.frequency.a4 soundtest.frequency.b4 soundtest.frequency.c4 soundtest.frequency.c5 soundtest.frequency.d4 soundtest.frequency.d5 soundtest.frequency.e4 soundtest.frequency.f4 soundtest.frequency.g4 soundtest.sound soundtest.tone sqrttest stacktest stacktest.badinput stacktest.circulartest stacktest.smoketest statustest statustest.badinput statustest.smoketest steptest steptest.badinput steptest.procedure steptest.propertylist steptest.shadowvariable steptest.stepall steptest.steppedprocedure steptest.variable sumtest tantest testall testlib.repeatword testsmallwindowhang testtest testtest.badinput testtest.scopetest testtest.smoketest texttest texttest.badinput texttest.smoketest thingtest thingtest.badinput thingtest.shadowedvariable thingtest.smoketest throwtest.badinput throwtest.usererror throwtest.usererror.actualthrowlocation tildainline timertest timertest.badinput timertest.largecallback timertest.runnotfoundtest timertest.smoketest timetest timetest.badinput timetest.smoketest timewait totest totest.baddefaultinputs totest.chaineddefaults totest.chaineddefaultstest totest.defaultinput totest.defaultnumberofinputs totest.nooutput totest.output5 totest.outputdefaultinput totest.outputdefaultinput.twoinputs totest.outputrest totest.outputrest.twoinputs totest.repeatedinput totest.repeatedinputtest totest.rest totest.singleinput totest.smoketest tracetest tracetest.badinput tracetest.capturetrace tracetest.checktrace tracetest.checktrace.inner tracetest.function tracetest.procedure tracetest.procedure.defaultinputs tracetest.procedure.restinput tracetest.propertylist tracetest.traceall tracetest.tracedfunction tracetest.tracedprocedure tracetest.tracedprocedure.withinputs tracetest.variable turtlemodetest turtlemodetest.badinput turtlemodetest.smoketest turtletest turtletest.badinput turtletest.characteristics turtletest.smoketest turtletest.withownpen typetest typetest.smoketest uppercasetest uppercasetest.badinput uppercasetest.international uppercasetest.smoketest waittest waittest.badinput waittest.smoketest windowfileedittest windowfileedittest.bug1330752 windowfileedittest.longfilename windowsettest windowsettest.badinput windowsettest.bug1429960 windowstest windowstest.button windowstest.button.badinput windowstest.checkbox windowstest.checkbox.badinput windowstest.checkbox.deletegroupbox windowstest.combobox windowstest.combobox.badinput windowstest.debugwindows windowstest.debugwindows.badinput windowstest.debugwindows.stress windowstest.dialog.badinput windowstest.dialog.badinput.fromcallback windowstest.dialog.smoketest windowstest.groupbox windowstest.groupbox.badinput windowstest.listbox windowstest.listbox.badinput windowstest.mainwindow.smoketest windowstest.radiobutton windowstest.radiobutton.badinput windowstest.radiobutton.deletegroupbox windowstest.regressiontest windowstest.scrollbar windowstest.scrollbar.badinput windowstest.scrollbar.badinput.output.5 windowstest.setup windowstest.static windowstest.static.badinput windowstest.window.badinput windowstest.window.smoketest windowtest windowtest.badinput windowtest.smoketest wordproctest wordptest wordtest workspacetest workspacetest.arraywithbinarydata.allvalues workspacetest.arraywithbinarydata.allvalues.saveandload workspacetest.arraywithbinarydata.eachvalueseparately workspacetest.saveandloadshortarray workspacetest.saveandloadshortword workspacetest.savepartofworkspace workspacetest.wordwithbinarydata.allvalues workspacetest.wordwithbinarydata.eachvalueseparately wraptest wraptest.badinput wraptest.smoketest yesnoboxtest yesnoboxtest.badinput yesnoboxtest.smoketest zoomtest zoomtest.badinput zoomtest.smoketest zoomtest.zoomstayscentered ~callme ~ignoreme] , as expected.
INFO: Running invalid instruction: [(PROCEDURES "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NAMES] output [[] [10 11 12 13 a array caseignoredp count erract erract.was.called expectedresult instruction lambda.function.ran mylocalvarname namepvariable something.to.break.tail.recursion startup sum testlog thesum word1 word2]] , as expected.
INFO: Running invalid instruction: [(NAMES "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PLISTS] output [[] [] []] , as expected.
INFO: Running invalid instruction: [(PLISTS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [NAMELIST "a] output [[] [a]] , as expected.
PASS: [NAMELIST [a b]] output [[] [a b]] , as expected.
PASS: [NAMELIST "] output [[] []] , as expected.
PASS: [NAMELIST []] output [[] []] , as expected.
INFO: Running invalid instruction: [(NAMELIST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to NAMELIST .
INFO: Running invalid instruction: [NAMELIST {a b}]
INFO: error code is 4 .
INFO: error text is NAMELIST doesn't like {a b} as input .
INFO: Running invalid instruction: [(NAMELIST "a "b)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: PO CONTENTS
CALL: PO NAMES
CALL: PO PROCEDURES
CALL: PO BURIED
CALL: PO PLISTS
CALL: PO []
CALL: POALL
CALL: POPS
CALL: PONS
CALL: POPLS
PASS: Running [POT "SAMPLEPROC] printed TO SAMPLEPROC  :a  :b , as expected.
PASS: Running [POT "PROCEDURETEST.COMPLEXPROC] printed TO PROCEDURETEST.COMPLEXPROC :a :b [:c 1] [:d SUM 1 2] [:e] 2   , as expected.
PASS: Running [PO "SAMPLEPROC] printed TO SAMPLEPROC  :a  :b , as expected.
PASS: Running [PO "SAMPLEPROC] printed   PRINT :a ; print , as expected.
PASS: Running [PO "SAMPLEPROC] printed   SHOW  :b ; show , as expected.
PASS: Running [PO "SAMPLEPROC] printed END , as expected.
PASS: Running [PO "SAMPLEPROC] printed  , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed TO PROCEDURETEST.COMPLEXPROC :a :b [:c 1] [:d SUM 1 2] [:e] 2   , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed   PRINT :a ; print , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed   SHOW  :b ; show , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed  , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed   OUTPUT SUM :c :d ; output , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed END , as expected.
PASS: Running [PO "PROCEDURETEST.COMPLEXPROC] printed  , as expected.
PASS: Running [PON "namepvariable] printed Make "namepvariable 0 , as expected.
PASS: Running [PON [namepvariable]] printed Make "namepvariable 0 , as expected.
CALL: PPROP "wordtonumber "one 1
CALL: PPROP "wordtonumber "two 2
CALL: PPROP "numbertoword 1 "one
CALL: PPROP "numbertoword 2 "two
PASS: Running [POPL "wordtonumber] printed Pprop "wordtonumber "two 2 , as expected.
PASS: Running [POPL "wordtonumber] printed Pprop "wordtonumber "one 1 , as expected.
PASS: Running [POPL "numbertoword] printed Pprop "numbertoword 2 "two , as expected.
PASS: Running [POPL "numbertoword] printed Pprop "numbertoword 1 "one , as expected.
PASS: Running [POPL [wordtonumber numbertoword nonexistent]] printed Pprop "wordtonumber "two 2 , as expected.
PASS: Running [POPL [wordtonumber numbertoword nonexistent]] printed Pprop "wordtonumber "one 1 , as expected.
PASS: Running [POPL [wordtonumber numbertoword nonexistent]] printed Pprop "numbertoword 2 "two , as expected.
PASS: Running [POPL [wordtonumber numbertoword nonexistent]] printed Pprop "numbertoword 1 "one , as expected.
INFO: Running invalid instruction: [(POPL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POPL .
INFO: Running invalid instruction: [(POPL "numbertoword "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: Running [PON [noindex]] printed Make "noindex {1 2 3} , as expected.
PASS: Running [PON [positiveindex]] printed Make "positiveindex {1 2 3}@10 , as expected.
PASS: Running [PON [negativeindex]] printed Make "negativeindex {1 2 3}@-10 , as expected.
PASS: Running [PON [oneindex]] printed Make "oneindex {1 2 3} , as expected.
INFO: Running invalid instruction: [(PO)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PO .
INFO: Running invalid instruction: [(PO [[] [] []] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PO [[forward] [] []]]
PASS: error code is 22 , as expected.
INFO: error text is forward is a primitive .
INFO: Running invalid instruction: [PO [[nonexistent] [] []]]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [PO [[] [nonexistent] []]]
PASS: error code is 11 , as expected.
INFO: error text is nonexistent has no value .
INFO: Running invalid instruction: [PO {PROCEDURETEST}]
INFO: error code is 4 .
INFO: error text is PO doesn't like {PROCEDURETEST} as input .
INFO: Running invalid instruction: [PO [[PROCEDURETEST] [namepvariable] {c}]]
INFO: error code is 4 .
INFO: error text is PO doesn't like {c} as input .
INFO: Running invalid instruction: [PO [PROCEDURETEST SAMPLEPROC {c}]]
INFO: error code is 4 .
INFO: error text is PO doesn't like {c} as input .
INFO: Running invalid instruction: [PO [[PROCEDURETEST SAMPLEPROC {c}]]]
INFO: error code is 4 .
INFO: error text is PO doesn't like {c} as input .
INFO: Running invalid instruction: [PO [[PROCEDURETEST] [namepvariable] [c] [d]]]
INFO: error code is 4 .
INFO: error text is PO doesn't like [[PROCEDURETEST] [namepvariable] [c] [d]] as input .
INFO: Running invalid instruction: [PO [[[PROCEDURETEST]]]]
INFO: error code is 4 .
INFO: error text is PO doesn't like [PROCEDURETEST] as input .
INFO: Running invalid instruction: [(POALL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(POPS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(POPLS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(POTS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(PON)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PON .
INFO: Running invalid instruction: [PON "sampleproc]
INFO: error code is 21 .
INFO: error text is sampleproc has no value .
INFO: Running invalid instruction: [(PON "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PON {a b}]
INFO: error code is 21 .
INFO: error text is namelist doesn't like {a b} as input .
INFO: Running invalid instruction: [(POT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to POT .
INFO: Running invalid instruction: [(POT "pot "pots)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [POT "forward]
INFO: error code is 22 .
INFO: error text is forward is a primitive .
INFO: Running invalid instruction: [POT "nonexistent]
INFO: error code is 24 .
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [POT [nonexistent]]
INFO: error code is 24 .
INFO: error text is I don't know how to nonexistent .
INFO: Running invalid instruction: [POT {a}]
INFO: error code is 4 .
INFO: error text is POT doesn't like {a} as input .
PASS: "Bug #1438863 is fixed; erasing a procedure in the middle of running it does not crash
INFO: Running a macro that should stop the caller
INFO: Running a macro that should output the caller
PASS: [MACROTEST.OUTPUTTEST] output 123 , as expected.
PASS: [REDUCE "REDUCETEST.MAX [2 3 8 7 9 0]] output 9 , as expected.
PASS: [(REDUCETEST.MAX.REST 2 3 8 7 9 0)] output 9 , as expected.
PASS: [REDUCE [IFELSE ?1 > ?2 [?1] [?2]] [2 3 8 7 9 0]] output 9 , as expected.
PASS: [REDUCE "DOESNOTEXIST [100]] output 100 , as expected.
PASS: [REDUCE "WORD "abcde] output abcde , as expected.
INFO: Running invalid instruction: [(REDUCE "REDUCETEST.MAX)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REDUCE .
INFO: Running invalid instruction: [(REDUCE "REDUCETEST.MAX [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REDUCE 100 [1]]
FAIL: Running [REDUCE 100 [1]] did not throw an error.
INFO: Running invalid instruction: [REDUCE "SUM {1 2 3}]
INFO: error code is 7 .
INFO: error text is bf doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [REDUCE "SUM []]
INFO: error code is 7 .
INFO: error text is bf doesn't like [] as input .
INFO: Running invalid instruction: [REDUCE "WORD "]
INFO: error code is 7 .
INFO: error text is bf doesn't like  as input .
PASS: [SUMCOPY 1 2] output 3 , as expected.
PASS: [(SUMCOPY 1 2 3)] output 6 , as expected.
PASS: [(SUMCOPY)] output 0 , as expected.
INFO: Running invalid instruction: [SUMCOPY 1 "ten]
PASS: error code is 7 , as expected.
INFO: error text is SUMCOPY doesn't like ten as input .
INFO: Running invalid instruction: [SUMCOPY "ten 1]
PASS: error code is 7 , as expected.
INFO: error text is SUMCOPY doesn't like ten as input .
PASS: [1 MYPLUS 2] output 3 , as expected.
PASS: [1 MYPLUS 2 MYPLUS 3] output 6 , as expected.
INFO: Running invalid instruction: [1 MYPLUS "ten]
PASS: error code is 7 , as expected.
INFO: error text is MYPLUS doesn't like ten as input .
INFO: Running invalid instruction: ["ten MYPLUS 1]
PASS: error code is 7 , as expected.
INFO: error text is MYPLUS doesn't like ten as input .
INFO: Running invalid instruction: [(MYPLUS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MYPLUS .
PASS: [MYADDCOPY 1 2] output 3 , as expected.
PASS: [MEMBERP "MYADDCOPY ITEM 1 BURIED] output true , as expected.
PASS: Running [POT "MYADDCOPY] printed TO MYADDCOPY :a :b , as expected.
CALL: COPYDEFSTOPTEST
PASS: [COPYDEFOUTPUTTEST] output 373 , as expected.
PASS: [COPYDEFOPTEST] output 373 , as expected.
PASS: [COPYDEFMAYBEOUTPUTTEST] output 373 , as expected.
PASS: [COPYDEFTOTEST] output 373 , as expected.
CALL: COPYDEF.ALLOW.REDEFINITIONS "COPYDEF.SETXY "SETXY
INFO: Running COPYDEF.SETXY 123 456
PASS: [POS] output [123 456] , as expected.
CALL: ERASE "XCOR
CALL: COPYDEF "COPYDEF.XCOR "XCOR
CALL: SETX 10
PASS: [COPYDEF.XCOR] output 10 , as expected.
CALL: MAKE "redefp "true
CALL: COPYDEF "mysum "sum
CALL: COPYDEF "mysum "sum
CALL: MAKE "redefp "false
INFO: Running invalid instruction: [COPYDEF "mysum "sum]
PASS: error code is 22 , as expected.
INFO: error text is mysum is a primitive .
CALL: DEFINE "COPYDEFTEST.ERASEME [[] [OUTPUT 12345]]
CALL: COPYDEF "COPYDEFTEST.ERASEMECOPY "COPYDEFTEST.ERASEME
CALL: ERASE "COPYDEFTEST.ERASEME
INFO: Running invalid instruction: [COPYDEFTEST.ERASEME]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to COPYDEFTEST.ERASEME .
PASS: [COPYDEFTEST.ERASEMECOPY] output 12345 , as expected.
INFO: Running invalid instruction: [(COPYDEF)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to COPYDEF .
INFO: Running invalid instruction: [(COPYDEF "MYLIST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to COPYDEF .
INFO: Running invalid instruction: [(COPYDEF "MYLIST "LIST "TOOMANY)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(COPYDEF "SUM "PRODUCT)]
PASS: error code is 22 , as expected.
INFO: error text is SUM is a primitive .
INFO: Running invalid instruction: [(COPYDEF "XXXCOPY "DOESNOTEXIT)]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to DOESNOTEXIT .
INFO: Running invalid instruction: [(COPYDEF [1] "SUM)]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like [1] as input .
INFO: Running invalid instruction: [(COPYDEF {1} "SUM)]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like {1} as input .
INFO: Running invalid instruction: [(COPYDEF 1 "SUM)]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like 1 as input .
INFO: Running invalid instruction: [(COPYDEF -1 "SUM)]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like -1 as input .
INFO: Running invalid instruction: [(COPYDEF "NEWCOPY [1] )]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like [1] as input .
INFO: Running invalid instruction: [(COPYDEF "NEWCOPY {1} )]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like {1} as input .
INFO: Running invalid instruction: [(COPYDEF "NEWCOPY 1 )]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like 1 as input .
INFO: Running invalid instruction: [(COPYDEF "NEWCOPY -1 )]
PASS: error code is 7 , as expected.
INFO: error text is COPYDEF doesn't like -1 as input .
INFO: Running invalid instruction: [(NEWCOPY)]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to NEWCOPY .
INFO: Running invalid instruction: [(COPYDEF "SUMCOPY "SUM)]
PASS: error code is 22 , as expected.
INFO: error text is SUMCOPY is a primitive .
PASS: [GPROP "nonexistent "prop1] output [] , as expected.
PASS: [GPROP "testplist1 "nonexistent] output [] , as expected.
PASS: [GPROP "testplist1 "property1] output 1 , as expected.
PASS: [GPROP "testplist1 "property2] output abc , as expected.
PASS: [GPROP "testplist1 "property3] output [a b c] , as expected.
PASS: [GPROP "testplist1 "property4] output {a b c} , as expected.
PASS: [GPROP "testplist1 "property5] output [] , as expected.
PASS: [GPROP "testplist1 "property6] output  , as expected.
PASS: [GPROP "testplist1 "] output empty , as expected.
PASS: [GPROP "testplist1 "property1] output one , as expected.
PASS: [PLIST "nonexistent] output [] , as expected.
PASS: [COUNT :listcontents] output 14 , as expected.
PASS: [:value] output empty , as expected.
PASS: [:value] output  , as expected.
PASS: [:value] output [] , as expected.
PASS: [:value] output {a b c} , as expected.
PASS: [:value] output [a b c] , as expected.
PASS: [:value] output abc , as expected.
PASS: [:value] output one , as expected.
PASS: [COUNT :plistsoutput] output 3 , as expected.
PASS: [ITEM 1 :plistsoutput] output [] , as expected.
PASS: [ITEM 2 :plistsoutput] output [] , as expected.
PASS: [MEMBERP "testplist1 ITEM 3 :plistsoutput] output true , as expected.
PASS: [COUNT :plistsoutput] output 3 , as expected.
PASS: [ITEM 1 :plistsoutput] output [] , as expected.
PASS: [ITEM 2 :plistsoutput] output [] , as expected.
PASS: [MEMBERP "testplist1 ITEM 3 :plistsoutput] output false , as expected.
PASS: [GPROP "testplist1 "property1] output [] , as expected.
PASS: [GPROP "testplist1 "property2] output [] , as expected.
PASS: [GPROP "testplist1 "property3] output [] , as expected.
PASS: [GPROP "testplist1 "property4] output [] , as expected.
PASS: [GPROP "testplist1 "property5] output [] , as expected.
PASS: [GPROP "testplist1 "property6] output [] , as expected.
PASS: [GPROP "testplist1 "] output [] , as expected.
PASS: [PLIST "testplist1] output [] , as expected.
INFO: Running invalid instruction: [(PLIST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PLIST .
INFO: Running invalid instruction: [(PLIST "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PLIST [1 2 3]]
INFO: error code is 7 .
INFO: error text is PLIST doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [PLIST {1 2 3}]
INFO: error code is 7 .
INFO: error text is PLIST doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(REMPROP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMPROP .
INFO: Running invalid instruction: [(REMPROP "plist)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to REMPROP .
INFO: Running invalid instruction: [(REMPROP "plist "prop "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [REMPROP [1 2 3] "prop]
INFO: error code is 7 .
INFO: error text is REMPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [REMPROP {1 2 3} "prop]
INFO: error code is 7 .
INFO: error text is REMPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [REMPROP "plist [1 2 3]]
INFO: error code is 7 .
INFO: error text is REMPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [REMPROP "plist {1 2 3}]
INFO: error code is 7 .
INFO: error text is REMPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(GPROP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GPROP .
INFO: Running invalid instruction: [(GPROP "plist)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GPROP .
INFO: Running invalid instruction: [(GPROP "plist "prop "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GPROP [1 2 3] "prop]
INFO: error code is 7 .
INFO: error text is GPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [GPROP {1 2 3} "prop]
INFO: error code is 7 .
INFO: error text is GPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [GPROP "plist [1 2 3]]
INFO: error code is 7 .
INFO: error text is GPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [GPROP "plist {1 2 3}]
INFO: error code is 7 .
INFO: error text is GPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(PPROP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PPROP .
INFO: Running invalid instruction: [(PPROP "plist)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PPROP .
INFO: Running invalid instruction: [(PPROP "plist "prop)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PPROP .
INFO: Running invalid instruction: [(PPROP "plist "name "value "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PPROP [1 2 3] "name "value]
INFO: error code is 7 .
INFO: error text is PPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [PPROP {1 2 3} "name "value]
INFO: error code is 7 .
INFO: error text is PPROP doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [PPROP "plist [1 2 3] "value]
INFO: error code is 7 .
INFO: error text is PPROP doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [PPROP "plist {1 2 3} "value]
INFO: error code is 7 .
INFO: error text is PPROP doesn't like {1 2 3} as input .
PASS: [PLLIST "a] output [[] [] [a]] , as expected.
PASS: [PLLIST "] output [[] [] []] , as expected.
PASS: [PLLIST [a b]] output [[] [] [a b]] , as expected.
PASS: [PLLIST []] output [[] [] []] , as expected.
INFO: Running invalid instruction: [(PLLIST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to PLLIST .
INFO: Running invalid instruction: [(PLLIST "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [PLLIST {a b}]
INFO: error code is 4 .
INFO: error text is PLLIST doesn't like {a b} as input .
PASS: "if "true ran the "true branch, as expected
PASS: if "false ran the "false branch, as expected
PASS: if "true ran the "true branch, as expected
PASS: IF could be used as an r-val, as expected.
INFO: Running invalid instruction: [if 1 []]
INFO: error code is 7 .
INFO: error text is if doesn't like 1 as input .
INFO: Running invalid instruction: [if 0 []]
INFO: error code is 7 .
INFO: error text is if doesn't like 0 as input .
INFO: Running invalid instruction: [if "yes []]
INFO: error code is 7 .
INFO: error text is if doesn't like yes as input .
INFO: Running invalid instruction: [if "no []]
INFO: error code is 7 .
INFO: error text is if doesn't like no as input .
INFO: Running invalid instruction: [if [1] []]
INFO: error code is 7 .
INFO: error text is if doesn't like [1] as input .
INFO: Running invalid instruction: [if {1} []]
INFO: error code is 7 .
INFO: error text is if doesn't like {1} as input .
INFO: Running invalid instruction: [if "true {1}]
INFO: error code is 7 .
INFO: error text is if doesn't like {1} as input .
INFO: Running invalid instruction: [(if)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to if .
INFO: Running invalid instruction: [(if "true)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to if .
INFO: Running invalid instruction: [(if "false)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to if .
INFO: Running invalid instruction: [(if "true [] [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [#] output -1 , as expected.
INFO: Running invalid instruction: [(# "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running [TEST "true]
CALL: MAKE "iftrue.was.run "false
CALL: MAKE "iffalse.was.run "false
CALL: IFTRUE [MAKE "iftrue.was.run "true]
CALL: IFFALSE [MAKE "iffalse.was.run "true]
PASS: [:iftrue.was.run] output true , as expected.
PASS: [:iffalse.was.run] output false , as expected.
CALL: MAKE "iftrue.was.run "false
CALL: MAKE "iffalse.was.run "false
CALL: IFTRUE [MAKE "iftrue.was.run "true]
CALL: IFFALSE [MAKE "iffalse.was.run "true]
PASS: [:iftrue.was.run] output true , as expected.
PASS: [:iffalse.was.run] output false , as expected.
INFO: Running [TEST "false]
CALL: MAKE "iftrue.was.run "false
CALL: MAKE "iffalse.was.run "false
CALL: IFTRUE [MAKE "iftrue.was.run "true]
CALL: IFFALSE [MAKE "iffalse.was.run "true]
PASS: [:iftrue.was.run] output false , as expected.
PASS: [:iffalse.was.run] output true , as expected.
INFO: Running invalid instruction: [(TEST)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TEST .
INFO: Running invalid instruction: [(TEST "true "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [TEST "word]
INFO: error code is 7 .
INFO: error text is TEST doesn't like word as input .
INFO: Running invalid instruction: [TEST 1234]
INFO: error code is 7 .
INFO: error text is TEST doesn't like 1234 as input .
INFO: Running invalid instruction: [TEST [1234]]
INFO: error code is 7 .
INFO: error text is TEST doesn't like [1234] as input .
INFO: Running invalid instruction: [TEST {1234}]
INFO: error code is 7 .
INFO: error text is TEST doesn't like {1234} as input .
INFO: Running invalid instruction: [IFTRUE []]
PASS: error code is 25 , as expected.
INFO: error text is IFTRUE without TEST .
INFO: Running invalid instruction: [IFFALSE []]
PASS: error code is 25 , as expected.
INFO: error text is IFFALSE without TEST .
INFO: Running invalid instruction: [(IFTRUE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to IFTRUE .
INFO: Running invalid instruction: [(IFTRUE [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [IFTRUE {1234}]
INFO: error code is 7 .
INFO: error text is IFTRUE doesn't like {1234} as input .
INFO: Running invalid instruction: [(IFFALSE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to IFFALSE .
INFO: Running invalid instruction: [(IFFALSE [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [IFFALSE {1234}]
INFO: error code is 7 .
INFO: error text is IFFALSE doesn't like {1234} as input .
CALL: TEST "TRUE
INFO: Running invalid instruction: [IFTRUE []]
PASS: error code is 25 , as expected.
INFO: error text is IFTRUE without TEST .
INFO: Running invalid instruction: [IFFALSE []]
PASS: error code is 25 , as expected.
INFO: error text is IFFALSE without TEST .
INFO: executing regression test for bug #1383281
PASS: Bug #1382181 is fixed. 'FOREACH [1] [[] []] ' did not crash.
PASS: Bug #1448155 is fixed. 'IF' used the IF->IFELSE mapping.
PASS: [CASCADE 5 [LPUT # ?] []] output [1 2 3 4 5] , as expected.
PASS: [CASCADE [CASCADETEST.VOWEL? FIRST ?] [BUTFIRST ?] "spring] output ing , as expected.
PASS: [CASCADE 5 [# * ?] 1] output 120 , as expected.
INFO: Running invalid instruction: [(CASCADE 5 [LPUT # ?] )]
FAIL: error code is 4 .  We expected 6 .
INFO: error text is ? doesn't like 1 as input .
INFO: Running invalid instruction: [CASCADE -1 [LPUT # ?] []]
INFO: error code is 4 .
INFO: error text is CASCADE doesn't like -1 as input .
PASS: [ACTIVEAREA] output [0 100 200 300] , as expected.
PASS: [ACTIVEAREA] output [0 0 200 200] , as expected.
PASS: [ACTIVEAREA] output [-100 -100 100 100] , as expected.
PASS: [ACTIVEAREA] output [-500 -500 500 500] , as expected.
PASS: [ACTIVEAREA] output [-500 -500 500 500] , as expected.
INFO: Running invalid instruction: [(SETACTIVEAREA)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETACTIVEAREA .
INFO: Running invalid instruction: [(SETACTIVEAREA 0 0)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETACTIVEAREA 0 0 50)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETACTIVEAREA 0 0 50 50)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETACTIVEAREA [0] )]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0] as input .
INFO: Running invalid instruction: [(SETACTIVEAREA [0 0] )]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0] as input .
INFO: Running invalid instruction: [(SETACTIVEAREA [0 0 50] )]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50] as input .
INFO: Running invalid instruction: [(SETACTIVEAREA [0 0 50 50 50] )]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA 0]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like 0 as input .
INFO: Running invalid instruction: [SETACTIVEAREA "0,0,50,50]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like 0,0,50,50 as input .
INFO: Running invalid instruction: [SETACTIVEAREA {0 0 50 50}]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like {0 0 50 50} as input .
INFO: Running invalid instruction: [SETACTIVEAREA [zero 0 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [zero 0 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [[0] 0 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [[0] 0 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [{0} 0 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [{0} 0 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [-1e20 0 50 50]]
FAIL: Running [SETACTIVEAREA [-1e+20 0 50 50]] did not throw an error.
INFO: Running invalid instruction: [SETACTIVEAREA [0 zero 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 zero 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 [0] 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 [0] 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 {0} 50 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 {0} 50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 -1e20 50 50]]
FAIL: Running [SETACTIVEAREA [0 -1e+20 50 50]] did not throw an error.
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 fifty 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 fifty 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 [50] 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 [50] 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 {50} 50]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 {50} 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 1e20 50]]
FAIL: Running [SETACTIVEAREA [0 0 1e+20 50]] did not throw an error.
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 fifty]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 fifty] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 [50]]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 [50]] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 {50}]]
PASS: error code is 7 , as expected.
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 {50}] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 1e20]]
FAIL: Running [SETACTIVEAREA [0 0 50 1e+20]] did not throw an error.
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 -50 50]]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETACTIVEAREA doesn't like [0 0 -50 50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 50 -50]]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETACTIVEAREA doesn't like [0 0 50 -50] as input .
INFO: Running invalid instruction: [SETACTIVEAREA [0 0 0 0]]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is SETACTIVEAREA doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [(ACTIVEAREA "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
FAIL: [ACTIVEAREA] output [0 0 50 2147483647] . We expected [1 1 2 2] .
PASS: [BITLOADSIZE "bitmap-test.bmp] output [100 100] , as expected.
PASS: [BITLOADSIZE "bitmap-test.bmp] output [100 101] , as expected.
PASS: [BITLOADSIZE "bitmap-test.bmp] output [101 100] , as expected.
INFO: Running invalid instruction: [(BITLOAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITLOAD .
INFO: Running invalid instruction: [(BITLOAD "file.gif "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BITLOAD "doesnotexist.bmp]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
INFO: Running invalid instruction: [BITLOAD {a b c}]
FAIL: error code is 1211 .  We expected 7 .
INFO: error text is Could not open .bmp .
INFO: Running invalid instruction: [BITLOAD [a b c]]
FAIL: error code is 1211 .  We expected 7 .
INFO: error text is Could not open .bmp .
INFO: Running invalid instruction: [BITLOAD "bitmap.lgo]
PASS: error code is 1214 , as expected.
PASS: error text is Not a Windows 3.0 bitmap , as expected.
CALL: MKDIR "bmptest.bmp POPDIR
INFO: Running invalid instruction: [BITLOAD "bmptest.bmp]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
CALL: RMDIR "bmptest.bmp
INFO: Running invalid instruction: [BITSAVE {1 2 3}]
FAIL: Running [BITSAVE {1 2 3}] did not throw an error.
INFO: Running invalid instruction: [BITSAVE [1 2 3]]
FAIL: Running [BITSAVE [1 2 3]] did not throw an error.
INFO: Running invalid instruction: [BITSAVE "]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
INFO: Running invalid instruction: [BITSAVE "bad>file.bmp]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
INFO: Running invalid instruction: [(BITSAVE "file.bmp 3 )]
FAIL: Running [(BITSAVE "file.bmp 3 )] did not throw an error.
INFO: Running invalid instruction: [(BITSAVE "file.bmp "nonint )]
PASS: error code is 7 , as expected.
INFO: error text is BITSAVE doesn't like nonint as input .
INFO: Running invalid instruction: [(BITSAVE "file.bmp [1 2 3] )]
PASS: error code is 7 , as expected.
INFO: error text is BITSAVE doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(BITSAVE "file.bmp {1 2 3} )]
PASS: error code is 7 , as expected.
INFO: error text is BITSAVE doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(BITSAVE "file.bmp -1 )]
FAIL: Running [(BITSAVE "file.bmp -1 )] did not throw an error.
FAIL: [FILEEXISTS "file.bmp] output true . We expected false .
CALL: ERASEFILE "file.bmp
CALL: MKDIR "bmptest.bmp POPDIR
INFO: Running invalid instruction: [BITSAVE "bmptest.bmp]
PASS: error code is 1211 , as expected.
PASS: error text is Could not open .bmp , as expected.
CALL: RMDIR "bmptest.bmp
PASS: bitpaste-pattern was drawn correctly.
CALL: SETBITINDEX 1
CALL: BITCUT 100 100
INFO: Running invalid instruction: [(BITPASTETOINDEX 1 0)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITPASTETOINDEX .
INFO: Running invalid instruction: [(BITPASTETOINDEX 1 0 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BITPASTETOINDEX 10000 0 0]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [BITPASTETOINDEX -1 0 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like -1 as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1.5 0 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITPASTETOINDEX [1] 0 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like [1] as input .
INFO: Running invalid instruction: [BITPASTETOINDEX {1} 0 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like {1} as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 1.5 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 [0] 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like [0] as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 {0} 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like {0} as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 "one 0]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like one as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 0 1.5]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 0 [0]]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like [0] as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 0 {0}]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like {0} as input .
INFO: Running invalid instruction: [BITPASTETOINDEX 1 0 "one]
PASS: error code is 7 , as expected.
INFO: error text is BITPASTETOINDEX doesn't like one as input .
CALL: SETBITINDEX 41
INFO: Running invalid instruction: [BITPASTETOINDEX 41 0 0]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
CALL: SETSCREENCOLOR 3
CALL: SETPENCOLOR 4
CALL: CLEARSCREEN
CALL: REPEAT 3 [FORWARD 20 RIGHT 120]
CALL: SETBITINDEX :sprite
CALL: BITCUT 25 25
CALL: SETBITINDEX :background
CALL: SETPENCOLOR 1
CALL: REPEAT 20 [CIRCLE2 100 RIGHT 18]
CALL: BITCUT 100 100
CALL: SETBITINDEX :backbuffer
CALL: BITCUT 100 100
CALL: SETSCREENCOLOR 5
CALL: HIDETURTLE
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SHOWTURTLE
CALL: SETBITINDEX 4
PASS: [BITINDEX] output 4 , as expected.
CALL: SETBITINDEX 4
INFO: Running invalid instruction: [(SETBITINDEX)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETBITINDEX .
INFO: Running invalid instruction: [(SETBITINDEX 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(BITINDEX "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETBITINDEX -1]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like -1 as input .
INFO: Running invalid instruction: [SETBITINDEX 1.5]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like 1.5 as input .
INFO: Running invalid instruction: [SETBITINDEX [1]]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like [1] as input .
INFO: Running invalid instruction: [SETBITINDEX {1}]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like {1} as input .
INFO: Running invalid instruction: [SETBITINDEX "one]
PASS: error code is 7 , as expected.
INFO: error text is SETBITINDEX doesn't like one as input .
INFO: Running invalid instruction: [SETBITINDEX 100000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [SETBITINDEX 2000000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
PASS: [BITINDEX] output 4 , as expected.
PASS: bitsave-200x200 was drawn correctly.
CALL: SETBITINDEX 1
CALL: BITCOPY 200 200
CALL: SETBITINDEX 2
CALL: BITCOPY 200 200
CALL: SETBITINDEX 1
CALL: BITFIT 200 400
PASS: [BITSIZE] output [200 400] , as expected.
CALL: BITPASTE
PASS: bitfit-200x400 was drawn correctly.
CALL: SETBITINDEX 2
CALL: BITFIT 100 50
PASS: [BITSIZE] output [100 50] , as expected.
CALL: BITPASTE
PASS: bitfit-100x50 was drawn correctly.
CALL: SETBITINDEX 1
CALL: BITCUT 200 300
INFO: Running invalid instruction: [(BITFIT 100)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITFIT .
INFO: Running invalid instruction: [(BITFIT 100 100 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [BITFIT 2000000000 100]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [BITFIT 100 2000000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [BITFIT -1 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like -1 as input .
INFO: Running invalid instruction: [BITFIT 0 100]
FAIL: Running [BITFIT 0 100] did not throw an error.
INFO: Running invalid instruction: [BITFIT 1.5 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITFIT [1] 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like [1] as input .
INFO: Running invalid instruction: [BITFIT {1} 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like {1} as input .
INFO: Running invalid instruction: [BITFIT 1e20 100]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like 1e+20 as input .
INFO: Running invalid instruction: [BITFIT 100 -1]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like -1 as input .
INFO: Running invalid instruction: [BITFIT 100 0]
FAIL: Running [BITFIT 100 0] did not throw an error.
INFO: Running invalid instruction: [BITFIT 100 1.5]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like 1.5 as input .
INFO: Running invalid instruction: [BITFIT 100 [1]]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like [1] as input .
INFO: Running invalid instruction: [BITFIT 100 {1}]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like {1} as input .
INFO: Running invalid instruction: [BITFIT 100 1e20]
PASS: error code is 7 , as expected.
INFO: error text is BITFIT doesn't like 1e+20 as input .
PASS: [BITSIZE] output [200 300] , as expected.
PASS: gifsmoketest-200x200 was drawn correctly.
CALL: SETACTIVEAREA (list 0 0 :width :height)
CALL: GIFSAVE "gifsizetest.gif
PASS: [GIFSIZE "gifsizetest.gif] output [100 100] , as expected.
CALL: SETACTIVEAREA (list 0 0 :width :height)
CALL: GIFSAVE "gifsizetest.gif
PASS: [GIFSIZE "gifsizetest.gif] output [100 101] , as expected.
CALL: SETACTIVEAREA (list 0 0 :width :height)
CALL: GIFSAVE "gifsizetest.gif
PASS: [GIFSIZE "gifsizetest.gif] output [101 100] , as expected.
INFO: Running invalid instruction: [(GIFSIZE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GIFSIZE .
INFO: Running invalid instruction: [(GIFSIZE "file.gif "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GIFSIZE "doesnotexist.gif]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
INFO: Running invalid instruction: [GIFSIZE {1 2 3}]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
INFO: Running invalid instruction: [GIFSIZE [1 2 3]]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
INFO: Running invalid instruction: [GIFSIZE "gif.lgo]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
CALL: MKDIR "giftest.gif POPDIR
INFO: Running invalid instruction: [GIFSIZE "giftest.gif]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
CALL: RMDIR "giftest.gif
CALL: SETACTIVEAREA [0 0 100 100]
CALL: GIFSAVE :filename
CALL: SETACTIVEAREA [0 0 150 150]
CALL: GIFSAVE :filename
PASS: [GIFSIZE :filename] output [150 150] , as expected.
CALL: ERASEFILE "file.gif
INFO: Running invalid instruction: [(GIFSIZE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GIFSIZE .
INFO: Running invalid instruction: [(GIFSIZE "file.gif 0 "true 8 [255 0 255] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GIFSAVE {1 2 3}]
FAIL: Running [GIFSAVE {1 2 3}] did not throw an error.
INFO: Running invalid instruction: [GIFSAVE [1 2 3]]
FAIL: Running [GIFSAVE [1 2 3]] did not throw an error.
INFO: Running invalid instruction: [GIFSAVE "]
PASS: error code is 1202 , as expected.
PASS: error text is Problem Generating GIF, check memory and diskspace , as expected.
INFO: Running invalid instruction: [GIFSAVE "bad>file.gif]
PASS: error code is 1202 , as expected.
PASS: error text is Problem Generating GIF, check memory and diskspace , as expected.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 1.2 )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like 1.2 as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif "nonint )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like nonint as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif [1 2 3] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1 2 3] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif {1 2 3} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif -1 )]
FAIL: Running [(GIFSAVE "file.gif -1 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 1 )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like 1 as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 1.2 )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like 1.2 as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 [1] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 {1} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {1} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "word )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like word as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false [1] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false {1} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {1} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false "one )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like one as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false -2 )]
FAIL: Running [(GIFSAVE "file.gif 100 "false -2 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 0 )]
FAIL: Running [(GIFSAVE "file.gif 100 "false 0 0 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 "one)]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like one as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 [1] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 {1} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {1} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 [1 2 3 4] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1 2 3 4] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 [1 2] )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like [1 2] as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 {255 255 255} )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like {255 255 255} as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 100 )]
FAIL: Running [(GIFSAVE "file.gif 100 "false 0 8 100 )] did not throw an error.
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 1.5 )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like 1.5 as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 1e20 )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like 1e+20 as input .
INFO: Running invalid instruction: [(GIFSAVE "file.gif 100 "false 0 8 "word )]
PASS: error code is 7 , as expected.
INFO: error text is GIFSAVE doesn't like word as input .
FAIL: [FILEEXISTS "file.gif] output true . We expected false .
CALL: ERASEFILE "file.gif
CALL: MKDIR "giftest.gif POPDIR
INFO: Running invalid instruction: [GIFSAVE "giftest.gif]
PASS: error code is 1202 , as expected.
PASS: error text is Problem Generating GIF, check memory and diskspace , as expected.
CALL: RMDIR "giftest.gif
INFO: Running invalid instruction: [(GIFLOAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to GIFLOAD .
INFO: Running invalid instruction: [(GIFLOAD "file.gif "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [GIFLOAD "doesnotexist.gif]
INFO: error code is 1201 .
INFO: error text is Problem Reading GIF, check memory and diskspace .
INFO: Running invalid instruction: [GIFLOAD {1 2 3}]
FAIL: Running [GIFLOAD {1 2 3}] did not throw an error.
INFO: Running invalid instruction: [GIFLOAD [1 2 3]]
FAIL: Running [GIFLOAD [1 2 3]] did not throw an error.
INFO: Running invalid instruction: [GIFLOAD "gif.lgo]
PASS: error code is 1201 , as expected.
PASS: error text is Problem Reading GIF, check memory and diskspace , as expected.
CALL: MKDIR "giftest.gif POPDIR
INFO: Running invalid instruction: [GIFLOAD "giftest.gif]
PASS: error code is 1201 , as expected.
PASS: error text is Problem Reading GIF, check memory and diskspace , as expected.
CALL: RMDIR "giftest.gif
CALL: SETBITMODE 1
PASS: [BITMODE] output 1 , as expected.
CALL: SETBITMODE 2
PASS: [BITMODE] output 2 , as expected.
CALL: SETBITMODE 3
PASS: [BITMODE] output 3 , as expected.
CALL: SETBITMODE 4
PASS: [BITMODE] output 4 , as expected.
CALL: SETBITMODE 5
PASS: [BITMODE] output 5 , as expected.
CALL: SETBITMODE 6
PASS: [BITMODE] output 6 , as expected.
CALL: SETBITMODE 7
PASS: [BITMODE] output 7 , as expected.
CALL: SETBITMODE 8
PASS: [BITMODE] output 8 , as expected.
CALL: SETBITMODE 9
PASS: [BITMODE] output 9 , as expected.
PASS: bitmode-pattern was drawn correctly.
CALL: SETBITMODE 3
INFO: Running invalid instruction: [(BITMODE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETBITMODE [2]]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like [2] as input .
INFO: Running invalid instruction: [SETBITMODE {2}]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like {2} as input .
INFO: Running invalid instruction: [SETBITMODE -10]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like -10 as input .
INFO: Running invalid instruction: [SETBITMODE 1.5]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like 1.5 as input .
INFO: Running invalid instruction: [SETBITMODE 0]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like 0 as input .
INFO: Running invalid instruction: [SETBITMODE 10]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like 10 as input .
INFO: Running invalid instruction: [SETBITMODE "two]
PASS: error code is 7 , as expected.
INFO: error text is SETBITMODE doesn't like two as input .
INFO: Running invalid instruction: [(SETBITMODE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETBITMODE .
INFO: Running invalid instruction: [(SETBITMODE 8 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [BITMODE] output 3 , as expected.
CALL: SETBITMODE 3
CALL: SETBITMODE 0
PASS: [BITMODE] output 2 , as expected.
CALL: SETBITMODE 3.0
PASS: [BITMODE] output 3 , as expected.
CALL: SETBITMODE "4
PASS: [BITMODE] output 4 , as expected.
INFO: Running invalid instruction: [BITBLOCK [10] 10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like [10] as input .
INFO: Running invalid instruction: [BITBLOCK {10} 10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like {10} as input .
INFO: Running invalid instruction: [BITBLOCK -10 10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like -10 as input .
INFO: Running invalid instruction: [BITBLOCK "ten 10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like ten as input .
INFO: Running invalid instruction: [BITBLOCK 10 [10]]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like [10] as input .
INFO: Running invalid instruction: [BITBLOCK 10 {10}]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like {10} as input .
INFO: Running invalid instruction: [BITBLOCK 10 -10]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like -10 as input .
INFO: Running invalid instruction: [BITBLOCK 10 "ten]
INFO: error code is 7 .
INFO: error text is BITBLOCK doesn't like ten as input .
INFO: Running invalid instruction: [(BITBLOCK 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BITBLOCK .
INFO: Running invalid instruction: [(BITBLOCK 10 10 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: CLEARSCREEN
PASS: [TURTLE] output 0 , as expected.
PASS: [TURTLES] output 0 , as expected.
CALL: SETTURTLE 2
PASS: [TURTLES] output 2 , as expected.
PASS: [TURTLE] output 2 , as expected.
CALL: SETTURTLE 1
PASS: [TURTLES] output 2 , as expected.
PASS: [TURTLE] output 1 , as expected.
CALL: SETTURTLE 3.0
PASS: [TURTLES] output 3 , as expected.
PASS: [TURTLE] output 3 , as expected.
CALL: SETTURTLE 1024
PASS: [TURTLES] output 1024 , as expected.
PASS: [TURTLE] output 1024 , as expected.
CALL: SETTURTLE -1
CALL: SETTURTLE -2
CALL: SETTURTLE -3
PASS: [TURTLES] output 1024 , as expected.
PASS: [TURTLE] output -3 , as expected.
CALL: CLEARSCREEN
PASS: [TURTLE] output 0 , as expected.
PASS: [TURTLES] output 0 , as expected.
CALL: CLEARSCREEN
PASS: [HASOWNPENP] output false , as expected.
CALL: SETPENSIZE 2
CALL: SETPENCOLOR 2
CALL: PENREVERSE
CALL: (SETTURTLE 2 "true)
PASS: [HASOWNPENP] output true , as expected.
CALL: SETPENSIZE 3
CALL: SETPENCOLOR 3
CALL: PENERASE
CALL: (SETTURTLE 3 "false)
PASS: [HASOWNPEN?] output false , as expected.
PASS: [PENSIZE] output [2 2] , as expected.
PASS: [PENCOLOR] output 2 , as expected.
PASS: [PENMODE] output reverse , as expected.
CALL: SETPENSIZE 4
CALL: SETPENCOLOR 4
CALL: PENPAINT
CALL: SETTURTLE 0
PASS: [HASOWNPEN?] output false , as expected.
PASS: [PENSIZE] output [4 4] , as expected.
PASS: [PENCOLOR] output 4 , as expected.
PASS: [PENMODE] output paint , as expected.
CALL: SETTURTLE 1
PASS: [HASOWNPEN?] output true , as expected.
PASS: [PENSIZE] output [1 1] , as expected.
PASS: [PENCOLOR] output 0 , as expected.
PASS: [PENMODE] output paint , as expected.
CALL: (SETTURTLE 2 "false)
PASS: [HASOWNPEN?] output false , as expected.
PASS: [PENSIZE] output [4 4] , as expected.
PASS: [PENCOLOR] output 4 , as expected.
PASS: [PENMODE] output paint , as expected.
CALL: (SETTURTLE 0 "true)
PASS: [HASOWNPENP] output true , as expected.
PASS: [PENSIZE] output [1 1] , as expected.
PASS: [PENCOLOR] output 0 , as expected.
PASS: [PENMODE] output paint , as expected.
CALL: SETTURTLE 3
PASS: [HASOWNPENP] output false , as expected.
PASS: [PENSIZE] output [4 4] , as expected.
PASS: [PENCOLOR] output 4 , as expected.
PASS: [PENMODE] output paint , as expected.
PASS: turtle-has-own-pen was drawn correctly.
CALL: CLEARSCREEN
CALL: SETXY 130 15
CALL: PENUP
CALL: SETTURTLE 1
PASS: [POS] output [0 0] , as expected.
PASS: [PENDOWNP] output true , as expected.
CALL: SETXY 70 120
CALL: SETTURTLE 0
PASS: [POS] output [130 15] , as expected.
PASS: [PENDOWNP] output false , as expected.
INFO: Running invalid instruction: [(TURTLE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(TURTLES "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETTURTLE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETTURTLE .
INFO: Running invalid instruction: [(SETTURTLE -1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETTURTLE 10 "true "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETTURTLE "ten]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like ten as input .
INFO: Running invalid instruction: [SETTURTLE [10]]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like [10] as input .
INFO: Running invalid instruction: [SETTURTLE {10}]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like {10} as input .
INFO: Running invalid instruction: [SETTURTLE 10.5]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like 10.5 as input .
INFO: Running invalid instruction: [SETTURTLE -4]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like -4 as input .
INFO: Running invalid instruction: [SETTURTLE 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like 1e+20 as input .
INFO: Running invalid instruction: [(SETTURTLE 10 "maybe )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like maybe as input .
INFO: Running invalid instruction: [(SETTURTLE 10 [true] )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like [true] as input .
INFO: Running invalid instruction: [(SETTURTLE 10 {true} )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like {true} as input .
INFO: Running invalid instruction: [(SETTURTLE 10 10 )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like 10 as input .
INFO: Running invalid instruction: [(SETTURTLE 10 1e20 )]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLE doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETTURTLE 100000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [SETTURTLE 2000000000]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
PASS: [TURTLE] output 1 , as expected.
PASS: [TURTLES] output 1 , as expected.
INFO: Running invalid instruction: [(SETTURTLE -1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(HASOWNPENP "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(HASOWNPEN? "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: NOBITMAPTURTLE
CALL: SETTURTLEMODE 3
PASS: [TURTLEMODE] output 1 , as expected.
CALL: SETTURTLEMODE 1
PASS: [TURTLEMODE] output 1 , as expected.
CALL: SETTURTLEMODE 2
PASS: [TURTLEMODE] output 2 , as expected.
CALL: SETTURTLEMODE 3
PASS: [TURTLEMODE] output 3 , as expected.
CALL: SETTURTLEMODE 4
PASS: [TURTLEMODE] output 4 , as expected.
CALL: SETTURTLEMODE 5
PASS: [TURTLEMODE] output 5 , as expected.
CALL: SETTURTLEMODE 6
PASS: [TURTLEMODE] output 6 , as expected.
CALL: SETTURTLEMODE 7
PASS: [TURTLEMODE] output 7 , as expected.
CALL: SETTURTLEMODE 8
PASS: [TURTLEMODE] output 8 , as expected.
CALL: SETTURTLEMODE 9
PASS: [TURTLEMODE] output 9 , as expected.
CALL: SETTURTLEMODE 3
INFO: Running invalid instruction: [(TURTLEMODE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETTURTLEMODE [2]]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like [2] as input .
INFO: Running invalid instruction: [SETTURTLEMODE {2}]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like {2} as input .
INFO: Running invalid instruction: [SETTURTLEMODE -10]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like -10 as input .
INFO: Running invalid instruction: [SETTURTLEMODE 1.5]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like 1.5 as input .
INFO: Running invalid instruction: [SETTURTLEMODE 0]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like 0 as input .
INFO: Running invalid instruction: [SETTURTLEMODE 10]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like 10 as input .
INFO: Running invalid instruction: [SETTURTLEMODE "two]
PASS: error code is 7 , as expected.
INFO: error text is SETTURTLEMODE doesn't like two as input .
INFO: Running invalid instruction: [(SETTURTLEMODE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETTURTLEMODE .
INFO: Running invalid instruction: [(SETTURTLEMODE 8 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [TURTLEMODE] output 3 , as expected.
PASS: [FORM 123.456 10 10] output 123.4560000000 , as expected.
PASS: [FORM 123.456 0 10] output 123.4560000000 , as expected.
PASS: [FORM 123.456 1 10] output 123.4560000000 , as expected.
PASS: [FORM 123.456 10 1] output      123.5 , as expected.
PASS: [FORM 123.456 10 0] output        123 , as expected.
PASS: [FORM 123.567 10 0] output        124 , as expected.
INFO: Running invalid instruction: [FORM "string 10 10]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like string as input .
INFO: Running invalid instruction: [FORM [123.1] 10 10]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like [123.1] as input .
INFO: Running invalid instruction: [FORM {123.1} 10 10]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like {123.1} as input .
INFO: Running invalid instruction: [FORM 123.1 -1 10]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like -1 as input .
INFO: Running invalid instruction: [FORM 123.1 12.3 10]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like 12.3 as input .
INFO: Running invalid instruction: [FORM 123.1 {10} 10]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like {10} as input .
INFO: Running invalid instruction: [FORM 123.1 [10] 10]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like [10] as input .
INFO: Running invalid instruction: [FORM 123.1 "ten 10]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like ten as input .
INFO: Running invalid instruction: [FORM 123.1 10 12.3]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like 12.3 as input .
INFO: Running invalid instruction: [FORM 123.1 10 [1]]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like [1] as input .
INFO: Running invalid instruction: [FORM 123.1 10 {1}]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like {1} as input .
INFO: Running invalid instruction: [FORM 123.1 10 "ten]
PASS: error code is 7 , as expected.
INFO: error text is FORM doesn't like ten as input .
INFO: Running invalid instruction: [(FORM)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FORM .
INFO: Running invalid instruction: [(FORM 123.1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FORM .
INFO: Running invalid instruction: [(FORM 123.1 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to FORM .
INFO: Running invalid instruction: [(FORM 123.1 10 10 10)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: 'FORM 123.1 10000 10' did not crash
PASS: 'FORM 123.1 10 10000' did not crash
INFO: Running invalid instruction: [FORM -1 -1 "%s%s]
INFO: error code is 7 .
INFO: error text is FORM doesn't like -1 as input .
PASS: 'FORM -1 -1 "%s%s' did not crash
PASS: Running [PRINT "ABC] printed ABC , as expected.
PASS: Running [PRINT "abc] printed abc , as expected.
PASS: Running [PRINT "a b c] printed a b c , as expected.
PASS: Running [PRINT 123] printed 123 , as expected.
PASS: Running [PRINT 12.3] printed 12.3 , as expected.
PASS: Running [PRINT 12.0] printed 12 , as expected.
PASS: Running [PRINT 1e5] printed 100000 , as expected.
PASS: Running [PRINT [a b c]] printed a b c , as expected.
PASS: Running [PRINT []] printed  , as expected.
PASS: Running [PRINT [[a] b [c]]] printed [a] b [c] , as expected.
PASS: Running [PRINT {1 2}] printed {1 2} , as expected.
PASS: Running [PRINT {1 2}] printed {1 2} , as expected.
PASS: Running [PRINT {1 2}] printed {1 2} , as expected.
PASS: Running [PRINT {}] printed {} , as expected.
PASS: Running [(PRINT)] printed  , as expected.
PASS: Running [(PRINT [a] [b] [c] )] printed a b c , as expected.
PASS: Running [(PRINT [a] {b} "c)] printed a {b} c , as expected.
CALL: PRINT :longlist
CALL: make "printdepthlimit 6
PASS: Running [print [[1 [2 [3 [4 [5]]]]]]] printed [1 [2 [3 [4 [5]]]]] , as expected.
CALL: make "printdepthlimit 4
PASS: Running [print [[1 [2 [3 [4 [5]]]]]]] printed [1 [2 [3 [... ...]]]] , as expected.
CALL: make "printdepthlimit 0
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed ... ... , as expected.
CALL: make "printdepthlimit 3
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [... ...]]] , as expected.
CALL: make "printdepthlimit 4
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [...]]]] , as expected.
CALL: make "printdepthlimit 5
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [4]]]] , as expected.
CALL: make "printdepthlimit 2
PASS: Running [print [0 [1 [2 [a b c]] abc [2 [d e f]]]]] printed 0 [1 [... ...] abc [... ...]] , as expected.
CALL: make "printdepthlimit 0
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed ... , as expected.
CALL: make "printdepthlimit 1
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed [... ...] , as expected.
CALL: make "printdepthlimit 4
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed [1 [2 [3 [... ...]]]] , as expected.
CALL: make "printdepthlimit 5
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed [1 [2 [3 [4 [...]]]]] , as expected.
CALL: make "printdepthlimit 6
PASS: Running [show [1 [2 [3 [4 [5]]]]]] printed [1 [2 [3 [4 [5]]]]] , as expected.
CALL: make "printdepthlimit 0
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed ... , as expected.
CALL: make "printdepthlimit 1
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed {... ...} , as expected.
CALL: make "printdepthlimit 4
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed {1 {2 {3 {... ...}}}} , as expected.
CALL: make "printdepthlimit 5
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed {1 {2 {3 {4 {...}}}}} , as expected.
CALL: make "printdepthlimit 6
PASS: Running [print {1 {2 {3 {4 {5}}}}}] printed {1 {2 {3 {4 {5}}}}} , as expected.
CALL: make "printdepthlimit -1
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [4]]]] , as expected.
CALL: make "printdepthlimit [1]
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [4]]]] , as expected.
CALL: make "printdepthlimit {1}
PASS: Running [print [0 [1 [2 [3 [4]]]]]] printed 0 [1 [2 [3 [4]]]] , as expected.
CALL: make "printwidthlimit 6
PASS: Running [print [1 2 3 4 5 6]] printed 1 2 3 4 5 6 , as expected.
CALL: make "printwidthlimit 4
PASS: Running [print [1 2 3 4 5 6]] printed 1 2 3 4 ... , as expected.
CALL: make "printwidthlimit 50
PASS: Running [print "1234567890abcdefg] printed 1234567890abcdefg , as expected.
CALL: make "printwidthlimit 12
PASS: Running [print "1234567890abcdefg] printed 1234567890ab... , as expected.
CALL: make "printwidthlimit 2
PASS: Running [print "1234567890abcdefg] printed 1234567890... , as expected.
CALL: make "printwidthlimit 0
FAIL: Running [print [1 2 3 4]] printed 1 2 3 4 .  We expected ...
CALL: make "printwidthlimit 2
PASS: Running [print [1 2 3 4]] printed 1 2 ... , as expected.
CALL: make "printwidthlimit 3
PASS: Running [print [1 2 3 4]] printed 1 2 3 ... , as expected.
CALL: make "printwidthlimit 4
PASS: Running [print [1 2 3 4]] printed 1 2 3 4 , as expected.
CALL: make "printwidthlimit 2
PASS: Running [print [[a b c] [1 2 3] [x y z]]] printed [a b ...] [1 2 ...] ... , as expected.
CALL: make "printwidthlimit 0
FAIL: Running [show [1 2 3 4]] printed [1 2 3 4] .  We expected [...]
CALL: make "printwidthlimit 2
PASS: Running [show [1 2 3 4]] printed [1 2 ...] , as expected.
CALL: make "printwidthlimit 3
PASS: Running [show [1 2 3 4]] printed [1 2 3 ...] , as expected.
CALL: make "printwidthlimit 4
PASS: Running [show [1 2 3 4]] printed [1 2 3 4] , as expected.
CALL: make "printwidthlimit 0
PASS: Running [print {1 2 3 4}] printed {...} , as expected.
CALL: make "printwidthlimit 2
PASS: Running [print {1 2 3 4}] printed {1 2 ...} , as expected.
CALL: make "printwidthlimit 3
PASS: Running [print {1 2 3 4}] printed {1 2 3 ...} , as expected.
CALL: make "printwidthlimit 4
PASS: Running [print {1 2 3 4}] printed {1 2 3 4} , as expected.
CALL: make "printwidthlimit 0
PASS: Running [print "12345678901234567890] printed 1234567890... , as expected.
CALL: make "printwidthlimit 10
PASS: Running [print "12345678901234567890] printed 1234567890... , as expected.
CALL: make "printwidthlimit 11
PASS: Running [print "12345678901234567890] printed 12345678901... , as expected.
CALL: make "printwidthlimit 20
PASS: Running [print "12345678901234567890] printed 12345678901234567890 , as expected.
CALL: make "printwidthlimit -1
PASS: Running [print [1 2 3 4]] printed 1 2 3 4 , as expected.
CALL: make "printwidthlimit [1]
PASS: Running [print [1 2 3 4]] printed 1 2 3 4 , as expected.
CALL: make "printwidthlimit {1}
PASS: Running [print [1 2 3 4]] printed 1 2 3 4 , as expected.
CALL: make "printwidthlimit 4 make "printdepthlimit 3
PASS: Running [(show [1] [[2 2]] [[[3 3 3]]] [[[[4 4 4 4]]]] [[[[[5 5 5 5 5]]]]] [[[[[[6 6 6 6 6 6]]]]]] )] printed [1] [[2 2]] [[[... ... ...]]] [[[...]]] ... , as expected.
PASS: Running [SHOW "Hello] printed Hello , as expected.
PASS: Running [SHOW "Hello Hello] printed Hello Hello , as expected.
PASS: Running [SHOW "Hello~ SHOW "Hello] printed Hello~
Hello , as expected.
PASS: Running [SHOW "Hello~    SHOW "Hello] printed Hello~
Hello , as expected.
PASS: Running [SHOW "|ABC|] printed |ABC| , as expected.
PASS: Running [SHOW "A|B
C|] printed A|B
C| , as expected.
PASS: Running [SHOW "AB;CD] printed AB;CD , as expected.
PASS: Running [SHOW "A;B|C
D|] printed A;B|C
D| , as expected.
PASS: Running [SHOW "A\B\C] printed ABC , as expected.
PASS: [READWORDTEST.READWORDFROMUI "easytest] output easytest , as expected.
PASS: [READWORDTEST.READWORDFROMUI "Two Words] output Two Words , as expected.
INFO: Running invalid instruction: [IGNORE READWORD]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [(READWORD "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(RW "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: OPENREAD "readrawlinetestfile.txt
CALL: SETREAD "readrawlinetestfile.txt
PASS: [READRAWLINE] output Simple , as expected.
PASS: [READRAWLINE] output Two Words , as expected.
PASS: [READRAWLINE] output Line | With ; Special ( Characters ) [ ] , as expected.
PASS: [READRAWLINE] output Line \ With \\ Backslashes , as expected.
PASS: [READRAWLINE] output [] , as expected.
PASS: [READRAWLINETEST.READRAWLINEFROMUI "Special Characters |;\(] output Special Characters |;\( , as expected.
INFO: Running invalid instruction: [IGNORE READRAWLINE]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [(READRAWLINE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [READCHAR] output 32 , as expected.
PASS: [READCHAR] output 33 , as expected.
PASS: [READCHAR] output 34 , as expected.
PASS: [READCHAR] output 35 , as expected.
PASS: [READCHAR] output 36 , as expected.
PASS: [READCHAR] output 37 , as expected.
PASS: [READCHAR] output 38 , as expected.
PASS: [READCHAR] output 39 , as expected.
PASS: [READCHAR] output 40 , as expected.
PASS: [READCHAR] output 41 , as expected.
PASS: [READCHAR] output 42 , as expected.
PASS: [READCHAR] output 43 , as expected.
PASS: [READCHAR] output 44 , as expected.
PASS: [READCHAR] output 45 , as expected.
PASS: [READCHAR] output 46 , as expected.
PASS: [READCHAR] output 47 , as expected.
PASS: [READCHAR] output 48 , as expected.
PASS: [READCHAR] output 49 , as expected.
PASS: [READCHAR] output 50 , as expected.
PASS: [READCHAR] output 51 , as expected.
PASS: [READCHAR] output 52 , as expected.
PASS: [READCHAR] output 53 , as expected.
PASS: [READCHAR] output 54 , as expected.
PASS: [READCHAR] output 55 , as expected.
PASS: [READCHAR] output 56 , as expected.
PASS: [READCHAR] output 57 , as expected.
PASS: [READCHAR] output 58 , as expected.
PASS: [READCHAR] output 59 , as expected.
PASS: [READCHAR] output 60 , as expected.
PASS: [READCHAR] output 61 , as expected.
PASS: [READCHAR] output 62 , as expected.
PASS: [READCHAR] output 63 , as expected.
PASS: [READCHAR] output 64 , as expected.
PASS: [READCHAR] output 65 , as expected.
PASS: [READCHAR] output 66 , as expected.
PASS: [READCHAR] output 67 , as expected.
PASS: [READCHAR] output 68 , as expected.
PASS: [READCHAR] output 69 , as expected.
PASS: [READCHAR] output 70 , as expected.
PASS: [READCHAR] output 71 , as expected.
PASS: [READCHAR] output 72 , as expected.
PASS: [READCHAR] output 73 , as expected.
PASS: [READCHAR] output 74 , as expected.
PASS: [READCHAR] output 75 , as expected.
PASS: [READCHAR] output 76 , as expected.
PASS: [READCHAR] output 77 , as expected.
PASS: [READCHAR] output 78 , as expected.
PASS: [READCHAR] output 79 , as expected.
PASS: [READCHAR] output 80 , as expected.
PASS: [READCHAR] output 81 , as expected.
PASS: [READCHAR] output 82 , as expected.
PASS: [READCHAR] output 83 , as expected.
PASS: [READCHAR] output 84 , as expected.
PASS: [READCHAR] output 85 , as expected.
PASS: [READCHAR] output 86 , as expected.
PASS: [READCHAR] output 87 , as expected.
PASS: [READCHAR] output 88 , as expected.
PASS: [READCHAR] output 89 , as expected.
PASS: [READCHAR] output 90 , as expected.
PASS: [READCHAR] output 91 , as expected.
PASS: [READCHAR] output 92 , as expected.
PASS: [READCHAR] output 93 , as expected.
PASS: [READCHAR] output 94 , as expected.
PASS: [READCHAR] output 95 , as expected.
PASS: [READCHAR] output 96 , as expected.
PASS: [READCHAR] output 97 , as expected.
PASS: [READCHAR] output 98 , as expected.
PASS: [READCHAR] output 99 , as expected.
PASS: [READCHAR] output 100 , as expected.
PASS: [READCHAR] output 101 , as expected.
PASS: [READCHAR] output 102 , as expected.
PASS: [READCHAR] output 103 , as expected.
PASS: [READCHAR] output 104 , as expected.
PASS: [READCHAR] output 105 , as expected.
PASS: [READCHAR] output 106 , as expected.
PASS: [READCHAR] output 107 , as expected.
PASS: [READCHAR] output 108 , as expected.
PASS: [READCHAR] output 109 , as expected.
PASS: [READCHAR] output 110 , as expected.
PASS: [READCHAR] output 111 , as expected.
PASS: [READCHAR] output 112 , as expected.
PASS: [READCHAR] output 113 , as expected.
PASS: [READCHAR] output 114 , as expected.
PASS: [READCHAR] output 115 , as expected.
PASS: [READCHAR] output 116 , as expected.
PASS: [READCHAR] output 117 , as expected.
PASS: [READCHAR] output 118 , as expected.
PASS: [READCHAR] output 119 , as expected.
PASS: [READCHAR] output 120 , as expected.
PASS: [READCHAR] output 121 , as expected.
PASS: [READCHAR] output 122 , as expected.
PASS: [READCHAR] output 123 , as expected.
PASS: [READCHAR] output 124 , as expected.
PASS: [READCHAR] output 125 , as expected.
PASS: [READCHAR] output 126 , as expected.
PASS: [READCHAR] output 127 , as expected.
PASS: [READCHAR] output 128 , as expected.
PASS: [READCHAR] output 129 , as expected.
PASS: [READCHAR] output 130 , as expected.
PASS: [READCHAR] output 131 , as expected.
PASS: [READCHAR] output 132 , as expected.
PASS: [READCHAR] output 133 , as expected.
PASS: [READCHAR] output 134 , as expected.
PASS: [READCHAR] output 135 , as expected.
PASS: [READCHAR] output 136 , as expected.
PASS: [READCHAR] output 137 , as expected.
PASS: [READCHAR] output 138 , as expected.
PASS: [READCHAR] output 139 , as expected.
PASS: [READCHAR] output 140 , as expected.
PASS: [READCHAR] output 141 , as expected.
PASS: [READCHAR] output 142 , as expected.
PASS: [READCHAR] output 143 , as expected.
PASS: [READCHAR] output 144 , as expected.
PASS: [READCHAR] output 145 , as expected.
PASS: [READCHAR] output 146 , as expected.
PASS: [READCHAR] output 147 , as expected.
PASS: [READCHAR] output 148 , as expected.
PASS: [READCHAR] output 149 , as expected.
PASS: [READCHAR] output 150 , as expected.
PASS: [READCHAR] output 151 , as expected.
PASS: [READCHAR] output 152 , as expected.
PASS: [READCHAR] output 153 , as expected.
PASS: [READCHAR] output 154 , as expected.
PASS: [READCHAR] output 155 , as expected.
PASS: [READCHAR] output 156 , as expected.
PASS: [READCHAR] output 157 , as expected.
PASS: [READCHAR] output 158 , as expected.
PASS: [READCHAR] output 159 , as expected.
PASS: [READCHAR] output 160 , as expected.
PASS: [READCHAR] output 161 , as expected.
PASS: [READCHAR] output 162 , as expected.
PASS: [READCHAR] output 163 , as expected.
PASS: [READCHAR] output 164 , as expected.
PASS: [READCHAR] output 165 , as expected.
PASS: [READCHAR] output 166 , as expected.
PASS: [READCHAR] output 167 , as expected.
PASS: [READCHAR] output 168 , as expected.
PASS: [READCHAR] output 169 , as expected.
PASS: [READCHAR] output 170 , as expected.
PASS: [READCHAR] output 171 , as expected.
PASS: [READCHAR] output 172 , as expected.
PASS: [READCHAR] output 173 , as expected.
PASS: [READCHAR] output 174 , as expected.
PASS: [READCHAR] output 175 , as expected.
PASS: [READCHAR] output 176 , as expected.
PASS: [READCHAR] output 177 , as expected.
PASS: [READCHAR] output 178 , as expected.
PASS: [READCHAR] output 179 , as expected.
PASS: [READCHAR] output 180 , as expected.
PASS: [READCHAR] output 181 , as expected.
PASS: [READCHAR] output 182 , as expected.
PASS: [READCHAR] output 183 , as expected.
PASS: [READCHAR] output 184 , as expected.
PASS: [READCHAR] output 185 , as expected.
PASS: [READCHAR] output 186 , as expected.
PASS: [READCHAR] output 187 , as expected.
PASS: [READCHAR] output 188 , as expected.
PASS: [READCHAR] output 189 , as expected.
PASS: [READCHAR] output 190 , as expected.
PASS: [READCHAR] output 191 , as expected.
PASS: [READCHAR] output 192 , as expected.
PASS: [READCHAR] output 193 , as expected.
PASS: [READCHAR] output 194 , as expected.
PASS: [READCHAR] output 195 , as expected.
PASS: [READCHAR] output 196 , as expected.
PASS: [READCHAR] output 197 , as expected.
PASS: [READCHAR] output 198 , as expected.
PASS: [READCHAR] output 199 , as expected.
PASS: [READCHAR] output 200 , as expected.
PASS: [READCHAR] output 201 , as expected.
PASS: [READCHAR] output 202 , as expected.
PASS: [READCHAR] output 203 , as expected.
PASS: [READCHAR] output 204 , as expected.
PASS: [READCHAR] output 205 , as expected.
PASS: [READCHAR] output 206 , as expected.
PASS: [READCHAR] output 207 , as expected.
PASS: [READCHAR] output 208 , as expected.
PASS: [READCHAR] output 209 , as expected.
PASS: [READCHAR] output 210 , as expected.
PASS: [READCHAR] output 211 , as expected.
PASS: [READCHAR] output 212 , as expected.
PASS: [READCHAR] output 213 , as expected.
PASS: [READCHAR] output 214 , as expected.
PASS: [READCHAR] output 215 , as expected.
PASS: [READCHAR] output 216 , as expected.
PASS: [READCHAR] output 217 , as expected.
PASS: [READCHAR] output 218 , as expected.
PASS: [READCHAR] output 219 , as expected.
PASS: [READCHAR] output 220 , as expected.
PASS: [READCHAR] output 221 , as expected.
PASS: [READCHAR] output 222 , as expected.
PASS: [READCHAR] output 223 , as expected.
PASS: [READCHAR] output 224 , as expected.
PASS: [READCHAR] output 225 , as expected.
PASS: [READCHAR] output 226 , as expected.
PASS: [READCHAR] output 227 , as expected.
PASS: [READCHAR] output 228 , as expected.
PASS: [READCHAR] output 229 , as expected.
PASS: [READCHAR] output 230 , as expected.
PASS: [READCHAR] output 231 , as expected.
PASS: [READCHAR] output 232 , as expected.
PASS: [READCHAR] output 233 , as expected.
PASS: [READCHAR] output 234 , as expected.
PASS: [READCHAR] output 235 , as expected.
PASS: [READCHAR] output 236 , as expected.
PASS: [READCHAR] output 237 , as expected.
PASS: [READCHAR] output 238 , as expected.
PASS: [READCHAR] output 239 , as expected.
PASS: [READCHAR] output 240 , as expected.
PASS: [READCHAR] output 241 , as expected.
PASS: [READCHAR] output 242 , as expected.
PASS: [READCHAR] output 243 , as expected.
PASS: [READCHAR] output 244 , as expected.
PASS: [READCHAR] output 245 , as expected.
PASS: [READCHAR] output 246 , as expected.
PASS: [READCHAR] output 247 , as expected.
PASS: [READCHAR] output 248 , as expected.
PASS: [READCHAR] output 249 , as expected.
PASS: [READCHAR] output 250 , as expected.
PASS: [READCHAR] output 251 , as expected.
PASS: [READCHAR] output 252 , as expected.
PASS: [READCHAR] output 253 , as expected.
PASS: [READCHAR] output 254 , as expected.
PASS: [READCHAR] output 255 , as expected.
PASS: [READCHAR] output [] , as expected.
PASS: [READCHAR] output   , as expected.
PASS: [READCHAR] output ! , as expected.
PASS: [READCHAR] output " , as expected.
PASS: [READCHAR] output # , as expected.
PASS: [READCHAR] output $ , as expected.
PASS: [READCHAR] output % , as expected.
PASS: [READCHAR] output & , as expected.
PASS: [READCHAR] output ' , as expected.
PASS: [READCHAR] output ( , as expected.
PASS: [READCHAR] output ) , as expected.
PASS: [READCHAR] output * , as expected.
PASS: [READCHAR] output + , as expected.
PASS: [READCHAR] output , , as expected.
PASS: [READCHAR] output - , as expected.
PASS: [READCHAR] output . , as expected.
PASS: [READCHAR] output / , as expected.
PASS: [READCHAR] output 0 , as expected.
PASS: [READCHAR] output 1 , as expected.
PASS: [READCHAR] output 2 , as expected.
PASS: [READCHAR] output 3 , as expected.
PASS: [READCHAR] output 4 , as expected.
PASS: [READCHAR] output 5 , as expected.
PASS: [READCHAR] output 6 , as expected.
PASS: [READCHAR] output 7 , as expected.
PASS: [READCHAR] output 8 , as expected.
PASS: [READCHAR] output 9 , as expected.
PASS: [READCHAR] output : , as expected.
PASS: [READCHAR] output ; , as expected.
PASS: [READCHAR] output < , as expected.
PASS: [READCHAR] output = , as expected.
PASS: [READCHAR] output > , as expected.
PASS: [READCHAR] output ? , as expected.
PASS: [READCHAR] output @ , as expected.
PASS: [READCHAR] output A , as expected.
PASS: [READCHAR] output B , as expected.
PASS: [READCHAR] output C , as expected.
PASS: [READCHAR] output D , as expected.
PASS: [READCHAR] output E , as expected.
PASS: [READCHAR] output F , as expected.
PASS: [READCHAR] output G , as expected.
PASS: [READCHAR] output H , as expected.
PASS: [READCHAR] output I , as expected.
PASS: [READCHAR] output J , as expected.
PASS: [READCHAR] output K , as expected.
PASS: [READCHAR] output L , as expected.
PASS: [READCHAR] output M , as expected.
PASS: [READCHAR] output N , as expected.
PASS: [READCHAR] output O , as expected.
PASS: [READCHAR] output P , as expected.
PASS: [READCHAR] output Q , as expected.
PASS: [READCHAR] output R , as expected.
PASS: [READCHAR] output S , as expected.
PASS: [READCHAR] output T , as expected.
PASS: [READCHAR] output U , as expected.
PASS: [READCHAR] output V , as expected.
PASS: [READCHAR] output W , as expected.
PASS: [READCHAR] output X , as expected.
PASS: [READCHAR] output Y , as expected.
PASS: [READCHAR] output Z , as expected.
PASS: [READCHAR] output [ , as expected.
PASS: [READCHAR] output \ , as expected.
PASS: [READCHAR] output ] , as expected.
PASS: [READCHAR] output ^ , as expected.
PASS: [READCHAR] output _ , as expected.
PASS: [READCHAR] output ` , as expected.
PASS: [READCHAR] output a , as expected.
PASS: [READCHAR] output b , as expected.
PASS: [READCHAR] output c , as expected.
PASS: [READCHAR] output d , as expected.
PASS: [READCHAR] output e , as expected.
PASS: [READCHAR] output f , as expected.
PASS: [READCHAR] output g , as expected.
PASS: [READCHAR] output h , as expected.
PASS: [READCHAR] output i , as expected.
PASS: [READCHAR] output j , as expected.
PASS: [READCHAR] output k , as expected.
PASS: [READCHAR] output l , as expected.
PASS: [READCHAR] output m , as expected.
PASS: [READCHAR] output n , as expected.
PASS: [READCHAR] output o , as expected.
PASS: [READCHAR] output p , as expected.
PASS: [READCHAR] output q , as expected.
PASS: [READCHAR] output r , as expected.
PASS: [READCHAR] output s , as expected.
PASS: [READCHAR] output t , as expected.
PASS: [READCHAR] output u , as expected.
PASS: [READCHAR] output v , as expected.
PASS: [READCHAR] output w , as expected.
PASS: [READCHAR] output x , as expected.
PASS: [READCHAR] output y , as expected.
PASS: [READCHAR] output z , as expected.
PASS: [READCHAR] output { , as expected.
PASS: [READCHAR] output | , as expected.
PASS: [READCHAR] output } , as expected.
PASS: [READCHAR] output ~ , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output  , as expected.
PASS: [READCHAR] output   , as expected.
PASS: [READCHAR] output ¡ , as expected.
PASS: [READCHAR] output ¢ , as expected.
PASS: [READCHAR] output £ , as expected.
PASS: [READCHAR] output ¤ , as expected.
PASS: [READCHAR] output ¥ , as expected.
PASS: [READCHAR] output ¦ , as expected.
PASS: [READCHAR] output § , as expected.
PASS: [READCHAR] output ¨ , as expected.
PASS: [READCHAR] output © , as expected.
PASS: [READCHAR] output ª , as expected.
PASS: [READCHAR] output « , as expected.
PASS: [READCHAR] output ¬ , as expected.
PASS: [READCHAR] output ­ , as expected.
PASS: [READCHAR] output ® , as expected.
PASS: [READCHAR] output ¯ , as expected.
PASS: [READCHAR] output ° , as expected.
PASS: [READCHAR] output ± , as expected.
PASS: [READCHAR] output ² , as expected.
PASS: [READCHAR] output ³ , as expected.
PASS: [READCHAR] output ´ , as expected.
PASS: [READCHAR] output µ , as expected.
PASS: [READCHAR] output ¶ , as expected.
PASS: [READCHAR] output · , as expected.
PASS: [READCHAR] output ¸ , as expected.
PASS: [READCHAR] output ¹ , as expected.
PASS: [READCHAR] output º , as expected.
PASS: [READCHAR] output » , as expected.
PASS: [READCHAR] output ¼ , as expected.
PASS: [READCHAR] output ½ , as expected.
PASS: [READCHAR] output ¾ , as expected.
PASS: [READCHAR] output ¿ , as expected.
PASS: [READCHAR] output À , as expected.
PASS: [READCHAR] output Á , as expected.
PASS: [READCHAR] output Â , as expected.
PASS: [READCHAR] output Ã , as expected.
PASS: [READCHAR] output Ä , as expected.
PASS: [READCHAR] output Å , as expected.
PASS: [READCHAR] output Æ , as expected.
PASS: [READCHAR] output Ç , as expected.
PASS: [READCHAR] output È , as expected.
PASS: [READCHAR] output É , as expected.
PASS: [READCHAR] output Ê , as expected.
PASS: [READCHAR] output Ë , as expected.
PASS: [READCHAR] output Ì , as expected.
PASS: [READCHAR] output Í , as expected.
PASS: [READCHAR] output Î , as expected.
PASS: [READCHAR] output Ï , as expected.
PASS: [READCHAR] output Ð , as expected.
PASS: [READCHAR] output Ñ , as expected.
PASS: [READCHAR] output Ò , as expected.
PASS: [READCHAR] output Ó , as expected.
PASS: [READCHAR] output Ô , as expected.
PASS: [READCHAR] output Õ , as expected.
PASS: [READCHAR] output Ö , as expected.
PASS: [READCHAR] output × , as expected.
PASS: [READCHAR] output Ø , as expected.
PASS: [READCHAR] output Ù , as expected.
PASS: [READCHAR] output Ú , as expected.
PASS: [READCHAR] output Û , as expected.
PASS: [READCHAR] output Ü , as expected.
PASS: [READCHAR] output Ý , as expected.
PASS: [READCHAR] output Þ , as expected.
PASS: [READCHAR] output ß , as expected.
PASS: [READCHAR] output à , as expected.
PASS: [READCHAR] output á , as expected.
PASS: [READCHAR] output â , as expected.
PASS: [READCHAR] output ã , as expected.
PASS: [READCHAR] output ä , as expected.
PASS: [READCHAR] output å , as expected.
PASS: [READCHAR] output æ , as expected.
PASS: [READCHAR] output ç , as expected.
PASS: [READCHAR] output è , as expected.
PASS: [READCHAR] output é , as expected.
PASS: [READCHAR] output ê , as expected.
PASS: [READCHAR] output ë , as expected.
PASS: [READCHAR] output ì , as expected.
PASS: [READCHAR] output í , as expected.
PASS: [READCHAR] output î , as expected.
PASS: [READCHAR] output ï , as expected.
PASS: [READCHAR] output ð , as expected.
PASS: [READCHAR] output ñ , as expected.
PASS: [READCHAR] output ò , as expected.
PASS: [READCHAR] output ó , as expected.
PASS: [READCHAR] output ô , as expected.
PASS: [READCHAR] output õ , as expected.
PASS: [READCHAR] output ö , as expected.
PASS: [READCHAR] output ÷ , as expected.
PASS: [READCHAR] output ø , as expected.
PASS: [READCHAR] output ù , as expected.
PASS: [READCHAR] output ú , as expected.
PASS: [READCHAR] output û , as expected.
PASS: [READCHAR] output ü , as expected.
PASS: [READCHAR] output ý , as expected.
PASS: [READCHAR] output þ , as expected.
PASS: [READCHAR] output ÿ , as expected.
PASS: [READCHAR] output [] , as expected.
INFO: Running invalid instruction: [(READCHAR "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(RC "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [READCHARS 0] output  , as expected.
PASS: [READCHARS 1] output   , as expected.
PASS: [READCHARS 2] output !" , as expected.
PASS: [READCHARS 1000] output #$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ , as expected.
PASS: [READCHARS 1] output [] , as expected.
PASS: [READCHARS 0] output [] , as expected.
CALL: READCHARS 256
PASS: [READCHARS 0] output [] , as expected.
CALL: SETREAD []
PASS: [READCHARS 0] output [] , as expected.
PASS: [READCHARS 100] output [] , as expected.
INFO: Running invalid instruction: [(READCHARS)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to READCHARS .
INFO: Running invalid instruction: [(READCHARS 100 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [READCHARS 12.5]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like 12.5 as input .
INFO: Running invalid instruction: [READCHARS []]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like [] as input .
INFO: Running invalid instruction: [READCHARS [1]]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like [1] as input .
INFO: Running invalid instruction: [READCHARS -1]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like -1 as input .
INFO: Running invalid instruction: [READCHARS {1}]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like {1} as input .
INFO: Running invalid instruction: [READCHARS "ten]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like ten as input .
INFO: Running invalid instruction: [READCHARS 2147483647]
PASS: error code is 1 , as expected.
INFO: error text is Out of memory .
INFO: Running invalid instruction: [READCHARS 2147483648]
PASS: error code is 7 , as expected.
INFO: error text is READCHARS doesn't like 2147483648 as input .
PASS: The editor window was displayed, as expected.
INFO: Running invalid instruction: [(EDALL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: The editor saved the values of all 10000 variables.
INFO: Running invalid instruction: [(EDIT [[] [] []] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [EDIT {1}]
INFO: error code is 4 .
INFO: error text is EDIT doesn't like {1} as input .
INFO: Running invalid instruction: [EDIT [{1}]]
INFO: error code is 4 .
INFO: error text is EDIT doesn't like {1} as input .
INFO: Running invalid instruction: [EDIT [[] {1}]]
INFO: error code is 4 .
INFO: error text is EDIT doesn't like {1} as input .
INFO: Running invalid instruction: [EDIT [[] [] {1}]]
INFO: error code is 4 .
INFO: error text is EDIT doesn't like {1} as input .
CALL: WINDOWFILEEDIT :longfilename (LIST "REPORTTESTPASSED [WINDOWFILEEDIT did not crash on a long filename] "ERASEFILE QUOTED :longfilename )
PASS: INPORT did not crash
INFO: Running invalid instruction: [(INPORT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to INPORT .
INFO: Running invalid instruction: [INPORT [192]]
INFO: error code is 7 .
INFO: error text is INPORT doesn't like [192] as input .
INFO: Running invalid instruction: [INPORT -1]
INFO: error code is 7 .
INFO: error text is INPORT doesn't like -1 as input .
INFO: Running invalid instruction: [INPORT {}]
INFO: error code is 7 .
INFO: error text is INPORT doesn't like {} as input .
INFO: Running invalid instruction: [INPORT "hello]
INFO: error code is 7 .
INFO: error text is INPORT doesn't like hello as input .
INFO: Running invalid instruction: [(INPORT "198 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: INPORTB did not crash
INFO: Running invalid instruction: [(INPORTB)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to INPORTB .
INFO: Running invalid instruction: [INPORTB [192]]
INFO: error code is 7 .
INFO: error text is INPORTB doesn't like [192] as input .
INFO: Running invalid instruction: [INPORTB -1]
INFO: error code is 7 .
INFO: error text is INPORTB doesn't like -1 as input .
INFO: Running invalid instruction: [INPORTB {}]
INFO: error code is 7 .
INFO: error text is INPORTB doesn't like {} as input .
INFO: Running invalid instruction: [INPORTB "hello]
INFO: error code is 7 .
INFO: error text is INPORTB doesn't like hello as input .
INFO: Running invalid instruction: [(INPORTB "198 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: OUTPORT did not crash
INFO: Running invalid instruction: [(OUTPORT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OUTPORT .
INFO: Running invalid instruction: [(OUTPORT 192)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OUTPORT .
INFO: Running invalid instruction: [OUTPORT [192] 0]
INFO: error code is 7 .
INFO: error text is OUTPORT doesn't like [192] as input .
INFO: Running invalid instruction: [OUTPORT -1 0]
INFO: error code is 7 .
INFO: error text is OUTPORT doesn't like -1 as input .
INFO: Running invalid instruction: [OUTPORT {} 0]
INFO: error code is 7 .
INFO: error text is OUTPORT doesn't like {} as input .
INFO: Running invalid instruction: [OUTPORT "hello 0]
INFO: error code is 7 .
INFO: error text is OUTPORT doesn't like hello as input .
INFO: Running invalid instruction: [(OUTPORT 198 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: OUTPORTB did not crash
INFO: Running invalid instruction: [(OUTPORTB)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OUTPORTB .
INFO: Running invalid instruction: [(OUTPORTB 192)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OUTPORTB .
INFO: Running invalid instruction: [OUTPORTB [192] 0]
INFO: error code is 7 .
INFO: error text is OUTPORTB doesn't like [192] as input .
INFO: Running invalid instruction: [OUTPORTB -1 0]
INFO: error code is 7 .
INFO: error text is OUTPORTB doesn't like -1 as input .
INFO: Running invalid instruction: [OUTPORTB {} 0]
INFO: error code is 7 .
INFO: error text is OUTPORTB doesn't like {} as input .
INFO: Running invalid instruction: [OUTPORTB "hello 0]
INFO: error code is 7 .
INFO: error text is OUTPORTB doesn't like hello as input .
INFO: Running invalid instruction: [(OUTPORTB 198 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [MEMBER? [System] FONTFACENAMES] output true , as expected.
INFO: Running invalid instruction: [(FONTFACENAMES "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: font-circle was drawn correctly.
INFO: Running invalid instruction: [(LABEL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to LABEL .
INFO: Running invalid instruction: [(LABEL 1 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: system-font was drawn correctly.
PASS: arial-font was drawn correctly.
PASS: [LIST? LABELFONT] output true , as expected.
PASS: [COUNT LABELFONT] output 13 , as expected.
PASS: [ITEM 1 LABELFONT] output [Arial] , as expected.
PASS: [ITEM 2 LABELFONT] output 24 , as expected.
PASS: [ITEM 3 LABELFONT] output 0 , as expected.
PASS: [ITEM 4 LABELFONT] output 0 , as expected.
PASS: [ITEM 5 LABELFONT] output 400 , as expected.
PASS: [ITEM 6 LABELFONT] output 0 , as expected.
PASS: [ITEM 7 LABELFONT] output 0 , as expected.
PASS: [ITEM 8 LABELFONT] output 0 , as expected.
PASS: [ITEM 9 LABELFONT] output 0 , as expected.
PASS: [ITEM 10 LABELFONT] output 0 , as expected.
PASS: [ITEM 11 LABELFONT] output 0 , as expected.
PASS: [ITEM 12 LABELFONT] output 0 , as expected.
PASS: [ITEM 13 LABELFONT] output 0 , as expected.
INFO: Running invalid instruction: [SETLABELFONT "Courier]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like Courier as input .
INFO: Running invalid instruction: [SETLABELFONT 1.1]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like 1.1 as input .
INFO: Running invalid instruction: [SETLABELFONT {0}]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like {0} as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] bad 0 0 400 0 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 bad 0 400 0 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 bad 400 0 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 bad 0 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 bad 0 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 bad 0 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 bad 0 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 bad 0 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 bad 0 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 bad 0 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 bad 0]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 0 bad]]
INFO: error code is 7 .
INFO: error text is SETLABELFONT doesn't like bad as input .
INFO: Running invalid instruction: [(SETLABELFONT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETLABELFONT .
INFO: Running invalid instruction: [(SETLABELFONT [[Arial]] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Testing that SETLABELFONT doesn't modify its input list on error
INFO: Now comparing the original instruction to the one that was used
FAIL: [[SETLABELFONT [[Arial] 24 0 0 400 0 0 bad 0 0 0 0 0]] = [SETLABELFONT [[Arial] 24 0 0 400 0 0 Unbound 0 0 0 0 0]]] output false . We expected true .
PASS: [PENDOWNP] output true , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [ITEM 1 PEN] output pendown , as expected.
PASS: [PENDOWN?] output false , as expected.
PASS: [ITEM 1 PEN] output penup , as expected.
INFO: Running invalid instruction: [(PENDOWN "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(PENUP "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(PENDOWN? "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PENMODE] output paint , as expected.
PASS: [ITEM 2 PEN] output paint , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output erase , as expected.
PASS: [ITEM 2 PEN] output erase , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output reverse , as expected.
PASS: [ITEM 2 PEN] output reverse , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output paint , as expected.
PASS: [ITEM 2 PEN] output paint , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output erase , as expected.
PASS: [ITEM 2 PEN] output erase , as expected.
PASS: [PENDOWN?] output true , as expected.
PASS: [PENMODE] output reverse , as expected.
PASS: [ITEM 2 PEN] output reverse , as expected.
PASS: [PENDOWN?] output true , as expected.
INFO: Running invalid instruction: [(ARC)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARC .
INFO: Running invalid instruction: [(ARC 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ARC .
INFO: Running invalid instruction: [(ARC 10 10 10)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ARC [10] 10]
INFO: error code is 7 .
INFO: error text is ellipsearc doesn't like [10] as input .
INFO: Running invalid instruction: [ARC {10} 10]
INFO: error code is 7 .
INFO: error text is ellipsearc doesn't like {10} as input .
INFO: Running invalid instruction: [ARC 10 [10]]
INFO: error code is 7 .
INFO: error text is ellipsearc doesn't like [10] as input .
INFO: Running invalid instruction: [ARC 10 {10}]
INFO: error code is 7 .
INFO: error text is ellipsearc doesn't like {10} as input .
INFO: executing regression test for bug #1388325
PASS: "bug #1388325 is fixed; 'ELLIPSEARC 1e20 50 50 0' did not crash.
PASS: WINDOWFILEEDIT did not crash on a long filename
PASS: The circle was drawn correctly
PASS: solid-green was drawn correctly.
INFO: Running invalid instruction: [(FILL 10)]
INFO: error code is 7 .
INFO: error text is FILL doesn't like 10 as input .
INFO: Running invalid instruction: [(FILL ["true] )]
INFO: error code is 7 .
INFO: error text is FILL doesn't like ["true] as input .
INFO: Running invalid instruction: [(FILL "true "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [WRITER] output smoketest.txt , as expected.
PASS: [WRITEPOS] output 0 , as expected.
PASS: [WRITEPOS] output 7 , as expected.
PASS: [WRITEPOS] output 17 , as expected.
PASS: [WRITER] output [] , as expected.
PASS: [READER] output smoketest.txt , as expected.
PASS: [READPOS] output 0 , as expected.
PASS: [EOFP] output false , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READPOS] output 7 , as expected.
PASS: [EOFP] output false , as expected.
PASS: [READLIST] output [Good Bye] , as expected.
PASS: [READPOS] output 17 , as expected.
PASS: [EOFP] output true , as expected.
PASS: [READER] output [] , as expected.
CALL: CLOSE WRITER
PASS: [WRITER] output [] , as expected.
PASS: [READWORD] output This is line 1 , as expected.
CALL: CLOSE READER
PASS: [READER] output [] , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Jello] , as expected.
CALL: OPENWRITE :filename1
CALL: OPENWRITE :filename2
PASS: [MEMBERP :filename1 ALLOPEN] output true , as expected.
PASS: [MEMBERP :filename2 ALLOPEN] output true , as expected.
CALL: CLOSE :filename1
CALL: CLOSE :filename2
PASS: [MEMBERP :filename1 ALLOPEN] output false , as expected.
PASS: [MEMBERP :filename2 ALLOPEN] output false , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Good Bye] , as expected.
INFO: Running invalid instruction: [OPENREAD :filename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [And how are you today] , as expected.
PASS: [READLIST] output [Hello] , as expected.
PASS: [READLIST] output [Good Bye] , as expected.
PASS: [MEMBERP "mytestfile FILES] output true , as expected.
PASS: [MEMBERP "mytestfile FILES] output false , as expected.
PASS: [MEMBERP "mytestdir DIRECTORIES] output true , as expected.
CALL: OPENWRITE "my-test-file
INFO: Running invalid instruction: [OPENREAD "my-test-file]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENWRITE "my-test-file]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENAPPEND "my-test-file]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENUPDATE "my-test-file]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
CALL: OPENREAD "my-Test-file
CALL: OPENWRITE "my-tEst-file
CALL: OPENAPPEND "my-teSt-file
CALL: OPENUPDATE "my-tesT-file
CALL: CLOSE "my-test-file
CALL: CLOSE "my-Test-file
CALL: CLOSE "my-tEst-file
CALL: CLOSE "my-teSt-file
CALL: CLOSE "my-tesT-file
CALL: OPENREAD "my-test-file
INFO: Running invalid instruction: [OPENREAD "my-test-file]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENWRITE "my-test-file]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENAPPEND "my-test-file]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
INFO: Running invalid instruction: [OPENUPDATE "my-test-file]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File already open .
CALL: OPENREAD "my-Test-file
CALL: OPENWRITE "my-tEst-file
CALL: OPENAPPEND "my-teSt-file
CALL: OPENUPDATE "my-tesT-file
CALL: CLOSE "my-test-file
CALL: CLOSE "my-Test-file
CALL: CLOSE "my-tEst-file
CALL: CLOSE "my-teSt-file
CALL: CLOSE "my-tesT-file
PASS: [MEMBERP "my-test-file FILES] output false , as expected.
INFO: Running invalid instruction: [OPENREAD "testdir]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENWRITE "testdir]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENAPPEND "testdir]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENUPDATE "testdir]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
PASS: [MEMBERP "mytestfile DIRECTORIES] output false , as expected.
CALL: SETREAD []
PASS: [EOFP] output false , as expected.
PASS: [EOF?] output false , as expected.
INFO: Running invalid instruction: [(OPENREAD "testfile.txt 1)]
INFO: error code is 7 .
INFO: error text is OPENREAD doesn't like 1 as input .
INFO: Running invalid instruction: [(OPENWRITE "testfile.txt 1)]
INFO: error code is 7 .
INFO: error text is OPENWRITE doesn't like 1 as input .
INFO: Running invalid instruction: [(OPENAPPEND "testfile.txt 1)]
INFO: error code is 7 .
INFO: error text is OPENAPPEND doesn't like 1 as input .
INFO: Running invalid instruction: [(OPENUPDATE "testfile.txt 1)]
INFO: error code is 7 .
INFO: error text is OPENUPDATE doesn't like 1 as input .
INFO: Running invalid instruction: [(OPENREAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OPENREAD .
INFO: Running invalid instruction: [(OPENWRITE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OPENWRITE .
INFO: Running invalid instruction: [(OPENAPPEND)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OPENAPPEND .
INFO: Running invalid instruction: [(OPENUPDATE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to OPENUPDATE .
INFO: Running invalid instruction: [(OPENREAD "testfile.txt LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(OPENWRITE "testfile.txt LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(OPENAPPEND "testfile.txt LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(OPENUPDATE "testfile.txt LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [OPENREAD []]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENWRITE []]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENAPPEND []]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENUPDATE []]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENREAD {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENWRITE {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENAPPEND {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENUPDATE {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENREAD :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENWRITE :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENAPPEND :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [OPENUPDATE :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: Could not open file .
INFO: Running invalid instruction: [CLOSE :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [CLOSE "nonexistent.txt]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [CLOSE []]
PASS: error code is 7 , as expected.
INFO: error text is CLOSE doesn't like [] as input .
INFO: Running invalid instruction: [CLOSE [testfile.txt]]
PASS: error code is 7 , as expected.
INFO: error text is CLOSE doesn't like [testfile.txt] as input .
INFO: Running invalid instruction: [CLOSE {testfile.txt}]
PASS: error code is 7 , as expected.
INFO: error text is CLOSE doesn't like {testfile.txt} as input .
INFO: Running invalid instruction: [(CLOSE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to CLOSE .
INFO: Running invalid instruction: [(CLOSE "testfile.txt "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ERASEFILE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ERASEFILE .
INFO: Running invalid instruction: [(ERASEFILE "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(CLOSEALL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ALLOPEN "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(EOFP "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETREAD {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [SETREAD :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [(SETREAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETREAD .
INFO: Running invalid instruction: [(SETREAD "file.txt "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETWRITE {1}]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [SETWRITE :longfilename]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
INFO: Running invalid instruction: [(SETWRITE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETWRITE .
INFO: Running invalid instruction: [(SETWRITE "file.txt "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETWRITE :closedfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
PASS: [WRITER] output openfile.txt , as expected.
INFO: Running invalid instruction: [SETREAD :closedfile]
PASS: error code is 18 , as expected.
INFO: error text is File system error: File not open .
PASS: [READER] output openfile.txt , as expected.
PASS: [PENCOLOR] output 0 , as expected.
PASS: [PENCOLOR] output 15 , as expected.
PASS: [PENCOLOR] output 1 , as expected.
PASS: [PENCOLOR] output [128 64 32] , as expected.
PASS: [PENCOLOR] output [255 255 255] , as expected.
PASS: [PENCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETPENCOLOR 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETPENCOLOR -1]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like -1 as input .
INFO: Running invalid instruction: [SETPENCOLOR 4.5]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETPENCOLOR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like {} as input .
INFO: Running invalid instruction: [SETPENCOLOR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [1e20 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [0 1e20 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR [0 0 1e20]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETPENCOLOR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETPENCOLOR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOR "notacolor]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETPENCOLOR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPENCOLOR .
INFO: Running invalid instruction: [( SETPENCOLOR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PENCOLOR] output [255 160 122] , as expected.
CALL: SETPENCOLOR [4.5 10.2 15.7]
PASS: [PENCOLOR] output [5 10 16] , as expected.
CALL: SETPENCOLOR [256 522 1023.2]
PASS: [PENCOLOR] output [0 10 255] , as expected.
PASS: [PENCOLOUR] output 0 , as expected.
PASS: [PENCOLOUR] output 15 , as expected.
PASS: [PENCOLOUR] output 1 , as expected.
PASS: [PENCOLOUR] output [128 64 32] , as expected.
PASS: [PENCOLOUR] output [255 255 255] , as expected.
PASS: [PENCOLOUR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETPENCOLOUR 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETPENCOLOUR -1]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like -1 as input .
INFO: Running invalid instruction: [SETPENCOLOUR 4.5]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETPENCOLOUR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like {} as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [1e20 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0 1e20 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0 0 1e20]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETPENCOLOUR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETPENCOLOUR "notacolor]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOUR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETPENCOLOUR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPENCOLOUR .
INFO: Running invalid instruction: [( SETPENCOLOUR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PENCOLOUR] output [255 160 122] , as expected.
CALL: SETPENCOLOUR [4.5 10.2 15.7]
PASS: [PENCOLOUR] output [5 10 16] , as expected.
CALL: SETPENCOLOUR [256 522 1023.2]
PASS: [PENCOLOUR] output [0 10 255] , as expected.
PASS: [PENCOLOR] output 0 , as expected.
PASS: [PENCOLOR] output 15 , as expected.
PASS: [PENCOLOR] output 1 , as expected.
PASS: [PENCOLOR] output [128 64 32] , as expected.
PASS: [PENCOLOR] output [255 255 255] , as expected.
PASS: [PENCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETPC 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETPC -1]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like -1 as input .
INFO: Running invalid instruction: [SETPC 4.5]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETPC {}]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like {} as input .
INFO: Running invalid instruction: [SETPC [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0] as input .
INFO: Running invalid instruction: [SETPC [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETPC [1e20 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETPC [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETPC [0 1e20 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETPC [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETPC [0 0 1e20]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETPC [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETPC [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETPC "notacolor]
PASS: error code is 7 , as expected.
INFO: error text is SETPC doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETPC )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPC .
INFO: Running invalid instruction: [( SETPC 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [PENCOLOR] output [255 160 122] , as expected.
CALL: SETPC [4.5 10.2 15.7]
PASS: [PENCOLOR] output [5 10 16] , as expected.
CALL: SETPC [256 522 1023.2]
PASS: [PENCOLOR] output [0 10 255] , as expected.
PASS: [FLOODCOLOR] output 0 , as expected.
PASS: [FLOODCOLOR] output 15 , as expected.
PASS: [FLOODCOLOR] output 1 , as expected.
PASS: [FLOODCOLOR] output [128 64 32] , as expected.
PASS: [FLOODCOLOR] output [255 255 255] , as expected.
PASS: [FLOODCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETFLOODCOLOR 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETFLOODCOLOR -1]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like -1 as input .
INFO: Running invalid instruction: [SETFLOODCOLOR 4.5]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETFLOODCOLOR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like {} as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [1e20 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0 1e20 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0 0 1e20]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOR "notacolor]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETFLOODCOLOR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETFLOODCOLOR .
INFO: Running invalid instruction: [( SETFLOODCOLOR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [FLOODCOLOR] output [255 160 122] , as expected.
CALL: SETFLOODCOLOR [4.5 10.2 15.7]
PASS: [FLOODCOLOR] output [5 10 16] , as expected.
CALL: SETFLOODCOLOR [256 522 1023.2]
PASS: [FLOODCOLOR] output [0 10 255] , as expected.
PASS: [FLOODCOLOUR] output 0 , as expected.
PASS: [FLOODCOLOUR] output 15 , as expected.
PASS: [FLOODCOLOUR] output 1 , as expected.
PASS: [FLOODCOLOUR] output [128 64 32] , as expected.
PASS: [FLOODCOLOUR] output [255 255 255] , as expected.
PASS: [FLOODCOLOUR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETFLOODCOLOUR 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR -1]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like -1 as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR 4.5]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like {} as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [1e20 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 1e20 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 0 1e20]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETFLOODCOLOUR "notacolor]
PASS: error code is 7 , as expected.
INFO: error text is SETFLOODCOLOUR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETFLOODCOLOUR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETFLOODCOLOUR .
INFO: Running invalid instruction: [( SETFLOODCOLOUR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [FLOODCOLOUR] output [255 160 122] , as expected.
CALL: SETFLOODCOLOUR [4.5 10.2 15.7]
PASS: [FLOODCOLOUR] output [5 10 16] , as expected.
CALL: SETFLOODCOLOUR [256 522 1023.2]
PASS: [FLOODCOLOUR] output [0 10 255] , as expected.
PASS: [FLOODCOLOR] output 0 , as expected.
PASS: [FLOODCOLOR] output 15 , as expected.
PASS: [FLOODCOLOR] output 1 , as expected.
PASS: [FLOODCOLOR] output [128 64 32] , as expected.
PASS: [FLOODCOLOR] output [255 255 255] , as expected.
PASS: [FLOODCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETFC 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETFC -1]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like -1 as input .
INFO: Running invalid instruction: [SETFC 4.5]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETFC {}]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like {} as input .
INFO: Running invalid instruction: [SETFC [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0] as input .
INFO: Running invalid instruction: [SETFC [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETFC [1e20 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETFC [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETFC [0 1e20 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETFC [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETFC [0 0 1e20]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETFC [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETFC [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETFC "notacolor]
PASS: error code is 7 , as expected.
INFO: error text is SETFC doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETFC )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETFC .
INFO: Running invalid instruction: [( SETFC 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [FLOODCOLOR] output [255 160 122] , as expected.
CALL: SETFC [4.5 10.2 15.7]
PASS: [FLOODCOLOR] output [5 10 16] , as expected.
CALL: SETFC [256 522 1023.2]
PASS: [FLOODCOLOR] output [0 10 255] , as expected.
PASS: [SCREENCOLOR] output 0 , as expected.
PASS: [SCREENCOLOR] output 15 , as expected.
PASS: [SCREENCOLOR] output 1 , as expected.
PASS: [SCREENCOLOR] output [128 64 32] , as expected.
PASS: [SCREENCOLOR] output [255 255 255] , as expected.
PASS: [SCREENCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETSCREENCOLOR 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETSCREENCOLOR -1]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like -1 as input .
INFO: Running invalid instruction: [SETSCREENCOLOR 4.5]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETSCREENCOLOR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like {} as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [1e20 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0 1e20 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0 0 1e20]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOR "notacolor]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETSCREENCOLOR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCREENCOLOR .
INFO: Running invalid instruction: [( SETSCREENCOLOR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [SCREENCOLOR] output [255 160 122] , as expected.
CALL: SETSCREENCOLOR [4.5 10.2 15.7]
PASS: [SCREENCOLOR] output [5 10 16] , as expected.
CALL: SETSCREENCOLOR [256 522 1023.2]
PASS: [SCREENCOLOR] output [0 10 255] , as expected.
PASS: [SCREENCOLOUR] output 0 , as expected.
PASS: [SCREENCOLOUR] output 15 , as expected.
PASS: [SCREENCOLOUR] output 1 , as expected.
PASS: [SCREENCOLOUR] output [128 64 32] , as expected.
PASS: [SCREENCOLOUR] output [255 255 255] , as expected.
PASS: [SCREENCOLOUR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETSCREENCOLOUR 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR -1]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like -1 as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR 4.5]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR {}]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like {} as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [1e20 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 1e20 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 0 1e20]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETSCREENCOLOUR "notacolor]
PASS: error code is 7 , as expected.
INFO: error text is SETSCREENCOLOUR doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETSCREENCOLOUR )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCREENCOLOUR .
INFO: Running invalid instruction: [( SETSCREENCOLOUR 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [SCREENCOLOUR] output [255 160 122] , as expected.
CALL: SETSCREENCOLOUR [4.5 10.2 15.7]
PASS: [SCREENCOLOUR] output [5 10 16] , as expected.
CALL: SETSCREENCOLOUR [256 522 1023.2]
PASS: [SCREENCOLOUR] output [0 10 255] , as expected.
PASS: [SCREENCOLOR] output 0 , as expected.
PASS: [SCREENCOLOR] output 15 , as expected.
PASS: [SCREENCOLOR] output 1 , as expected.
PASS: [SCREENCOLOR] output [128 64 32] , as expected.
PASS: [SCREENCOLOR] output [255 255 255] , as expected.
PASS: [SCREENCOLOR] output [255 160 122] , as expected.
INFO: Running invalid instruction: [SETSC 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETSC -1]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like -1 as input .
INFO: Running invalid instruction: [SETSC 4.5]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETSC {}]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like {} as input .
INFO: Running invalid instruction: [SETSC [0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0] as input .
INFO: Running invalid instruction: [SETSC [0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 0] as input .
INFO: Running invalid instruction: [SETSC [1e20 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETSC [-1 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETSC [0 1e20 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETSC [0 -1 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETSC [0 0 1e20]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETSC [0 0 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETSC [0 0 0 0]]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [SETSC "notacolor]
PASS: error code is 7 , as expected.
INFO: error text is SETSC doesn't like notacolor as input .
INFO: Running invalid instruction: [( SETSC )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSC .
INFO: Running invalid instruction: [( SETSC 0 0 )]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [SCREENCOLOR] output [255 160 122] , as expected.
CALL: SETSC [4.5 10.2 15.7]
PASS: [SCREENCOLOR] output [5 10 16] , as expected.
CALL: SETSC [256 522 1023.2]
PASS: [SCREENCOLOR] output [0 10 255] , as expected.
CALL: SETPENCOLOR 0
PASS: [PENCOLOR] output [0 0 0] , as expected.
CALL: SETPENCOLOR 1
PASS: [PENCOLOR] output [0 0 255] , as expected.
CALL: SETPENCOLOR 2
PASS: [PENCOLOR] output [0 255 0] , as expected.
CALL: SETPENCOLOR 3
PASS: [PENCOLOR] output [0 255 255] , as expected.
CALL: SETPENCOLOR 4
PASS: [PENCOLOR] output [255 0 0] , as expected.
CALL: SETPENCOLOR 5
PASS: [PENCOLOR] output [255 0 255] , as expected.
CALL: SETPENCOLOR 6
PASS: [PENCOLOR] output [255 255 0] , as expected.
CALL: SETPENCOLOR 7
PASS: [PENCOLOR] output [255 255 255] , as expected.
CALL: SETPENCOLOR 8
PASS: [PENCOLOR] output [155 96 59] , as expected.
CALL: SETPENCOLOR 9
PASS: [PENCOLOR] output [197 136 18] , as expected.
CALL: SETPENCOLOR 10
PASS: [PENCOLOR] output [100 162 64] , as expected.
CALL: SETPENCOLOR 11
PASS: [PENCOLOR] output [120 187 187] , as expected.
CALL: SETPENCOLOR 12
PASS: [PENCOLOR] output [255 149 119] , as expected.
CALL: SETPENCOLOR 13
PASS: [PENCOLOR] output [144 113 208] , as expected.
CALL: SETPENCOLOR 14
PASS: [PENCOLOR] output [255 163 0] , as expected.
CALL: SETPENCOLOR 15
PASS: [PENCOLOR] output [183 183 183] , as expected.
CALL: SETPENCOLOR "AliceBlue
PASS: [PENCOLOR] output [240 248 255] , as expected.
CALL: SETPENCOLOR "AntiqueWhite
PASS: [PENCOLOR] output [250 235 215] , as expected.
CALL: SETPENCOLOR "Aqua
PASS: [PENCOLOR] output [0 255 255] , as expected.
CALL: SETPENCOLOR "Aquamarine
PASS: [PENCOLOR] output [127 255 212] , as expected.
CALL: SETPENCOLOR "Azure
PASS: [PENCOLOR] output [240 255 255] , as expected.
CALL: SETPENCOLOR "Beige
PASS: [PENCOLOR] output [245 245 220] , as expected.
CALL: SETPENCOLOR "Bisque
PASS: [PENCOLOR] output [255 228 196] , as expected.
CALL: SETPENCOLOR "Black
PASS: [PENCOLOR] output [0 0 0] , as expected.
CALL: SETPENCOLOR "BlanchedAlmond
PASS: [PENCOLOR] output [255 235 205] , as expected.
CALL: SETPENCOLOR "Blue
PASS: [PENCOLOR] output [0 0 255] , as expected.
CALL: SETPENCOLOR "BlueViolet
PASS: [PENCOLOR] output [138 43 226] , as expected.
CALL: SETPENCOLOR "Brown
PASS: [PENCOLOR] output [165 42 42] , as expected.
CALL: SETPENCOLOR "BurlyWood
PASS: [PENCOLOR] output [222 184 135] , as expected.
CALL: SETPENCOLOR "CadetBlue
PASS: [PENCOLOR] output [95 158 160] , as expected.
CALL: SETPENCOLOR "Chartreuse
PASS: [PENCOLOR] output [127 255 0] , as expected.
CALL: SETPENCOLOR "Chocolate
PASS: [PENCOLOR] output [210 105 30] , as expected.
CALL: SETPENCOLOR "Coral
PASS: [PENCOLOR] output [255 127 80] , as expected.
CALL: SETPENCOLOR "CornflowerBlue
PASS: [PENCOLOR] output [100 149 237] , as expected.
CALL: SETPENCOLOR "Cornsilk
PASS: [PENCOLOR] output [255 248 220] , as expected.
CALL: SETPENCOLOR "Crimson
PASS: [PENCOLOR] output [220 20 60] , as expected.
CALL: SETPENCOLOR "Cyan
PASS: [PENCOLOR] output [0 255 255] , as expected.
CALL: SETPENCOLOR "DarkBlue
PASS: [PENCOLOR] output [0 0 139] , as expected.
CALL: SETPENCOLOR "DarkCyan
PASS: [PENCOLOR] output [0 139 139] , as expected.
CALL: SETPENCOLOR "DarkGoldenRod
PASS: [PENCOLOR] output [184 134 11] , as expected.
CALL: SETPENCOLOR "DarkGray
PASS: [PENCOLOR] output [169 169 169] , as expected.
CALL: SETPENCOLOR "DarkGreen
PASS: [PENCOLOR] output [0 100 0] , as expected.
CALL: SETPENCOLOR "DarkGrey
PASS: [PENCOLOR] output [169 169 169] , as expected.
CALL: SETPENCOLOR "DarkKhaki
PASS: [PENCOLOR] output [189 183 107] , as expected.
CALL: SETPENCOLOR "DarkMagenta
PASS: [PENCOLOR] output [139 0 139] , as expected.
CALL: SETPENCOLOR "DarkOliveGreen
PASS: [PENCOLOR] output [85 107 47] , as expected.
CALL: SETPENCOLOR "DarkOrchid
PASS: [PENCOLOR] output [153 50 204] , as expected.
CALL: SETPENCOLOR "DarkRed
PASS: [PENCOLOR] output [139 0 0] , as expected.
CALL: SETPENCOLOR "DarkSalmon
PASS: [PENCOLOR] output [233 150 122] , as expected.
CALL: SETPENCOLOR "DarkSeaGreen
PASS: [PENCOLOR] output [143 188 143] , as expected.
CALL: SETPENCOLOR "DarkSlateBlue
PASS: [PENCOLOR] output [72 61 139] , as expected.
CALL: SETPENCOLOR "DarkSlateGray
PASS: [PENCOLOR] output [47 79 79] , as expected.
CALL: SETPENCOLOR "DarkSlateGrey
PASS: [PENCOLOR] output [47 79 79] , as expected.
CALL: SETPENCOLOR "DarkTurquoise
PASS: [PENCOLOR] output [0 206 209] , as expected.
CALL: SETPENCOLOR "DarkViolet
PASS: [PENCOLOR] output [148 0 211] , as expected.
CALL: SETPENCOLOR "Darkorange
PASS: [PENCOLOR] output [255 140 0] , as expected.
CALL: SETPENCOLOR "DeepPink
PASS: [PENCOLOR] output [255 20 147] , as expected.
CALL: SETPENCOLOR "DeepSkyBlue
PASS: [PENCOLOR] output [0 191 255] , as expected.
CALL: SETPENCOLOR "DimGray
PASS: [PENCOLOR] output [105 105 105] , as expected.
CALL: SETPENCOLOR "DimGrey
PASS: [PENCOLOR] output [105 105 105] , as expected.
CALL: SETPENCOLOR "DodgerBlue
PASS: [PENCOLOR] output [30 144 255] , as expected.
CALL: SETPENCOLOR "FireBrick
PASS: [PENCOLOR] output [178 34 34] , as expected.
CALL: SETPENCOLOR "FloralWhite
PASS: [PENCOLOR] output [255 250 240] , as expected.
CALL: SETPENCOLOR "ForestGreen
PASS: [PENCOLOR] output [34 139 34] , as expected.
CALL: SETPENCOLOR "Fuchsia
PASS: [PENCOLOR] output [255 0 255] , as expected.
CALL: SETPENCOLOR "Gainsboro
PASS: [PENCOLOR] output [220 220 220] , as expected.
CALL: SETPENCOLOR "GhostWhite
PASS: [PENCOLOR] output [248 248 255] , as expected.
CALL: SETPENCOLOR "Gold
PASS: [PENCOLOR] output [255 215 0] , as expected.
CALL: SETPENCOLOR "GoldenRod
PASS: [PENCOLOR] output [218 165 32] , as expected.
CALL: SETPENCOLOR "Gray
PASS: [PENCOLOR] output [128 128 128] , as expected.
CALL: SETPENCOLOR "Green
PASS: [PENCOLOR] output [0 128 0] , as expected.
CALL: SETPENCOLOR "GreenYellow
PASS: [PENCOLOR] output [173 255 47] , as expected.
CALL: SETPENCOLOR "Grey
PASS: [PENCOLOR] output [128 128 128] , as expected.
CALL: SETPENCOLOR "HoneyDew
PASS: [PENCOLOR] output [240 255 240] , as expected.
CALL: SETPENCOLOR "HotPink
PASS: [PENCOLOR] output [255 105 180] , as expected.
CALL: SETPENCOLOR "IndianRed
PASS: [PENCOLOR] output [205 92 92] , as expected.
CALL: SETPENCOLOR "Indigo
PASS: [PENCOLOR] output [75 0 130] , as expected.
CALL: SETPENCOLOR "Ivory
PASS: [PENCOLOR] output [255 255 240] , as expected.
CALL: SETPENCOLOR "Khaki
PASS: [PENCOLOR] output [240 230 140] , as expected.
CALL: SETPENCOLOR "Lavender
PASS: [PENCOLOR] output [230 230 250] , as expected.
CALL: SETPENCOLOR "LavenderBlush
PASS: [PENCOLOR] output [255 240 245] , as expected.
CALL: SETPENCOLOR "LawnGreen
PASS: [PENCOLOR] output [124 252 0] , as expected.
CALL: SETPENCOLOR "LemonChiffon
PASS: [PENCOLOR] output [255 250 205] , as expected.
CALL: SETPENCOLOR "LightBlue
PASS: [PENCOLOR] output [173 216 230] , as expected.
CALL: SETPENCOLOR "LightCoral
PASS: [PENCOLOR] output [240 128 128] , as expected.
CALL: SETPENCOLOR "LightCyan
PASS: [PENCOLOR] output [224 255 255] , as expected.
CALL: SETPENCOLOR "LightGoldenRodYellow
PASS: [PENCOLOR] output [250 250 210] , as expected.
CALL: SETPENCOLOR "LightGray
PASS: [PENCOLOR] output [211 211 211] , as expected.
CALL: SETPENCOLOR "LightGreen
PASS: [PENCOLOR] output [144 238 144] , as expected.
CALL: SETPENCOLOR "LightGrey
PASS: [PENCOLOR] output [211 211 211] , as expected.
CALL: SETPENCOLOR "LightPink
PASS: [PENCOLOR] output [255 182 193] , as expected.
CALL: SETPENCOLOR "LightSalmon
PASS: [PENCOLOR] output [255 160 122] , as expected.
CALL: SETPENCOLOR "LightSeaGreen
PASS: [PENCOLOR] output [32 178 170] , as expected.
CALL: SETPENCOLOR "LightSkyBlue
PASS: [PENCOLOR] output [135 206 250] , as expected.
CALL: SETPENCOLOR "LightSlateGray
PASS: [PENCOLOR] output [119 136 153] , as expected.
CALL: SETPENCOLOR "LightSlateGrey
PASS: [PENCOLOR] output [119 136 153] , as expected.
CALL: SETPENCOLOR "LightSteelBlue
PASS: [PENCOLOR] output [176 196 222] , as expected.
CALL: SETPENCOLOR "LightYellow
PASS: [PENCOLOR] output [255 255 224] , as expected.
CALL: SETPENCOLOR "Lime
PASS: [PENCOLOR] output [0 255 0] , as expected.
CALL: SETPENCOLOR "LimeGreen
PASS: [PENCOLOR] output [50 205 50] , as expected.
CALL: SETPENCOLOR "Linen
PASS: [PENCOLOR] output [250 240 230] , as expected.
CALL: SETPENCOLOR "Magenta
PASS: [PENCOLOR] output [255 0 255] , as expected.
CALL: SETPENCOLOR "Maroon
PASS: [PENCOLOR] output [128 0 0] , as expected.
CALL: SETPENCOLOR "MediumAquaMarine
PASS: [PENCOLOR] output [102 205 170] , as expected.
CALL: SETPENCOLOR "MediumBlue
PASS: [PENCOLOR] output [0 0 205] , as expected.
CALL: SETPENCOLOR "MediumOrchid
PASS: [PENCOLOR] output [186 85 211] , as expected.
CALL: SETPENCOLOR "MediumPurple
PASS: [PENCOLOR] output [147 112 216] , as expected.
CALL: SETPENCOLOR "MediumSeaGreen
PASS: [PENCOLOR] output [60 179 113] , as expected.
CALL: SETPENCOLOR "MediumSlateBlue
PASS: [PENCOLOR] output [123 104 238] , as expected.
CALL: SETPENCOLOR "MediumSpringGreen
PASS: [PENCOLOR] output [0 250 154] , as expected.
CALL: SETPENCOLOR "MediumTurquoise
PASS: [PENCOLOR] output [72 209 204] , as expected.
CALL: SETPENCOLOR "MediumVioletRed
PASS: [PENCOLOR] output [199 21 133] , as expected.
CALL: SETPENCOLOR "MidnightBlue
PASS: [PENCOLOR] output [25 25 112] , as expected.
CALL: SETPENCOLOR "MintCream
PASS: [PENCOLOR] output [245 255 250] , as expected.
CALL: SETPENCOLOR "MistyRose
PASS: [PENCOLOR] output [255 228 225] , as expected.
CALL: SETPENCOLOR "Moccasin
PASS: [PENCOLOR] output [255 228 181] , as expected.
CALL: SETPENCOLOR "NavajoWhite
PASS: [PENCOLOR] output [255 222 173] , as expected.
CALL: SETPENCOLOR "Navy
PASS: [PENCOLOR] output [0 0 128] , as expected.
CALL: SETPENCOLOR "OldLace
PASS: [PENCOLOR] output [253 245 230] , as expected.
CALL: SETPENCOLOR "Olive
PASS: [PENCOLOR] output [128 128 0] , as expected.
CALL: SETPENCOLOR "OliveDrab
PASS: [PENCOLOR] output [107 142 35] , as expected.
CALL: SETPENCOLOR "Orange
PASS: [PENCOLOR] output [255 165 0] , as expected.
CALL: SETPENCOLOR "OrangeRed
PASS: [PENCOLOR] output [255 69 0] , as expected.
CALL: SETPENCOLOR "Orchid
PASS: [PENCOLOR] output [218 112 214] , as expected.
CALL: SETPENCOLOR "PaleGoldenRod
PASS: [PENCOLOR] output [238 232 170] , as expected.
CALL: SETPENCOLOR "PaleGreen
PASS: [PENCOLOR] output [152 251 152] , as expected.
CALL: SETPENCOLOR "PaleTurquoise
PASS: [PENCOLOR] output [175 238 238] , as expected.
CALL: SETPENCOLOR "PaleVioletRed
PASS: [PENCOLOR] output [216 112 147] , as expected.
CALL: SETPENCOLOR "PapayaWhip
PASS: [PENCOLOR] output [255 239 213] , as expected.
CALL: SETPENCOLOR "PeachPuff
PASS: [PENCOLOR] output [255 218 185] , as expected.
CALL: SETPENCOLOR "Peru
PASS: [PENCOLOR] output [205 133 63] , as expected.
CALL: SETPENCOLOR "Pink
PASS: [PENCOLOR] output [255 192 203] , as expected.
CALL: SETPENCOLOR "Plum
PASS: [PENCOLOR] output [221 160 221] , as expected.
CALL: SETPENCOLOR "PowderBlue
PASS: [PENCOLOR] output [176 224 230] , as expected.
CALL: SETPENCOLOR "Purple
PASS: [PENCOLOR] output [128 0 128] , as expected.
CALL: SETPENCOLOR "Red
PASS: [PENCOLOR] output [255 0 0] , as expected.
CALL: SETPENCOLOR "RosyBrown
PASS: [PENCOLOR] output [188 143 143] , as expected.
CALL: SETPENCOLOR "RoyalBlue
PASS: [PENCOLOR] output [65 105 225] , as expected.
CALL: SETPENCOLOR "SaddleBrown
PASS: [PENCOLOR] output [139 69 19] , as expected.
CALL: SETPENCOLOR "Salmon
PASS: [PENCOLOR] output [250 128 114] , as expected.
CALL: SETPENCOLOR "SandyBrown
PASS: [PENCOLOR] output [244 164 96] , as expected.
CALL: SETPENCOLOR "SeaGreen
PASS: [PENCOLOR] output [46 139 87] , as expected.
CALL: SETPENCOLOR "SeaShell
PASS: [PENCOLOR] output [255 245 238] , as expected.
CALL: SETPENCOLOR "Sienna
PASS: [PENCOLOR] output [160 82 45] , as expected.
CALL: SETPENCOLOR "Silver
PASS: [PENCOLOR] output [192 192 192] , as expected.
CALL: SETPENCOLOR "SkyBlue
PASS: [PENCOLOR] output [135 206 235] , as expected.
CALL: SETPENCOLOR "SlateBlue
PASS: [PENCOLOR] output [106 90 205] , as expected.
CALL: SETPENCOLOR "SlateGray
PASS: [PENCOLOR] output [112 128 144] , as expected.
CALL: SETPENCOLOR "SlateGrey
PASS: [PENCOLOR] output [112 128 144] , as expected.
CALL: SETPENCOLOR "Snow
PASS: [PENCOLOR] output [255 250 250] , as expected.
CALL: SETPENCOLOR "SpringGreen
PASS: [PENCOLOR] output [0 255 127] , as expected.
CALL: SETPENCOLOR "SteelBlue
PASS: [PENCOLOR] output [70 130 180] , as expected.
CALL: SETPENCOLOR "Tan
PASS: [PENCOLOR] output [210 180 140] , as expected.
CALL: SETPENCOLOR "Teal
PASS: [PENCOLOR] output [0 128 128] , as expected.
CALL: SETPENCOLOR "Thistle
PASS: [PENCOLOR] output [216 191 216] , as expected.
CALL: SETPENCOLOR "Tomato
PASS: [PENCOLOR] output [255 99 71] , as expected.
CALL: SETPENCOLOR "Turquoise
PASS: [PENCOLOR] output [64 224 208] , as expected.
CALL: SETPENCOLOR "Violet
PASS: [PENCOLOR] output [238 130 238] , as expected.
CALL: SETPENCOLOR "Wheat
PASS: [PENCOLOR] output [245 222 179] , as expected.
CALL: SETPENCOLOR "White
PASS: [PENCOLOR] output [255 255 255] , as expected.
CALL: SETPENCOLOR "WhiteSmoke
PASS: [PENCOLOR] output [245 245 245] , as expected.
CALL: SETPENCOLOR "Yellow
PASS: [PENCOLOR] output [255 255 0] , as expected.
CALL: SETPENCOLOR "YellowGreen
PASS: [PENCOLOR] output [154 205 50] , as expected.
INFO: Running invalid instruction: [SETPENCOLOR "yellow]
PASS: error code is 7 , as expected.
INFO: error text is SETPENCOLOR doesn't like yellow as input .
PASS: [PENCOLOR] output 5 , as expected.
PASS: [PENCOLOR] output 5 , as expected.
PASS: [PENCOLOR] output 5 , as expected.
CALL: SETPENSIZE [10 10]
PASS: [PENSIZE] output [10 10] , as expected.
CALL: SETPENSIZE [1 1]
PASS: [PENSIZE] output [1 1] , as expected.
CALL: SETPENSIZE [0 0]
PASS: [PENSIZE] output [0 0] , as expected.
CALL: SETPENSIZE [1.9 1.9]
PASS: [PENSIZE] output [1 1] , as expected.
CALL: SETPENSIZE 5
PASS: [PENSIZE] output [5 5] , as expected.
INFO: Running invalid instruction: [(PENSIZE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: SETPENSIZE [11 11]
INFO: Running invalid instruction: [(SETPENSIZE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPENSIZE .
INFO: Running invalid instruction: [(SETPENSIZE [5 5] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETPENSIZE -1]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like -1 as input .
INFO: Running invalid instruction: [SETPENSIZE 5.5]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like 5.5 as input .
INFO: Running invalid instruction: [SETPENSIZE 1e20]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETPENSIZE "5x5]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like 5x5 as input .
INFO: Running invalid instruction: [SETPENSIZE {5 5}]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like {5 5} as input .
INFO: Running invalid instruction: [SETPENSIZE [5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 5 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 5 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [-1 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [-1 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [five 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [five 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [[5] 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [[5] 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [{5} 5]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [{5} 5] as input .
INFO: Running invalid instruction: [SETPENSIZE [1e20 5]]
FAIL: Running [SETPENSIZE [1e+20 5]] did not throw an error.
INFO: Running invalid instruction: [SETPENSIZE [5 -1]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 -1] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 five]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 five] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 [5]]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 [5]] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 {5}]]
PASS: error code is 7 , as expected.
INFO: error text is SETPENSIZE doesn't like [5 {5}] as input .
INFO: Running invalid instruction: [SETPENSIZE [5 1e20]]
FAIL: Running [SETPENSIZE [5 1e+20]] did not throw an error.
FAIL: [PENSIZE] output [2147483647 2147483647] . We expected [11 11] .
CALL: SETPIXEL 5
PASS: [PIXEL] output 5 , as expected.
CALL: SETPIXEL [255 255 255]
PASS: [PIXEL] output [255 255 255] , as expected.
CALL: SETPIXEL [255 0 0]
PASS: [PIXEL] output [255 0 0] , as expected.
CALL: SETPIXEL [0 255 0]
PASS: [PIXEL] output [0 255 0] , as expected.
CALL: SETPIXEL [0 0 255]
PASS: [PIXEL] output [0 0 255] , as expected.
CALL: SETPIXEL "blue
PASS: [PIXEL] output [0 0 255] , as expected.
CALL: SETPIXEL [10.5 20.3 30.7]
PASS: [PIXEL] output [11 20 31] , as expected.
CALL: SETPIXEL [256 522 1023.2]
PASS: [PIXEL] output [0 10 255] , as expected.
CALL: SETPIXEL [1 2 3]
INFO: Running invalid instruction: [(SETPIXEL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETPIXEL .
INFO: Running invalid instruction: [(SETPIXEL 5 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETPIXEL "word]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like word as input .
INFO: Running invalid instruction: [SETPIXEL -1]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like -1 as input .
INFO: Running invalid instruction: [SETPIXEL 1e20]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like 1e+20 as input .
INFO: Running invalid instruction: [SETPIXEL 4.5]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like 4.5 as input .
INFO: Running invalid instruction: [SETPIXEL [255]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [255] as input .
INFO: Running invalid instruction: [SETPIXEL [255 255]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [255 255] as input .
INFO: Running invalid instruction: [SETPIXEL [-1 0 0]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [-1 0 0] as input .
INFO: Running invalid instruction: [SETPIXEL [1e20 0 0]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [1e20 0 0] as input .
INFO: Running invalid instruction: [SETPIXEL [0 -1 0]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [0 -1 0] as input .
INFO: Running invalid instruction: [SETPIXEL [0 1e20 0]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [0 1e20 0] as input .
INFO: Running invalid instruction: [SETPIXEL [0 0 -1]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [0 0 -1] as input .
INFO: Running invalid instruction: [SETPIXEL [0 0 1e20]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [0 0 1e20] as input .
INFO: Running invalid instruction: [SETPIXEL [255 255 255 255]]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like [255 255 255 255] as input .
INFO: Running invalid instruction: [SETPIXEL {255 255 255}]
INFO: error code is 7 .
INFO: error text is SETPIXEL doesn't like {255 255 255} as input .
PASS: [PIXEL] output [1 2 3] , as expected.
CALL: SETPENCOLOR 5
CALL: FORWARD 1
CALL: BACK 1
PASS: [PIXEL] output 5 , as expected.
CALL: SETPENCOLOR [255 255 255]
CALL: FORWARD 1
CALL: BACK 1
PASS: [PIXEL] output [255 255 255] , as expected.
INFO: Running invalid instruction: [(PIXEL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SETTIMER 0 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like 0 as input .
INFO: Running invalid instruction: [SETTIMER 32 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like 32 as input .
INFO: Running invalid instruction: [SETTIMER 1.5 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like 1.5 as input .
INFO: Running invalid instruction: [SETTIMER "badvalue 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like badvalue as input .
INFO: Running invalid instruction: [SETTIMER [1] 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like [1] as input .
INFO: Running invalid instruction: [SETTIMER [] 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like [] as input .
INFO: Running invalid instruction: [SETTIMER {1} 100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like {1} as input .
INFO: Running invalid instruction: [SETTIMER 1 -100 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like -100 as input .
INFO: Running invalid instruction: [SETTIMER 1 100.5 [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like 100.5 as input .
INFO: Running invalid instruction: [SETTIMER 1 [100] [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like [100] as input .
INFO: Running invalid instruction: [SETTIMER 1 [] [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like [] as input .
INFO: Running invalid instruction: [SETTIMER 1 "badvalue [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like badvalue as input .
INFO: Running invalid instruction: [SETTIMER 1 {100} [FD 1]]
PASS: error code is 7 , as expected.
INFO: error text is SETTIMER doesn't like {100} as input .
INFO: Running invalid instruction: [(SETTIMER 1 100)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETTIMER .
INFO: Running invalid instruction: [(SETTIMER 1 100 [FD 1] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [CLEARTIMER 32]
PASS: error code is 7 , as expected.
INFO: error text is CLEARTIMER doesn't like 32 as input .
INFO: Running invalid instruction: [CLEARTIMER 31]
PASS: error code is 1401 , as expected.
PASS: error text is Timer not found , as expected.
INFO: Running invalid instruction: [(CLEARTIMER)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to CLEARTIMER .
INFO: Running invalid instruction: [(CLEARTIMER 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SPLITSCREEN 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(TEXTSCREEN 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(FULLSCREEN 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: [WAIT 0] took 0 ms to execute
PASS: [WAIT 0] ran in 0 ms. Anywhere between 0 ms and 20 is acceptable.
INFO: [WAIT 1] took 20 ms to execute
PASS: [WAIT 1] ran in 20 ms. Anywhere between 16.6666666666667 ms and 36.6666666666667 is acceptable.
INFO: [WAIT 6] took 100 ms to execute
PASS: [WAIT 6] ran in 100 ms. Anywhere between 100 ms and 120 is acceptable.
INFO: [WAIT 10] took 170 ms to execute
PASS: [WAIT 10] ran in 170 ms. Anywhere between 166.666666666667 ms and 186.666666666667 is acceptable.
INFO: [WAIT 60] took 1002 ms to execute
PASS: [WAIT 60] ran in 1002 ms. Anywhere between 1000 ms and 1020 is acceptable.
INFO: [WAIT 100] took 1672 ms to execute
PASS: [WAIT 100] ran in 1672 ms. Anywhere between 1666.66666666667 ms and 1686.66666666667 is acceptable.
INFO: [WAIT 60.5] took 1011 ms to execute
PASS: [WAIT 60.5] ran in 1011 ms. Anywhere between 1008.33333333333 ms and 1028.33333333333 is acceptable.
INFO: Running invalid instruction: [(WAIT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to WAIT .
INFO: Running invalid instruction: [(WAIT 10 10)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [WAIT -0.1]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like -0.1 as input .
INFO: Running invalid instruction: [WAIT -1]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like -1 as input .
INFO: Running invalid instruction: [WAIT "ABC]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like ABC as input .
INFO: Running invalid instruction: [WAIT [1]]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like [1] as input .
INFO: Running invalid instruction: [WAIT {1}]
INFO: error code is 7 .
INFO: error text is WAIT doesn't like {1} as input .
PASS: [LIST? TIME] output true , as expected.
PASS: [COUNT TIME] output 5 , as expected.
INFO: Running invalid instruction: [(TIME "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [SHELL [perl -v]] output true , as expected.
PASS: [SHELL [doesnotexist.exe]] output false , as expected.
PASS: [SHELL {1}] output false , as expected.
PASS: [SHELL [1]] output false , as expected.
PASS: [SHELL 1] output false , as expected.
INFO: [MAKE "rval (SHELL [perl -e "sleep 5"] "true)] took 5197 ms to execute
PASS: [MAKE "rval (SHELL [perl -e "sleep 5"] "true)] output true . , as expected.
PASS: [MAKE "rval (SHELL [perl -e "sleep 5"] "true)] ran in 5197 ms. Anywhere between 4000 ms and 6000 is acceptable.
INFO: [MAKE "rval (SHELL [perl -e "sleep 5"] "false)] took 10 ms to execute
PASS: [MAKE "rval (SHELL [perl -e "sleep 5"] "false)] output true . , as expected.
PASS: [MAKE "rval (SHELL [perl -e "sleep 5"] "false)] ran in 10 ms. Anywhere between 0 ms and 500 is acceptable.
INFO: [MAKE "rval SHELL [perl -e "sleep 5"]] took 0 ms to execute
PASS: [MAKE "rval SHELL [perl -e "sleep 5"]] output true . , as expected.
PASS: [MAKE "rval SHELL [perl -e "sleep 5"]] ran in 0 ms. Anywhere between 0 ms and 500 is acceptable.
INFO: Running invalid instruction: [(SHELL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SHELL .
INFO: Running invalid instruction: [(SHELL [perl -v] LOCALEFALSE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -v] 1)]
INFO: error code is 7 .
INFO: error text is SHELL doesn't like 1 as input .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -v] 0)]
INFO: error code is 7 .
INFO: error text is SHELL doesn't like 0 as input .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -v] [true] )]
INFO: error code is 7 .
INFO: error text is SHELL doesn't like [true] as input .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -v] {false} )]
INFO: error code is 7 .
INFO: error text is SHELL doesn't like {false} as input .
INFO: Running invalid instruction: [IGNORE (SHELL [perl -e "sleep 10"] LOCALETRUE)]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: [RUNEXPECTERRORTEST [IGNORE (SHELL [perl -e "sleep 10"] LOCALETRUE)] 16] took 5018 ms to execute
PASS: [IGNORE (SHELL [perl -e "sleep 10"] LOCALETRUE)] ran in 5018 ms. Anywhere between 0 ms and 6000 is acceptable.
PASS: [FILES] output [] , as expected.
PASS: [DIRECTORIES] output [.. .] , as expected.
PASS: [FILES] output [file1.txt] , as expected.
PASS: [DIRECTORIES] output [.. .] , as expected.
PASS: [FILES] output [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] output [.. .] , as expected.
PASS: [FILES] output [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] output [dir1 .. .] , as expected.
PASS: [FILES] output [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] output [dir2 dir1 .. .] , as expected.
PASS: [FILES] output [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] output [dir1 .. .] , as expected.
PASS: [FILES] output [file2.txt] , as expected.
PASS: [DIRECTORIES] output [dir1 .. .] , as expected.
PASS: [FILES] output [] , as expected.
PASS: [DIRECTORIES] output [.. .] , as expected.
PASS: [MEMBERP "mytestdir DIRECTORIES] output false , as expected.
INFO: Running invalid instruction: [(MKDIR)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MKDIR .
INFO: Running invalid instruction: [(MKDIR "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(RMDIR)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to RMDIR .
INFO: Running invalid instruction: [(RMDIR "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(CHDIR)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to CHDIR .
INFO: Running invalid instruction: [(CHDIR "too "many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [LIST? NODES] output true , as expected.
PASS: [COUNT NODES] output 2 , as expected.
PASS: [NUMBER? ITEM 1 NODES] output true , as expected.
PASS: [NUMBER? ITEM 2 NODES] output true , as expected.
INFO: Running invalid instruction: [(NODES "too-many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [BUTTONP] output false , as expected.
PASS: [BUTTON?] output false , as expected.
INFO: Running invalid instruction: [(BUTTON? "too-many)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: HOME RT 0 SETPC 1
INFO: Running invalid instruction: [FD 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: HOME RT 90 SETPC 2
INFO: Running invalid instruction: [FD 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: HOME RT 180 SETPC 3
INFO: Running invalid instruction: [FD 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: HOME RT 270 SETPC 4
INFO: Running invalid instruction: [FD 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: SETXY 0 500
CALL: SETXY 500 0
CALL: SETXY 0 -500
CALL: SETXY -500 0
INFO: Running invalid instruction: [SETXY 0 501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
INFO: Running invalid instruction: [SETXY 501 0]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
INFO: Running invalid instruction: [SETXY 0 -501]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
INFO: Running invalid instruction: [SETXY -501 0]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
PASS: fence-test was drawn correctly.
INFO: Running invalid instruction: [(FENCE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: wrap-test was drawn correctly.
INFO: Running invalid instruction: [(WRAP "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FD 1000]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
CALL: (TYPE)
CALL: (TYPE "a "b "c)
CALL: (TYPE "d "e "f "
)
CALL: TYPE [1 2 3]
CALL: TYPE "456

PASS: [READWORD] output abcdef , as expected.
PASS: [READWORD] output 1 2 3456 , as expected.
PASS: [EOFP] output true , as expected.
PASS: window-test was drawn correctly.
INFO: Running invalid instruction: [(WINDOW "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FD 1000]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
PASS: 3d-smoke-test was drawn correctly.
INFO: executing regression test for bug #1384267
PASS: "bug #1384267 is fixed; turning by a large number in perspective mode did not crash.
INFO: Running invalid instruction: [(PERSPECTIVE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [FD 1000]
PASS: error code is 3 , as expected.
INFO: error text is turtle out of bounds .
INFO: Calling SETORIENTATION [0 0 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [1 2 3]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0.999999999999978 , as expected.
PASS: [PITCH] output 2 , as expected.
PASS: [HEADING] output 2.99999999999999 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0.999999999999989 1] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2 2] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2.99999999999999 3] output true , as expected.
INFO: Calling SETORIENTATION [105 0 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 105 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 105 105] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [0 105 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 180 , as expected.
PASS: [PITCH] output 75 , as expected.
PASS: [HEADING] output 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 75 75] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
INFO: Calling SETORIENTATION [0 0 105]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 105 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 105 105] output true , as expected.
INFO: Calling SETORIENTATION [0 -90 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 270 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 270 270] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [0 -105 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 180 , as expected.
PASS: [PITCH] output 285 , as expected.
PASS: [HEADING] output 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 285 285] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
INFO: Calling SETORIENTATION [0 465 0]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 180 , as expected.
PASS: [PITCH] output 75 , as expected.
PASS: [HEADING] output 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 75 75] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] output true , as expected.
INFO: Calling SETORIENTATION [360 360 360]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [-360 -360 -360]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 0 , as expected.
PASS: [HEADING] output 0 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] output true , as expected.
INFO: Calling SETORIENTATION [14.6204327571122 270.000000000001 113.186828010276]
PASS: [LIST? ORIENTATION] output true , as expected.
PASS: [COUNT ORIENTATION] output 3 , as expected.
PASS: [ROLL] output 0 , as expected.
PASS: [PITCH] output 270 , as expected.
PASS: [HEADING] output 98.5663952531638 , as expected.
FAIL: [ANGLEISCLOSEENOUGH 0 14.6204327571122] output false . We expected true .
PASS: [ANGLEISCLOSEENOUGH 270 270.000000000001] output true , as expected.
FAIL: [ANGLEISCLOSEENOUGH 98.5663952531638 113.186828010276] output false . We expected true .
INFO: Running invalid instruction: [(SETORIENTATION)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETORIENTATION .
INFO: Running invalid instruction: [(SETORIENTATION 0)]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like 0 as input .
INFO: Running invalid instruction: [(SETORIENTATION 0 0)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETORIENTATION 0 0 0)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SETORIENTATION [0] )]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like [0] as input .
INFO: Running invalid instruction: [(SETORIENTATION [0 0] )]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like [0 0] as input .
INFO: Running invalid instruction: [(SETORIENTATION [a b c] )]
INFO: error code is 7 .
INFO: error text is setroll doesn't like a as input .
INFO: Running invalid instruction: [(SETORIENTATION [0 0 0 0] )]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like [0 0 0 0] as input .
INFO: Running invalid instruction: [(SETORIENTATION {0 0 0} )]
INFO: error code is 4 .
INFO: error text is SETORIENTATION doesn't like {0 0 0} as input .
INFO: Running invalid instruction: [(SETORIENTATION [0 0 0] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ORIENTATION "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: tetrahedron-in-perspective was drawn correctly.
PASS: [SCRUNCH] output [1 1] , as expected.
PASS: [SCRUNCH] output [2 0.1] , as expected.
INFO: Running invalid instruction: [(SETSCRUNCH)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCRUNCH .
INFO: Running invalid instruction: [(SETSCRUNCH [1 1] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCRUNCH .
INFO: Running invalid instruction: [(SETSCRUNCH 1)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SETSCRUNCH .
INFO: Running invalid instruction: [(SETSCRUNCH "a 1)]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like a as input .
INFO: Running invalid instruction: [(SETSCRUNCH [1] 1)]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like [1] as input .
INFO: Running invalid instruction: [(SETSCRUNCH {1} 1)]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like {1} as input .
INFO: Running invalid instruction: [(SETSCRUNCH 1 "a )]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like a as input .
INFO: Running invalid instruction: [(SETSCRUNCH 1 [1] )]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like [1] as input .
INFO: Running invalid instruction: [(SETSCRUNCH 1 {1} )]
INFO: error code is 7 .
INFO: error text is SETSCRUNCH doesn't like {1} as input .
INFO: Running invalid instruction: [(SETSCRUNCH 1 1 1)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SCRUNCH "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [SCRUNCH] output [0 0] , as expected.
PASS: [SCRUNCH] output [1e+50 -1e+50] , as expected.
CALL: ZOOM 1
CALL: ZOOM 10
CALL: ZOOM 0.5
CALL: ZOOM 1e-20
PASS: Bug #1599097 is fixed. ZOOM did not change scrollbar positions.
INFO: Running invalid instruction: [(ZOOM)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ZOOM .
INFO: Running invalid instruction: [(ZOOM 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ZOOM "five]
INFO: error code is 7 .
INFO: error text is ZOOM doesn't like five as input .
INFO: Running invalid instruction: [ZOOM -1]
INFO: error code is 7 .
INFO: error text is ZOOM doesn't like -1 as input .
INFO: Running invalid instruction: [ZOOM 0]
INFO: error code is 7 .
INFO: error text is ZOOM doesn't like 0 as input .
INFO: Running invalid instruction: [ZOOM [1]]
INFO: error code is 7 .
INFO: error text is ZOOM doesn't like [1] as input .
INFO: Running invalid instruction: [ZOOM {5}]
INFO: error code is 7 .
INFO: error text is ZOOM doesn't like {5} as input .
PASS: "HELP [wor]" opened the index to WORD
PASS: "HELP TO" opened the documentation for TO
PASS: "(HELP)" opened the manual to the table of contents
INFO: Running invalid instruction: [(HELP "TOO "MANY)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: ICON "Commander minimized the commander when it was docked
INFO: Running invalid instruction: [(WINDOWSET)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to WINDOWSET .
INFO: Running invalid instruction: [(WINDOWSET "FMSLogo)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to WINDOWSET .
INFO: Running invalid instruction: [(WINDOWSET "FMSLogo 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [WINDOWSET "FMSLogo [1]]
INFO: error code is 7 .
INFO: error text is WINDOWSET doesn't like [1] as input .
INFO: Running invalid instruction: [WINDOWSET "FMSLogo {1}]
INFO: error code is 7 .
INFO: error text is WINDOWSET doesn't like {1} as input .
INFO: Running invalid instruction: [WINDOWSET "FMSLogo "one]
INFO: error code is 7 .
INFO: error text is WINDOWSET doesn't like one as input .
INFO: Running invalid instruction: [WINDOWSET "FMSLogo -1]
INFO: error code is 7 .
INFO: error text is WINDOWSET doesn't like -1 as input .
PASS: [DLLCALL (LIST "l "MoveWindow "w "1 "l "100 "l "100 "l "0 "l "0 "l :hwnd)] output [1] , as expected.
PASS: [DLLCALL (LIST "L "MoveWindow "W 1 "L 600 "L 800 "L 0 "L 0 "L :hwnd)] output [1] , as expected.
INFO: Running invalid instruction: [(DLLLOAD)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DLLLOAD .
INFO: Running invalid instruction: [(DLLLOAD "kernel32 "user32)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [DLLLOAD {0}]
PASS: error code is 1101 , as expected.
PASS: error text is DLL load failed , as expected.
INFO: Running invalid instruction: [DLLLOAD [0]]
PASS: error code is 1101 , as expected.
PASS: error text is DLL load failed , as expected.
INFO: Running invalid instruction: [DLLLOAD 12345]
PASS: error code is 1101 , as expected.
PASS: error text is DLL load failed , as expected.
INFO: Running invalid instruction: [DLLLOAD "nonexistent.dll]
PASS: error code is 1101 , as expected.
PASS: error text is DLL load failed , as expected.
INFO: Running invalid instruction: [DLLLOAD "c:\]
PASS: error code is 1101 , as expected.
PASS: error text is DLL load failed , as expected.
INFO: Running invalid instructiondll]
PASS: error code is 1101 , as expected.
PASS: error text is DLL load failed , as expected.
INFO: Running invalid instruction: [DLLLOAD {0}]
PASS: error code is 1101 , as expected.
PASS: error text is DLL load failed , as expected.
INFO: Running invalid instruction: [DLLCALL [L FindWindowA S FMSLogo L 0]]
PASS: error code is 1102 , as expected.
PASS: error text is DLL is not loaded , as expected.
INFO: Running invalid instruction: [(DLLCALL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to DLLCALL .
INFO: Running invalid instruction: [(DLLCALL [L GetTickCount] "kernel32.dll "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [DLLCALL {0}]
PASS: error code is 4 , as expected.
INFO: error text is DLLCALL doesn't like {0} as input .
INFO: Running invalid instruction: [DLLCALL []]
PASS: error code is 4 , as expected.
INFO: error text is DLLCALL doesn't like [] as input .
INFO: Running invalid instruction: [DLLCALL [L]]
PASS: error code is 1103 , as expected.
PASS: error text is Not all Type/Data inputs are paired , as expected.
INFO: Running invalid instruction: [DLLCALL [L FunctionDoesNotExist]]
PASS: error code is 1106 , as expected.
PASS: error text is Function not found , as expected.
INFO: Running invalid instruction: [DLLCALL [E GetTickCount]]
PASS: error code is 1105 , as expected.
PASS: error text is Invalid output type , as expected.
INFO: Running invalid instruction: [DLLCALL [L GetTickCount L]]
PASS: error code is 1103 , as expected.
PASS: error text is Not all Type/Data inputs are paired , as expected.
INFO: Running invalid instruction: [DLLCALL [L GetTickCount E Unknown]]
PASS: error code is 1104 , as expected.
PASS: error text is Invalid data type input , as expected.
INFO: Running invalid instruction: [(DLLCALL [L GetTickCount L 0] "dll-that-is-not-loaded.dll)]
PASS: error code is 1102 , as expected.
PASS: error text is DLL is not loaded , as expected.
INFO: Running invalid instruction: [DLLFREE]
PASS: error code is 1102 , as expected.
PASS: error text is DLL is not loaded , as expected.
INFO: Running invalid instruction: [(DLLFREE "dll-that-is-not-loaded.dll)]
PASS: error code is 1102 , as expected.
PASS: error text is DLL is not loaded , as expected.
INFO: Running invalid instruction: [(DLLFREE "kernel32.dll "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: DLLLOAD "user32.dll
CALL: DLLLOAD "kernel32.dll
CALL: MAKE "hwnd (DLLCALL [l FindWindowA S FMSLogo L 0] "user32.dll)
PASS: [DLLCALL [l FindWindowA S FMSLogo L 0]] output [5309696] , as expected.
CALL: IGNORE (DLLCALL [L GetTickCount] "KERNEL32.DLL)
CALL: IGNORE DLLCALL [L GetTickCount]
CALL: DLLLOAD "user32.dll
PASS: [DLLCALL [l FindWindowA S FMSLogo L 0]] output [5309696] , as expected.
CALL: (DLLFREE "user32.dll)
PASS: [DLLCALL [l FindWindowA S FMSLogo L 0]] output [5309696] , as expected.
CALL: (DLLFREE "USER32.DLL)
INFO: Running invalid instruction: [DLLCALL [l FindWindowA S FMSLogo L 0]]
PASS: error code is 1106 , as expected.
PASS: error text is Function not found , as expected.
CALL: DLLFREE
INFO: Running invalid instruction: [IGNORE DLLCALL [L GetTickCount]]
PASS: error code is 1102 , as expected.
PASS: error text is DLL is not loaded , as expected.
PASS: [MAP [?] [a b c]] output [a b c] , as expected.
PASS: [MAP [#] [a b c]] output [1 2 3] , as expected.
PASS: [MAP [?REST] [1 2 3]] output [[2 3] [3] []] , as expected.
PASS: [MAP [1] [1 2 3 4 5]] output [1 1 1 1 1] , as expected.
PASS: [MAP [2 * ?] [1 2 3 4]] output [2 4 6 8] , as expected.
PASS: [(MAP "LIST [a b c] [d e f] )] output [[a d] [b e] [c f]] , as expected.
PASS: [MAP [ASCII ?] "abcd] output 979899100 , as expected.
PASS: [MAP [2 * ?] []] output [] , as expected.
PASS: [MAP [ASCII ?] "] output  , as expected.
INFO: Running invalid instruction: [(MAP [LIST ?] )]
FAIL: error code is 7 .  We expected 6 .
INFO: error text is first doesn't like [] as input .
INFO: Running invalid instruction: [MAP 12.5 [1 2 3]]
INFO: error code is 24 .
INFO: error text is I don't know how to 12.5 .
INFO: Running invalid instruction: [MAP -1 [1 2 3]]
INFO: error code is 24 .
INFO: error text is I don't know how to -1 .
INFO: Running invalid instruction: [MAP {1} [1 2 3]]
INFO: error code is 32 .
INFO: error text is APPLY doesn't like {1} as input .
INFO: Running invalid instruction: [MAP "ten [1 2 3]]
PASS: error code is 24 , as expected.
INFO: error text is I don't know how to ten .
INFO: Running invalid instruction: [MAP [1] {1 2 3}]
INFO: error code is 7 .
INFO: error text is bfs doesn't like {1 2 3} as input .
PASS: [SORT []] output [] , as expected.
PASS: [SORT [1]] output [1] , as expected.
PASS: [SORT [1 2 3]] output [1 2 3] , as expected.
PASS: [SORT [3 2 1]] output [1 2 3] , as expected.
PASS: [SORT [c b a]] output [a b c] , as expected.
PASS: [SORT ["c "b "a]] output ["a "b "c] , as expected.
PASS: [SORT [efg abc hij]] output [abc efg hij] , as expected.
PASS: [(SORT [c b a] "SORTTEST.AFTER?)] output [c b a] , as expected.
PASS: [(SORT ["c "b "a] "SORTTEST.AFTER?)] output ["c "b "a] , as expected.
PASS: [(SORT [efg abc hij] "SORTTEST.AFTER?)] output [hij efg abc] , as expected.
PASS: [SORT [1 2 3 1 2 3 1 2 3]] output [1 1 1 2 2 2 3 3 3] , as expected.
PASS: [(SORT [1 2 3 1 2 3 1 2 3] "greaterp)] output [3 3 3 2 2 2 1 1 1] , as expected.
PASS: [(SORT [3 2 1] "SORTTEST.ONEINPUTBYDEFAULT)] output [1 2 3] , as expected.
PASS: [(SORT :database "SORTTEST.SORTBYNAME)] output [{"cat 4 2} {"human 2 2} {"spider 8 8}] , as expected.
PASS: [(SORT :database "SORTTEST.SORTBYLEGS)] output [{"human 2 2} {"cat 4 2} {"spider 8 8}] , as expected.
PASS: [SORT "hello] output ehllo , as expected.
PASS: [SORT "FMSLogo] output FgLMooS , as expected.
PASS: [SORT "FgLMooS] output FgLMooS , as expected.
PASS: [SORT "Z] output Z , as expected.
PASS: [SORT "] output  , as expected.
PASS: [(SORT "hello "SORTTEST.AFTER?)] output ollhe , as expected.
CALL: make "sortedarray SORT {3 2 1 1 2 3 3 2 1}
PASS: [ARRAY? :sortedarray] output true , as expected.
PASS: [COUNT :sortedarray] output 9 , as expected.
PASS: [ITEM 1 :sortedarray] output 1 , as expected.
PASS: [ITEM 2 :sortedarray] output 1 , as expected.
PASS: [ITEM 3 :sortedarray] output 1 , as expected.
PASS: [ITEM 4 :sortedarray] output 2 , as expected.
PASS: [ITEM 5 :sortedarray] output 2 , as expected.
PASS: [ITEM 6 :sortedarray] output 2 , as expected.
PASS: [ITEM 7 :sortedarray] output 3 , as expected.
PASS: [ITEM 8 :sortedarray] output 3 , as expected.
PASS: [ITEM 9 :sortedarray] output 3 , as expected.
CALL: make "sortedarray SORT {ghi abc def}
PASS: [ARRAY? :sortedarray] output true , as expected.
PASS: [COUNT :sortedarray] output 3 , as expected.
PASS: [ITEM 1 :sortedarray] output abc , as expected.
PASS: [ITEM 2 :sortedarray] output def , as expected.
PASS: [ITEM 3 :sortedarray] output ghi , as expected.
CALL: make "sortedarray SORT {}
PASS: [COUNT :sortedarray] output 0 , as expected.
PASS: [array? :sortedarray] output true , as expected.
PASS: [SORT ISEQ 100 1] output [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100] , as expected.
INFO: Running invalid instruction: [(SORT)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SORT .
INFO: Running invalid instruction: [(SORT [[1] [2]] )]
INFO: error code is 7 .
INFO: error text is before? doesn't like [1] as input .
INFO: Running invalid instruction: [(SORT {[1] [2]} )]
INFO: error code is 7 .
INFO: error text is before? doesn't like [1] as input .
INFO: Running invalid instruction: [(SORT [3 2 1] "FMSLogo)]
INFO: error code is 24 .
INFO: error text is I don't know how to FMSLogo .
INFO: Running invalid instruction: [(SORT [3 2 1] [1] )]
INFO: error code is 7 .
INFO: error text is if doesn't like 1 as input .
INFO: Running invalid instruction: [(SORT [3 2 1] {1} )]
INFO: error code is 32 .
INFO: error text is APPLY doesn't like {1} as input .
INFO: Running invalid instruction: [(SORT [3 2 1] "SORTTEST.ONEINPUTPROC)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(SORT [3 2 1] "SORTTEST.THREEINPUTPROC)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SORTTEST.THREEINPUTPROC .
INFO: Running invalid instruction: [(SORT [3 2 1] "SORTTEST.NONPREDICATE)]
INFO: error code is 7 .
INFO: error text is if doesn't like 1 as input .
INFO: Running invalid instruction: [(SORT [3 2 1] "lessp "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [ISEQ 1 5] output [1 2 3 4 5] , as expected.
PASS: [ISEQ 5 1] output [5 4 3 2 1] , as expected.
PASS: [ISEQ 1 1] output [1] , as expected.
PASS: [ISEQ -5 5] output [-5 -4 -3 -2 -1 0 1 2 3 4 5] , as expected.
PASS: [ISEQ -5 -1] output [-5 -4 -3 -2 -1] , as expected.
PASS: [ISEQ 0 0] output [0] , as expected.
PASS: [ISEQ 0.0 5.0] output [0 1 2 3 4 5] , as expected.
INFO: Running invalid instruction: [(ISEQ 5)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ISEQ .
INFO: Running invalid instruction: [(ISEQ 1 5 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ISEQ 0.5 10]
PASS: error code is 4 , as expected.
INFO: error text is ISEQ doesn't like 0.5 as input .
INFO: Running invalid instruction: [ISEQ "zero 10]
PASS: error code is 4 , as expected.
INFO: error text is ISEQ doesn't like zero as input .
INFO: Running invalid instruction: [ISEQ [0] 10]
PASS: error code is 4 , as expected.
INFO: error text is ISEQ doesn't like [0] as input .
INFO: Running invalid instruction: [ISEQ {0} 10]
PASS: error code is 4 , as expected.
INFO: error text is ISEQ doesn't like {0} as input .
INFO: Running invalid instruction: [ISEQ 0 10.1]
PASS: error code is 4 , as expected.
INFO: error text is ISEQ doesn't like 10.1 as input .
INFO: Running invalid instruction: [ISEQ 0 "ten]
PASS: error code is 4 , as expected.
INFO: error text is ISEQ doesn't like ten as input .
INFO: Running invalid instruction: [ISEQ 0 [10]]
PASS: error code is 4 , as expected.
INFO: error text is ISEQ doesn't like [10] as input .
INFO: Running invalid instruction: [ISEQ 0 {10}]
PASS: error code is 4 , as expected.
INFO: error text is ISEQ doesn't like {10} as input .
PASS: [ARRAYP :myarray] output true , as expected.
PASS: [COUNT :myarray] output 2 , as expected.
PASS: [MDITEM [1 1] :myarray] output [] , as expected.
PASS: [MDITEM [1 2] :myarray] output [] , as expected.
PASS: [MDITEM [1 3] :myarray] output [] , as expected.
PASS: [MDITEM [2 1] :myarray] output [] , as expected.
PASS: [MDITEM [2 2] :myarray] output [] , as expected.
PASS: [MDITEM [2 3] :myarray] output [] , as expected.
CALL: MDSETITEM [1 1] :myarray :subarray
CALL: MDSETITEM [1 2] :myarray [list]
CALL: MDSETITEM [1 3] :myarray "hi
CALL: MDSETITEM [2 1] :myarray 42
CALL: MDSETITEM [2 2] :myarray 42.5
CALL: MDSETITEM [2 3] :myarray -10
PASS: [MDITEM [1 1] :myarray] output {array} , as expected.
PASS: [MDITEM [1 2] :myarray] output [list] , as expected.
PASS: [MDITEM [1 3] :myarray] output hi , as expected.
PASS: [MDITEM [2 1] :myarray] output 42 , as expected.
PASS: [MDITEM [2 2] :myarray] output 42.5 , as expected.
PASS: [MDITEM [2 3] :myarray] output -10 , as expected.
PASS: [MDITEM [1 2] [[a b] [c d]]] output b , as expected.
PASS: [ARRAYP :myarray] output true , as expected.
PASS: [COUNT :myarray] output 4 , as expected.
PASS: [MDITEM [1] :myarray] output [] , as expected.
PASS: [MDITEM [2] :myarray] output [] , as expected.
PASS: [MDITEM [3] :myarray] output [] , as expected.
PASS: [MDITEM [4] :myarray] output [] , as expected.
CALL: MDSETITEM [1] :myarray :subarray
CALL: MDSETITEM [2] :myarray [list]
CALL: MDSETITEM [3] :myarray "hi
CALL: MDSETITEM [4] :myarray 42
PASS: [MDITEM [1] :myarray] output {array} , as expected.
PASS: [MDITEM [2] :myarray] output [list] , as expected.
PASS: [MDITEM [3] :myarray] output hi , as expected.
PASS: [MDITEM [4] :myarray] output 42 , as expected.
PASS: [ARRAYP :myarray] output true , as expected.
PASS: [COUNT :myarray] output 2 , as expected.
PASS: [MDITEM [0 0] :myarray] output [] , as expected.
PASS: [MDITEM [0 1] :myarray] output [] , as expected.
PASS: [MDITEM [0 2] :myarray] output [] , as expected.
PASS: [MDITEM [1 0] :myarray] output [] , as expected.
PASS: [MDITEM [1 1] :myarray] output [] , as expected.
PASS: [MDITEM [1 2] :myarray] output [] , as expected.
CALL: MDSETITEM [0 0] :myarray :subarray
CALL: MDSETITEM [0 1] :myarray [list]
CALL: MDSETITEM [0 2] :myarray "hi
CALL: MDSETITEM [1 0] :myarray 42
CALL: MDSETITEM [1 1] :myarray 42.5
CALL: MDSETITEM [1 2] :myarray -10
PASS: [MDITEM [0 0] :myarray] output {array} , as expected.
PASS: [MDITEM [0 1] :myarray] output [list] , as expected.
PASS: [MDITEM [0 2] :myarray] output hi , as expected.
PASS: [MDITEM [1 0] :myarray] output 42 , as expected.
PASS: [MDITEM [1 1] :myarray] output 42.5 , as expected.
PASS: [MDITEM [1 2] :myarray] output -10 , as expected.
INFO: Running invalid instruction: [(MDARRAY)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MDARRAY .
INFO: Running invalid instruction: [(MDARRAY [1 2 3] 1 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [MDARRAY {1 2}]
PASS: error code is 4 , as expected.
INFO: error text is MDARRAY doesn't like {1 2} as input .
INFO: Running invalid instruction: [MDARRAY "word]
PASS: error code is 4 , as expected.
INFO: error text is MDARRAY doesn't like word as input .
INFO: Running invalid instruction: [MDARRAY []]
PASS: error code is 7 , as expected.
INFO: error text is first doesn't like [] as input .
INFO: Running invalid instruction: [MDARRAY 12]
PASS: error code is 4 , as expected.
INFO: error text is MDARRAY doesn't like 12 as input .
INFO: Running invalid instruction: [( MDARRAY [2 3] "ten )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like ten as input .
INFO: Running invalid instruction: [( MDARRAY [2 3] [1] )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like [1] as input .
INFO: Running invalid instruction: [( MDARRAY [2 3] {1} )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like {1} as input .
INFO: Running invalid instruction: [( MDARRAY [2 3] 10.5 )]
PASS: error code is 7 , as expected.
INFO: error text is array doesn't like 10.5 as input .
PASS: [MDITEM [2 1] {{a b} {c d} {e f}}] output c , as expected.
PASS: [MDITEM [2 1] [[a b] [c d] [e f]]] output c , as expected.
PASS: [MDITEM [2 1] {[a b] [c d] [e f]}] output c , as expected.
PASS: [MDITEM [2 1] [{a b} {c d} {e f}]] output c , as expected.
PASS: [MDITEM [2 1] "ten] output e , as expected.
PASS: [MDITEM [2 1] 1234] output 2 , as expected.
PASS: [MDITEM [2 1] 12.34] output 2 , as expected.
INFO: Running invalid instruction: [(MDITEM [1 2] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MDITEM .
INFO: Running invalid instruction: [(MDITEM [1 2] {{1 2} {2 3}} "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [MDITEM {1 1} {{1 2} {2 3}}]
PASS: error code is 4 , as expected.
INFO: error text is MDITEM doesn't like {1 1} as input .
INFO: Running invalid instruction: [MDITEM "one {{1 2} {2 3}}]
PASS: error code is 4 , as expected.
INFO: error text is MDITEM doesn't like one as input .
INFO: Running invalid instruction: [MDITEM [1 1.5] {{1 2} {2 3}}]
PASS: error code is 7 , as expected.
INFO: error text is item doesn't like 1.5 as input .
INFO: Running invalid instruction: [MDITEM [1 100] {{1 2} {2 3}}]
PASS: error code is 7 , as expected.
INFO: error text is item doesn't like 100 as input .
INFO: Running invalid instruction: [MDITEM 1 {{1 2} {2 3}}]
PASS: error code is 4 , as expected.
INFO: error text is MDITEM doesn't like 1 as input .
INFO: Running invalid instruction: [MDITEM [1 2] "ten]
PASS: error code is 7 , as expected.
INFO: error text is item doesn't like 2 as input .
INFO: Running invalid instruction: [MDITEM [1 3] [[1 2] [3 4]]]
PASS: error code is 7 , as expected.
INFO: error text is item doesn't like 3 as input .
CALL: MDSETITEM [1 1] :myarray :subarray
CALL: MDSETITEM [1 2] :myarray [list]
CALL: MDSETITEM [2 1] :myarray "hi
CALL: MDSETITEM [2 2] :myarray 42
PASS: [MDITEM [1 1] :myarray] output {array} , as expected.
PASS: [MDITEM [1 2] :myarray] output [list] , as expected.
PASS: [MDITEM [2 1] :myarray] output hi , as expected.
PASS: [MDITEM [2 2] :myarray] output 42 , as expected.
INFO: Running invalid instruction: [(MDSETITEM [1 2] {{1 2} {3 4}} )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MDSETITEM .
INFO: Running invalid instruction: [(MDSETITEM [1 2] {{1 2} {3 4}} "value "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [MDSETITEM {1 1} {{1 2} {3 4}} "value]
PASS: error code is 4 , as expected.
INFO: error text is MDSETITEM doesn't like {1 1} as input .
INFO: Running invalid instruction: [MDSETITEM "one {{1 2} {3 4}} "value]
PASS: error code is 4 , as expected.
INFO: error text is MDSETITEM doesn't like one as input .
INFO: Running invalid instruction: [MDSETITEM [1 1.5] {{1 2} {3 4}} "value]
PASS: error code is 7 , as expected.
INFO: error text is setitem doesn't like 1.5 as input .
INFO: Running invalid instruction: [MDSETITEM [1 100] {{1 2} {3 4}} "value]
PASS: error code is 4 , as expected.
INFO: error text is setitem doesn't like 100 as input .
INFO: Running invalid instruction: [MDSETITEM 1 {{1 2} {3 4}} "value]
PASS: error code is 4 , as expected.
INFO: error text is MDSETITEM doesn't like 1 as input .
INFO: Running invalid instruction: [MDSETITEM [1 1] "ten "value]
PASS: error code is 4 , as expected.
INFO: error text is MDSETITEM doesn't like ten as input .
INFO: Running invalid instruction: [MDSETITEM [1 1] {[1 2] [3 4]} "value]
PASS: error code is 7 , as expected.
INFO: error text is setitem doesn't like [1 2] as input .
INFO: Running invalid instruction: [MDSETITEM [1 1] [{1 2} {3 4}] "value]
PASS: error code is 4 , as expected.
INFO: error text is MDSETITEM doesn't like [{1 2} {3 4}] as input .
INFO: Running invalid instruction: [MDSETITEM [1 1] 1234 "value]
PASS: error code is 4 , as expected.
INFO: error text is MDSETITEM doesn't like 1234 as input .
INFO: Running invalid instruction: [MDSETITEM [1 1] 12.34 "value]
PASS: error code is 4 , as expected.
INFO: error text is MDSETITEM doesn't like 12.34 as input .
INFO: Running invalid instruction: [MDSETITEM [1 1] :myarray :myarray]
INFO: error code is 7 .
INFO: error text is setitem doesn't like {{1 2} {3 4}} as input .
PASS: [MEMBERP "TRACETEST.TRACEDPROCEDURE (ITEM 1 TRACED)] output false , as expected.
CALL: TRACE "TRACETEST.TRACEDPROCEDURE
PASS: [MEMBERP "TRACETEST.TRACEDPROCEDURE (ITEM 1 TRACED)] output true , as expected.
CALL: TRACETEST.TRACEDPROCEDURE
CALL: UNTRACE "TRACETEST.TRACEDPROCEDURE
PASS: [MEMBERP "TRACETEST.TRACEDPROCEDURE (ITEM 1 TRACED)] output false , as expected.
CALL: TRACETEST.TRACEDPROCEDURE
PASS: Line # 1 was [ ( TRACETEST.TRACEDPROCEDURE ) ], as expected.
PASS: Line # 2 was [ TRACETEST.TRACEDPROCEDURE stops ], as expected.
CALL: TRACE "TRACETEST.TRACEDPROCEDURE.WITHINPUTS
CALL: TRACETEST.TRACEDPROCEDURE.WITHINPUTS "input1 "input2
CALL: UNTRACE "TRACETEST.TRACEDPROCEDURE.WITHINPUTS
PASS: Line # 1 was [ ( TRACETEST.TRACEDPROCEDURE.WITHINPUTS "input1 "input2 ) ], as expected.
PASS: Line # 2 was [ TRACETEST.TRACEDPROCEDURE.WITHINPUTS stops ], as expected.
CALL: TRACE "TRACETEST.TRACEDPROCEDURE.WITHINPUTS
CALL: (TRACETEST.TRACEDPROCEDURE.WITHINPUTS "input1 "input2 "input3)
CALL: UNTRACE "TRACETEST.TRACEDPROCEDURE.WITHINPUTS
PASS: Line # 1 was [ ( TRACETEST.TRACEDPROCEDURE.WITHINPUTS "input1 "input2 "input3 ) ], as expected.
PASS: Line # 2 was [ TRACETEST.TRACEDPROCEDURE.WITHINPUTS stops ], as expected.
PASS: [MEMBERP "TRACETEST.TRACEDFUNCTION (ITEM 1 TRACED)] output false , as expected.
CALL: TRACE "TRACETEST.TRACEDFUNCTION
PASS: [MEMBERP "TRACETEST.TRACEDFUNCTION (ITEM 1 TRACED)] output true , as expected.
PASS: [TRACETEST.TRACEDFUNCTION 123] output 123 , as expected.
PASS: [TRACETEST.TRACEDFUNCTION "outputthis] output outputthis , as expected.
PASS: [TRACETEST.TRACEDFUNCTION [1 2 3]] output [1 2 3] , as expected.
CALL: TRACETEST.TRACEDFUNCTION {1 2 3}
CALL: UNTRACE "TRACETEST.TRACEDFUNCTION
PASS: [MEMBERP "TRACETEST.TRACEDFUNCTION (ITEM 1 TRACED)] output false , as expected.
PASS: [TRACETEST.TRACEDFUNCTION 123] output 123 , as expected.
PASS: Line # 1 was [ ( TRACETEST.TRACEDFUNCTION 123 ) ], as expected.
PASS: Line # 2 was [ TRACETEST.TRACEDFUNCTION outputs 123 ], as expected.
PASS: Line # 3 was [ ( TRACETEST.TRACEDFUNCTION "outputthis ) ], as expected.
PASS: Line # 4 was [ TRACETEST.TRACEDFUNCTION outputs "outputthis ], as expected.
PASS: Line # 5 was [ ( TRACETEST.TRACEDFUNCTION [1 2 3] ) ], as expected.
PASS: Line # 6 was [ TRACETEST.TRACEDFUNCTION outputs [1 2 3] ], as expected.
PASS: Line # 7 was [ ( TRACETEST.TRACEDFUNCTION {1 2 3} ) ], as expected.
PASS: Line # 8 was [ TRACETEST.TRACEDFUNCTION outputs {1 2 3} ], as expected.
PASS: [MEMBERP "TRACETEST.TRACEDVARIABLE (ITEM 2 TRACED)] output false , as expected.
CALL: TRACE NAMELIST "TRACETEST.TRACEDVARIABLE
PASS: [MEMBERP "TRACETEST.TRACEDVARIABLE (ITEM 2 TRACED)] output true , as expected.
CALL: MAKE "TRACETEST.TRACEDVARIABLE 123
CALL: MAKE "TRACETEST.TRACEDVARIABLE "123
CALL: MAKE "TRACETEST.TRACEDVARIABLE "value
CALL: MAKE "TRACETEST.TRACEDVARIABLE [1 2 3]
CALL: MAKE "TRACETEST.TRACEDVARIABLE {1 2 3}
CALL: UNTRACE NAMELIST "TRACETEST.TRACEDVARIABLE
PASS: [MEMBERP "TRACETEST.TRACEDVARIABLE (ITEM 2 TRACED)] output false , as expected.
CALL: MAKE "TRACETEST.TRACEDVARIABLE 321
PASS: Line # 1 was [ Make "TRACETEST.TRACEDVARIABLE 123 in TRACEINSTRUCTION ], as expected.
PASS: Line # 2 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
PASS: Line # 3 was [ Make "TRACETEST.TRACEDVARIABLE 123 in TRACEINSTRUCTION ], as expected.
PASS: Line # 4 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
PASS: Line # 5 was [ Make "TRACETEST.TRACEDVARIABLE "value in TRACEINSTRUCTION ], as expected.
PASS: Line # 6 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
PASS: Line # 7 was [ Make "TRACETEST.TRACEDVARIABLE [1 2 3] in TRACEINSTRUCTION ], as expected.
PASS: Line # 8 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
PASS: Line # 9 was [ Make "TRACETEST.TRACEDVARIABLE {1 2 3} in TRACEINSTRUCTION ], as expected.
PASS: Line # 10 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
CALL: PPROP "TRACETEST.TRACEDPLIST "SOMEPROPERTY 0
PASS: [MEMBERP "TRACETEST.TRACEDPLIST (ITEM 3 TRACED)] output false , as expected.
CALL: TRACE PLLIST "TRACETEST.TRACEDPLIST
PASS: [MEMBERP "TRACETEST.TRACEDPLIST (ITEM 3 TRACED)] output true , as expected.
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY1 123
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY2 "123
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY3 "value
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY4 [1 2 3]
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY5 {1 2 3}
CALL: UNTRACE PLLIST "TRACETEST.TRACEDPLIST
PASS: [MEMBERP "TRACETEST.TRACEDPLIST (ITEM 3 TRACED)] output false , as expected.
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY6 123
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY7 "123
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY8 "value
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY9 [1 2 3]
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY0 {1 2 3}
CALL: MAKE "TRACETEST.TRACEDPLIST 4321
PASS: Line # 1 was [ Pprop "TRACETEST.TRACEDPLIST "PROPERTY1 123 in TRACEINSTRUCTION ], as expected.
PASS: Line # 2 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
PASS: Line # 3 was [ Pprop "TRACETEST.TRACEDPLIST "PROPERTY2 123 in TRACEINSTRUCTION ], as expected.
PASS: Line # 4 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
PASS: Line # 5 was [ Pprop "TRACETEST.TRACEDPLIST "PROPERTY3 "value in TRACEINSTRUCTION ], as expected.
PASS: Line # 6 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
PASS: Line # 7 was [ Pprop "TRACETEST.TRACEDPLIST "PROPERTY4 [1 2 3] in TRACEINSTRUCTION ], as expected.
PASS: Line # 8 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
PASS: Line # 9 was [ Pprop "TRACETEST.TRACEDPLIST "PROPERTY5 {1 2 3} in TRACEINSTRUCTION ], as expected.
PASS: Line # 10 was [ [CATCH "ERROR [IGNORE RUNRESULT :instruction]] ], as expected.
INFO: Calling TRACE CONTENTS
PASS: [TRACED] output [[#test .eqtest a.colorization.test abstest activeareatest activeareatest.badinput activeareatest.smoketest andtest angleiscloseenough applytest applytest.applyoutput applytest.badinput applytest.bug1519088 applytest.lambdatemplate applytest.lambdatemplate.newscopetest applytest.nestedapply applytest.nonprimitive applytest.nooutput applytest.proceduretexttemplate applytest.proceduretexttemplate.newscopetest applytest.questionmarktemplate applytest.smoketest arcbadinputtest arccostest arcsintest arcsmoketest arctantest arctest arraybadinputtest arrayorigintest arrayptest arraysmoketest arraytest asciitest ashifttest.badinput ashifttest.smoketest backticktest backticktest.badinput backticktest.examplesfrommanual backticktest.smoketest backticktest.wordshorthand beforeptest bitandtest.badinput bitandtest.smoketest bitblocktest bitblocktest.badinput bitblocktest.smoketest bitcopytest bitfittest bitfittest.badinput bitfittest.smoketest bitload.badinput bitloadsizetest bitmaptest bitmodetest bitmodetest.badinput bitmodetest.smoketest bitnottest.badinput bitnottest.smoketest bitortest.badinput bitortest.smoketest bitpastetoindextest.badinput bitpastetoindextest.smoketest bitsave.badinput bitsave.withactivearea bitwisetest bitxortest.badinput bitxortest.smoketest bodyhasallemptylines bodyhasemptylines bug1349374test bug1377856test bug1383281test bug1384267test bug1388325test bug1397560test bug1448155test bug1458661test bug1563318.applysum bug1563318.crash bug1563318.defaultrest bug1563318.oneinput burytest burytest.badinput burytest.buriedprocedure burytest.buryall burytest.procedure burytest.propertylist burytest.variable butfirststest butfirststest.badinput butfirststest.smoketest butfirsttest butlasttest buttonptest byetest byetest.badinput cascadetest cascadetest.badinput cascadetest.smoketest cascadetest.vowel? catchtest catchtest.badinput catchtest.catchbuiltinerror catchtest.catchusererror catchtest.doublecatcherror catchtest.doublecatcherror.innercatcherror catchtest.doublecatcherror.throwerror catchtest.skiperrortag catchtest.skiperrortag.catcherror catchtest.skiperrortag.throw catchtest.skipthrowtag catchtest.skipthrowtag.catchthrowtag catchtest.skipthrowtag.throwerror catchtest.skipthrowtagwithvalue catchtest.skipthrowtagwithvalue.catchinnertag catchtest.skipthrowtagwithvalue.throwoutertag catchtest.smoketest catchtest.smoketest.throw catchtest.throw.builtin.error chartest chdirtest client.onreadytosend colorerracttest colorindextest colornametest colorsetgettest colortest colortest.output.5 combinetest combinetest.badinput combinetest.smoketest commandlinetest commandlinetest.alreadyrunning commandlinetest.parameter.filename commandlinetest.parameter.l commandlinetest.runtest commandlinetest.widthheight controlflowtest copydef.allow.redefinitions copydefmaybeoutputtest copydefoptest copydefoutputtest copydefstoptest copydeftest copydeftest.badinput copydeftest.eraseoriginal copydeftest.infix copydeftest.innontailrecursiveprocedure copydeftest.libraryprocedure copydeftest.nontailrecursivecount copydeftest.primitive copydeftest.primitivewithinputs copydeftest.redefp copydeftest.specialform copydeftest.userdefined copydeftotest costest definedptest definedptest.badinput definedptest.smoketest definetest definetest.badinput definetest.bodyhasemptylines definetest.bodyisallemptylines definetest.smoketest differencetest difficultcomments1 difficultcomments2 directorysmoketest directorytest dllcalltest dllfreetest dllloadtest dllsmoketest dlltest donothing doorientationtest echo edalltest.badinput edalltest.displaybyhwnd editortest edittest.badinput edittest.manyvariables emptyptest equalptest equalptest.badinput equalptest.deeplynestedlist equalptest.international equalptest.smoketest erasetest erasetest.badinput erasetest.eraseall erasetest.eraseprocedure erasetest.erasepropertylist erasetest.erasevariable erasetest.ern erasetest.erpl erracttest erracttest.bug1517326 erracttest.bug1517326.continue5 erracttest.catchblockserract erracttest.changeerract.output.6 erracttest.changeerractinerract erracttest.erractaftercatch erracttest.errorinerract erracttest.output.5 erracttest.output.nexterractvalue erracttest.outputwrongvalue erracttest.recoverableerror.outputnothing erracttest.smoketest erracttest.unrecoverableerror.outputnothing erracttest.unrecoverableerror.outputvalue error.30.test errortest errortest.bug1577034 errortest.call.output.run.5 errortest.output.run.5 evaltest evaltest.catcherrormanytimes evaltest.catchtoomanyinputserror evaltest.nontailrecursive evaltest.nontailrecursivecount evaltest.tailrecursive evaltest.tailrecursivecount exptest fencetest fencetest.badinput fencetest.bug1573061 fencetest.smoketest filetest filetest.allopen filetest.badinput filetest.closeall filetest.closereader filetest.dribble filetest.eofponstdin filetest.erasefile filetest.openappend filetest.opendirectoryasfile filetest.openopenfile filetest.openopenfile.helper filetest.openupdate filetest.setread.closedfile filetest.setreadpos filetest.setwritepos filetest.smoketest filltest filltimerevent firststest firststest.badinput firststest.smoketest firsttest floodcolortest fontfacenamestest fontfacenamestest.badinput fontfacenamestest.manualtest fontfacenamestest.smoketest foreachtest foreachtest.badinput foreachtest.output foreachtest.output.from.variable foreachtest.output.from.variable.worker foreachtest.output.worker foreachtest.smoketest foreachtest.stop forevertest forevertest.badinput forevertest.errorinforever forevertest.outputinforever forevertest.smoketest forevertest.stopinforever formtest formtest.badinput formtest.bug1327706 formtest.smoketest fputtest fputtest.badinput fputtest.smoketest fulltexttest fulltexttest.badinput fulltexttest.smoketest gif.smoketest gifload.badinput gifsave.badinput gifsave.overwritesfile gifsize.badinput gifsize.smoketest giftest goldenratiotest greaterequalptest greaterequalptest.badinput greaterequalptest.smoketest greaterptest greaterptest.badinput greaterptest.smoketest greatlogoatlastest greatlogoatlastest.tok1.1 greatlogoatlastest.tok1.10 greatlogoatlastest.tok1.11 greatlogoatlastest.tok1.2 greatlogoatlastest.tok1.3 greatlogoatlastest.tok1.4 greatlogoatlastest.tok1.5 greatlogoatlastest.tok1.6 greatlogoatlastest.tok1.7 greatlogoatlastest.tok1.8 greatlogoatlastest.tok1.9 greatlogoatlastest.tok2.1 greatlogoatlastest.tok2.2 greatlogoatlastest.tok2.3 greatlogoatlastest.tok2.4 greatlogoatlastest.tok2.5 greatlogoatlastest.tok3.1 greatlogoatlastest.tok3.2 greatlogoatlastest.tok3.3 greatlogoatlastest.tok3.4 greatlogoatlastest.tok3.5 greatlogoatlastest.tok3.6 greatlogoatlastest.tok3.7 greatlogoatlastest.tok3.8 greatlogoatlastest.tok3.9 helptest i.dont.know.what.to.do.with.value iftest inporttest inttest iseqtest itemtest itemtest.badinput itemtest.badinput.recoverable itemtest.output.2 itemtest.smoketest labelbadinputtest labelcircletest labeltest lasttest lessequalptest lessequalptest.badinput lessequalptest.smoketest lessptest lessptest.badinput lessptest.smoketest linecontinuation3 listptest listtest listtest.smoketest listtoarraytest listtoarraytest.badinput listtoarraytest.smoketest lntest loadtest localvartest log10test logictest logoversiontest logoversiontest.badinput logoversiontest.smoketest lowercasetest lowercasetest.badinput lowercasetest.international lowercasetest.smoketest lputtest lputtest.badinput lputtest.smoketest lshifttest.badinput lshifttest.smoketest macro.return.unbound.instead.of.list macroexpandtest macroexpandtest.badinput macroexpandtest.macroforward macroexpandtest.outputnothing macroexpandtest.smoketest macrotest macrotest.myrun macrotest.outputnothing macrotest.outputtest macrotest.smoketest macrotest.stoptest maptest maptest.badinput maptest.smoketest mathtest mdarraytest mdarraytest.badinput mdarraytest.onedimensional mdarraytest.origin mdarraytest.smoketest mditemtest.badinput mditemtest.smoketest mdsetitemtest.badinput mdsetitemtest.smoketest memberptest messageboxtest messageboxtest.badinput messageboxtest.smoketest miditest miditest.badinput miditest.devicezero miditest.longformat miditest.playtune miditest.runalreadyopentest miditest.rundevicenotopentest miditest.smoketest minustest misctest mkdirtest modulotest mousetest mousetest.badinput mousetest.simpletest multidllloadtest my.proc.to.step myadd mymacro nearest.decimal.places networktest networktest.client.echo networktest.client.receivelargepacket networktest.client.receiveunframedpacket networktest.client.shutdownrace networktest.client.smoketest networktest.hostname networktest.netshutdowncrash networktest.server.receiveunframedpacket networktest.server.shutdownrace networktest.server.twoconnections networktest.servercommand networktest.smoketest no.input.no.output nodestest notequalptest notequalptest.badinput notequalptest.smoketest nottest numberptest one.input.no.output orientationtest orientationtest.bug1429938 ortest outporttest output.373 parsetest parsetest.deeplynestedinfixexpression parsetest.deeplyparenthesizedexpression parsetest.expression parsetest.func parsetest.infixexpression parsetest.infixexpression.priority parsetest.longinstructionline parsetest.longinstructionlinewithcatch parsetest.lotsofnegationoperators parsetest.manyinputs parsetest.manynestedcalls parsetest.number parsetest.parsechar255 parsetest.symbolsofinclusion parsetest.word pasteincircle pencolortest penmodetest pensizetest pensizetest.badinput pensizetest.setgettest pensizetest.smoketest pentest penupdowntest perspectivetest perspectivetest.badinput perspectivetest.smoketest pitest pixeltest pixeltest.badinput pixeltest.smoketest plisttest polygontest polygontest.definepolygon polygontest.drawface polygontest.rotateperspective polygontest.smoketest porttest potest potest.badinput potest.longinput potest.longinput.definedprocedurewithlongline potest.longinput.procedurewithlongline potest.smoketest powertest predicatetest printtest printtest.deeplynestedarray printtest.deeplynestedlist printtest.performance printtest.printdepthandwidthlimit printtest.printdepthlimit printtest.printwidthlimit printtest.pseudoloc printtest.runprintdepthlimittest printtest.runprintwidthlimittest printtest.smoketest procedure.shadows.myshadowedvar procedure.with.to.inside.it procedureinworkingdirectory procedureptest procedureptest.badinput procedureptest.smoketest proceduretest proceduretest.complexproc proceduretest.àcçênt producttest questionboxtest questionboxtest.badinput questionboxtest.smoketest queuetest queuetest.badinput queuetest.circulartest queuetest.smoketest quotedtest quotedtest.badinput quotedtest.smoketest quotienttest radarccostest radarcsintest radarctantest radcostest radsintest radtantest randomtest randomtest.badinput randomtest.smoketest rawasciitest readcharstest readcharstest.badinput readcharstest.commander readcharstest.eoftest readcharstest.readbinarydata readcharstest.smoketest readchartest readchartest.badinput readchartest.readdata readchartest.smoketest readrawlinetest readrawlinetest.badinput readrawlinetest.readrawlinefromui readrawlinetest.smoketest readrawlinetest.ui readrawlinetest.uicancel readwordtest readwordtest.badinput readwordtest.readwordfromui readwordtest.smoketest readwordtest.ui readwordtest.uicancel reducetest reducetest.badinput reducetest.max reducetest.max.rest reducetest.smoketest refreshtest remaindertest remduptest remduptest.badinput remduptest.smoketest removetest removetest.badinput removetest.smoketest repcounttest repcounttest.badinput repcounttest.smoketest repcounttest.timercallback repcounttest.timertest repeattest repeattest.badinput repeattest.errorinrepeat repeattest.outputinrepeat repeattest.smoketest repeattest.stopinrepeat rerandomtest.badinput rerandomtest.smoketest reversetest reversetest.badinput reversetest.smoketest rmdirtest round.vector roundtest runparsetest runparsetest.badinput runparsetest.smoketest runresulttest runresulttest.badinput runresulttest.smoketest runtest sampleproc screencolortest screentest scrunchtest selectboxtest selectboxtest.badinput selectboxtest.smoketest sentencetest sentencetest.badinput sentencetest.noalias sentencetest.smoketest setbitindex.badinput setbitindex.smoketest setbitmodetest.badinputisrecoverable setbitmodetest.converttointeger setbitmodetest.output.2 setitemtest setlabelfonttest setpixeltest.badinput setpixeltest.smoketest setrandomorientation shellscripttest shelltest shelltest.badinput shelltest.smoketest shelltest.waityields signtest sintest slowdrawtest slowdrawtest.badinput slowdrawtest.buried slowdrawtest.redefptest slowdrawtest.smoketest slowdrawtest.timecommand sorttest sorttest.after? sorttest.badinput sorttest.nonpredicate sorttest.oneinputbydefault sorttest.oneinputproc sorttest.performance sorttest.regression sorttest.sortbylegs sorttest.sortbyname sorttest.threeinputproc soundtest soundtest.badinput soundtest.frequency.a4 soundtest.frequency.b4 soundtest.frequency.c4 soundtest.frequency.c5 soundtest.frequency.d4 soundtest.frequency.d5 soundtest.frequency.e4 soundtest.frequency.f4 soundtest.frequency.g4 soundtest.sound soundtest.tone sqrttest stacktest stacktest.badinput stacktest.circulartest stacktest.smoketest statustest statustest.badinput statustest.smoketest steptest steptest.badinput steptest.procedure steptest.propertylist steptest.shadowvariable steptest.stepall steptest.steppedprocedure steptest.variable sumtest tantest testall testlib.repeatword testsmallwindowhang testtest testtest.badinput testtest.scopetest testtest.smoketest texttest texttest.badinput texttest.smoketest thingtest thingtest.badinput thingtest.shadowedvariable thingtest.smoketest throwtest.badinput throwtest.usererror throwtest.usererror.actualthrowlocation tildainline timertest timertest.badinput timertest.largecallback timertest.runnotfoundtest timertest.smoketest timetest timetest.badinput timetest.smoketest timewait totest totest.baddefaultinputs totest.chaineddefaults totest.chaineddefaultstest totest.defaultinput totest.defaultnumberofinputs totest.nooutput totest.output5 totest.outputdefaultinput totest.outputdefaultinput.twoinputs totest.outputrest totest.outputrest.twoinputs totest.repeatedinput totest.repeatedinputtest totest.rest totest.singleinput totest.smoketest tracetest tracetest.badinput tracetest.capturetrace tracetest.checktrace tracetest.checktrace.inner tracetest.function tracetest.procedure tracetest.procedure.defaultinputs tracetest.procedure.restinput tracetest.propertylist tracetest.traceall tracetest.tracedfunction tracetest.tracedprocedure tracetest.tracedprocedure.withinputs tracetest.variable turtlemodetest turtlemodetest.badinput turtlemodetest.smoketest turtletest turtletest.badinput turtletest.characteristics turtletest.smoketest turtletest.withownpen typetest typetest.smoketest uppercasetest uppercasetest.badinput uppercasetest.international uppercasetest.smoketest waittest waittest.badinput waittest.smoketest windowfileedittest windowfileedittest.bug1330752 windowfileedittest.longfilename windowsettest windowsettest.badinput windowsettest.bug1429960 windowstest windowstest.button windowstest.button.badinput windowstest.checkbox windowstest.checkbox.badinput windowstest.checkbox.deletegroupbox windowstest.combobox windowstest.combobox.badinput windowstest.debugwindows windowstest.debugwindows.badinput windowstest.debugwindows.stress windowstest.dialog.badinput windowstest.dialog.badinput.fromcallback windowstest.dialog.smoketest windowstest.groupbox windowstest.groupbox.badinput windowstest.listbox windowstest.listbox.badinput windowstest.mainwindow.smoketest windowstest.radiobutton windowstest.radiobutton.badinput windowstest.radiobutton.deletegroupbox windowstest.regressiontest windowstest.scrollbar windowstest.scrollbar.badinput windowstest.scrollbar.badinput.output.5 windowstest.setup windowstest.static windowstest.static.badinput windowstest.window.badinput windowstest.window.smoketest windowtest windowtest.badinput windowtest.smoketest wordproctest wordptest wordtest workspacetest workspacetest.arraywithbinarydata.allvalues workspacetest.arraywithbinarydata.allvalues.saveandload workspacetest.arraywithbinarydata.eachvalueseparately workspacetest.saveandloadshortarray workspacetest.saveandloadshortword workspacetest.savepartofworkspace workspacetest.wordwithbinarydata.allvalues workspacetest.wordwithbinarydata.eachvalueseparately wraptest wraptest.badinput wraptest.smoketest yesnoboxtest yesnoboxtest.badinput yesnoboxtest.smoketest zoomtest zoomtest.badinput zoomtest.smoketest zoomtest.zoomstayscentered ~callme ~ignoreme] [a array caseignoredp count erract erract.was.called isok lambda.function.ran largeedittest1 largeedittest10 largeedittest100 largeedittest1000 largeedittest10000 largeedittest1001 largeedittest1002 largeedittest1003 largeedittest1004 largeedittest1005 largeedittest1006 largeedittest1007 largeedittest1008 largeedittest1009 largeedittest101 largeedittest1010 largeedittest1011 largeedittest1012 largeedittest1013 largeedittest1014 largeedittest1015 largeedittest1016 largeedittest1017 largeedittest1018 largeedittest1019 largeedittest102 largeedittest1020 largeedittest1021 largeedittest1022 largeedittest1023 largeedittest1024 largeedittest1025 largeedittest1026 largeedittest1027 largeedittest1028 largeedittest1029 largeedittest103 largeedittest1030 largeedittest1031 largeedittest1032 largeedittest1033 largeedittest1034 largeedittest1035 largeedittest1036 largeedittest1037 largeedittest1038 largeedittest1039 largeedittest104 largeedittest1040 largeedittest1041 largeedittest1042 largeedittest1043 largeedittest1044 largeedittest1045 largeedittest1046 largeedittest1047 largeedittest1048 largeedittest1049 largeedittest105 largeedittest1050 largeedittest1051 largeedittest1052 largeedittest1053 largeedittest1054 largeedittest1055 largeedittest1056 largeedittest1057 largeedittest1058 largeedittest1059 largeedittest106 largeedittest1060 largeedittest1061 largeedittest1062 largeedittest1063 largeedittest1064 largeedittest1065 largeedittest1066 largeedittest1067 largeedittest1068 largeedittest1069 largeedittest107 largeedittest1070 largeedittest1071 largeedittest1072 largeedittest1073 largeedittest1074 largeedittest1075 largeedittest1076 largeedittest1077 largeedittest1078 largeedittest1079 largeedittest108 largeedittest1080 largeedittest1081 largeedittest1082 largeedittest1083 largeedittest1084 largeedittest1085 largeedittest1086 largeedittest1087 largeedittest1088 largeedittest1089 largeedittest109 largeedittest1090 largeedittest1091 largeedittest1092 largeedittest1093 largeedittest1094 largeedittest1095 largeedittest1096 largeedittest1097 largeedittest1098 largeedittest1099 largeedittest11 largeedittest110 largeedittest1100 largeedittest1101 largeedittest1102 largeedittest1103 largeedittest1104 largeedittest1105 largeedittest1106 largeedittest1107 largeedittest1108 largeedittest1109 largeedittest111 largeedittest1110 largeedittest1111 largeedittest1112 largeedittest1113 largeedittest1114 largeedittest1115 largeedittest1116 largeedittest1117 largeedittest1118 largeedittest1119 largeedittest112 largeedittest1120 largeedittest1121 largeedittest1122 largeedittest1123 largeedittest1124 largeedittest1125 largeedittest1126 largeedittest1127 largeedittest1128 largeedittest1129 largeedittest113 largeedittest1130 largeedittest1131 largeedittest1132 largeedittest1133 largeedittest1134 largeedittest1135 largeedittest1136 largeedittest1137 largeedittest1138 largeedittest1139 largeedittest114 largeedittest1140 largeedittest1141 largeedittest1142 largeedittest1143 largeedittest1144 largeedittest1145 largeedittest1146 largeedittest1147 largeedittest1148 largeedittest1149 largeedittest115 largeedittest1150 largeedittest1151 largeedittest1152 largeedittest1153 largeedittest1154 largeedittest1155 largeedittest1156 largeedittest1157 largeedittest1158 largeedittest1159 largeedittest116 largeedittest1160 largeedittest1161 largeedittest1162 largeedittest1163 largeedittest1164 largeedittest1165 largeedittest1166 largeedittest1167 largeedittest1168 largeedittest1169 largeedittest117 largeedittest1170 largeedittest1171 largeedittest1172 largeedittest1173 largeedittest1174 largeedittest1175 largeedittest1176 largeedittest1177 largeedittest1178 largeedittest1179 largeedittest118 largeedittest1180 largeedittest1181 largeedittest1182 largeedittest1183 largeedittest1184 largeedittest1185 largeedittest1186 largeedittest1187 largeedittest1188 largeedittest1189 largeedittest119 largeedittest1190 largeedittest1191 largeedittest1192 largeedittest1193 largeedittest1194 largeedittest1195 largeedittest1196 largeedittest1197 largeedittest1198 largeedittest1199 largeedittest12 largeedittest120 largeedittest1200 largeedittest1201 largeedittest1202 largeedittest1203 largeedittest1204 largeedittest1205 largeedittest1206 largeedittest1207 largeedittest1208 largeedittest1209 largeedittest121 largeedittest1210 largeedittest1211 largeedittest1212 largeedittest1213 largeedittest1214 largeedittest1215 largeedittest1216 largeedittest1217 largeedittest1218 largeedittest1219 largeedittest122 largeedittest1220 largeedittest1221 largeedittest1222 largeedittest1223 largeedittest1224 largeedittest1225 largeedittest1226 largeedittest1227 largeedittest1228 largeedittest1229 largeedittest123 largeedittest1230 largeedittest1231 largeedittest1232 largeedittest1233 largeedittest1234 largeedittest1235 largeedittest1236 largeedittest1237 largeedittest1238 largeedittest1239 largeedittest124 largeedittest1240 largeedittest1241 largeedittest1242 largeedittest1243 largeedittest1244 largeedittest1245 largeedittest1246 largeedittest1247 largeedittest1248 largeedittest1249 largeedittest125 largeedittest1250 largeedittest1251 largeedittest1252 largeedittest1253 largeedittest1254 largeedittest1255 largeedittest1256 largeedittest1257 largeedittest1258 largeedittest1259 largeedittest126 largeedittest1260 largeedittest1261 largeedittest1262 largeedittest1263 largeedittest1264 largeedittest1265 largeedittest1266 largeedittest1267 largeedittest1268 largeedittest1269 largeedittest127 largeedittest1270 largeedittest1271 largeedittest1272 largeedittest1273 largeedittest1274 largeedittest1275 largeedittest1276 largeedittest1277 largeedittest1278 largeedittest1279 largeedittest128 largeedittest1280 largeedittest1281 largeedittest1282 largeedittest1283 largeedittest1284 largeedittest1285 largeedittest1286 largeedittest1287 largeedittest1288 largeedittest1289 largeedittest129 largeedittest1290 largeedittest1291 largeedittest1292 largeedittest1293 largeedittest1294 largeedittest1295 largeedittest1296 largeedittest1297 largeedittest1298 largeedittest1299 largeedittest13 largeedittest130 largeedittest1300 largeedittest1301 largeedittest1302 largeedittest1303 largeedittest1304 largeedittest1305 largeedittest1306 largeedittest1307 largeedittest1308 largeedittest1309 largeedittest131 largeedittest1310 largeedittest1311 largeedittest1312 largeedittest1313 largeedittest1314 largeedittest1315 largeedittest1316 largeedittest1317 largeedittest1318 largeedittest1319 largeedittest132 largeedittest1320 largeedittest1321 largeedittest1322 largeedittest1323 largeedittest1324 largeedittest1325 largeedittest1326 largeedittest1327 largeedittest1328 largeedittest1329 largeedittest133 largeedittest1330 largeedittest1331 largeedittest1332 largeedittest1333 largeedittest1334 largeedittest1335 largeedittest1336 largeedittest1337 largeedittest1338 largeedittest1339 largeedittest134 largeedittest1340 largeedittest1341 largeedittest1342 largeedittest1343 largeedittest1344 largeedittest1345 largeedittest1346 largeedittest1347 largeedittest1348 largeedittest1349 largeedittest135 largeedittest1350 largeedittest1351 largeedittest1352 largeedittest1353 largeedittest1354 largeedittest1355 largeedittest1356 largeedittest1357 largeedittest1358 largeedittest1359 largeedittest136 largeedittest1360 largeedittest1361 largeedittest1362 largeedittest1363 largeedittest1364 largeedittest1365 largeedittest1366 largeedittest1367 largeedittest1368 largeedittest1369 largeedittest137 largeedittest1370 largeedittest1371 largeedittest1372 largeedittest1373 largeedittest1374 largeedittest1375 largeedittest1376 largeedittest1377 largeedittest1378 largeedittest1379 largeedittest138 largeedittest1380 largeedittest1381 largeedittest1382 largeedittest1383 largeedittest1384 largeedittest1385 largeedittest1386 largeedittest1387 largeedittest1388 largeedittest1389 largeedittest139 largeedittest1390 largeedittest1391 largeedittest1392 largeedittest1393 largeedittest1394 largeedittest1395 largeedittest1396 largeedittest1397 largeedittest1398 largeedittest1399 largeedittest14 largeedittest140 largeedittest1400 largeedittest1401 largeedittest1402 largeedittest1403 largeedittest1404 largeedittest1405 largeedittest1406 largeedittest1407 largeedittest1408 largeedittest1409 largeedittest141 largeedittest1410 largeedittest1411 largeedittest1412 largeedittest1413 largeedittest1414 largeedittest1415 largeedittest1416 largeedittest1417 largeedittest1418 largeedittest1419 largeedittest142 largeedittest1420 largeedittest1421 largeedittest1422 largeedittest1423 largeedittest1424 largeedittest1425 largeedittest1426 largeedittest1427 largeedittest1428 largeedittest1429 largeedittest143 largeedittest1430 largeedittest1431 largeedittest1432 largeedittest1433 largeedittest1434 largeedittest1435 largeedittest1436 largeedittest1437 largeedittest1438 largeedittest1439 largeedittest144 largeedittest1440 largeedittest1441 largeedittest1442 largeedittest1443 largeedittest1444 largeedittest1445 largeedittest1446 largeedittest1447 largeedittest1448 largeedittest1449 largeedittest145 largeedittest1450 largeedittest1451 largeedittest1452 largeedittest1453 largeedittest1454 largeedittest1455 largeedittest1456 largeedittest1457 largeedittest1458 largeedittest1459 largeedittest146 largeedittest1460 largeedittest1461 largeedittest1462 largeedittest1463 largeedittest1464 largeedittest1465 largeedittest1466 largeedittest1467 largeedittest1468 largeedittest1469 largeedittest147 largeedittest1470 largeedittest1471 largeedittest1472 largeedittest1473 largeedittest1474 largeedittest1475 largeedittest1476 largeedittest1477 largeedittest1478 largeedittest1479 largeedittest148 largeedittest1480 largeedittest1481 largeedittest1482 largeedittest1483 largeedittest1484 largeedittest1485 largeedittest1486 largeedittest1487 largeedittest1488 largeedittest1489 largeedittest149 largeedittest1490 largeedittest1491 largeedittest1492 largeedittest1493 largeedittest1494 largeedittest1495 largeedittest1496 largeedittest1497 largeedittest1498 largeedittest1499 largeedittest15 largeedittest150 largeedittest1500 largeedittest1501 largeedittest1502 largeedittest1503 largeedittest1504 largeedittest1505 largeedittest1506 largeedittest1507 largeedittest1508 largeedittest1509 largeedittest151 largeedittest1510 largeedittest1511 largeedittest1512 largeedittest1513 largeedittest1514 largeedittest1515 largeedittest1516 largeedittest1517 largeedittest1518 largeedittest1519 largeedittest152 largeedittest1520 largeedittest1521 largeedittest1522 largeedittest1523 largeedittest1524 largeedittest1525 largeedittest1526 largeedittest1527 largeedittest1528 largeedittest1529 largeedittest153 largeedittest1530 largeedittest1531 largeedittest1532 largeedittest1533 largeedittest1534 largeedittest1535 largeedittest1536 largeedittest1537 largeedittest1538 largeedittest1539 largeedittest154 largeedittest1540 largeedittest1541 largeedittest1542 largeedittest1543 largeedittest1544 largeedittest1545 largeedittest1546 largeedittest1547 largeedittest1548 largeedittest1549 largeedittest155 largeedittest1550 largeedittest1551 largeedittest1552 largeedittest1553 largeedittest1554 largeedittest1555 largeedittest1556 largeedittest1557 largeedittest1558 largeedittest1559 largeedittest156 largeedittest1560 largeedittest1561 largeedittest1562 largeedittest1563 largeedittest1564 largeedittest1565 largeedittest1566 largeedittest1567 largeedittest1568 largeedittest1569 largeedittest157 largeedittest1570 largeedittest1571 largeedittest1572 largeedittest1573 largeedittest1574 largeedittest1575 largeedittest1576 largeedittest1577 largeedittest1578 largeedittest1579 largeedittest158 largeedittest1580 largeedittest1581 largeedittest1582 largeedittest1583 largeedittest1584 largeedittest1585 largeedittest1586 largeedittest1587 largeedittest1588 largeedittest1589 largeedittest159 largeedittest1590 largeedittest1591 largeedittest1592 largeedittest1593 largeedittest1594 largeedittest1595 largeedittest1596 largeedittest1597 largeedittest1598 largeedittest1599 largeedittest16 largeedittest160 largeedittest1600 largeedittest1601 largeedittest1602 largeedittest1603 largeedittest1604 largeedittest1605 largeedittest1606 largeedittest1607 largeedittest1608 largeedittest1609 largeedittest161 largeedittest1610 largeedittest1611 largeedittest1612 largeedittest1613 largeedittest1614 largeedittest1615 largeedittest1616 largeedittest1617 largeedittest1618 largeedittest1619 largeedittest162 largeedittest1620 largeedittest1621 largeedittest1622 largeedittest1623 largeedittest1624 largeedittest1625 largeedittest1626 largeedittest1627 largeedittest1628 largeedittest1629 largeedittest163 largeedittest1630 largeedittest1631 largeedittest1632 largeedittest1633 largeedittest1634 largeedittest1635 largeedittest1636 largeedittest1637 largeedittest1638 largeedittest1639 largeedittest164 largeedittest1640 largeedittest1641 largeedittest1642 largeedittest1643 largeedittest1644 largeedittest1645 largeedittest1646 largeedittest1647 largeedittest1648 largeedittest1649 largeedittest165 largeedittest1650 largeedittest1651 largeedittest1652 largeedittest1653 largeedittest1654 largeedittest1655 largeedittest1656 largeedittest1657 largeedittest1658 largeedittest1659 largeedittest166 largeedittest1660 largeedittest1661 largeedittest1662 largeedittest1663 largeedittest1664 largeedittest1665 largeedittest1666 largeedittest1667 largeedittest1668 largeedittest1669 largeedittest167 largeedittest1670 largeedittest1671 largeedittest1672 largeedittest1673 largeedittest1674 largeedittest1675 largeedittest1676 largeedittest1677 largeedittest1678 largeedittest1679 largeedittest168 largeedittest1680 largeedittest1681 largeedittest1682 largeedittest1683 largeedittest1684 largeedittest1685 largeedittest1686 largeedittest1687 largeedittest1688 largeedittest1689 largeedittest169 largeedittest1690 largeedittest1691 largeedittest1692 largeedittest1693 largeedittest1694 largeedittest1695 largeedittest1696 largeedittest1697 largeedittest1698 largeedittest1699 largeedittest17 largeedittest170 largeedittest1700 largeedittest1701 largeedittest1702 largeedittest1703 largeedittest1704 largeedittest1705 largeedittest1706 largeedittest1707 largeedittest1708 largeedittest1709 largeedittest171 largeedittest1710 largeedittest1711 largeedittest1712 largeedittest1713 largeedittest1714 largeedittest1715 largeedittest1716 largeedittest1717 largeedittest1718 largeedittest1719 largeedittest172 largeedittest1720 largeedittest1721 largeedittest1722 largeedittest1723 largeedittest1724 largeedittest1725 largeedittest1726 largeedittest1727 largeedittest1728 largeedittest1729 largeedittest173 largeedittest1730 largeedittest1731 largeedittest1732 largeedittest1733 largeedittest1734 largeedittest1735 largeedittest1736 largeedittest1737 largeedittest1738 largeedittest1739 largeedittest174 largeedittest1740 largeedittest1741 largeedittest1742 largeedittest1743 largeedittest1744 largeedittest1745 largeedittest1746 largeedittest1747 largeedittest1748 largeedittest1749 largeedittest175 largeedittest1750 largeedittest1751 largeedittest1752 largeedittest1753 largeedittest1754 largeedittest1755 largeedittest1756 largeedittest1757 largeedittest1758 largeedittest1759 largeedittest176 largeedittest1760 largeedittest1761 largeedittest1762 largeedittest1763 largeedittest1764 largeedittest1765 largeedittest1766 largeedittest1767 largeedittest1768 largeedittest1769 largeedittest177 largeedittest1770 largeedittest1771 largeedittest1772 largeedittest1773 largeedittest1774 largeedittest1775 largeedittest1776 largeedittest1777 largeedittest1778 largeedittest1779 largeedittest178 largeedittest1780 largeedittest1781 largeedittest1782 largeedittest1783 largeedittest1784 largeedittest1785 largeedittest1786 largeedittest1787 largeedittest1788 largeedittest1789 largeedittest179 largeedittest1790 largeedittest1791 largeedittest1792 largeedittest1793 largeedittest1794 largeedittest1795 largeedittest1796 largeedittest1797 largeedittest1798 largeedittest1799 largeedittest18 largeedittest180 largeedittest1800 largeedittest1801 largeedittest1802 largeedittest1803 largeedittest1804 largeedittest1805 largeedittest1806 largeedittest1807 largeedittest1808 largeedittest1809 largeedittest181 largeedittest1810 largeedittest1811 largeedittest1812 largeedittest1813 largeedittest1814 largeedittest1815 largeedittest1816 largeedittest1817 largeedittest1818 largeedittest1819 largeedittest182 largeedittest1820 largeedittest1821 largeedittest1822 largeedittest1823 largeedittest1824 largeedittest1825 largeedittest1826 largeedittest1827 largeedittest1828 largeedittest1829 largeedittest183 largeedittest1830 largeedittest1831 largeedittest1832 largeedittest1833 largeedittest1834 largeedittest1835 largeedittest1836 largeedittest1837 largeedittest1838 largeedittest1839 largeedittest184 largeedittest1840 largeedittest1841 largeedittest1842 largeedittest1843 largeedittest1844 largeedittest1845 largeedittest1846 largeedittest1847 largeedittest1848 largeedittest1849 largeedittest185 largeedittest1850 largeedittest1851 largeedittest1852 largeedittest1853 largeedittest1854 largeedittest1855 largeedittest1856 largeedittest1857 largeedittest1858 largeedittest1859 largeedittest186 largeedittest1860 largeedittest1861 largeedittest1862 largeedittest1863 largeedittest1864 largeedittest1865 largeedittest1866 largeedittest1867 largeedittest1868 largeedittest1869 largeedittest187 largeedittest1870 largeedittest1871 largeedittest1872 largeedittest1873 largeedittest1874 largeedittest1875 largeedittest1876 largeedittest1877 largeedittest1878 largeedittest1879 largeedittest188 largeedittest1880 largeedittest1881 largeedittest1882 largeedittest1883 largeedittest1884 largeedittest1885 largeedittest1886 largeedittest1887 largeedittest1888 largeedittest1889 largeedittest189 largeedittest1890 largeedittest1891 largeedittest1892 largeedittest1893 largeedittest1894 largeedittest1895 largeedittest1896 largeedittest1897 largeedittest1898 largeedittest1899 largeedittest19 largeedittest190 largeedittest1900 largeedittest1901 largeedittest1902 largeedittest1903 largeedittest1904 largeedittest1905 largeedittest1906 largeedittest1907 largeedittest1908 largeedittest1909 largeedittest191 largeedittest1910 largeedittest1911 largeedittest1912 largeedittest1913 largeedittest1914 largeedittest1915 largeedittest1916 largeedittest1917 largeedittest1918 largeedittest1919 largeedittest192 largeedittest1920 largeedittest1921 largeedittest1922 largeedittest1923 largeedittest1924 largeedittest1925 largeedittest1926 largeedittest1927 largeedittest1928 largeedittest1929 largeedittest193 largeedittest1930 largeedittest1931 largeedittest1932 largeedittest1933 largeedittest1934 largeedittest1935 largeedittest1936 largeedittest1937 largeedittest1938 largeedittest1939 largeedittest194 largeedittest1940 largeedittest1941 largeedittest1942 largeedittest1943 largeedittest1944 largeedittest1945 largeedittest1946 largeedittest1947 largeedittest1948 largeedittest1949 largeedittest195 largeedittest1950 largeedittest1951 largeedittest1952 largeedittest1953 largeedittest1954 largeedittest1955 largeedittest1956 largeedittest1957 largeedittest1958 largeedittest1959 largeedittest196 largeedittest1960 largeedittest1961 largeedittest1962 largeedittest1963 largeedittest1964 largeedittest1965 largeedittest1966 largeedittest1967 largeedittest1968 largeedittest1969 largeedittest197 largeedittest1970 largeedittest1971 largeedittest1972 largeedittest1973 largeedittest1974 largeedittest1975 largeedittest1976 largeedittest1977 largeedittest1978 largeedittest1979 largeedittest198 largeedittest1980 largeedittest1981 largeedittest1982 largeedittest1983 largeedittest1984 largeedittest1985 largeedittest1986 largeedittest1987 largeedittest1988 largeedittest1989 largeedittest199 largeedittest1990 largeedittest1991 largeedittest1992 largeedittest1993 largeedittest1994 largeedittest1995 largeedittest1996 largeedittest1997 largeedittest1998 largeedittest1999 largeedittest2 largeedittest20 largeedittest200 largeedittest2000 largeedittest2001 largeedittest2002 largeedittest2003 largeedittest2004 largeedittest2005 largeedittest2006 largeedittest2007 largeedittest2008 largeedittest2009 largeedittest201 largeedittest2010 largeedittest2011 largeedittest2012 largeedittest2013 largeedittest2014 largeedittest2015 largeedittest2016 largeedittest2017 largeedittest2018 largeedittest2019 largeedittest202 largeedittest2020 largeedittest2021 largeedittest2022 largeedittest2023 largeedittest2024 largeedittest2025 largeedittest2026 largeedittest2027 largeedittest2028 largeedittest2029 largeedittest203 largeedittest2030 largeedittest2031 largeedittest2032 largeedittest2033 largeedittest2034 largeedittest2035 largeedittest2036 largeedittest2037 largeedittest2038 largeedittest2039 largeedittest204 largeedittest2040 largeedittest2041 largeedittest2042 largeedittest2043 largeedittest2044 largeedittest2045 largeedittest2046 largeedittest2047 largeedittest2048 largeedittest2049 largeedittest205 largeedittest2050 largeedittest2051 largeedittest2052 largeedittest2053 largeedittest2054 largeedittest2055 largeedittest2056 largeedittest2057 largeedittest2058 largeedittest2059 largeedittest206 largeedittest2060 largeedittest2061 largeedittest2062 largeedittest2063 largeedittest2064 largeedittest2065 largeedittest2066 largeedittest2067 largeedittest2068 largeedittest2069 largeedittest207 largeedittest2070 largeedittest2071 largeedittest2072 largeedittest2073 largeedittest2074 largeedittest2075 largeedittest2076 largeedittest2077 largeedittest2078 largeedittest2079 largeedittest208 largeedittest2080 largeedittest2081 largeedittest2082 largeedittest2083 largeedittest2084 largeedittest2085 largeedittest2086 largeedittest2087 largeedittest2088 largeedittest2089 largeedittest209 largeedittest2090 largeedittest2091 largeedittest2092 largeedittest2093 largeedittest2094 largeedittest2095 largeedittest2096 largeedittest2097 largeedittest2098 largeedittest2099 largeedittest21 largeedittest210 largeedittest2100 largeedittest2101 largeedittest2102 largeedittest2103 largeedittest2104 largeedittest2105 largeedittest2106 largeedittest2107 largeedittest2108 largeedittest2109 largeedittest211 largeedittest2110 largeedittest2111 largeedittest2112 largeedittest2113 largeedittest2114 largeedittest2115 largeedittest2116 largeedittest2117 largeedittest2118 largeedittest2119 largeedittest212 largeedittest2120 largeedittest2121 largeedittest2122 largeedittest2123 largeedittest2124 largeedittest2125 largeedittest2126 largeedittest2127 largeedittest2128 largeedittest2129 largeedittest213 largeedittest2130 largeedittest2131 largeedittest2132 largeedittest2133 largeedittest2134 largeedittest2135 largeedittest2136 largeedittest2137 largeedittest2138 largeedittest2139 largeedittest214 largeedittest2140 largeedittest2141 largeedittest2142 largeedittest2143 largeedittest2144 largeedittest2145 largeedittest2146 largeedittest2147 largeedittest2148 largeedittest2149 largeedittest215 largeedittest2150 largeedittest2151 largeedittest2152 largeedittest2153 largeedittest2154 largeedittest2155 largeedittest2156 largeedittest2157 largeedittest2158 largeedittest2159 largeedittest216 largeedittest2160 largeedittest2161 largeedittest2162 largeedittest2163 largeedittest2164 largeedittest2165 largeedittest2166 largeedittest2167 largeedittest2168 largeedittest2169 largeedittest217 largeedittest2170 largeedittest2171 largeedittest2172 largeedittest2173 largeedittest2174 largeedittest2175 largeedittest2176 largeedittest2177 largeedittest2178 largeedittest2179 largeedittest218 largeedittest2180 largeedittest2181 largeedittest2182 largeedittest2183 largeedittest2184 largeedittest2185 largeedittest2186 largeedittest2187 largeedittest2188 largeedittest2189 largeedittest219 largeedittest2190 largeedittest2191 largeedittest2192 largeedittest2193 largeedittest2194 largeedittest2195 largeedittest2196 largeedittest2197 largeedittest2198 largeedittest2199 largeedittest22 largeedittest220 largeedittest2200 largeedittest2201 largeedittest2202 largeedittest2203 largeedittest2204 largeedittest2205 largeedittest2206 largeedittest2207 largeedittest2208 largeedittest2209 largeedittest221 largeedittest2210 largeedittest2211 largeedittest2212 largeedittest2213 largeedittest2214 largeedittest2215 largeedittest2216 largeedittest2217 largeedittest2218 largeedittest2219 largeedittest222 largeedittest2220 largeedittest2221 largeedittest2222 largeedittest2223 largeedittest2224 largeedittest2225 largeedittest2226 largeedittest2227 largeedittest2228 largeedittest2229 largeedittest223 largeedittest2230 largeedittest2231 largeedittest2232 largeedittest2233 largeedittest2234 largeedittest2235 largeedittest2236 largeedittest2237 largeedittest2238 largeedittest2239 largeedittest224 largeedittest2240 largeedittest2241 largeedittest2242 largeedittest2243 largeedittest2244 largeedittest2245 largeedittest2246 largeedittest2247 largeedittest2248 largeedittest2249 largeedittest225 largeedittest2250 largeedittest2251 largeedittest2252 largeedittest2253 largeedittest2254 largeedittest2255 largeedittest2256 largeedittest2257 largeedittest2258 largeedittest2259 largeedittest226 largeedittest2260 largeedittest2261 largeedittest2262 largeedittest2263 largeedittest2264 largeedittest2265 largeedittest2266 largeedittest2267 largeedittest2268 largeedittest2269 largeedittest227 largeedittest2270 largeedittest2271 largeedittest2272 largeedittest2273 largeedittest2274 largeedittest2275 largeedittest2276 largeedittest2277 largeedittest2278 largeedittest2279 largeedittest228 largeedittest2280 largeedittest2281 largeedittest2282 largeedittest2283 largeedittest2284 largeedittest2285 largeedittest2286 largeedittest2287 largeedittest2288 largeedittest2289 largeedittest229 largeedittest2290 largeedittest2291 largeedittest2292 largeedittest2293 largeedittest2294 largeedittest2295 largeedittest2296 largeedittest2297 largeedittest2298 largeedittest2299 largeedittest23 largeedittest230 largeedittest2300 largeedittest2301 largeedittest2302 largeedittest2303 largeedittest2304 largeedittest2305 largeedittest2306 largeedittest2307 largeedittest2308 largeedittest2309 largeedittest231 largeedittest2310 largeedittest2311 largeedittest2312 largeedittest2313 largeedittest2314 largeedittest2315 largeedittest2316 largeedittest2317 largeedittest2318 largeedittest2319 largeedittest232 largeedittest2320 largeedittest2321 largeedittest2322 largeedittest2323 largeedittest2324 largeedittest2325 largeedittest2326 largeedittest2327 largeedittest2328 largeedittest2329 largeedittest233 largeedittest2330 largeedittest2331 largeedittest2332 largeedittest2333 largeedittest2334 largeedittest2335 largeedittest2336 largeedittest2337 largeedittest2338 largeedittest2339 largeedittest234 largeedittest2340 largeedittest2341 largeedittest2342 largeedittest2343 largeedittest2344 largeedittest2345 largeedittest2346 largeedittest2347 largeedittest2348 largeedittest2349 largeedittest235 largeedittest2350 largeedittest2351 largeedittest2352 largeedittest2353 largeedittest2354 largeedittest2355 largeedittest2356 largeedittest2357 largeedittest2358 largeedittest2359 largeedittest236 largeedittest2360 largeedittest2361 largeedittest2362 largeedittest2363 largeedittest2364 largeedittest2365 largeedittest2366 largeedittest2367 largeedittest2368 largeedittest2369 largeedittest237 largeedittest2370 largeedittest2371 largeedittest2372 largeedittest2373 largeedittest2374 largeedittest2375 largeedittest2376 largeedittest2377 largeedittest2378 largeedittest2379 largeedittest238 largeedittest2380 largeedittest2381 largeedittest2382 largeedittest2383 largeedittest2384 largeedittest2385 largeedittest2386 largeedittest2387 largeedittest2388 largeedittest2389 largeedittest239 largeedittest2390 largeedittest2391 largeedittest2392 largeedittest2393 largeedittest2394 largeedittest2395 largeedittest2396 largeedittest2397 largeedittest2398 largeedittest2399 largeedittest24 largeedittest240 largeedittest2400 largeedittest2401 largeedittest2402 largeedittest2403 largeedittest2404 largeedittest2405 largeedittest2406 largeedittest2407 largeedittest2408 largeedittest2409 largeedittest241 largeedittest2410 largeedittest2411 largeedittest2412 largeedittest2413 largeedittest2414 largeedittest2415 largeedittest2416 largeedittest2417 largeedittest2418 largeedittest2419 largeedittest242 largeedittest2420 largeedittest2421 largeedittest2422 largeedittest2423 largeedittest2424 largeedittest2425 largeedittest2426 largeedittest2427 largeedittest2428 largeedittest2429 largeedittest243 largeedittest2430 largeedittest2431 largeedittest2432 largeedittest2433 largeedittest2434 largeedittest2435 largeedittest2436 largeedittest2437 largeedittest2438 largeedittest2439 largeedittest244 largeedittest2440 largeedittest2441 largeedittest2442 largeedittest2443 largeedittest2444 largeedittest2445 largeedittest2446 largeedittest2447 largeedittest2448 largeedittest2449 largeedittest245 largeedittest2450 largeedittest2451 largeedittest2452 largeedittest2453 largeedittest2454 largeedittest2455 largeedittest2456 largeedittest2457 largeedittest2458 largeedittest2459 largeedittest246 largeedittest2460 largeedittest2461 largeedittest2462 largeedittest2463 largeedittest2464 largeedittest2465 largeedittest2466 largeedittest2467 largeedittest2468 largeedittest2469 largeedittest247 largeedittest2470 largeedittest2471 largeedittest2472 largeedittest2473 largeedittest2474 largeedittest2475 largeedittest2476 largeedittest2477 largeedittest2478 largeedittest2479 largeedittest248 largeedittest2480 largeedittest2481 largeedittest2482 largeedittest2483 largeedittest2484 largeedittest2485 largeedittest2486 largeedittest2487 largeedittest2488 largeedittest2489 largeedittest249 largeedittest2490 largeedittest2491 largeedittest2492 largeedittest2493 largeedittest2494 largeedittest2495 largeedittest2496 largeedittest2497 largeedittest2498 largeedittest2499 largeedittest25 largeedittest250 largeedittest2500 largeedittest2501 largeedittest2502 largeedittest2503 largeedittest2504 largeedittest2505 largeedittest2506 largeedittest2507 largeedittest2508 largeedittest2509 largeedittest251 largeedittest2510 largeedittest2511 largeedittest2512 largeedittest2513 largeedittest2514 largeedittest2515 largeedittest2516 largeedittest2517 largeedittest2518 largeedittest2519 largeedittest252 largeedittest2520 largeedittest2521 largeedittest2522 largeedittest2523 largeedittest2524 largeedittest2525 largeedittest2526 largeedittest2527 largeedittest2528 largeedittest2529 largeedittest253 largeedittest2530 largeedittest2531 largeedittest2532 largeedittest2533 largeedittest2534 largeedittest2535 largeedittest2536 largeedittest2537 largeedittest2538 largeedittest2539 largeedittest254 largeedittest2540 largeedittest2541 largeedittest2542 largeedittest2543 largeedittest2544 largeedittest2545 largeedittest2546 largeedittest2547 largeedittest2548 largeedittest2549 largeedittest255 largeedittest2550 largeedittest2551 largeedittest2552 largeedittest2553 largeedittest2554 largeedittest2555 largeedittest2556 largeedittest2557 largeedittest2558 largeedittest2559 largeedittest256 largeedittest2560 largeedittest2561 largeedittest2562 largeedittest2563 largeedittest2564 largeedittest2565 largeedittest2566 largeedittest2567 largeedittest2568 largeedittest2569 largeedittest257 largeedittest2570 largeedittest2571 largeedittest2572 largeedittest2573 largeedittest2574 largeedittest2575 largeedittest2576 largeedittest2577 largeedittest2578 largeedittest2579 largeedittest258 largeedittest2580 largeedittest2581 largeedittest2582 largeedittest2583 largeedittest2584 largeedittest2585 largeedittest2586 largeedittest2587 largeedittest2588 largeedittest2589 largeedittest259 largeedittest2590 largeedittest2591 largeedittest2592 largeedittest2593 largeedittest2594 largeedittest2595 largeedittest2596 largeedittest2597 largeedittest2598 largeedittest2599 largeedittest26 largeedittest260 largeedittest2600 largeedittest2601 largeedittest2602 largeedittest2603 largeedittest2604 largeedittest2605 largeedittest2606 largeedittest2607 largeedittest2608 largeedittest2609 largeedittest261 largeedittest2610 largeedittest2611 largeedittest2612 largeedittest2613 largeedittest2614 largeedittest2615 largeedittest2616 largeedittest2617 largeedittest2618 largeedittest2619 largeedittest262 largeedittest2620 largeedittest2621 largeedittest2622 largeedittest2623 largeedittest2624 largeedittest2625 largeedittest2626 largeedittest2627 largeedittest2628 largeedittest2629 largeedittest263 largeedittest2630 largeedittest2631 largeedittest2632 largeedittest2633 largeedittest2634 largeedittest2635 largeedittest2636 largeedittest2637 largeedittest2638 largeedittest2639 largeedittest264 largeedittest2640 largeedittest2641 largeedittest2642 largeedittest2643 largeedittest2644 largeedittest2645 largeedittest2646 largeedittest2647 largeedittest2648 largeedittest2649 largeedittest265 largeedittest2650 largeedittest2651 largeedittest2652 largeedittest2653 largeedittest2654 largeedittest2655 largeedittest2656 largeedittest2657 largeedittest2658 largeedittest2659 largeedittest266 largeedittest2660 largeedittest2661 largeedittest2662 largeedittest2663 largeedittest2664 largeedittest2665 largeedittest2666 largeedittest2667 largeedittest2668 largeedittest2669 largeedittest267 largeedittest2670 largeedittest2671 largeedittest2672 largeedittest2673 largeedittest2674 largeedittest2675 largeedittest2676 largeedittest2677 largeedittest2678 largeedittest2679 largeedittest268 largeedittest2680 largeedittest2681 largeedittest2682 largeedittest2683 largeedittest2684 largeedittest2685 largeedittest2686 largeedittest2687 largeedittest2688 largeedittest2689 largeedittest269 largeedittest2690 largeedittest2691 largeedittest2692 largeedittest2693 largeedittest2694 largeedittest2695 largeedittest2696 largeedittest2697 largeedittest2698 largeedittest2699 largeedittest27 largeedittest270 largeedittest2700 largeedittest2701 largeedittest2702 largeedittest2703 largeedittest2704 largeedittest2705 largeedittest2706 largeedittest2707 largeedittest2708 largeedittest2709 largeedittest271 largeedittest2710 largeedittest2711 largeedittest2712 largeedittest2713 largeedittest2714 largeedittest2715 largeedittest2716 largeedittest2717 largeedittest2718 largeedittest2719 largeedittest272 largeedittest2720 largeedittest2721 largeedittest2722 largeedittest2723 largeedittest2724 largeedittest2725 largeedittest2726 largeedittest2727 largeedittest2728 largeedittest2729 largeedittest273 largeedittest2730 largeedittest2731 largeedittest2732 largeedittest2733 largeedittest2734 largeedittest2735 largeedittest2736 largeedittest2737 largeedittest2738 largeedittest2739 largeedittest274 largeedittest2740 largeedittest2741 largeedittest2742 largeedittest2743 largeedittest2744 largeedittest2745 largeedittest2746 largeedittest2747 largeedittest2748 largeedittest2749 largeedittest275 largeedittest2750 largeedittest2751 largeedittest2752 largeedittest2753 largeedittest2754 largeedittest2755 largeedittest2756 largeedittest2757 largeedittest2758 largeedittest2759 largeedittest276 largeedittest2760 largeedittest2761 largeedittest2762 largeedittest2763 largeedittest2764 largeedittest2765 largeedittest2766 largeedittest2767 largeedittest2768 largeedittest2769 largeedittest277 largeedittest2770 largeedittest2771 largeedittest2772 largeedittest2773 largeedittest2774 largeedittest2775 largeedittest2776 largeedittest2777 largeedittest2778 largeedittest2779 largeedittest278 largeedittest2780 largeedittest2781 largeedittest2782 largeedittest2783 largeedittest2784 largeedittest2785 largeedittest2786 largeedittest2787 largeedittest2788 largeedittest2789 largeedittest279 largeedittest2790 largeedittest2791 largeedittest2792 largeedittest2793 largeedittest2794 largeedittest2795 largeedittest2796 largeedittest2797 largeedittest2798 largeedittest2799 largeedittest28 largeedittest280 largeedittest2800 largeedittest2801 largeedittest2802 largeedittest2803 largeedittest2804 largeedittest2805 largeedittest2806 largeedittest2807 largeedittest2808 largeedittest2809 largeedittest281 largeedittest2810 largeedittest2811 largeedittest2812 largeedittest2813 largeedittest2814 largeedittest2815 largeedittest2816 largeedittest2817 largeedittest2818 largeedittest2819 largeedittest282 largeedittest2820 largeedittest2821 largeedittest2822 largeedittest2823 largeedittest2824 largeedittest2825 largeedittest2826 largeedittest2827 largeedittest2828 largeedittest2829 largeedittest283 largeedittest2830 largeedittest2831 largeedittest2832 largeedittest2833 largeedittest2834 largeedittest2835 largeedittest2836 largeedittest2837 largeedittest2838 largeedittest2839 largeedittest284 largeedittest2840 largeedittest2841 largeedittest2842 largeedittest2843 largeedittest2844 largeedittest2845 largeedittest2846 largeedittest2847 largeedittest2848 largeedittest2849 largeedittest285 largeedittest2850 largeedittest2851 largeedittest2852 largeedittest2853 largeedittest2854 largeedittest2855 largeedittest2856 largeedittest2857 largeedittest2858 largeedittest2859 largeedittest286 largeedittest2860 largeedittest2861 largeedittest2862 largeedittest2863 largeedittest2864 largeedittest2865 largeedittest2866 largeedittest2867 largeedittest2868 largeedittest2869 largeedittest287 largeedittest2870 largeedittest2871 largeedittest2872 largeedittest2873 largeedittest2874 largeedittest2875 largeedittest2876 largeedittest2877 largeedittest2878 largeedittest2879 largeedittest288 largeedittest2880 largeedittest2881 largeedittest2882 largeedittest2883 largeedittest2884 largeedittest2885 largeedittest2886 largeedittest2887 largeedittest2888 largeedittest2889 largeedittest289 largeedittest2890 largeedittest2891 largeedittest2892 largeedittest2893 largeedittest2894 largeedittest2895 largeedittest2896 largeedittest2897 largeedittest2898 largeedittest2899 largeedittest29 largeedittest290 largeedittest2900 largeedittest2901 largeedittest2902 largeedittest2903 largeedittest2904 largeedittest2905 largeedittest2906 largeedittest2907 largeedittest2908 largeedittest2909 largeedittest291 largeedittest2910 largeedittest2911 largeedittest2912 largeedittest2913 largeedittest2914 largeedittest2915 largeedittest2916 largeedittest2917 largeedittest2918 largeedittest2919 largeedittest292 largeedittest2920 largeedittest2921 largeedittest2922 largeedittest2923 largeedittest2924 largeedittest2925 largeedittest2926 largeedittest2927 largeedittest2928 largeedittest2929 largeedittest293 largeedittest2930 largeedittest2931 largeedittest2932 largeedittest2933 largeedittest2934 largeedittest2935 largeedittest2936 largeedittest2937 largeedittest2938 largeedittest2939 largeedittest294 largeedittest2940 largeedittest2941 largeedittest2942 largeedittest2943 largeedittest2944 largeedittest2945 largeedittest2946 largeedittest2947 largeedittest2948 largeedittest2949 largeedittest295 largeedittest2950 largeedittest2951 largeedittest2952 largeedittest2953 largeedittest2954 largeedittest2955 largeedittest2956 largeedittest2957 largeedittest2958 largeedittest2959 largeedittest296 largeedittest2960 largeedittest2961 largeedittest2962 largeedittest2963 largeedittest2964 largeedittest2965 largeedittest2966 largeedittest2967 largeedittest2968 largeedittest2969 largeedittest297 largeedittest2970 largeedittest2971 largeedittest2972 largeedittest2973 largeedittest2974 largeedittest2975 largeedittest2976 largeedittest2977 largeedittest2978 largeedittest2979 largeedittest298 largeedittest2980 largeedittest2981 largeedittest2982 largeedittest2983 largeedittest2984 largeedittest2985 largeedittest2986 largeedittest2987 largeedittest2988 largeedittest2989 largeedittest299 largeedittest2990 largeedittest2991 largeedittest2992 largeedittest2993 largeedittest2994 largeedittest2995 largeedittest2996 largeedittest2997 largeedittest2998 largeedittest2999 largeedittest3 largeedittest30 largeedittest300 largeedittest3000 largeedittest3001 largeedittest3002 largeedittest3003 largeedittest3004 largeedittest3005 largeedittest3006 largeedittest3007 largeedittest3008 largeedittest3009 largeedittest301 largeedittest3010 largeedittest3011 largeedittest3012 largeedittest3013 largeedittest3014 largeedittest3015 largeedittest3016 largeedittest3017 largeedittest3018 largeedittest3019 largeedittest302 largeedittest3020 largeedittest3021 largeedittest3022 largeedittest3023 largeedittest3024 largeedittest3025 largeedittest3026 largeedittest3027 largeedittest3028 largeedittest3029 largeedittest303 largeedittest3030 largeedittest3031 largeedittest3032 largeedittest3033 largeedittest3034 largeedittest3035 largeedittest3036 largeedittest3037 largeedittest3038 largeedittest3039 largeedittest304 largeedittest3040 largeedittest3041 largeedittest3042 largeedittest3043 largeedittest3044 largeedittest3045 largeedittest3046 largeedittest3047 largeedittest3048 largeedittest3049 largeedittest305 largeedittest3050 largeedittest3051 largeedittest3052 largeedittest3053 largeedittest3054 largeedittest3055 largeedittest3056 largeedittest3057 largeedittest3058 largeedittest3059 largeedittest306 largeedittest3060 largeedittest3061 largeedittest3062 largeedittest3063 largeedittest3064 largeedittest3065 largeedittest3066 largeedittest3067 largeedittest3068 largeedittest3069 largeedittest307 largeedittest3070 largeedittest3071 largeedittest3072 largeedittest3073 largeedittest3074 largeedittest3075 largeedittest3076 largeedittest3077 largeedittest3078 largeedittest3079 largeedittest308 largeedittest3080 largeedittest3081 largeedittest3082 largeedittest3083 largeedittest3084 largeedittest3085 largeedittest3086 largeedittest3087 largeedittest3088 largeedittest3089 largeedittest309 largeedittest3090 largeedittest3091 largeedittest3092 largeedittest3093 largeedittest3094 largeedittest3095 largeedittest3096 largeedittest3097 largeedittest3098 largeedittest3099 largeedittest31 largeedittest310 largeedittest3100 largeedittest3101 largeedittest3102 largeedittest3103 largeedittest3104 largeedittest3105 largeedittest3106 largeedittest3107 largeedittest3108 largeedittest3109 largeedittest311 largeedittest3110 largeedittest3111 largeedittest3112 largeedittest3113 largeedittest3114 largeedittest3115 largeedittest3116 largeedittest3117 largeedittest3118 largeedittest3119 largeedittest312 largeedittest3120 largeedittest3121 largeedittest3122 largeedittest3123 largeedittest3124 largeedittest3125 largeedittest3126 largeedittest3127 largeedittest3128 largeedittest3129 largeedittest313 largeedittest3130 largeedittest3131 largeedittest3132 largeedittest3133 largeedittest3134 largeedittest3135 largeedittest3136 largeedittest3137 largeedittest3138 largeedittest3139 largeedittest314 largeedittest3140 largeedittest3141 largeedittest3142 largeedittest3143 largeedittest3144 largeedittest3145 largeedittest3146 largeedittest3147 largeedittest3148 largeedittest3149 largeedittest315 largeedittest3150 largeedittest3151 largeedittest3152 largeedittest3153 largeedittest3154 largeedittest3155 largeedittest3156 largeedittest3157 largeedittest3158 largeedittest3159 largeedittest316 largeedittest3160 largeedittest3161 largeedittest3162 largeedittest3163 largeedittest3164 largeedittest3165 largeedittest3166 largeedittest3167 largeedittest3168 largeedittest3169 largeedittest317 largeedittest3170 largeedittest3171 largeedittest3172 largeedittest3173 largeedittest3174 largeedittest3175 largeedittest3176 largeedittest3177 largeedittest3178 largeedittest3179 largeedittest318 largeedittest3180 largeedittest3181 largeedittest3182 largeedittest3183 largeedittest3184 largeedittest3185 largeedittest3186 largeedittest3187 largeedittest3188 largeedittest3189 largeedittest319 largeedittest3190 largeedittest3191 largeedittest3192 largeedittest3193 largeedittest3194 largeedittest3195 largeedittest3196 largeedittest3197 largeedittest3198 largeedittest3199 largeedittest32 largeedittest320 largeedittest3200 largeedittest3201 largeedittest3202 largeedittest3203 largeedittest3204 largeedittest3205 largeedittest3206 largeedittest3207 largeedittest3208 largeedittest3209 largeedittest321 largeedittest3210 largeedittest3211 largeedittest3212 largeedittest3213 largeedittest3214 largeedittest3215 largeedittest3216 largeedittest3217 largeedittest3218 largeedittest3219 largeedittest322 largeedittest3220 largeedittest3221 largeedittest3222 largeedittest3223 largeedittest3224 largeedittest3225 largeedittest3226 largeedittest3227 largeedittest3228 largeedittest3229 largeedittest323 largeedittest3230 largeedittest3231 largeedittest3232 largeedittest3233 largeedittest3234 largeedittest3235 largeedittest3236 largeedittest3237 largeedittest3238 largeedittest3239 largeedittest324 largeedittest3240 largeedittest3241 largeedittest3242 largeedittest3243 largeedittest3244 largeedittest3245 largeedittest3246 largeedittest3247 largeedittest3248 largeedittest3249 largeedittest325 largeedittest3250 largeedittest3251 largeedittest3252 largeedittest3253 largeedittest3254 largeedittest3255 largeedittest3256 largeedittest3257 largeedittest3258 largeedittest3259 largeedittest326 largeedittest3260 largeedittest3261 largeedittest3262 largeedittest3263 largeedittest3264 largeedittest3265 largeedittest3266 largeedittest3267 largeedittest3268 largeedittest3269 largeedittest327 largeedittest3270 largeedittest3271 largeedittest3272 largeedittest3273 largeedittest3274 largeedittest3275 largeedittest3276 largeedittest3277 largeedittest3278 largeedittest3279 largeedittest328 largeedittest3280 largeedittest3281 largeedittest3282 largeedittest3283 largeedittest3284 largeedittest3285 largeedittest3286 largeedittest3287 largeedittest3288 largeedittest3289 largeedittest329 largeedittest3290 largeedittest3291 largeedittest3292 largeedittest3293 largeedittest3294 largeedittest3295 largeedittest3296 largeedittest3297 largeedittest3298 largeedittest3299 largeedittest33 largeedittest330 largeedittest3300 largeedittest3301 largeedittest3302 largeedittest3303 largeedittest3304 largeedittest3305 largeedittest3306 largeedittest3307 largeedittest3308 largeedittest3309 largeedittest331 largeedittest3310 largeedittest3311 largeedittest3312 largeedittest3313 largeedittest3314 largeedittest3315 largeedittest3316 largeedittest3317 largeedittest3318 largeedittest3319 largeedittest332 largeedittest3320 largeedittest3321 largeedittest3322 largeedittest3323 largeedittest3324 largeedittest3325 largeedittest3326 largeedittest3327 largeedittest3328 largeedittest3329 largeedittest333 largeedittest3330 largeedittest3331 largeedittest3332 largeedittest3333 largeedittest3334 largeedittest3335 largeedittest3336 largeedittest3337 largeedittest3338 largeedittest3339 largeedittest334 largeedittest3340 largeedittest3341 largeedittest3342 largeedittest3343 largeedittest3344 largeedittest3345 largeedittest3346 largeedittest3347 largeedittest3348 largeedittest3349 largeedittest335 largeedittest3350 largeedittest3351 largeedittest3352 largeedittest3353 largeedittest3354 largeedittest3355 largeedittest3356 largeedittest3357 largeedittest3358 largeedittest3359 largeedittest336 largeedittest3360 largeedittest3361 largeedittest3362 largeedittest3363 largeedittest3364 largeedittest3365 largeedittest3366 largeedittest3367 largeedittest3368 largeedittest3369 largeedittest337 largeedittest3370 largeedittest3371 largeedittest3372 largeedittest3373 largeedittest3374 largeedittest3375 largeedittest3376 largeedittest3377 largeedittest3378 largeedittest3379 largeedittest338 largeedittest3380 largeedittest3381 largeedittest3382 largeedittest3383 largeedittest3384 largeedittest3385 largeedittest3386 largeedittest3387 largeedittest3388 largeedittest3389 largeedittest339 largeedittest3390 largeedittest3391 largeedittest3392 largeedittest3393 largeedittest3394 largeedittest3395 largeedittest3396 largeedittest3397 largeedittest3398 largeedittest3399 largeedittest34 largeedittest340 largeedittest3400 largeedittest3401 largeedittest3402 largeedittest3403 largeedittest3404 largeedittest3405 largeedittest3406 largeedittest3407 largeedittest3408 largeedittest3409 largeedittest341 largeedittest3410 largeedittest3411 largeedittest3412 largeedittest3413 largeedittest3414 largeedittest3415 largeedittest3416 largeedittest3417 largeedittest3418 largeedittest3419 largeedittest342 largeedittest3420 largeedittest3421 largeedittest3422 largeedittest3423 largeedittest3424 largeedittest3425 largeedittest3426 largeedittest3427 largeedittest3428 largeedittest3429 largeedittest343 largeedittest3430 largeedittest3431 largeedittest3432 largeedittest3433 largeedittest3434 largeedittest3435 largeedittest3436 largeedittest3437 largeedittest3438 largeedittest3439 largeedittest344 largeedittest3440 largeedittest3441 largeedittest3442 largeedittest3443 largeedittest3444 largeedittest3445 largeedittest3446 largeedittest3447 largeedittest3448 largeedittest3449 largeedittest345 largeedittest3450 largeedittest3451 largeedittest3452 largeedittest3453 largeedittest3454 largeedittest3455 largeedittest3456 largeedittest3457 largeedittest3458 largeedittest3459 largeedittest346 largeedittest3460 largeedittest3461 largeedittest3462 largeedittest3463 largeedittest3464 largeedittest3465 largeedittest3466 largeedittest3467 largeedittest3468 largeedittest3469 largeedittest347 largeedittest3470 largeedittest3471 largeedittest3472 largeedittest3473 largeedittest3474 largeedittest3475 largeedittest3476 largeedittest3477 largeedittest3478 largeedittest3479 largeedittest348 largeedittest3480 largeedittest3481 largeedittest3482 largeedittest3483 largeedittest3484 largeedittest3485 largeedittest3486 largeedittest3487 largeedittest3488 largeedittest3489 largeedittest349 largeedittest3490 largeedittest3491 largeedittest3492 largeedittest3493 largeedittest3494 largeedittest3495 largeedittest3496 largeedittest3497 largeedittest3498 largeedittest3499 largeedittest35 largeedittest350 largeedittest3500 largeedittest3501 largeedittest3502 largeedittest3503 largeedittest3504 largeedittest3505 largeedittest3506 largeedittest3507 largeedittest3508 largeedittest3509 largeedittest351 largeedittest3510 largeedittest3511 largeedittest3512 largeedittest3513 largeedittest3514 largeedittest3515 largeedittest3516 largeedittest3517 largeedittest3518 largeedittest3519 largeedittest352 largeedittest3520 largeedittest3521 largeedittest3522 largeedittest3523 largeedittest3524 largeedittest3525 largeedittest3526 largeedittest3527 largeedittest3528 largeedittest3529 largeedittest353 largeedittest3530 largeedittest3531 largeedittest3532 largeedittest3533 largeedittest3534 largeedittest3535 largeedittest3536 largeedittest3537 largeedittest3538 largeedittest3539 largeedittest354 largeedittest3540 largeedittest3541 largeedittest3542 largeedittest3543 largeedittest3544 largeedittest3545 largeedittest3546 largeedittest3547 largeedittest3548 largeedittest3549 largeedittest355 largeedittest3550 largeedittest3551 largeedittest3552 largeedittest3553 largeedittest3554 largeedittest3555 largeedittest3556 largeedittest3557 largeedittest3558 largeedittest3559 largeedittest356 largeedittest3560 largeedittest3561 largeedittest3562 largeedittest3563 largeedittest3564 largeedittest3565 largeedittest3566 largeedittest3567 largeedittest3568 largeedittest3569 largeedittest357 largeedittest3570 largeedittest3571 largeedittest3572 largeedittest3573 largeedittest3574 largeedittest3575 largeedittest3576 largeedittest3577 largeedittest3578 largeedittest3579 largeedittest358 largeedittest3580 largeedittest3581 largeedittest3582 largeedittest3583 largeedittest3584 largeedittest3585 largeedittest3586 largeedittest3587 largeedittest3588 largeedittest3589 largeedittest359 largeedittest3590 largeedittest3591 largeedittest3592 largeedittest3593 largeedittest3594 largeedittest3595 largeedittest3596 largeedittest3597 largeedittest3598 largeedittest3599 largeedittest36 largeedittest360 largeedittest3600 largeedittest3601 largeedittest3602 largeedittest3603 largeedittest3604 largeedittest3605 largeedittest3606 largeedittest3607 largeedittest3608 largeedittest3609 largeedittest361 largeedittest3610 largeedittest3611 largeedittest3612 largeedittest3613 largeedittest3614 largeedittest3615 largeedittest3616 largeedittest3617 largeedittest3618 largeedittest3619 largeedittest362 largeedittest3620 largeedittest3621 largeedittest3622 largeedittest3623 largeedittest3624 largeedittest3625 largeedittest3626 largeedittest3627 largeedittest3628 largeedittest3629 largeedittest363 largeedittest3630 largeedittest3631 largeedittest3632 largeedittest3633 largeedittest3634 largeedittest3635 largeedittest3636 largeedittest3637 largeedittest3638 largeedittest3639 largeedittest364 largeedittest3640 largeedittest3641 largeedittest3642 largeedittest3643 largeedittest3644 largeedittest3645 largeedittest3646 largeedittest3647 largeedittest3648 largeedittest3649 largeedittest365 largeedittest3650 largeedittest3651 largeedittest3652 largeedittest3653 largeedittest3654 largeedittest3655 largeedittest3656 largeedittest3657 largeedittest3658 largeedittest3659 largeedittest366 largeedittest3660 largeedittest3661 largeedittest3662 largeedittest3663 largeedittest3664 largeedittest3665 largeedittest3666 largeedittest3667 largeedittest3668 largeedittest3669 largeedittest367 largeedittest3670 largeedittest3671 largeedittest3672 largeedittest3673 largeedittest3674 largeedittest3675 largeedittest3676 largeedittest3677 largeedittest3678 largeedittest3679 largeedittest368 largeedittest3680 largeedittest3681 largeedittest3682 largeedittest3683 largeedittest3684 largeedittest3685 largeedittest3686 largeedittest3687 largeedittest3688 largeedittest3689 largeedittest369 largeedittest3690 largeedittest3691 largeedittest3692 largeedittest3693 largeedittest3694 largeedittest3695 largeedittest3696 largeedittest3697 largeedittest3698 largeedittest3699 largeedittest37 largeedittest370 largeedittest3700 largeedittest3701 largeedittest3702 largeedittest3703 largeedittest3704 largeedittest3705 largeedittest3706 largeedittest3707 largeedittest3708 largeedittest3709 largeedittest371 largeedittest3710 largeedittest3711 largeedittest3712 largeedittest3713 largeedittest3714 largeedittest3715 largeedittest3716 largeedittest3717 largeedittest3718 largeedittest3719 largeedittest372 largeedittest3720 largeedittest3721 largeedittest3722 largeedittest3723 largeedittest3724 largeedittest3725 largeedittest3726 largeedittest3727 largeedittest3728 largeedittest3729 largeedittest373 largeedittest3730 largeedittest3731 largeedittest3732 largeedittest3733 largeedittest3734 largeedittest3735 largeedittest3736 largeedittest3737 largeedittest3738 largeedittest3739 largeedittest374 largeedittest3740 largeedittest3741 largeedittest3742 largeedittest3743 largeedittest3744 largeedittest3745 largeedittest3746 largeedittest3747 largeedittest3748 largeedittest3749 largeedittest375 largeedittest3750 largeedittest3751 largeedittest3752 largeedittest3753 largeedittest3754 largeedittest3755 largeedittest3756 largeedittest3757 largeedittest3758 largeedittest3759 largeedittest376 largeedittest3760 largeedittest3761 largeedittest3762 largeedittest3763 largeedittest3764 largeedittest3765 largeedittest3766 largeedittest3767 largeedittest3768 largeedittest3769 largeedittest377 largeedittest3770 largeedittest3771 largeedittest3772 largeedittest3773 largeedittest3774 largeedittest3775 largeedittest3776 largeedittest3777 largeedittest3778 largeedittest3779 largeedittest378 largeedittest3780 largeedittest3781 largeedittest3782 largeedittest3783 largeedittest3784 largeedittest3785 largeedittest3786 largeedittest3787 largeedittest3788 largeedittest3789 largeedittest379 largeedittest3790 largeedittest3791 largeedittest3792 largeedittest3793 largeedittest3794 largeedittest3795 largeedittest3796 largeedittest3797 largeedittest3798 largeedittest3799 largeedittest38 largeedittest380 largeedittest3800 largeedittest3801 largeedittest3802 largeedittest3803 largeedittest3804 largeedittest3805 largeedittest3806 largeedittest3807 largeedittest3808 largeedittest3809 largeedittest381 largeedittest3810 largeedittest3811 largeedittest3812 largeedittest3813 largeedittest3814 largeedittest3815 largeedittest3816 largeedittest3817 largeedittest3818 largeedittest3819 largeedittest382 largeedittest3820 largeedittest3821 largeedittest3822 largeedittest3823 largeedittest3824 largeedittest3825 largeedittest3826 largeedittest3827 largeedittest3828 largeedittest3829 largeedittest383 largeedittest3830 largeedittest3831 largeedittest3832 largeedittest3833 largeedittest3834 largeedittest3835 largeedittest3836 largeedittest3837 largeedittest3838 largeedittest3839 largeedittest384 largeedittest3840 largeedittest3841 largeedittest3842 largeedittest3843 largeedittest3844 largeedittest3845 largeedittest3846 largeedittest3847 largeedittest3848 largeedittest3849 largeedittest385 largeedittest3850 largeedittest3851 largeedittest3852 largeedittest3853 largeedittest3854 largeedittest3855 largeedittest3856 largeedittest3857 largeedittest3858 largeedittest3859 largeedittest386 largeedittest3860 largeedittest3861 largeedittest3862 largeedittest3863 largeedittest3864 largeedittest3865 largeedittest3866 largeedittest3867 largeedittest3868 largeedittest3869 largeedittest387 largeedittest3870 largeedittest3871 largeedittest3872 largeedittest3873 largeedittest3874 largeedittest3875 largeedittest3876 largeedittest3877 largeedittest3878 largeedittest3879 largeedittest388 largeedittest3880 largeedittest3881 largeedittest3882 largeedittest3883 largeedittest3884 largeedittest3885 largeedittest3886 largeedittest3887 largeedittest3888 largeedittest3889 largeedittest389 largeedittest3890 largeedittest3891 largeedittest3892 largeedittest3893 largeedittest3894 largeedittest3895 largeedittest3896 largeedittest3897 largeedittest3898 largeedittest3899 largeedittest39 largeedittest390 largeedittest3900 largeedittest3901 largeedittest3902 largeedittest3903 largeedittest3904 largeedittest3905 largeedittest3906 largeedittest3907 largeedittest3908 largeedittest3909 largeedittest391 largeedittest3910 largeedittest3911 largeedittest3912 largeedittest3913 largeedittest3914 largeedittest3915 largeedittest3916 largeedittest3917 largeedittest3918 largeedittest3919 largeedittest392 largeedittest3920 largeedittest3921 largeedittest3922 largeedittest3923 largeedittest3924 largeedittest3925 largeedittest3926 largeedittest3927 largeedittest3928 largeedittest3929 largeedittest393 largeedittest3930 largeedittest3931 largeedittest3932 largeedittest3933 largeedittest3934 largeedittest3935 largeedittest3936 largeedittest3937 largeedittest3938 largeedittest3939 largeedittest394 largeedittest3940 largeedittest3941 largeedittest3942 largeedittest3943 largeedittest3944 largeedittest3945 largeedittest3946 largeedittest3947 largeedittest3948 largeedittest3949 largeedittest395 largeedittest3950 largeedittest3951 largeedittest3952 largeedittest3953 largeedittest3954 largeedittest3955 largeedittest3956 largeedittest3957 largeedittest3958 largeedittest3959 largeedittest396 largeedittest3960 largeedittest3961 largeedittest3962 largeedittest3963 largeedittest3964 largeedittest3965 largeedittest3966 largeedittest3967 largeedittest3968 largeedittest3969 largeedittest397 largeedittest3970 largeedittest3971 largeedittest3972 largeedittest3973 largeedittest3974 largeedittest3975 largeedittest3976 largeedittest3977 largeedittest3978 largeedittest3979 largeedittest398 largeedittest3980 largeedittest3981 largeedittest3982 largeedittest3983 largeedittest3984 largeedittest3985 largeedittest3986 largeedittest3987 largeedittest3988 largeedittest3989 largeedittest399 largeedittest3990 largeedittest3991 largeedittest3992 largeedittest3993 largeedittest3994 largeedittest3995 largeedittest3996 largeedittest3997 largeedittest3998 largeedittest3999 largeedittest4 largeedittest40 largeedittest400 largeedittest4000 largeedittest4001 largeedittest4002 largeedittest4003 largeedittest4004 largeedittest4005 largeedittest4006 largeedittest4007 largeedittest4008 largeedittest4009 largeedittest401 largeedittest4010 largeedittest4011 largeedittest4012 largeedittest4013 largeedittest4014 largeedittest4015 largeedittest4016 largeedittest4017 largeedittest4018 largeedittest4019 largeedittest402 largeedittest4020 largeedittest4021 largeedittest4022 largeedittest4023 largeedittest4024 largeedittest4025 largeedittest4026 largeedittest4027 largeedittest4028 largeedittest4029 largeedittest403 largeedittest4030 largeedittest4031 largeedittest4032 largeedittest4033 largeedittest4034 largeedittest4035 largeedittest4036 largeedittest4037 largeedittest4038 largeedittest4039 largeedittest404 largeedittest4040 largeedittest4041 largeedittest4042 largeedittest4043 largeedittest4044 largeedittest4045 largeedittest4046 largeedittest4047 largeedittest4048 largeedittest4049 largeedittest405 largeedittest4050 largeedittest4051 largeedittest4052 largeedittest4053 largeedittest4054 largeedittest4055 largeedittest4056 largeedittest4057 largeedittest4058 largeedittest4059 largeedittest406 largeedittest4060 largeedittest4061 largeedittest4062 largeedittest4063 largeedittest4064 largeedittest4065 largeedittest4066 largeedittest4067 largeedittest4068 largeedittest4069 largeedittest407 largeedittest4070 largeedittest4071 largeedittest4072 largeedittest4073 largeedittest4074 largeedittest4075 largeedittest4076 largeedittest4077 largeedittest4078 largeedittest4079 largeedittest408 largeedittest4080 largeedittest4081 largeedittest4082 largeedittest4083 largeedittest4084 largeedittest4085 largeedittest4086 largeedittest4087 largeedittest4088 largeedittest4089 largeedittest409 largeedittest4090 largeedittest4091 largeedittest4092 largeedittest4093 largeedittest4094 largeedittest4095 largeedittest4096 largeedittest4097 largeedittest4098 largeedittest4099 largeedittest41 largeedittest410 largeedittest4100 largeedittest4101 largeedittest4102 largeedittest4103 largeedittest4104 largeedittest4105 largeedittest4106 largeedittest4107 largeedittest4108 largeedittest4109 largeedittest411 largeedittest4110 largeedittest4111 largeedittest4112 largeedittest4113 largeedittest4114 largeedittest4115 largeedittest4116 largeedittest4117 largeedittest4118 largeedittest4119 largeedittest412 largeedittest4120 largeedittest4121 largeedittest4122 largeedittest4123 largeedittest4124 largeedittest4125 largeedittest4126 largeedittest4127 largeedittest4128 largeedittest4129 largeedittest413 largeedittest4130 largeedittest4131 largeedittest4132 largeedittest4133 largeedittest4134 largeedittest4135 largeedittest4136 largeedittest4137 largeedittest4138 largeedittest4139 largeedittest414 largeedittest4140 largeedittest4141 largeedittest4142 largeedittest4143 largeedittest4144 largeedittest4145 largeedittest4146 largeedittest4147 largeedittest4148 largeedittest4149 largeedittest415 largeedittest4150 largeedittest4151 largeedittest4152 largeedittest4153 largeedittest4154 largeedittest4155 largeedittest4156 largeedittest4157 largeedittest4158 largeedittest4159 largeedittest416 largeedittest4160 largeedittest4161 largeedittest4162 largeedittest4163 largeedittest4164 largeedittest4165 largeedittest4166 largeedittest4167 largeedittest4168 largeedittest4169 largeedittest417 largeedittest4170 largeedittest4171 largeedittest4172 largeedittest4173 largeedittest4174 largeedittest4175 largeedittest4176 largeedittest4177 largeedittest4178 largeedittest4179 largeedittest418 largeedittest4180 largeedittest4181 largeedittest4182 largeedittest4183 largeedittest4184 largeedittest4185 largeedittest4186 largeedittest4187 largeedittest4188 largeedittest4189 largeedittest419 largeedittest4190 largeedittest4191 largeedittest4192 largeedittest4193 largeedittest4194 largeedittest4195 largeedittest4196 largeedittest4197 largeedittest4198 largeedittest4199 largeedittest42 largeedittest420 largeedittest4200 largeedittest4201 largeedittest4202 largeedittest4203 largeedittest4204 largeedittest4205 largeedittest4206 largeedittest4207 largeedittest4208 largeedittest4209 largeedittest421 largeedittest4210 largeedittest4211 largeedittest4212 largeedittest4213 largeedittest4214 largeedittest4215 largeedittest4216 largeedittest4217 largeedittest4218 largeedittest4219 largeedittest422 largeedittest4220 largeedittest4221 largeedittest4222 largeedittest4223 largeedittest4224 largeedittest4225 largeedittest4226 largeedittest4227 largeedittest4228 largeedittest4229 largeedittest423 largeedittest4230 largeedittest4231 largeedittest4232 largeedittest4233 largeedittest4234 largeedittest4235 largeedittest4236 largeedittest4237 largeedittest4238 largeedittest4239 largeedittest424 largeedittest4240 largeedittest4241 largeedittest4242 largeedittest4243 largeedittest4244 largeedittest4245 largeedittest4246 largeedittest4247 largeedittest4248 largeedittest4249 largeedittest425 largeedittest4250 largeedittest4251 largeedittest4252 largeedittest4253 largeedittest4254 largeedittest4255 largeedittest4256 largeedittest4257 largeedittest4258 largeedittest4259 largeedittest426 largeedittest4260 largeedittest4261 largeedittest4262 largeedittest4263 largeedittest4264 largeedittest4265 largeedittest4266 largeedittest4267 largeedittest4268 largeedittest4269 largeedittest427 largeedittest4270 largeedittest4271 largeedittest4272 largeedittest4273 largeedittest4274 largeedittest4275 largeedittest4276 largeedittest4277 largeedittest4278 largeedittest4279 largeedittest428 largeedittest4280 largeedittest4281 largeedittest4282 largeedittest4283 largeedittest4284 largeedittest4285 largeedittest4286 largeedittest4287 largeedittest4288 largeedittest4289 largeedittest429 largeedittest4290 largeedittest4291 largeedittest4292 largeedittest4293 largeedittest4294 largeedittest4295 largeedittest4296 largeedittest4297 largeedittest4298 largeedittest4299 largeedittest43 largeedittest430 largeedittest4300 largeedittest4301 largeedittest4302 largeedittest4303 largeedittest4304 largeedittest4305 largeedittest4306 largeedittest4307 largeedittest4308 largeedittest4309 largeedittest431 largeedittest4310 largeedittest4311 largeedittest4312 largeedittest4313 largeedittest4314 largeedittest4315 largeedittest4316 largeedittest4317 largeedittest4318 largeedittest4319 largeedittest432 largeedittest4320 largeedittest4321 largeedittest4322 largeedittest4323 largeedittest4324 largeedittest4325 largeedittest4326 largeedittest4327 largeedittest4328 largeedittest4329 largeedittest433 largeedittest4330 largeedittest4331 largeedittest4332 largeedittest4333 largeedittest4334 largeedittest4335 largeedittest4336 largeedittest4337 largeedittest4338 largeedittest4339 largeedittest434 largeedittest4340 largeedittest4341 largeedittest4342 largeedittest4343 largeedittest4344 largeedittest4345 largeedittest4346 largeedittest4347 largeedittest4348 largeedittest4349 largeedittest435 largeedittest4350 largeedittest4351 largeedittest4352 largeedittest4353 largeedittest4354 largeedittest4355 largeedittest4356 largeedittest4357 largeedittest4358 largeedittest4359 largeedittest436 largeedittest4360 largeedittest4361 largeedittest4362 largeedittest4363 largeedittest4364 largeedittest4365 largeedittest4366 largeedittest4367 largeedittest4368 largeedittest4369 largeedittest437 largeedittest4370 largeedittest4371 largeedittest4372 largeedittest4373 largeedittest4374 largeedittest4375 largeedittest4376 largeedittest4377 largeedittest4378 largeedittest4379 largeedittest438 largeedittest4380 largeedittest4381 largeedittest4382 largeedittest4383 largeedittest4384 largeedittest4385 largeedittest4386 largeedittest4387 largeedittest4388 largeedittest4389 largeedittest439 largeedittest4390 largeedittest4391 largeedittest4392 largeedittest4393 largeedittest4394 largeedittest4395 largeedittest4396 largeedittest4397 largeedittest4398 largeedittest4399 largeedittest44 largeedittest440 largeedittest4400 largeedittest4401 largeedittest4402 largeedittest4403 largeedittest4404 largeedittest4405 largeedittest4406 largeedittest4407 largeedittest4408 largeedittest4409 largeedittest441 largeedittest4410 largeedittest4411 largeedittest4412 largeedittest4413 largeedittest4414 largeedittest4415 largeedittest4416 largeedittest4417 largeedittest4418 largeedittest4419 largeedittest442 largeedittest4420 largeedittest4421 largeedittest4422 largeedittest4423 largeedittest4424 largeedittest4425 largeedittest4426 largeedittest4427 largeedittest4428 largeedittest4429 largeedittest443 largeedittest4430 largeedittest4431 largeedittest4432 largeedittest4433 largeedittest4434 largeedittest4435 largeedittest4436 largeedittest4437 largeedittest4438 largeedittest4439 largeedittest444 largeedittest4440 largeedittest4441 largeedittest4442 largeedittest4443 largeedittest4444 largeedittest4445 largeedittest4446 largeedittest4447 largeedittest4448 largeedittest4449 largeedittest445 largeedittest4450 largeedittest4451 largeedittest4452 largeedittest4453 largeedittest4454 largeedittest4455 largeedittest4456 largeedittest4457 largeedittest4458 largeedittest4459 largeedittest446 largeedittest4460 largeedittest4461 largeedittest4462 largeedittest4463 largeedittest4464 largeedittest4465 largeedittest4466 largeedittest4467 largeedittest4468 largeedittest4469 largeedittest447 largeedittest4470 largeedittest4471 largeedittest4472 largeedittest4473 largeedittest4474 largeedittest4475 largeedittest4476 largeedittest4477 largeedittest4478 largeedittest4479 largeedittest448 largeedittest4480 largeedittest4481 largeedittest4482 largeedittest4483 largeedittest4484 largeedittest4485 largeedittest4486 largeedittest4487 largeedittest4488 largeedittest4489 largeedittest449 largeedittest4490 largeedittest4491 largeedittest4492 largeedittest4493 largeedittest4494 largeedittest4495 largeedittest4496 largeedittest4497 largeedittest4498 largeedittest4499 largeedittest45 largeedittest450 largeedittest4500 largeedittest4501 largeedittest4502 largeedittest4503 largeedittest4504 largeedittest4505 largeedittest4506 largeedittest4507 largeedittest4508 largeedittest4509 largeedittest451 largeedittest4510 largeedittest4511 largeedittest4512 largeedittest4513 largeedittest4514 largeedittest4515 largeedittest4516 largeedittest4517 largeedittest4518 largeedittest4519 largeedittest452 largeedittest4520 largeedittest4521 largeedittest4522 largeedittest4523 largeedittest4524 largeedittest4525 largeedittest4526 largeedittest4527 largeedittest4528 largeedittest4529 largeedittest453 largeedittest4530 largeedittest4531 largeedittest4532 largeedittest4533 largeedittest4534 largeedittest4535 largeedittest4536 largeedittest4537 largeedittest4538 largeedittest4539 largeedittest454 largeedittest4540 largeedittest4541 largeedittest4542 largeedittest4543 largeedittest4544 largeedittest4545 largeedittest4546 largeedittest4547 largeedittest4548 largeedittest4549 largeedittest455 largeedittest4550 largeedittest4551 largeedittest4552 largeedittest4553 largeedittest4554 largeedittest4555 largeedittest4556 largeedittest4557 largeedittest4558 largeedittest4559 largeedittest456 largeedittest4560 largeedittest4561 largeedittest4562 largeedittest4563 largeedittest4564 largeedittest4565 largeedittest4566 largeedittest4567 largeedittest4568 largeedittest4569 largeedittest457 largeedittest4570 largeedittest4571 largeedittest4572 largeedittest4573 largeedittest4574 largeedittest4575 largeedittest4576 largeedittest4577 largeedittest4578 largeedittest4579 largeedittest458 largeedittest4580 largeedittest4581 largeedittest4582 largeedittest4583 largeedittest4584 largeedittest4585 largeedittest4586 largeedittest4587 largeedittest4588 largeedittest4589 largeedittest459 largeedittest4590 largeedittest4591 largeedittest4592 largeedittest4593 largeedittest4594 largeedittest4595 largeedittest4596 largeedittest4597 largeedittest4598 largeedittest4599 largeedittest46 largeedittest460 largeedittest4600 largeedittest4601 largeedittest4602 largeedittest4603 largeedittest4604 largeedittest4605 largeedittest4606 largeedittest4607 largeedittest4608 largeedittest4609 largeedittest461 largeedittest4610 largeedittest4611 largeedittest4612 largeedittest4613 largeedittest4614 largeedittest4615 largeedittest4616 largeedittest4617 largeedittest4618 largeedittest4619 largeedittest462 largeedittest4620 largeedittest4621 largeedittest4622 largeedittest4623 largeedittest4624 largeedittest4625 largeedittest4626 largeedittest4627 largeedittest4628 largeedittest4629 largeedittest463 largeedittest4630 largeedittest4631 largeedittest4632 largeedittest4633 largeedittest4634 largeedittest4635 largeedittest4636 largeedittest4637 largeedittest4638 largeedittest4639 largeedittest464 largeedittest4640 largeedittest4641 largeedittest4642 largeedittest4643 largeedittest4644 largeedittest4645 largeedittest4646 largeedittest4647 largeedittest4648 largeedittest4649 largeedittest465 largeedittest4650 largeedittest4651 largeedittest4652 largeedittest4653 largeedittest4654 largeedittest4655 largeedittest4656 largeedittest4657 largeedittest4658 largeedittest4659 largeedittest466 largeedittest4660 largeedittest4661 largeedittest4662 largeedittest4663 largeedittest4664 largeedittest4665 largeedittest4666 largeedittest4667 largeedittest4668 largeedittest4669 largeedittest467 largeedittest4670 largeedittest4671 largeedittest4672 largeedittest4673 largeedittest4674 largeedittest4675 largeedittest4676 largeedittest4677 largeedittest4678 largeedittest4679 largeedittest468 largeedittest4680 largeedittest4681 largeedittest4682 largeedittest4683 largeedittest4684 largeedittest4685 largeedittest4686 largeedittest4687 largeedittest4688 largeedittest4689 largeedittest469 largeedittest4690 largeedittest4691 largeedittest4692 largeedittest4693 largeedittest4694 largeedittest4695 largeedittest4696 largeedittest4697 largeedittest4698 largeedittest4699 largeedittest47 largeedittest470 largeedittest4700 largeedittest4701 largeedittest4702 largeedittest4703 largeedittest4704 largeedittest4705 largeedittest4706 largeedittest4707 largeedittest4708 largeedittest4709 largeedittest471 largeedittest4710 largeedittest4711 largeedittest4712 largeedittest4713 largeedittest4714 largeedittest4715 largeedittest4716 largeedittest4717 largeedittest4718 largeedittest4719 largeedittest472 largeedittest4720 largeedittest4721 largeedittest4722 largeedittest4723 largeedittest4724 largeedittest4725 largeedittest4726 largeedittest4727 largeedittest4728 largeedittest4729 largeedittest473 largeedittest4730 largeedittest4731 largeedittest4732 largeedittest4733 largeedittest4734 largeedittest4735 largeedittest4736 largeedittest4737 largeedittest4738 largeedittest4739 largeedittest474 largeedittest4740 largeedittest4741 largeedittest4742 largeedittest4743 largeedittest4744 largeedittest4745 largeedittest4746 largeedittest4747 largeedittest4748 largeedittest4749 largeedittest475 largeedittest4750 largeedittest4751 largeedittest4752 largeedittest4753 largeedittest4754 largeedittest4755 largeedittest4756 largeedittest4757 largeedittest4758 largeedittest4759 largeedittest476 largeedittest4760 largeedittest4761 largeedittest4762 largeedittest4763 largeedittest4764 largeedittest4765 largeedittest4766 largeedittest4767 largeedittest4768 largeedittest4769 largeedittest477 largeedittest4770 largeedittest4771 largeedittest4772 largeedittest4773 largeedittest4774 largeedittest4775 largeedittest4776 largeedittest4777 largeedittest4778 largeedittest4779 largeedittest478 largeedittest4780 largeedittest4781 largeedittest4782 largeedittest4783 largeedittest4784 largeedittest4785 largeedittest4786 largeedittest4787 largeedittest4788 largeedittest4789 largeedittest479 largeedittest4790 largeedittest4791 largeedittest4792 largeedittest4793 largeedittest4794 largeedittest4795 largeedittest4796 largeedittest4797 largeedittest4798 largeedittest4799 largeedittest48 largeedittest480 largeedittest4800 largeedittest4801 largeedittest4802 largeedittest4803 largeedittest4804 largeedittest4805 largeedittest4806 largeedittest4807 largeedittest4808 largeedittest4809 largeedittest481 largeedittest4810 largeedittest4811 largeedittest4812 largeedittest4813 largeedittest4814 largeedittest4815 largeedittest4816 largeedittest4817 largeedittest4818 largeedittest4819 largeedittest482 largeedittest4820 largeedittest4821 largeedittest4822 largeedittest4823 largeedittest4824 largeedittest4825 largeedittest4826 largeedittest4827 largeedittest4828 largeedittest4829 largeedittest483 largeedittest4830 largeedittest4831 largeedittest4832 largeedittest4833 largeedittest4834 largeedittest4835 largeedittest4836 largeedittest4837 largeedittest4838 largeedittest4839 largeedittest484 largeedittest4840 largeedittest4841 largeedittest4842 largeedittest4843 largeedittest4844 largeedittest4845 largeedittest4846 largeedittest4847 largeedittest4848 largeedittest4849 largeedittest485 largeedittest4850 largeedittest4851 largeedittest4852 largeedittest4853 largeedittest4854 largeedittest4855 largeedittest4856 largeedittest4857 largeedittest4858 largeedittest4859 largeedittest486 largeedittest4860 largeedittest4861 largeedittest4862 largeedittest4863 largeedittest4864 largeedittest4865 largeedittest4866 largeedittest4867 largeedittest4868 largeedittest4869 largeedittest487 largeedittest4870 largeedittest4871 largeedittest4872 largeedittest4873 largeedittest4874 largeedittest4875 largeedittest4876 largeedittest4877 largeedittest4878 largeedittest4879 largeedittest488 largeedittest4880 largeedittest4881 largeedittest4882 largeedittest4883 largeedittest4884 largeedittest4885 largeedittest4886 largeedittest4887 largeedittest4888 largeedittest4889 largeedittest489 largeedittest4890 largeedittest4891 largeedittest4892 largeedittest4893 largeedittest4894 largeedittest4895 largeedittest4896 largeedittest4897 largeedittest4898 largeedittest4899 largeedittest49 largeedittest490 largeedittest4900 largeedittest4901 largeedittest4902 largeedittest4903 largeedittest4904 largeedittest4905 largeedittest4906 largeedittest4907 largeedittest4908 largeedittest4909 largeedittest491 largeedittest4910 largeedittest4911 largeedittest4912 largeedittest4913 largeedittest4914 largeedittest4915 largeedittest4916 largeedittest4917 largeedittest4918 largeedittest4919 largeedittest492 largeedittest4920 largeedittest4921 largeedittest4922 largeedittest4923 largeedittest4924 largeedittest4925 largeedittest4926 largeedittest4927 largeedittest4928 largeedittest4929 largeedittest493 largeedittest4930 largeedittest4931 largeedittest4932 largeedittest4933 largeedittest4934 largeedittest4935 largeedittest4936 largeedittest4937 largeedittest4938 largeedittest4939 largeedittest494 largeedittest4940 largeedittest4941 largeedittest4942 largeedittest4943 largeedittest4944 largeedittest4945 largeedittest4946 largeedittest4947 largeedittest4948 largeedittest4949 largeedittest495 largeedittest4950 largeedittest4951 largeedittest4952 largeedittest4953 largeedittest4954 largeedittest4955 largeedittest4956 largeedittest4957 largeedittest4958 largeedittest4959 largeedittest496 largeedittest4960 largeedittest4961 largeedittest4962 largeedittest4963 largeedittest4964 largeedittest4965 largeedittest4966 largeedittest4967 largeedittest4968 largeedittest4969 largeedittest497 largeedittest4970 largeedittest4971 largeedittest4972 largeedittest4973 largeedittest4974 largeedittest4975 largeedittest4976 largeedittest4977 largeedittest4978 largeedittest4979 largeedittest498 largeedittest4980 largeedittest4981 largeedittest4982 largeedittest4983 largeedittest4984 largeedittest4985 largeedittest4986 largeedittest4987 largeedittest4988 largeedittest4989 largeedittest499 largeedittest4990 largeedittest4991 largeedittest4992 largeedittest4993 largeedittest4994 largeedittest4995 largeedittest4996 largeedittest4997 largeedittest4998 largeedittest4999 largeedittest5 largeedittest50 largeedittest500 largeedittest5000 largeedittest5001 largeedittest5002 largeedittest5003 largeedittest5004 largeedittest5005 largeedittest5006 largeedittest5007 largeedittest5008 largeedittest5009 largeedittest501 largeedittest5010 largeedittest5011 largeedittest5012 largeedittest5013 largeedittest5014 largeedittest5015 largeedittest5016 largeedittest5017 largeedittest5018 largeedittest5019 largeedittest502 largeedittest5020 largeedittest5021 largeedittest5022 largeedittest5023 largeedittest5024 largeedittest5025 largeedittest5026 largeedittest5027 largeedittest5028 largeedittest5029 largeedittest503 largeedittest5030 largeedittest5031 largeedittest5032 largeedittest5033 largeedittest5034 largeedittest5035 largeedittest5036 largeedittest5037 largeedittest5038 largeedittest5039 largeedittest504 largeedittest5040 largeedittest5041 largeedittest5042 largeedittest5043 largeedittest5044 largeedittest5045 largeedittest5046 largeedittest5047 largeedittest5048 largeedittest5049 largeedittest505 largeedittest5050 largeedittest5051 largeedittest5052 largeedittest5053 largeedittest5054 largeedittest5055 largeedittest5056 largeedittest5057 largeedittest5058 largeedittest5059 largeedittest506 largeedittest5060 largeedittest5061 largeedittest5062 largeedittest5063 largeedittest5064 largeedittest5065 largeedittest5066 largeedittest5067 largeedittest5068 largeedittest5069 largeedittest507 largeedittest5070 largeedittest5071 largeedittest5072 largeedittest5073 largeedittest5074 largeedittest5075 largeedittest5076 largeedittest5077 largeedittest5078 largeedittest5079 largeedittest508 largeedittest5080 largeedittest5081 largeedittest5082 largeedittest5083 largeedittest5084 largeedittest5085 largeedittest5086 largeedittest5087 largeedittest5088 largeedittest5089 largeedittest509 largeedittest5090 largeedittest5091 largeedittest5092 largeedittest5093 largeedittest5094 largeedittest5095 largeedittest5096 largeedittest5097 largeedittest5098 largeedittest5099 largeedittest51 largeedittest510 largeedittest5100 largeedittest5101 largeedittest5102 largeedittest5103 largeedittest5104 largeedittest5105 largeedittest5106 largeedittest5107 largeedittest5108 largeedittest5109 largeedittest511 largeedittest5110 largeedittest5111 largeedittest5112 largeedittest5113 largeedittest5114 largeedittest5115 largeedittest5116 largeedittest5117 largeedittest5118 largeedittest5119 largeedittest512 largeedittest5120 largeedittest5121 largeedittest5122 largeedittest5123 largeedittest5124 largeedittest5125 largeedittest5126 largeedittest5127 largeedittest5128 largeedittest5129 largeedittest513 largeedittest5130 largeedittest5131 largeedittest5132 largeedittest5133 largeedittest5134 largeedittest5135 largeedittest5136 largeedittest5137 largeedittest5138 largeedittest5139 largeedittest514 largeedittest5140 largeedittest5141 largeedittest5142 largeedittest5143 largeedittest5144 largeedittest5145 largeedittest5146 largeedittest5147 largeedittest5148 largeedittest5149 largeedittest515 largeedittest5150 largeedittest5151 largeedittest5152 largeedittest5153 largeedittest5154 largeedittest5155 largeedittest5156 largeedittest5157 largeedittest5158 largeedittest5159 largeedittest516 largeedittest5160 largeedittest5161 largeedittest5162 largeedittest5163 largeedittest5164 largeedittest5165 largeedittest5166 largeedittest5167 largeedittest5168 largeedittest5169 largeedittest517 largeedittest5170 largeedittest5171 largeedittest5172 largeedittest5173 largeedittest5174 largeedittest5175 largeedittest5176 largeedittest5177 largeedittest5178 largeedittest5179 largeedittest518 largeedittest5180 largeedittest5181 largeedittest5182 largeedittest5183 largeedittest5184 largeedittest5185 largeedittest5186 largeedittest5187 largeedittest5188 largeedittest5189 largeedittest519 largeedittest5190 largeedittest5191 largeedittest5192 largeedittest5193 largeedittest5194 largeedittest5195 largeedittest5196 largeedittest5197 largeedittest5198 largeedittest5199 largeedittest52 largeedittest520 largeedittest5200 largeedittest5201 largeedittest5202 largeedittest5203 largeedittest5204 largeedittest5205 largeedittest5206 largeedittest5207 largeedittest5208 largeedittest5209 largeedittest521 largeedittest5210 largeedittest5211 largeedittest5212 largeedittest5213 largeedittest5214 largeedittest5215 largeedittest5216 largeedittest5217 largeedittest5218 largeedittest5219 largeedittest522 largeedittest5220 largeedittest5221 largeedittest5222 largeedittest5223 largeedittest5224 largeedittest5225 largeedittest5226 largeedittest5227 largeedittest5228 largeedittest5229 largeedittest523 largeedittest5230 largeedittest5231 largeedittest5232 largeedittest5233 largeedittest5234 largeedittest5235 largeedittest5236 largeedittest5237 largeedittest5238 largeedittest5239 largeedittest524 largeedittest5240 largeedittest5241 largeedittest5242 largeedittest5243 largeedittest5244 largeedittest5245 largeedittest5246 largeedittest5247 largeedittest5248 largeedittest5249 largeedittest525 largeedittest5250 largeedittest5251 largeedittest5252 largeedittest5253 largeedittest5254 largeedittest5255 largeedittest5256 largeedittest5257 largeedittest5258 largeedittest5259 largeedittest526 largeedittest5260 largeedittest5261 largeedittest5262 largeedittest5263 largeedittest5264 largeedittest5265 largeedittest5266 largeedittest5267 largeedittest5268 largeedittest5269 largeedittest527 largeedittest5270 largeedittest5271 largeedittest5272 largeedittest5273 largeedittest5274 largeedittest5275 largeedittest5276 largeedittest5277 largeedittest5278 largeedittest5279 largeedittest528 largeedittest5280 largeedittest5281 largeedittest5282 largeedittest5283 largeedittest5284 largeedittest5285 largeedittest5286 largeedittest5287 largeedittest5288 largeedittest5289 largeedittest529 largeedittest5290 largeedittest5291 largeedittest5292 largeedittest5293 largeedittest5294 largeedittest5295 largeedittest5296 largeedittest5297 largeedittest5298 largeedittest5299 largeedittest53 largeedittest530 largeedittest5300 largeedittest5301 largeedittest5302 largeedittest5303 largeedittest5304 largeedittest5305 largeedittest5306 largeedittest5307 largeedittest5308 largeedittest5309 largeedittest531 largeedittest5310 largeedittest5311 largeedittest5312 largeedittest5313 largeedittest5314 largeedittest5315 largeedittest5316 largeedittest5317 largeedittest5318 largeedittest5319 largeedittest532 largeedittest5320 largeedittest5321 largeedittest5322 largeedittest5323 largeedittest5324 largeedittest5325 largeedittest5326 largeedittest5327 largeedittest5328 largeedittest5329 largeedittest533 largeedittest5330 largeedittest5331 largeedittest5332 largeedittest5333 largeedittest5334 largeedittest5335 largeedittest5336 largeedittest5337 largeedittest5338 largeedittest5339 largeedittest534 largeedittest5340 largeedittest5341 largeedittest5342 largeedittest5343 largeedittest5344 largeedittest5345 largeedittest5346 largeedittest5347 largeedittest5348 largeedittest5349 largeedittest535 largeedittest5350 largeedittest5351 largeedittest5352 largeedittest5353 largeedittest5354 largeedittest5355 largeedittest5356 largeedittest5357 largeedittest5358 largeedittest5359 largeedittest536 largeedittest5360 largeedittest5361 largeedittest5362 largeedittest5363 largeedittest5364 largeedittest5365 largeedittest5366 largeedittest5367 largeedittest5368 largeedittest5369 largeedittest537 largeedittest5370 largeedittest5371 largeedittest5372 largeedittest5373 largeedittest5374 largeedittest5375 largeedittest5376 largeedittest5377 largeedittest5378 largeedittest5379 largeedittest538 largeedittest5380 largeedittest5381 largeedittest5382 largeedittest5383 largeedittest5384 largeedittest5385 largeedittest5386 largeedittest5387 largeedittest5388 largeedittest5389 largeedittest539 largeedittest5390 largeedittest5391 largeedittest5392 largeedittest5393 largeedittest5394 largeedittest5395 largeedittest5396 largeedittest5397 largeedittest5398 largeedittest5399 largeedittest54 largeedittest540 largeedittest5400 largeedittest5401 largeedittest5402 largeedittest5403 largeedittest5404 largeedittest5405 largeedittest5406 largeedittest5407 largeedittest5408 largeedittest5409 largeedittest541 largeedittest5410 largeedittest5411 largeedittest5412 largeedittest5413 largeedittest5414 largeedittest5415 largeedittest5416 largeedittest5417 largeedittest5418 largeedittest5419 largeedittest542 largeedittest5420 largeedittest5421 largeedittest5422 largeedittest5423 largeedittest5424 largeedittest5425 largeedittest5426 largeedittest5427 largeedittest5428 largeedittest5429 largeedittest543 largeedittest5430 largeedittest5431 largeedittest5432 largeedittest5433 largeedittest5434 largeedittest5435 largeedittest5436 largeedittest5437 largeedittest5438 largeedittest5439 largeedittest544 largeedittest5440 largeedittest5441 largeedittest5442 largeedittest5443 largeedittest5444 largeedittest5445 largeedittest5446 largeedittest5447 largeedittest5448 largeedittest5449 largeedittest545 largeedittest5450 largeedittest5451 largeedittest5452 largeedittest5453 largeedittest5454 largeedittest5455 largeedittest5456 largeedittest5457 largeedittest5458 largeedittest5459 largeedittest546 largeedittest5460 largeedittest5461 largeedittest5462 largeedittest5463 largeedittest5464 largeedittest5465 largeedittest5466 largeedittest5467 largeedittest5468 largeedittest5469 largeedittest547 largeedittest5470 largeedittest5471 largeedittest5472 largeedittest5473 largeedittest5474 largeedittest5475 largeedittest5476 largeedittest5477 largeedittest5478 largeedittest5479 largeedittest548 largeedittest5480 largeedittest5481 largeedittest5482 largeedittest5483 largeedittest5484 largeedittest5485 largeedittest5486 largeedittest5487 largeedittest5488 largeedittest5489 largeedittest549 largeedittest5490 largeedittest5491 largeedittest5492 largeedittest5493 largeedittest5494 largeedittest5495 largeedittest5496 largeedittest5497 largeedittest5498 largeedittest5499 largeedittest55 largeedittest550 largeedittest5500 largeedittest5501 largeedittest5502 largeedittest5503 largeedittest5504 largeedittest5505 largeedittest5506 largeedittest5507 largeedittest5508 largeedittest5509 largeedittest551 largeedittest5510 largeedittest5511 largeedittest5512 largeedittest5513 largeedittest5514 largeedittest5515 largeedittest5516 largeedittest5517 largeedittest5518 largeedittest5519 largeedittest552 largeedittest5520 largeedittest5521 largeedittest5522 largeedittest5523 largeedittest5524 largeedittest5525 largeedittest5526 largeedittest5527 largeedittest5528 largeedittest5529 largeedittest553 largeedittest5530 largeedittest5531 largeedittest5532 largeedittest5533 largeedittest5534 largeedittest5535 largeedittest5536 largeedittest5537 largeedittest5538 largeedittest5539 largeedittest554 largeedittest5540 largeedittest5541 largeedittest5542 largeedittest5543 largeedittest5544 largeedittest5545 largeedittest5546 largeedittest5547 largeedittest5548 largeedittest5549 largeedittest555 largeedittest5550 largeedittest5551 largeedittest5552 largeedittest5553 largeedittest5554 largeedittest5555 largeedittest5556 largeedittest5557 largeedittest5558 largeedittest5559 largeedittest556 largeedittest5560 largeedittest5561 largeedittest5562 largeedittest5563 largeedittest5564 largeedittest5565 largeedittest5566 largeedittest5567 largeedittest5568 largeedittest5569 largeedittest557 largeedittest5570 largeedittest5571 largeedittest5572 largeedittest5573 largeedittest5574 largeedittest5575 largeedittest5576 largeedittest5577 largeedittest5578 largeedittest5579 largeedittest558 largeedittest5580 largeedittest5581 largeedittest5582 largeedittest5583 largeedittest5584 largeedittest5585 largeedittest5586 largeedittest5587 largeedittest5588 largeedittest5589 largeedittest559 largeedittest5590 largeedittest5591 largeedittest5592 largeedittest5593 largeedittest5594 largeedittest5595 largeedittest5596 largeedittest5597 largeedittest5598 largeedittest5599 largeedittest56 largeedittest560 largeedittest5600 largeedittest5601 largeedittest5602 largeedittest5603 largeedittest5604 largeedittest5605 largeedittest5606 largeedittest5607 largeedittest5608 largeedittest5609 largeedittest561 largeedittest5610 largeedittest5611 largeedittest5612 largeedittest5613 largeedittest5614 largeedittest5615 largeedittest5616 largeedittest5617 largeedittest5618 largeedittest5619 largeedittest562 largeedittest5620 largeedittest5621 largeedittest5622 largeedittest5623 largeedittest5624 largeedittest5625 largeedittest5626 largeedittest5627 largeedittest5628 largeedittest5629 largeedittest563 largeedittest5630 largeedittest5631 largeedittest5632 largeedittest5633 largeedittest5634 largeedittest5635 largeedittest5636 largeedittest5637 largeedittest5638 largeedittest5639 largeedittest564 largeedittest5640 largeedittest5641 largeedittest5642 largeedittest5643 largeedittest5644 largeedittest5645 largeedittest5646 largeedittest5647 largeedittest5648 largeedittest5649 largeedittest565 largeedittest5650 largeedittest5651 largeedittest5652 largeedittest5653 largeedittest5654 largeedittest5655 largeedittest5656 largeedittest5657 largeedittest5658 largeedittest5659 largeedittest566 largeedittest5660 largeedittest5661 largeedittest5662 largeedittest5663 largeedittest5664 largeedittest5665 largeedittest5666 largeedittest5667 largeedittest5668 largeedittest5669 largeedittest567 largeedittest5670 largeedittest5671 largeedittest5672 largeedittest5673 largeedittest5674 largeedittest5675 largeedittest5676 largeedittest5677 largeedittest5678 largeedittest5679 largeedittest568 largeedittest5680 largeedittest5681 largeedittest5682 largeedittest5683 largeedittest5684 largeedittest5685 largeedittest5686 largeedittest5687 largeedittest5688 largeedittest5689 largeedittest569 largeedittest5690 largeedittest5691 largeedittest5692 largeedittest5693 largeedittest5694 largeedittest5695 largeedittest5696 largeedittest5697 largeedittest5698 largeedittest5699 largeedittest57 largeedittest570 largeedittest5700 largeedittest5701 largeedittest5702 largeedittest5703 largeedittest5704 largeedittest5705 largeedittest5706 largeedittest5707 largeedittest5708 largeedittest5709 largeedittest571 largeedittest5710 largeedittest5711 largeedittest5712 largeedittest5713 largeedittest5714 largeedittest5715 largeedittest5716 largeedittest5717 largeedittest5718 largeedittest5719 largeedittest572 largeedittest5720 largeedittest5721 largeedittest5722 largeedittest5723 largeedittest5724 largeedittest5725 largeedittest5726 largeedittest5727 largeedittest5728 largeedittest5729 largeedittest573 largeedittest5730 largeedittest5731 largeedittest5732 largeedittest5733 largeedittest5734 largeedittest5735 largeedittest5736 largeedittest5737 largeedittest5738 largeedittest5739 largeedittest574 largeedittest5740 largeedittest5741 largeedittest5742 largeedittest5743 largeedittest5744 largeedittest5745 largeedittest5746 largeedittest5747 largeedittest5748 largeedittest5749 largeedittest575 largeedittest5750 largeedittest5751 largeedittest5752 largeedittest5753 largeedittest5754 largeedittest5755 largeedittest5756 largeedittest5757 largeedittest5758 largeedittest5759 largeedittest576 largeedittest5760 largeedittest5761 largeedittest5762 largeedittest5763 largeedittest5764 largeedittest5765 largeedittest5766 largeedittest5767 largeedittest5768 largeedittest5769 largeedittest577 largeedittest5770 largeedittest5771 largeedittest5772 largeedittest5773 largeedittest5774 largeedittest5775 largeedittest5776 largeedittest5777 largeedittest5778 largeedittest5779 largeedittest578 largeedittest5780 largeedittest5781 largeedittest5782 largeedittest5783 largeedittest5784 largeedittest5785 largeedittest5786 largeedittest5787 largeedittest5788 largeedittest5789 largeedittest579 largeedittest5790 largeedittest5791 largeedittest5792 largeedittest5793 largeedittest5794 largeedittest5795 largeedittest5796 largeedittest5797 largeedittest5798 largeedittest5799 largeedittest58 largeedittest580 largeedittest5800 largeedittest5801 largeedittest5802 largeedittest5803 largeedittest5804 largeedittest5805 largeedittest5806 largeedittest5807 largeedittest5808 largeedittest5809 largeedittest581 largeedittest5810 largeedittest5811 largeedittest5812 largeedittest5813 largeedittest5814 largeedittest5815 largeedittest5816 largeedittest5817 largeedittest5818 largeedittest5819 largeedittest582 largeedittest5820 largeedittest5821 largeedittest5822 largeedittest5823 largeedittest5824 largeedittest5825 largeedittest5826 largeedittest5827 largeedittest5828 largeedittest5829 largeedittest583 largeedittest5830 largeedittest5831 largeedittest5832 largeedittest5833 largeedittest5834 largeedittest5835 largeedittest5836 largeedittest5837 largeedittest5838 largeedittest5839 largeedittest584 largeedittest5840 largeedittest5841 largeedittest5842 largeedittest5843 largeedittest5844 largeedittest5845 largeedittest5846 largeedittest5847 largeedittest5848 largeedittest5849 largeedittest585 largeedittest5850 largeedittest5851 largeedittest5852 largeedittest5853 largeedittest5854 largeedittest5855 largeedittest5856 largeedittest5857 largeedittest5858 largeedittest5859 largeedittest586 largeedittest5860 largeedittest5861 largeedittest5862 largeedittest5863 largeedittest5864 largeedittest5865 largeedittest5866 largeedittest5867 largeedittest5868 largeedittest5869 largeedittest587 largeedittest5870 largeedittest5871 largeedittest5872 largeedittest5873 largeedittest5874 largeedittest5875 largeedittest5876 largeedittest5877 largeedittest5878 largeedittest5879 largeedittest588 largeedittest5880 largeedittest5881 largeedittest5882 largeedittest5883 largeedittest5884 largeedittest5885 largeedittest5886 largeedittest5887 largeedittest5888 largeedittest5889 largeedittest589 largeedittest5890 largeedittest5891 largeedittest5892 largeedittest5893 largeedittest5894 largeedittest5895 largeedittest5896 largeedittest5897 largeedittest5898 largeedittest5899 largeedittest59 largeedittest590 largeedittest5900 largeedittest5901 largeedittest5902 largeedittest5903 largeedittest5904 largeedittest5905 largeedittest5906 largeedittest5907 largeedittest5908 largeedittest5909 largeedittest591 largeedittest5910 largeedittest5911 largeedittest5912 largeedittest5913 largeedittest5914 largeedittest5915 largeedittest5916 largeedittest5917 largeedittest5918 largeedittest5919 largeedittest592 largeedittest5920 largeedittest5921 largeedittest5922 largeedittest5923 largeedittest5924 largeedittest5925 largeedittest5926 largeedittest5927 largeedittest5928 largeedittest5929 largeedittest593 largeedittest5930 largeedittest5931 largeedittest5932 largeedittest5933 largeedittest5934 largeedittest5935 largeedittest5936 largeedittest5937 largeedittest5938 largeedittest5939 largeedittest594 largeedittest5940 largeedittest5941 largeedittest5942 largeedittest5943 largeedittest5944 largeedittest5945 largeedittest5946 largeedittest5947 largeedittest5948 largeedittest5949 largeedittest595 largeedittest5950 largeedittest5951 largeedittest5952 largeedittest5953 largeedittest5954 largeedittest5955 largeedittest5956 largeedittest5957 largeedittest5958 largeedittest5959 largeedittest596 largeedittest5960 largeedittest5961 largeedittest5962 largeedittest5963 largeedittest5964 largeedittest5965 largeedittest5966 largeedittest5967 largeedittest5968 largeedittest5969 largeedittest597 largeedittest5970 largeedittest5971 largeedittest5972 largeedittest5973 largeedittest5974 largeedittest5975 largeedittest5976 largeedittest5977 largeedittest5978 largeedittest5979 largeedittest598 largeedittest5980 largeedittest5981 largeedittest5982 largeedittest5983 largeedittest5984 largeedittest5985 largeedittest5986 largeedittest5987 largeedittest5988 largeedittest5989 largeedittest599 largeedittest5990 largeedittest5991 largeedittest5992 largeedittest5993 largeedittest5994 largeedittest5995 largeedittest5996 largeedittest5997 largeedittest5998 largeedittest5999 largeedittest6 largeedittest60 largeedittest600 largeedittest6000 largeedittest6001 largeedittest6002 largeedittest6003 largeedittest6004 largeedittest6005 largeedittest6006 largeedittest6007 largeedittest6008 largeedittest6009 largeedittest601 largeedittest6010 largeedittest6011 largeedittest6012 largeedittest6013 largeedittest6014 largeedittest6015 largeedittest6016 largeedittest6017 largeedittest6018 largeedittest6019 largeedittest602 largeedittest6020 largeedittest6021 largeedittest6022 largeedittest6023 largeedittest6024 largeedittest6025 largeedittest6026 largeedittest6027 largeedittest6028 largeedittest6029 largeedittest603 largeedittest6030 largeedittest6031 largeedittest6032 largeedittest6033 largeedittest6034 largeedittest6035 largeedittest6036 largeedittest6037 largeedittest6038 largeedittest6039 largeedittest604 largeedittest6040 largeedittest6041 largeedittest6042 largeedittest6043 largeedittest6044 largeedittest6045 largeedittest6046 largeedittest6047 largeedittest6048 largeedittest6049 largeedittest605 largeedittest6050 largeedittest6051 largeedittest6052 largeedittest6053 largeedittest6054 largeedittest6055 largeedittest6056 largeedittest6057 largeedittest6058 largeedittest6059 largeedittest606 largeedittest6060 largeedittest6061 largeedittest6062 largeedittest6063 largeedittest6064 largeedittest6065 largeedittest6066 largeedittest6067 largeedittest6068 largeedittest6069 largeedittest607 largeedittest6070 largeedittest6071 largeedittest6072 largeedittest6073 largeedittest6074 largeedittest6075 largeedittest6076 largeedittest6077 largeedittest6078 largeedittest6079 largeedittest608 largeedittest6080 largeedittest6081 largeedittest6082 largeedittest6083 largeedittest6084 largeedittest6085 largeedittest6086 largeedittest6087 largeedittest6088 largeedittest6089 largeedittest609 largeedittest6090 largeedittest6091 largeedittest6092 largeedittest6093 largeedittest6094 largeedittest6095 largeedittest6096 largeedittest6097 largeedittest6098 largeedittest6099 largeedittest61 largeedittest610 largeedittest6100 largeedittest6101 largeedittest6102 largeedittest6103 largeedittest6104 largeedittest6105 largeedittest6106 largeedittest6107 largeedittest6108 largeedittest6109 largeedittest611 largeedittest6110 largeedittest6111 largeedittest6112 largeedittest6113 largeedittest6114 largeedittest6115 largeedittest6116 largeedittest6117 largeedittest6118 largeedittest6119 largeedittest612 largeedittest6120 largeedittest6121 largeedittest6122 largeedittest6123 largeedittest6124 largeedittest6125 largeedittest6126 largeedittest6127 largeedittest6128 largeedittest6129 largeedittest613 largeedittest6130 largeedittest6131 largeedittest6132 largeedittest6133 largeedittest6134 largeedittest6135 largeedittest6136 largeedittest6137 largeedittest6138 largeedittest6139 largeedittest614 largeedittest6140 largeedittest6141 largeedittest6142 largeedittest6143 largeedittest6144 largeedittest6145 largeedittest6146 largeedittest6147 largeedittest6148 largeedittest6149 largeedittest615 largeedittest6150 largeedittest6151 largeedittest6152 largeedittest6153 largeedittest6154 largeedittest6155 largeedittest6156 largeedittest6157 largeedittest6158 largeedittest6159 largeedittest616 largeedittest6160 largeedittest6161 largeedittest6162 largeedittest6163 largeedittest6164 largeedittest6165 largeedittest6166 largeedittest6167 largeedittest6168 largeedittest6169 largeedittest617 largeedittest6170 largeedittest6171 largeedittest6172 largeedittest6173 largeedittest6174 largeedittest6175 largeedittest6176 largeedittest6177 largeedittest6178 largeedittest6179 largeedittest618 largeedittest6180 largeedittest6181 largeedittest6182 largeedittest6183 largeedittest6184 largeedittest6185 largeedittest6186 largeedittest6187 largeedittest6188 largeedittest6189 largeedittest619 largeedittest6190 largeedittest6191 largeedittest6192 largeedittest6193 largeedittest6194 largeedittest6195 largeedittest6196 largeedittest6197 largeedittest6198 largeedittest6199 largeedittest62 largeedittest620 largeedittest6200 largeedittest6201 largeedittest6202 largeedittest6203 largeedittest6204 largeedittest6205 largeedittest6206 largeedittest6207 largeedittest6208 largeedittest6209 largeedittest621 largeedittest6210 largeedittest6211 largeedittest6212 largeedittest6213 largeedittest6214 largeedittest6215 largeedittest6216 largeedittest6217 largeedittest6218 largeedittest6219 largeedittest622 largeedittest6220 largeedittest6221 largeedittest6222 largeedittest6223 largeedittest6224 largeedittest6225 largeedittest6226 largeedittest6227 largeedittest6228 largeedittest6229 largeedittest623 largeedittest6230 largeedittest6231 largeedittest6232 largeedittest6233 largeedittest6234 largeedittest6235 largeedittest6236 largeedittest6237 largeedittest6238 largeedittest6239 largeedittest624 largeedittest6240 largeedittest6241 largeedittest6242 largeedittest6243 largeedittest6244 largeedittest6245 largeedittest6246 largeedittest6247 largeedittest6248 largeedittest6249 largeedittest625 largeedittest6250 largeedittest6251 largeedittest6252 largeedittest6253 largeedittest6254 largeedittest6255 largeedittest6256 largeedittest6257 largeedittest6258 largeedittest6259 largeedittest626 largeedittest6260 largeedittest6261 largeedittest6262 largeedittest6263 largeedittest6264 largeedittest6265 largeedittest6266 largeedittest6267 largeedittest6268 largeedittest6269 largeedittest627 largeedittest6270 largeedittest6271 largeedittest6272 largeedittest6273 largeedittest6274 largeedittest6275 largeedittest6276 largeedittest6277 largeedittest6278 largeedittest6279 largeedittest628 largeedittest6280 largeedittest6281 largeedittest6282 largeedittest6283 largeedittest6284 largeedittest6285 largeedittest6286 largeedittest6287 largeedittest6288 largeedittest6289 largeedittest629 largeedittest6290 largeedittest6291 largeedittest6292 largeedittest6293 largeedittest6294 largeedittest6295 largeedittest6296 largeedittest6297 largeedittest6298 largeedittest6299 largeedittest63 largeedittest630 largeedittest6300 largeedittest6301 largeedittest6302 largeedittest6303 largeedittest6304 largeedittest6305 largeedittest6306 largeedittest6307 largeedittest6308 largeedittest6309 largeedittest631 largeedittest6310 largeedittest6311 largeedittest6312 largeedittest6313 largeedittest6314 largeedittest6315 largeedittest6316 largeedittest6317 largeedittest6318 largeedittest6319 largeedittest632 largeedittest6320 largeedittest6321 largeedittest6322 largeedittest6323 largeedittest6324 largeedittest6325 largeedittest6326 largeedittest6327 largeedittest6328 largeedittest6329 largeedittest633 largeedittest6330 largeedittest6331 largeedittest6332 largeedittest6333 largeedittest6334 largeedittest6335 largeedittest6336 largeedittest6337 largeedittest6338 largeedittest6339 largeedittest634 largeedittest6340 largeedittest6341 largeedittest6342 largeedittest6343 largeedittest6344 largeedittest6345 largeedittest6346 largeedittest6347 largeedittest6348 largeedittest6349 largeedittest635 largeedittest6350 largeedittest6351 largeedittest6352 largeedittest6353 largeedittest6354 largeedittest6355 largeedittest6356 largeedittest6357 largeedittest6358 largeedittest6359 largeedittest636 largeedittest6360 largeedittest6361 largeedittest6362 largeedittest6363 largeedittest6364 largeedittest6365 largeedittest6366 largeedittest6367 largeedittest6368 largeedittest6369 largeedittest637 largeedittest6370 largeedittest6371 largeedittest6372 largeedittest6373 largeedittest6374 largeedittest6375 largeedittest6376 largeedittest6377 largeedittest6378 largeedittest6379 largeedittest638 largeedittest6380 largeedittest6381 largeedittest6382 largeedittest6383 largeedittest6384 largeedittest6385 largeedittest6386 largeedittest6387 largeedittest6388 largeedittest6389 largeedittest639 largeedittest6390 largeedittest6391 largeedittest6392 largeedittest6393 largeedittest6394 largeedittest6395 largeedittest6396 largeedittest6397 largeedittest6398 largeedittest6399 largeedittest64 largeedittest640 largeedittest6400 largeedittest6401 largeedittest6402 largeedittest6403 largeedittest6404 largeedittest6405 largeedittest6406 largeedittest6407 largeedittest6408 largeedittest6409 largeedittest641 largeedittest6410 largeedittest6411 largeedittest6412 largeedittest6413 largeedittest6414 largeedittest6415 largeedittest6416 largeedittest6417 largeedittest6418 largeedittest6419 largeedittest642 largeedittest6420 largeedittest6421 largeedittest6422 largeedittest6423 largeedittest6424 largeedittest6425 largeedittest6426 largeedittest6427 largeedittest6428 largeedittest6429 largeedittest643 largeedittest6430 largeedittest6431 largeedittest6432 largeedittest6433 largeedittest6434 largeedittest6435 largeedittest6436 largeedittest6437 largeedittest6438 largeedittest6439 largeedittest644 largeedittest6440 largeedittest6441 largeedittest6442 largeedittest6443 largeedittest6444 largeedittest6445 largeedittest6446 largeedittest6447 largeedittest6448 largeedittest6449 largeedittest645 largeedittest6450 largeedittest6451 largeedittest6452 largeedittest6453 largeedittest6454 largeedittest6455 largeedittest6456 largeedittest6457 largeedittest6458 largeedittest6459 largeedittest646 largeedittest6460 largeedittest6461 largeedittest6462 largeedittest6463 largeedittest6464 largeedittest6465 largeedittest6466 largeedittest6467 largeedittest6468 largeedittest6469 largeedittest647 largeedittest6470 largeedittest6471 largeedittest6472 largeedittest6473 largeedittest6474 largeedittest6475 largeedittest6476 largeedittest6477 largeedittest6478 largeedittest6479 largeedittest648 largeedittest6480 largeedittest6481 largeedittest6482 largeedittest6483 largeedittest6484 largeedittest6485 largeedittest6486 largeedittest6487 largeedittest6488 largeedittest6489 largeedittest649 largeedittest6490 largeedittest6491 largeedittest6492 largeedittest6493 largeedittest6494 largeedittest6495 largeedittest6496 largeedittest6497 largeedittest6498 largeedittest6499 largeedittest65 largeedittest650 largeedittest6500 largeedittest6501 largeedittest6502 largeedittest6503 largeedittest6504 largeedittest6505 largeedittest6506 largeedittest6507 largeedittest6508 largeedittest6509 largeedittest651 largeedittest6510 largeedittest6511 largeedittest6512 largeedittest6513 largeedittest6514 largeedittest6515 largeedittest6516 largeedittest6517 largeedittest6518 largeedittest6519 largeedittest652 largeedittest6520 largeedittest6521 largeedittest6522 largeedittest6523 largeedittest6524 largeedittest6525 largeedittest6526 largeedittest6527 largeedittest6528 largeedittest6529 largeedittest653 largeedittest6530 largeedittest6531 largeedittest6532 largeedittest6533 largeedittest6534 largeedittest6535 largeedittest6536 largeedittest6537 largeedittest6538 largeedittest6539 largeedittest654 largeedittest6540 largeedittest6541 largeedittest6542 largeedittest6543 largeedittest6544 largeedittest6545 largeedittest6546 largeedittest6547 largeedittest6548 largeedittest6549 largeedittest655 largeedittest6550 largeedittest6551 largeedittest6552 largeedittest6553 largeedittest6554 largeedittest6555 largeedittest6556 largeedittest6557 largeedittest6558 largeedittest6559 largeedittest656 largeedittest6560 largeedittest6561 largeedittest6562 largeedittest6563 largeedittest6564 largeedittest6565 largeedittest6566 largeedittest6567 largeedittest6568 largeedittest6569 largeedittest657 largeedittest6570 largeedittest6571 largeedittest6572 largeedittest6573 largeedittest6574 largeedittest6575 largeedittest6576 largeedittest6577 largeedittest6578 largeedittest6579 largeedittest658 largeedittest6580 largeedittest6581 largeedittest6582 largeedittest6583 largeedittest6584 largeedittest6585 largeedittest6586 largeedittest6587 largeedittest6588 largeedittest6589 largeedittest659 largeedittest6590 largeedittest6591 largeedittest6592 largeedittest6593 largeedittest6594 largeedittest6595 largeedittest6596 largeedittest6597 largeedittest6598 largeedittest6599 largeedittest66 largeedittest660 largeedittest6600 largeedittest6601 largeedittest6602 largeedittest6603 largeedittest6604 largeedittest6605 largeedittest6606 largeedittest6607 largeedittest6608 largeedittest6609 largeedittest661 largeedittest6610 largeedittest6611 largeedittest6612 largeedittest6613 largeedittest6614 largeedittest6615 largeedittest6616 largeedittest6617 largeedittest6618 largeedittest6619 largeedittest662 largeedittest6620 largeedittest6621 largeedittest6622 largeedittest6623 largeedittest6624 largeedittest6625 largeedittest6626 largeedittest6627 largeedittest6628 largeedittest6629 largeedittest663 largeedittest6630 largeedittest6631 largeedittest6632 largeedittest6633 largeedittest6634 largeedittest6635 largeedittest6636 largeedittest6637 largeedittest6638 largeedittest6639 largeedittest664 largeedittest6640 largeedittest6641 largeedittest6642 largeedittest6643 largeedittest6644 largeedittest6645 largeedittest6646 largeedittest6647 largeedittest6648 largeedittest6649 largeedittest665 largeedittest6650 largeedittest6651 largeedittest6652 largeedittest6653 largeedittest6654 largeedittest6655 largeedittest6656 largeedittest6657 largeedittest6658 largeedittest6659 largeedittest666 largeedittest6660 largeedittest6661 largeedittest6662 largeedittest6663 largeedittest6664 largeedittest6665 largeedittest6666 largeedittest6667 largeedittest6668 largeedittest6669 largeedittest667 largeedittest6670 largeedittest6671 largeedittest6672 largeedittest6673 largeedittest6674 largeedittest6675 largeedittest6676 largeedittest6677 largeedittest6678 largeedittest6679 largeedittest668 largeedittest6680 largeedittest6681 largeedittest6682 largeedittest6683 largeedittest6684 largeedittest6685 largeedittest6686 largeedittest6687 largeedittest6688 largeedittest6689 largeedittest669 largeedittest6690 largeedittest6691 largeedittest6692 largeedittest6693 largeedittest6694 largeedittest6695 largeedittest6696 largeedittest6697 largeedittest6698 largeedittest6699 largeedittest67 largeedittest670 largeedittest6700 largeedittest6701 largeedittest6702 largeedittest6703 largeedittest6704 largeedittest6705 largeedittest6706 largeedittest6707 largeedittest6708 largeedittest6709 largeedittest671 largeedittest6710 largeedittest6711 largeedittest6712 largeedittest6713 largeedittest6714 largeedittest6715 largeedittest6716 largeedittest6717 largeedittest6718 largeedittest6719 largeedittest672 largeedittest6720 largeedittest6721 largeedittest6722 largeedittest6723 largeedittest6724 largeedittest6725 largeedittest6726 largeedittest6727 largeedittest6728 largeedittest6729 largeedittest673 largeedittest6730 largeedittest6731 largeedittest6732 largeedittest6733 largeedittest6734 largeedittest6735 largeedittest6736 largeedittest6737 largeedittest6738 largeedittest6739 largeedittest674 largeedittest6740 largeedittest6741 largeedittest6742 largeedittest6743 largeedittest6744 largeedittest6745 largeedittest6746 largeedittest6747 largeedittest6748 largeedittest6749 largeedittest675 largeedittest6750 largeedittest6751 largeedittest6752 largeedittest6753 largeedittest6754 largeedittest6755 largeedittest6756 largeedittest6757 largeedittest6758 largeedittest6759 largeedittest676 largeedittest6760 largeedittest6761 largeedittest6762 largeedittest6763 largeedittest6764 largeedittest6765 largeedittest6766 largeedittest6767 largeedittest6768 largeedittest6769 largeedittest677 largeedittest6770 largeedittest6771 largeedittest6772 largeedittest6773 largeedittest6774 largeedittest6775 largeedittest6776 largeedittest6777 largeedittest6778 largeedittest6779 largeedittest678 largeedittest6780 largeedittest6781 largeedittest6782 largeedittest6783 largeedittest6784 largeedittest6785 largeedittest6786 largeedittest6787 largeedittest6788 largeedittest6789 largeedittest679 largeedittest6790 largeedittest6791 largeedittest6792 largeedittest6793 largeedittest6794 largeedittest6795 largeedittest6796 largeedittest6797 largeedittest6798 largeedittest6799 largeedittest68 largeedittest680 largeedittest6800 largeedittest6801 largeedittest6802 largeedittest6803 largeedittest6804 largeedittest6805 largeedittest6806 largeedittest6807 largeedittest6808 largeedittest6809 largeedittest681 largeedittest6810 largeedittest6811 largeedittest6812 largeedittest6813 largeedittest6814 largeedittest6815 largeedittest6816 largeedittest6817 largeedittest6818 largeedittest6819 largeedittest682 largeedittest6820 largeedittest6821 largeedittest6822 largeedittest6823 largeedittest6824 largeedittest6825 largeedittest6826 largeedittest6827 largeedittest6828 largeedittest6829 largeedittest683 largeedittest6830 largeedittest6831 largeedittest6832 largeedittest6833 largeedittest6834 largeedittest6835 largeedittest6836 largeedittest6837 largeedittest6838 largeedittest6839 largeedittest684 largeedittest6840 largeedittest6841 largeedittest6842 largeedittest6843 largeedittest6844 largeedittest6845 largeedittest6846 largeedittest6847 largeedittest6848 largeedittest6849 largeedittest685 largeedittest6850 largeedittest6851 largeedittest6852 largeedittest6853 largeedittest6854 largeedittest6855 largeedittest6856 largeedittest6857 largeedittest6858 largeedittest6859 largeedittest686 largeedittest6860 largeedittest6861 largeedittest6862 largeedittest6863 largeedittest6864 largeedittest6865 largeedittest6866 largeedittest6867 largeedittest6868 largeedittest6869 largeedittest687 largeedittest6870 largeedittest6871 largeedittest6872 largeedittest6873 largeedittest6874 largeedittest6875 largeedittest6876 largeedittest6877 largeedittest6878 largeedittest6879 largeedittest688 largeedittest6880 largeedittest6881 largeedittest6882 largeedittest6883 largeedittest6884 largeedittest6885 largeedittest6886 largeedittest6887 largeedittest6888 largeedittest6889 largeedittest689 largeedittest6890 largeedittest6891 largeedittest6892 largeedittest6893 largeedittest6894 largeedittest6895 largeedittest6896 largeedittest6897 largeedittest6898 largeedittest6899 largeedittest69 largeedittest690 largeedittest6900 largeedittest6901 largeedittest6902 largeedittest6903 largeedittest6904 largeedittest6905 largeedittest6906 largeedittest6907 largeedittest6908 largeedittest6909 largeedittest691 largeedittest6910 largeedittest6911 largeedittest6912 largeedittest6913 largeedittest6914 largeedittest6915 largeedittest6916 largeedittest6917 largeedittest6918 largeedittest6919 largeedittest692 largeedittest6920 largeedittest6921 largeedittest6922 largeedittest6923 largeedittest6924 largeedittest6925 largeedittest6926 largeedittest6927 largeedittest6928 largeedittest6929 largeedittest693 largeedittest6930 largeedittest6931 largeedittest6932 largeedittest6933 largeedittest6934 largeedittest6935 largeedittest6936 largeedittest6937 largeedittest6938 largeedittest6939 largeedittest694 largeedittest6940 largeedittest6941 largeedittest6942 largeedittest6943 largeedittest6944 largeedittest6945 largeedittest6946 largeedittest6947 largeedittest6948 largeedittest6949 largeedittest695 largeedittest6950 largeedittest6951 largeedittest6952 largeedittest6953 largeedittest6954 largeedittest6955 largeedittest6956 largeedittest6957 largeedittest6958 largeedittest6959 largeedittest696 largeedittest6960 largeedittest6961 largeedittest6962 largeedittest6963 largeedittest6964 largeedittest6965 largeedittest6966 largeedittest6967 largeedittest6968 largeedittest6969 largeedittest697 largeedittest6970 largeedittest6971 largeedittest6972 largeedittest6973 largeedittest6974 largeedittest6975 largeedittest6976 largeedittest6977 largeedittest6978 largeedittest6979 largeedittest698 largeedittest6980 largeedittest6981 largeedittest6982 largeedittest6983 largeedittest6984 largeedittest6985 largeedittest6986 largeedittest6987 largeedittest6988 largeedittest6989 largeedittest699 largeedittest6990 largeedittest6991 largeedittest6992 largeedittest6993 largeedittest6994 largeedittest6995 largeedittest6996 largeedittest6997 largeedittest6998 largeedittest6999 largeedittest7 largeedittest70 largeedittest700 largeedittest7000 largeedittest7001 largeedittest7002 largeedittest7003 largeedittest7004 largeedittest7005 largeedittest7006 largeedittest7007 largeedittest7008 largeedittest7009 largeedittest701 largeedittest7010 largeedittest7011 largeedittest7012 largeedittest7013 largeedittest7014 largeedittest7015 largeedittest7016 largeedittest7017 largeedittest7018 largeedittest7019 largeedittest702 largeedittest7020 largeedittest7021 largeedittest7022 largeedittest7023 largeedittest7024 largeedittest7025 largeedittest7026 largeedittest7027 largeedittest7028 largeedittest7029 largeedittest703 largeedittest7030 largeedittest7031 largeedittest7032 largeedittest7033 largeedittest7034 largeedittest7035 largeedittest7036 largeedittest7037 largeedittest7038 largeedittest7039 largeedittest704 largeedittest7040 largeedittest7041 largeedittest7042 largeedittest7043 largeedittest7044 largeedittest7045 largeedittest7046 largeedittest7047 largeedittest7048 largeedittest7049 largeedittest705 largeedittest7050 largeedittest7051 largeedittest7052 largeedittest7053 largeedittest7054 largeedittest7055 largeedittest7056 largeedittest7057 largeedittest7058 largeedittest7059 largeedittest706 largeedittest7060 largeedittest7061 largeedittest7062 largeedittest7063 largeedittest7064 largeedittest7065 largeedittest7066 largeedittest7067 largeedittest7068 largeedittest7069 largeedittest707 largeedittest7070 largeedittest7071 largeedittest7072 largeedittest7073 largeedittest7074 largeedittest7075 largeedittest7076 largeedittest7077 largeedittest7078 largeedittest7079 largeedittest708 largeedittest7080 largeedittest7081 largeedittest7082 largeedittest7083 largeedittest7084 largeedittest7085 largeedittest7086 largeedittest7087 largeedittest7088 largeedittest7089 largeedittest709 largeedittest7090 largeedittest7091 largeedittest7092 largeedittest7093 largeedittest7094 largeedittest7095 largeedittest7096 largeedittest7097 largeedittest7098 largeedittest7099 largeedittest71 largeedittest710 largeedittest7100 largeedittest7101 largeedittest7102 largeedittest7103 largeedittest7104 largeedittest7105 largeedittest7106 largeedittest7107 largeedittest7108 largeedittest7109 largeedittest711 largeedittest7110 largeedittest7111 largeedittest7112 largeedittest7113 largeedittest7114 largeedittest7115 largeedittest7116 largeedittest7117 largeedittest7118 largeedittest7119 largeedittest712 largeedittest7120 largeedittest7121 largeedittest7122 largeedittest7123 largeedittest7124 largeedittest7125 largeedittest7126 largeedittest7127 largeedittest7128 largeedittest7129 largeedittest713 largeedittest7130 largeedittest7131 largeedittest7132 largeedittest7133 largeedittest7134 largeedittest7135 largeedittest7136 largeedittest7137 largeedittest7138 largeedittest7139 largeedittest714 largeedittest7140 largeedittest7141 largeedittest7142 largeedittest7143 largeedittest7144 largeedittest7145 largeedittest7146 largeedittest7147 largeedittest7148 largeedittest7149 largeedittest715 largeedittest7150 largeedittest7151 largeedittest7152 largeedittest7153 largeedittest7154 largeedittest7155 largeedittest7156 largeedittest7157 largeedittest7158 largeedittest7159 largeedittest716 largeedittest7160 largeedittest7161 largeedittest7162 largeedittest7163 largeedittest7164 largeedittest7165 largeedittest7166 largeedittest7167 largeedittest7168 largeedittest7169 largeedittest717 largeedittest7170 largeedittest7171 largeedittest7172 largeedittest7173 largeedittest7174 largeedittest7175 largeedittest7176 largeedittest7177 largeedittest7178 largeedittest7179 largeedittest718 largeedittest7180 largeedittest7181 largeedittest7182 largeedittest7183 largeedittest7184 largeedittest7185 largeedittest7186 largeedittest7187 largeedittest7188 largeedittest7189 largeedittest719 largeedittest7190 largeedittest7191 largeedittest7192 largeedittest7193 largeedittest7194 largeedittest7195 largeedittest7196 largeedittest7197 largeedittest7198 largeedittest7199 largeedittest72 largeedittest720 largeedittest7200 largeedittest7201 largeedittest7202 largeedittest7203 largeedittest7204 largeedittest7205 largeedittest7206 largeedittest7207 largeedittest7208 largeedittest7209 largeedittest721 largeedittest7210 largeedittest7211 largeedittest7212 largeedittest7213 largeedittest7214 largeedittest7215 largeedittest7216 largeedittest7217 largeedittest7218 largeedittest7219 largeedittest722 largeedittest7220 largeedittest7221 largeedittest7222 largeedittest7223 largeedittest7224 largeedittest7225 largeedittest7226 largeedittest7227 largeedittest7228 largeedittest7229 largeedittest723 largeedittest7230 largeedittest7231 largeedittest7232 largeedittest7233 largeedittest7234 largeedittest7235 largeedittest7236 largeedittest7237 largeedittest7238 largeedittest7239 largeedittest724 largeedittest7240 largeedittest7241 largeedittest7242 largeedittest7243 largeedittest7244 largeedittest7245 largeedittest7246 largeedittest7247 largeedittest7248 largeedittest7249 largeedittest725 largeedittest7250 largeedittest7251 largeedittest7252 largeedittest7253 largeedittest7254 largeedittest7255 largeedittest7256 largeedittest7257 largeedittest7258 largeedittest7259 largeedittest726 largeedittest7260 largeedittest7261 largeedittest7262 largeedittest7263 largeedittest7264 largeedittest7265 largeedittest7266 largeedittest7267 largeedittest7268 largeedittest7269 largeedittest727 largeedittest7270 largeedittest7271 largeedittest7272 largeedittest7273 largeedittest7274 largeedittest7275 largeedittest7276 largeedittest7277 largeedittest7278 largeedittest7279 largeedittest728 largeedittest7280 largeedittest7281 largeedittest7282 largeedittest7283 largeedittest7284 largeedittest7285 largeedittest7286 largeedittest7287 largeedittest7288 largeedittest7289 largeedittest729 largeedittest7290 largeedittest7291 largeedittest7292 largeedittest7293 largeedittest7294 largeedittest7295 largeedittest7296 largeedittest7297 largeedittest7298 largeedittest7299 largeedittest73 largeedittest730 largeedittest7300 largeedittest7301 largeedittest7302 largeedittest7303 largeedittest7304 largeedittest7305 largeedittest7306 largeedittest7307 largeedittest7308 largeedittest7309 largeedittest731 largeedittest7310 largeedittest7311 largeedittest7312 largeedittest7313 largeedittest7314 largeedittest7315 largeedittest7316 largeedittest7317 largeedittest7318 largeedittest7319 largeedittest732 largeedittest7320 largeedittest7321 largeedittest7322 largeedittest7323 largeedittest7324 largeedittest7325 largeedittest7326 largeedittest7327 largeedittest7328 largeedittest7329 largeedittest733 largeedittest7330 largeedittest7331 largeedittest7332 largeedittest7333 largeedittest7334 largeedittest7335 largeedittest7336 largeedittest7337 largeedittest7338 largeedittest7339 largeedittest734 largeedittest7340 largeedittest7341 largeedittest7342 largeedittest7343 largeedittest7344 largeedittest7345 largeedittest7346 largeedittest7347 largeedittest7348 largeedittest7349 largeedittest735 largeedittest7350 largeedittest7351 largeedittest7352 largeedittest7353 largeedittest7354 largeedittest7355 largeedittest7356 largeedittest7357 largeedittest7358 largeedittest7359 largeedittest736 largeedittest7360 largeedittest7361 largeedittest7362 largeedittest7363 largeedittest7364 largeedittest7365 largeedittest7366 largeedittest7367 largeedittest7368 largeedittest7369 largeedittest737 largeedittest7370 largeedittest7371 largeedittest7372 largeedittest7373 largeedittest7374 largeedittest7375 largeedittest7376 largeedittest7377 largeedittest7378 largeedittest7379 largeedittest738 largeedittest7380 largeedittest7381 largeedittest7382 largeedittest7383 largeedittest7384 largeedittest7385 largeedittest7386 largeedittest7387 largeedittest7388 largeedittest7389 largeedittest739 largeedittest7390 largeedittest7391 largeedittest7392 largeedittest7393 largeedittest7394 largeedittest7395 largeedittest7396 largeedittest7397 largeedittest7398 largeedittest7399 largeedittest74 largeedittest740 largeedittest7400 largeedittest7401 largeedittest7402 largeedittest7403 largeedittest7404 largeedittest7405 largeedittest7406 largeedittest7407 largeedittest7408 largeedittest7409 largeedittest741 largeedittest7410 largeedittest7411 largeedittest7412 largeedittest7413 largeedittest7414 largeedittest7415 largeedittest7416 largeedittest7417 largeedittest7418 largeedittest7419 largeedittest742 largeedittest7420 largeedittest7421 largeedittest7422 largeedittest7423 largeedittest7424 largeedittest7425 largeedittest7426 largeedittest7427 largeedittest7428 largeedittest7429 largeedittest743 largeedittest7430 largeedittest7431 largeedittest7432 largeedittest7433 largeedittest7434 largeedittest7435 largeedittest7436 largeedittest7437 largeedittest7438 largeedittest7439 largeedittest744 largeedittest7440 largeedittest7441 largeedittest7442 largeedittest7443 largeedittest7444 largeedittest7445 largeedittest7446 largeedittest7447 largeedittest7448 largeedittest7449 largeedittest745 largeedittest7450 largeedittest7451 largeedittest7452 largeedittest7453 largeedittest7454 largeedittest7455 largeedittest7456 largeedittest7457 largeedittest7458 largeedittest7459 largeedittest746 largeedittest7460 largeedittest7461 largeedittest7462 largeedittest7463 largeedittest7464 largeedittest7465 largeedittest7466 largeedittest7467 largeedittest7468 largeedittest7469 largeedittest747 largeedittest7470 largeedittest7471 largeedittest7472 largeedittest7473 largeedittest7474 largeedittest7475 largeedittest7476 largeedittest7477 largeedittest7478 largeedittest7479 largeedittest748 largeedittest7480 largeedittest7481 largeedittest7482 largeedittest7483 largeedittest7484 largeedittest7485 largeedittest7486 largeedittest7487 largeedittest7488 largeedittest7489 largeedittest749 largeedittest7490 largeedittest7491 largeedittest7492 largeedittest7493 largeedittest7494 largeedittest7495 largeedittest7496 largeedittest7497 largeedittest7498 largeedittest7499 largeedittest75 largeedittest750 largeedittest7500 largeedittest7501 largeedittest7502 largeedittest7503 largeedittest7504 largeedittest7505 largeedittest7506 largeedittest7507 largeedittest7508 largeedittest7509 largeedittest751 largeedittest7510 largeedittest7511 largeedittest7512 largeedittest7513 largeedittest7514 largeedittest7515 largeedittest7516 largeedittest7517 largeedittest7518 largeedittest7519 largeedittest752 largeedittest7520 largeedittest7521 largeedittest7522 largeedittest7523 largeedittest7524 largeedittest7525 largeedittest7526 largeedittest7527 largeedittest7528 largeedittest7529 largeedittest753 largeedittest7530 largeedittest7531 largeedittest7532 largeedittest7533 largeedittest7534 largeedittest7535 largeedittest7536 largeedittest7537 largeedittest7538 largeedittest7539 largeedittest754 largeedittest7540 largeedittest7541 largeedittest7542 largeedittest7543 largeedittest7544 largeedittest7545 largeedittest7546 largeedittest7547 largeedittest7548 largeedittest7549 largeedittest755 largeedittest7550 largeedittest7551 largeedittest7552 largeedittest7553 largeedittest7554 largeedittest7555 largeedittest7556 largeedittest7557 largeedittest7558 largeedittest7559 largeedittest756 largeedittest7560 largeedittest7561 largeedittest7562 largeedittest7563 largeedittest7564 largeedittest7565 largeedittest7566 largeedittest7567 largeedittest7568 largeedittest7569 largeedittest757 largeedittest7570 largeedittest7571 largeedittest7572 largeedittest7573 largeedittest7574 largeedittest7575 largeedittest7576 largeedittest7577 largeedittest7578 largeedittest7579 largeedittest758 largeedittest7580 largeedittest7581 largeedittest7582 largeedittest7583 largeedittest7584 largeedittest7585 largeedittest7586 largeedittest7587 largeedittest7588 largeedittest7589 largeedittest759 largeedittest7590 largeedittest7591 largeedittest7592 largeedittest7593 largeedittest7594 largeedittest7595 largeedittest7596 largeedittest7597 largeedittest7598 largeedittest7599 largeedittest76 largeedittest760 largeedittest7600 largeedittest7601 largeedittest7602 largeedittest7603 largeedittest7604 largeedittest7605 largeedittest7606 largeedittest7607 largeedittest7608 largeedittest7609 largeedittest761 largeedittest7610 largeedittest7611 largeedittest7612 largeedittest7613 largeedittest7614 largeedittest7615 largeedittest7616 largeedittest7617 largeedittest7618 largeedittest7619 largeedittest762 largeedittest7620 largeedittest7621 largeedittest7622 largeedittest7623 largeedittest7624 largeedittest7625 largeedittest7626 largeedittest7627 largeedittest7628 largeedittest7629 largeedittest763 largeedittest7630 largeedittest7631 largeedittest7632 largeedittest7633 largeedittest7634 largeedittest7635 largeedittest7636 largeedittest7637 largeedittest7638 largeedittest7639 largeedittest764 largeedittest7640 largeedittest7641 largeedittest7642 largeedittest7643 largeedittest7644 largeedittest7645 largeedittest7646 largeedittest7647 largeedittest7648 largeedittest7649 largeedittest765 largeedittest7650 largeedittest7651 largeedittest7652 largeedittest7653 largeedittest7654 largeedittest7655 largeedittest7656 largeedittest7657 largeedittest7658 largeedittest7659 largeedittest766 largeedittest7660 largeedittest7661 largeedittest7662 largeedittest7663 largeedittest7664 largeedittest7665 largeedittest7666 largeedittest7667 largeedittest7668 largeedittest7669 largeedittest767 largeedittest7670 largeedittest7671 largeedittest7672 largeedittest7673 largeedittest7674 largeedittest7675 largeedittest7676 largeedittest7677 largeedittest7678 largeedittest7679 largeedittest768 largeedittest7680 largeedittest7681 largeedittest7682 largeedittest7683 largeedittest7684 largeedittest7685 largeedittest7686 largeedittest7687 largeedittest7688 largeedittest7689 largeedittest769 largeedittest7690 largeedittest7691 largeedittest7692 largeedittest7693 largeedittest7694 largeedittest7695 largeedittest7696 largeedittest7697 largeedittest7698 largeedittest7699 largeedittest77 largeedittest770 largeedittest7700 largeedittest7701 largeedittest7702 largeedittest7703 largeedittest7704 largeedittest7705 largeedittest7706 largeedittest7707 largeedittest7708 largeedittest7709 largeedittest771 largeedittest7710 largeedittest7711 largeedittest7712 largeedittest7713 largeedittest7714 largeedittest7715 largeedittest7716 largeedittest7717 largeedittest7718 largeedittest7719 largeedittest772 largeedittest7720 largeedittest7721 largeedittest7722 largeedittest7723 largeedittest7724 largeedittest7725 largeedittest7726 largeedittest7727 largeedittest7728 largeedittest7729 largeedittest773 largeedittest7730 largeedittest7731 largeedittest7732 largeedittest7733 largeedittest7734 largeedittest7735 largeedittest7736 largeedittest7737 largeedittest7738 largeedittest7739 largeedittest774 largeedittest7740 largeedittest7741 largeedittest7742 largeedittest7743 largeedittest7744 largeedittest7745 largeedittest7746 largeedittest7747 largeedittest7748 largeedittest7749 largeedittest775 largeedittest7750 largeedittest7751 largeedittest7752 largeedittest7753 largeedittest7754 largeedittest7755 largeedittest7756 largeedittest7757 largeedittest7758 largeedittest7759 largeedittest776 largeedittest7760 largeedittest7761 largeedittest7762 largeedittest7763 largeedittest7764 largeedittest7765 largeedittest7766 largeedittest7767 largeedittest7768 largeedittest7769 largeedittest777 largeedittest7770 largeedittest7771 largeedittest7772 largeedittest7773 largeedittest7774 largeedittest7775 largeedittest7776 largeedittest7777 largeedittest7778 largeedittest7779 largeedittest778 largeedittest7780 largeedittest7781 largeedittest7782 largeedittest7783 largeedittest7784 largeedittest7785 largeedittest7786 largeedittest7787 largeedittest7788 largeedittest7789 largeedittest779 largeedittest7790 largeedittest7791 largeedittest7792 largeedittest7793 largeedittest7794 largeedittest7795 largeedittest7796 largeedittest7797 largeedittest7798 largeedittest7799 largeedittest78 largeedittest780 largeedittest7800 largeedittest7801 largeedittest7802 largeedittest7803 largeedittest7804 largeedittest7805 largeedittest7806 largeedittest7807 largeedittest7808 largeedittest7809 largeedittest781 largeedittest7810 largeedittest7811 largeedittest7812 largeedittest7813 largeedittest7814 largeedittest7815 largeedittest7816 largeedittest7817 largeedittest7818 largeedittest7819 largeedittest782 largeedittest7820 largeedittest7821 largeedittest7822 largeedittest7823 largeedittest7824 largeedittest7825 largeedittest7826 largeedittest7827 largeedittest7828 largeedittest7829 largeedittest783 largeedittest7830 largeedittest7831 largeedittest7832 largeedittest7833 largeedittest7834 largeedittest7835 largeedittest7836 largeedittest7837 largeedittest7838 largeedittest7839 largeedittest784 largeedittest7840 largeedittest7841 largeedittest7842 largeedittest7843 largeedittest7844 largeedittest7845 largeedittest7846 largeedittest7847 largeedittest7848 largeedittest7849 largeedittest785 largeedittest7850 largeedittest7851 largeedittest7852 largeedittest7853 largeedittest7854 largeedittest7855 largeedittest7856 largeedittest7857 largeedittest7858 largeedittest7859 largeedittest786 largeedittest7860 largeedittest7861 largeedittest7862 largeedittest7863 largeedittest7864 largeedittest7865 largeedittest7866 largeedittest7867 largeedittest7868 largeedittest7869 largeedittest787 largeedittest7870 largeedittest7871 largeedittest7872 largeedittest7873 largeedittest7874 largeedittest7875 largeedittest7876 largeedittest7877 largeedittest7878 largeedittest7879 largeedittest788 largeedittest7880 largeedittest7881 largeedittest7882 largeedittest7883 largeedittest7884 largeedittest7885 largeedittest7886 largeedittest7887 largeedittest7888 largeedittest7889 largeedittest789 largeedittest7890 largeedittest7891 largeedittest7892 largeedittest7893 largeedittest7894 largeedittest7895 largeedittest7896 largeedittest7897 largeedittest7898 largeedittest7899 largeedittest79 largeedittest790 largeedittest7900 largeedittest7901 largeedittest7902 largeedittest7903 largeedittest7904 largeedittest7905 largeedittest7906 largeedittest7907 largeedittest7908 largeedittest7909 largeedittest791 largeedittest7910 largeedittest7911 largeedittest7912 largeedittest7913 largeedittest7914 largeedittest7915 largeedittest7916 largeedittest7917 largeedittest7918 largeedittest7919 largeedittest792 largeedittest7920 largeedittest7921 largeedittest7922 largeedittest7923 largeedittest7924 largeedittest7925 largeedittest7926 largeedittest7927 largeedittest7928 largeedittest7929 largeedittest793 largeedittest7930 largeedittest7931 largeedittest7932 largeedittest7933 largeedittest7934 largeedittest7935 largeedittest7936 largeedittest7937 largeedittest7938 largeedittest7939 largeedittest794 largeedittest7940 largeedittest7941 largeedittest7942 largeedittest7943 largeedittest7944 largeedittest7945 largeedittest7946 largeedittest7947 largeedittest7948 largeedittest7949 largeedittest795 largeedittest7950 largeedittest7951 largeedittest7952 largeedittest7953 largeedittest7954 largeedittest7955 largeedittest7956 largeedittest7957 largeedittest7958 largeedittest7959 largeedittest796 largeedittest7960 largeedittest7961 largeedittest7962 largeedittest7963 largeedittest7964 largeedittest7965 largeedittest7966 largeedittest7967 largeedittest7968 largeedittest7969 largeedittest797 largeedittest7970 largeedittest7971 largeedittest7972 largeedittest7973 largeedittest7974 largeedittest7975 largeedittest7976 largeedittest7977 largeedittest7978 largeedittest7979 largeedittest798 largeedittest7980 largeedittest7981 largeedittest7982 largeedittest7983 largeedittest7984 largeedittest7985 largeedittest7986 largeedittest7987 largeedittest7988 largeedittest7989 largeedittest799 largeedittest7990 largeedittest7991 largeedittest7992 largeedittest7993 largeedittest7994 largeedittest7995 largeedittest7996 largeedittest7997 largeedittest7998 largeedittest7999 largeedittest8 largeedittest80 largeedittest800 largeedittest8000 largeedittest8001 largeedittest8002 largeedittest8003 largeedittest8004 largeedittest8005 largeedittest8006 largeedittest8007 largeedittest8008 largeedittest8009 largeedittest801 largeedittest8010 largeedittest8011 largeedittest8012 largeedittest8013 largeedittest8014 largeedittest8015 largeedittest8016 largeedittest8017 largeedittest8018 largeedittest8019 largeedittest802 largeedittest8020 largeedittest8021 largeedittest8022 largeedittest8023 largeedittest8024 largeedittest8025 largeedittest8026 largeedittest8027 largeedittest8028 largeedittest8029 largeedittest803 largeedittest8030 largeedittest8031 largeedittest8032 largeedittest8033 largeedittest8034 largeedittest8035 largeedittest8036 largeedittest8037 largeedittest8038 largeedittest8039 largeedittest804 largeedittest8040 largeedittest8041 largeedittest8042 largeedittest8043 largeedittest8044 largeedittest8045 largeedittest8046 largeedittest8047 largeedittest8048 largeedittest8049 largeedittest805 largeedittest8050 largeedittest8051 largeedittest8052 largeedittest8053 largeedittest8054 largeedittest8055 largeedittest8056 largeedittest8057 largeedittest8058 largeedittest8059 largeedittest806 largeedittest8060 largeedittest8061 largeedittest8062 largeedittest8063 largeedittest8064 largeedittest8065 largeedittest8066 largeedittest8067 largeedittest8068 largeedittest8069 largeedittest807 largeedittest8070 largeedittest8071 largeedittest8072 largeedittest8073 largeedittest8074 largeedittest8075 largeedittest8076 largeedittest8077 largeedittest8078 largeedittest8079 largeedittest808 largeedittest8080 largeedittest8081 largeedittest8082 largeedittest8083 largeedittest8084 largeedittest8085 largeedittest8086 largeedittest8087 largeedittest8088 largeedittest8089 largeedittest809 largeedittest8090 largeedittest8091 largeedittest8092 largeedittest8093 largeedittest8094 largeedittest8095 largeedittest8096 largeedittest8097 largeedittest8098 largeedittest8099 largeedittest81 largeedittest810 largeedittest8100 largeedittest8101 largeedittest8102 largeedittest8103 largeedittest8104 largeedittest8105 largeedittest8106 largeedittest8107 largeedittest8108 largeedittest8109 largeedittest811 largeedittest8110 largeedittest8111 largeedittest8112 largeedittest8113 largeedittest8114 largeedittest8115 largeedittest8116 largeedittest8117 largeedittest8118 largeedittest8119 largeedittest812 largeedittest8120 largeedittest8121 largeedittest8122 largeedittest8123 largeedittest8124 largeedittest8125 largeedittest8126 largeedittest8127 largeedittest8128 largeedittest8129 largeedittest813 largeedittest8130 largeedittest8131 largeedittest8132 largeedittest8133 largeedittest8134 largeedittest8135 largeedittest8136 largeedittest8137 largeedittest8138 largeedittest8139 largeedittest814 largeedittest8140 largeedittest8141 largeedittest8142 largeedittest8143 largeedittest8144 largeedittest8145 largeedittest8146 largeedittest8147 largeedittest8148 largeedittest8149 largeedittest815 largeedittest8150 largeedittest8151 largeedittest8152 largeedittest8153 largeedittest8154 largeedittest8155 largeedittest8156 largeedittest8157 largeedittest8158 largeedittest8159 largeedittest816 largeedittest8160 largeedittest8161 largeedittest8162 largeedittest8163 largeedittest8164 largeedittest8165 largeedittest8166 largeedittest8167 largeedittest8168 largeedittest8169 largeedittest817 largeedittest8170 largeedittest8171 largeedittest8172 largeedittest8173 largeedittest8174 largeedittest8175 largeedittest8176 largeedittest8177 largeedittest8178 largeedittest8179 largeedittest818 largeedittest8180 largeedittest8181 largeedittest8182 largeedittest8183 largeedittest8184 largeedittest8185 largeedittest8186 largeedittest8187 largeedittest8188 largeedittest8189 largeedittest819 largeedittest8190 largeedittest8191 largeedittest8192 largeedittest8193 largeedittest8194 largeedittest8195 largeedittest8196 largeedittest8197 largeedittest8198 largeedittest8199 largeedittest82 largeedittest820 largeedittest8200 largeedittest8201 largeedittest8202 largeedittest8203 largeedittest8204 largeedittest8205 largeedittest8206 largeedittest8207 largeedittest8208 largeedittest8209 largeedittest821 largeedittest8210 largeedittest8211 largeedittest8212 largeedittest8213 largeedittest8214 largeedittest8215 largeedittest8216 largeedittest8217 largeedittest8218 largeedittest8219 largeedittest822 largeedittest8220 largeedittest8221 largeedittest8222 largeedittest8223 largeedittest8224 largeedittest8225 largeedittest8226 largeedittest8227 largeedittest8228 largeedittest8229 largeedittest823 largeedittest8230 largeedittest8231 largeedittest8232 largeedittest8233 largeedittest8234 largeedittest8235 largeedittest8236 largeedittest8237 largeedittest8238 largeedittest8239 largeedittest824 largeedittest8240 largeedittest8241 largeedittest8242 largeedittest8243 largeedittest8244 largeedittest8245 largeedittest8246 largeedittest8247 largeedittest8248 largeedittest8249 largeedittest825 largeedittest8250 largeedittest8251 largeedittest8252 largeedittest8253 largeedittest8254 largeedittest8255 largeedittest8256 largeedittest8257 largeedittest8258 largeedittest8259 largeedittest826 largeedittest8260 largeedittest8261 largeedittest8262 largeedittest8263 largeedittest8264 largeedittest8265 largeedittest8266 largeedittest8267 largeedittest8268 largeedittest8269 largeedittest827 largeedittest8270 largeedittest8271 largeedittest8272 largeedittest8273 largeedittest8274 largeedittest8275 largeedittest8276 largeedittest8277 largeedittest8278 largeedittest8279 largeedittest828 largeedittest8280 largeedittest8281 largeedittest8282 largeedittest8283 largeedittest8284 largeedittest8285 largeedittest8286 largeedittest8287 largeedittest8288 largeedittest8289 largeedittest829 largeedittest8290 largeedittest8291 largeedittest8292 largeedittest8293 largeedittest8294 largeedittest8295 largeedittest8296 largeedittest8297 largeedittest8298 largeedittest8299 largeedittest83 largeedittest830 largeedittest8300 largeedittest8301 largeedittest8302 largeedittest8303 largeedittest8304 largeedittest8305 largeedittest8306 largeedittest8307 largeedittest8308 largeedittest8309 largeedittest831 largeedittest8310 largeedittest8311 largeedittest8312 largeedittest8313 largeedittest8314 largeedittest8315 largeedittest8316 largeedittest8317 largeedittest8318 largeedittest8319 largeedittest832 largeedittest8320 largeedittest8321 largeedittest8322 largeedittest8323 largeedittest8324 largeedittest8325 largeedittest8326 largeedittest8327 largeedittest8328 largeedittest8329 largeedittest833 largeedittest8330 largeedittest8331 largeedittest8332 largeedittest8333 largeedittest8334 largeedittest8335 largeedittest8336 largeedittest8337 largeedittest8338 largeedittest8339 largeedittest834 largeedittest8340 largeedittest8341 largeedittest8342 largeedittest8343 largeedittest8344 largeedittest8345 largeedittest8346 largeedittest8347 largeedittest8348 largeedittest8349 largeedittest835 largeedittest8350 largeedittest8351 largeedittest8352 largeedittest8353 largeedittest8354 largeedittest8355 largeedittest8356 largeedittest8357 largeedittest8358 largeedittest8359 largeedittest836 largeedittest8360 largeedittest8361 largeedittest8362 largeedittest8363 largeedittest8364 largeedittest8365 largeedittest8366 largeedittest8367 largeedittest8368 largeedittest8369 largeedittest837 largeedittest8370 largeedittest8371 largeedittest8372 largeedittest8373 largeedittest8374 largeedittest8375 largeedittest8376 largeedittest8377 largeedittest8378 largeedittest8379 largeedittest838 largeedittest8380 largeedittest8381 largeedittest8382 largeedittest8383 largeedittest8384 largeedittest8385 largeedittest8386 largeedittest8387 largeedittest8388 largeedittest8389 largeedittest839 largeedittest8390 largeedittest8391 largeedittest8392 largeedittest8393 largeedittest8394 largeedittest8395 largeedittest8396 largeedittest8397 largeedittest8398 largeedittest8399 largeedittest84 largeedittest840 largeedittest8400 largeedittest8401 largeedittest8402 largeedittest8403 largeedittest8404 largeedittest8405 largeedittest8406 largeedittest8407 largeedittest8408 largeedittest8409 largeedittest841 largeedittest8410 largeedittest8411 largeedittest8412 largeedittest8413 largeedittest8414 largeedittest8415 largeedittest8416 largeedittest8417 largeedittest8418 largeedittest8419 largeedittest842 largeedittest8420 largeedittest8421 largeedittest8422 largeedittest8423 largeedittest8424 largeedittest8425 largeedittest8426 largeedittest8427 largeedittest8428 largeedittest8429 largeedittest843 largeedittest8430 largeedittest8431 largeedittest8432 largeedittest8433 largeedittest8434 largeedittest8435 largeedittest8436 largeedittest8437 largeedittest8438 largeedittest8439 largeedittest844 largeedittest8440 largeedittest8441 largeedittest8442 largeedittest8443 largeedittest8444 largeedittest8445 largeedittest8446 largeedittest8447 largeedittest8448 largeedittest8449 largeedittest845 largeedittest8450 largeedittest8451 largeedittest8452 largeedittest8453 largeedittest8454 largeedittest8455 largeedittest8456 largeedittest8457 largeedittest8458 largeedittest8459 largeedittest846 largeedittest8460 largeedittest8461 largeedittest8462 largeedittest8463 largeedittest8464 largeedittest8465 largeedittest8466 largeedittest8467 largeedittest8468 largeedittest8469 largeedittest847 largeedittest8470 largeedittest8471 largeedittest8472 largeedittest8473 largeedittest8474 largeedittest8475 largeedittest8476 largeedittest8477 largeedittest8478 largeedittest8479 largeedittest848 largeedittest8480 largeedittest8481 largeedittest8482 largeedittest8483 largeedittest8484 largeedittest8485 largeedittest8486 largeedittest8487 largeedittest8488 largeedittest8489 largeedittest849 largeedittest8490 largeedittest8491 largeedittest8492 largeedittest8493 largeedittest8494 largeedittest8495 largeedittest8496 largeedittest8497 largeedittest8498 largeedittest8499 largeedittest85 largeedittest850 largeedittest8500 largeedittest8501 largeedittest8502 largeedittest8503 largeedittest8504 largeedittest8505 largeedittest8506 largeedittest8507 largeedittest8508 largeedittest8509 largeedittest851 largeedittest8510 largeedittest8511 largeedittest8512 largeedittest8513 largeedittest8514 largeedittest8515 largeedittest8516 largeedittest8517 largeedittest8518 largeedittest8519 largeedittest852 largeedittest8520 largeedittest8521 largeedittest8522 largeedittest8523 largeedittest8524 largeedittest8525 largeedittest8526 largeedittest8527 largeedittest8528 largeedittest8529 largeedittest853 largeedittest8530 largeedittest8531 largeedittest8532 largeedittest8533 largeedittest8534 largeedittest8535 largeedittest8536 largeedittest8537 largeedittest8538 largeedittest8539 largeedittest854 largeedittest8540 largeedittest8541 largeedittest8542 largeedittest8543 largeedittest8544 largeedittest8545 largeedittest8546 largeedittest8547 largeedittest8548 largeedittest8549 largeedittest855 largeedittest8550 largeedittest8551 largeedittest8552 largeedittest8553 largeedittest8554 largeedittest8555 largeedittest8556 largeedittest8557 largeedittest8558 largeedittest8559 largeedittest856 largeedittest8560 largeedittest8561 largeedittest8562 largeedittest8563 largeedittest8564 largeedittest8565 largeedittest8566 largeedittest8567 largeedittest8568 largeedittest8569 largeedittest857 largeedittest8570 largeedittest8571 largeedittest8572 largeedittest8573 largeedittest8574 largeedittest8575 largeedittest8576 largeedittest8577 largeedittest8578 largeedittest8579 largeedittest858 largeedittest8580 largeedittest8581 largeedittest8582 largeedittest8583 largeedittest8584 largeedittest8585 largeedittest8586 largeedittest8587 largeedittest8588 largeedittest8589 largeedittest859 largeedittest8590 largeedittest8591 largeedittest8592 largeedittest8593 largeedittest8594 largeedittest8595 largeedittest8596 largeedittest8597 largeedittest8598 largeedittest8599 largeedittest86 largeedittest860 largeedittest8600 largeedittest8601 largeedittest8602 largeedittest8603 largeedittest8604 largeedittest8605 largeedittest8606 largeedittest8607 largeedittest8608 largeedittest8609 largeedittest861 largeedittest8610 largeedittest8611 largeedittest8612 largeedittest8613 largeedittest8614 largeedittest8615 largeedittest8616 largeedittest8617 largeedittest8618 largeedittest8619 largeedittest862 largeedittest8620 largeedittest8621 largeedittest8622 largeedittest8623 largeedittest8624 largeedittest8625 largeedittest8626 largeedittest8627 largeedittest8628 largeedittest8629 largeedittest863 largeedittest8630 largeedittest8631 largeedittest8632 largeedittest8633 largeedittest8634 largeedittest8635 largeedittest8636 largeedittest8637 largeedittest8638 largeedittest8639 largeedittest864 largeedittest8640 largeedittest8641 largeedittest8642 largeedittest8643 largeedittest8644 largeedittest8645 largeedittest8646 largeedittest8647 largeedittest8648 largeedittest8649 largeedittest865 largeedittest8650 largeedittest8651 largeedittest8652 largeedittest8653 largeedittest8654 largeedittest8655 largeedittest8656 largeedittest8657 largeedittest8658 largeedittest8659 largeedittest866 largeedittest8660 largeedittest8661 largeedittest8662 largeedittest8663 largeedittest8664 largeedittest8665 largeedittest8666 largeedittest8667 largeedittest8668 largeedittest8669 largeedittest867 largeedittest8670 largeedittest8671 largeedittest8672 largeedittest8673 largeedittest8674 largeedittest8675 largeedittest8676 largeedittest8677 largeedittest8678 largeedittest8679 largeedittest868 largeedittest8680 largeedittest8681 largeedittest8682 largeedittest8683 largeedittest8684 largeedittest8685 largeedittest8686 largeedittest8687 largeedittest8688 largeedittest8689 largeedittest869 largeedittest8690 largeedittest8691 largeedittest8692 largeedittest8693 largeedittest8694 largeedittest8695 largeedittest8696 largeedittest8697 largeedittest8698 largeedittest8699 largeedittest87 largeedittest870 largeedittest8700 largeedittest8701 largeedittest8702 largeedittest8703 largeedittest8704 largeedittest8705 largeedittest8706 largeedittest8707 largeedittest8708 largeedittest8709 largeedittest871 largeedittest8710 largeedittest8711 largeedittest8712 largeedittest8713 largeedittest8714 largeedittest8715 largeedittest8716 largeedittest8717 largeedittest8718 largeedittest8719 largeedittest872 largeedittest8720 largeedittest8721 largeedittest8722 largeedittest8723 largeedittest8724 largeedittest8725 largeedittest8726 largeedittest8727 largeedittest8728 largeedittest8729 largeedittest873 largeedittest8730 largeedittest8731 largeedittest8732 largeedittest8733 largeedittest8734 largeedittest8735 largeedittest8736 largeedittest8737 largeedittest8738 largeedittest8739 largeedittest874 largeedittest8740 largeedittest8741 largeedittest8742 largeedittest8743 largeedittest8744 largeedittest8745 largeedittest8746 largeedittest8747 largeedittest8748 largeedittest8749 largeedittest875 largeedittest8750 largeedittest8751 largeedittest8752 largeedittest8753 largeedittest8754 largeedittest8755 largeedittest8756 largeedittest8757 largeedittest8758 largeedittest8759 largeedittest876 largeedittest8760 largeedittest8761 largeedittest8762 largeedittest8763 largeedittest8764 largeedittest8765 largeedittest8766 largeedittest8767 largeedittest8768 largeedittest8769 largeedittest877 largeedittest8770 largeedittest8771 largeedittest8772 largeedittest8773 largeedittest8774 largeedittest8775 largeedittest8776 largeedittest8777 largeedittest8778 largeedittest8779 largeedittest878 largeedittest8780 largeedittest8781 largeedittest8782 largeedittest8783 largeedittest8784 largeedittest8785 largeedittest8786 largeedittest8787 largeedittest8788 largeedittest8789 largeedittest879 largeedittest8790 largeedittest8791 largeedittest8792 largeedittest8793 largeedittest8794 largeedittest8795 largeedittest8796 largeedittest8797 largeedittest8798 largeedittest8799 largeedittest88 largeedittest880 largeedittest8800 largeedittest8801 largeedittest8802 largeedittest8803 largeedittest8804 largeedittest8805 largeedittest8806 largeedittest8807 largeedittest8808 largeedittest8809 largeedittest881 largeedittest8810 largeedittest8811 largeedittest8812 largeedittest8813 largeedittest8814 largeedittest8815 largeedittest8816 largeedittest8817 largeedittest8818 largeedittest8819 largeedittest882 largeedittest8820 largeedittest8821 largeedittest8822 largeedittest8823 largeedittest8824 largeedittest8825 largeedittest8826 largeedittest8827 largeedittest8828 largeedittest8829 largeedittest883 largeedittest8830 largeedittest8831 largeedittest8832 largeedittest8833 largeedittest8834 largeedittest8835 largeedittest8836 largeedittest8837 largeedittest8838 largeedittest8839 largeedittest884 largeedittest8840 largeedittest8841 largeedittest8842 largeedittest8843 largeedittest8844 largeedittest8845 largeedittest8846 largeedittest8847 largeedittest8848 largeedittest8849 largeedittest885 largeedittest8850 largeedittest8851 largeedittest8852 largeedittest8853 largeedittest8854 largeedittest8855 largeedittest8856 largeedittest8857 largeedittest8858 largeedittest8859 largeedittest886 largeedittest8860 largeedittest8861 largeedittest8862 largeedittest8863 largeedittest8864 largeedittest8865 largeedittest8866 largeedittest8867 largeedittest8868 largeedittest8869 largeedittest887 largeedittest8870 largeedittest8871 largeedittest8872 largeedittest8873 largeedittest8874 largeedittest8875 largeedittest8876 largeedittest8877 largeedittest8878 largeedittest8879 largeedittest888 largeedittest8880 largeedittest8881 largeedittest8882 largeedittest8883 largeedittest8884 largeedittest8885 largeedittest8886 largeedittest8887 largeedittest8888 largeedittest8889 largeedittest889 largeedittest8890 largeedittest8891 largeedittest8892 largeedittest8893 largeedittest8894 largeedittest8895 largeedittest8896 largeedittest8897 largeedittest8898 largeedittest8899 largeedittest89 largeedittest890 largeedittest8900 largeedittest8901 largeedittest8902 largeedittest8903 largeedittest8904 largeedittest8905 largeedittest8906 largeedittest8907 largeedittest8908 largeedittest8909 largeedittest891 largeedittest8910 largeedittest8911 largeedittest8912 largeedittest8913 largeedittest8914 largeedittest8915 largeedittest8916 largeedittest8917 largeedittest8918 largeedittest8919 largeedittest892 largeedittest8920 largeedittest8921 largeedittest8922 largeedittest8923 largeedittest8924 largeedittest8925 largeedittest8926 largeedittest8927 largeedittest8928 largeedittest8929 largeedittest893 largeedittest8930 largeedittest8931 largeedittest8932 largeedittest8933 largeedittest8934 largeedittest8935 largeedittest8936 largeedittest8937 largeedittest8938 largeedittest8939 largeedittest894 largeedittest8940 largeedittest8941 largeedittest8942 largeedittest8943 largeedittest8944 largeedittest8945 largeedittest8946 largeedittest8947 largeedittest8948 largeedittest8949 largeedittest895 largeedittest8950 largeedittest8951 largeedittest8952 largeedittest8953 largeedittest8954 largeedittest8955 largeedittest8956 largeedittest8957 largeedittest8958 largeedittest8959 largeedittest896 largeedittest8960 largeedittest8961 largeedittest8962 largeedittest8963 largeedittest8964 largeedittest8965 largeedittest8966 largeedittest8967 largeedittest8968 largeedittest8969 largeedittest897 largeedittest8970 largeedittest8971 largeedittest8972 largeedittest8973 largeedittest8974 largeedittest8975 largeedittest8976 largeedittest8977 largeedittest8978 largeedittest8979 largeedittest898 largeedittest8980 largeedittest8981 largeedittest8982 largeedittest8983 largeedittest8984 largeedittest8985 largeedittest8986 largeedittest8987 largeedittest8988 largeedittest8989 largeedittest899 largeedittest8990 largeedittest8991 largeedittest8992 largeedittest8993 largeedittest8994 largeedittest8995 largeedittest8996 largeedittest8997 largeedittest8998 largeedittest8999 largeedittest9 largeedittest90 largeedittest900 largeedittest9000 largeedittest9001 largeedittest9002 largeedittest9003 largeedittest9004 largeedittest9005 largeedittest9006 largeedittest9007 largeedittest9008 largeedittest9009 largeedittest901 largeedittest9010 largeedittest9011 largeedittest9012 largeedittest9013 largeedittest9014 largeedittest9015 largeedittest9016 largeedittest9017 largeedittest9018 largeedittest9019 largeedittest902 largeedittest9020 largeedittest9021 largeedittest9022 largeedittest9023 largeedittest9024 largeedittest9025 largeedittest9026 largeedittest9027 largeedittest9028 largeedittest9029 largeedittest903 largeedittest9030 largeedittest9031 largeedittest9032 largeedittest9033 largeedittest9034 largeedittest9035 largeedittest9036 largeedittest9037 largeedittest9038 largeedittest9039 largeedittest904 largeedittest9040 largeedittest9041 largeedittest9042 largeedittest9043 largeedittest9044 largeedittest9045 largeedittest9046 largeedittest9047 largeedittest9048 largeedittest9049 largeedittest905 largeedittest9050 largeedittest9051 largeedittest9052 largeedittest9053 largeedittest9054 largeedittest9055 largeedittest9056 largeedittest9057 largeedittest9058 largeedittest9059 largeedittest906 largeedittest9060 largeedittest9061 largeedittest9062 largeedittest9063 largeedittest9064 largeedittest9065 largeedittest9066 largeedittest9067 largeedittest9068 largeedittest9069 largeedittest907 largeedittest9070 largeedittest9071 largeedittest9072 largeedittest9073 largeedittest9074 largeedittest9075 largeedittest9076 largeedittest9077 largeedittest9078 largeedittest9079 largeedittest908 largeedittest9080 largeedittest9081 largeedittest9082 largeedittest9083 largeedittest9084 largeedittest9085 largeedittest9086 largeedittest9087 largeedittest9088 largeedittest9089 largeedittest909 largeedittest9090 largeedittest9091 largeedittest9092 largeedittest9093 largeedittest9094 largeedittest9095 largeedittest9096 largeedittest9097 largeedittest9098 largeedittest9099 largeedittest91 largeedittest910 largeedittest9100 largeedittest9101 largeedittest9102 largeedittest9103 largeedittest9104 largeedittest9105 largeedittest9106 largeedittest9107 largeedittest9108 largeedittest9109 largeedittest911 largeedittest9110 largeedittest9111 largeedittest9112 largeedittest9113 largeedittest9114 largeedittest9115 largeedittest9116 largeedittest9117 largeedittest9118 largeedittest9119 largeedittest912 largeedittest9120 largeedittest9121 largeedittest9122 largeedittest9123 largeedittest9124 largeedittest9125 largeedittest9126 largeedittest9127 largeedittest9128 largeedittest9129 largeedittest913 largeedittest9130 largeedittest9131 largeedittest9132 largeedittest9133 largeedittest9134 largeedittest9135 largeedittest9136 largeedittest9137 largeedittest9138 largeedittest9139 largeedittest914 largeedittest9140 largeedittest9141 largeedittest9142 largeedittest9143 largeedittest9144 largeedittest9145 largeedittest9146 largeedittest9147 largeedittest9148 largeedittest9149 largeedittest915 largeedittest9150 largeedittest9151 largeedittest9152 largeedittest9153 largeedittest9154 largeedittest9155 largeedittest9156 largeedittest9157 largeedittest9158 largeedittest9159 largeedittest916 largeedittest9160 largeedittest9161 largeedittest9162 largeedittest9163 largeedittest9164 largeedittest9165 largeedittest9166 largeedittest9167 largeedittest9168 largeedittest9169 largeedittest917 largeedittest9170 largeedittest9171 largeedittest9172 largeedittest9173 largeedittest9174 largeedittest9175 largeedittest9176 largeedittest9177 largeedittest9178 largeedittest9179 largeedittest918 largeedittest9180 largeedittest9181 largeedittest9182 largeedittest9183 largeedittest9184 largeedittest9185 largeedittest9186 largeedittest9187 largeedittest9188 largeedittest9189 largeedittest919 largeedittest9190 largeedittest9191 largeedittest9192 largeedittest9193 largeedittest9194 largeedittest9195 largeedittest9196 largeedittest9197 largeedittest9198 largeedittest9199 largeedittest92 largeedittest920 largeedittest9200 largeedittest9201 largeedittest9202 largeedittest9203 largeedittest9204 largeedittest9205 largeedittest9206 largeedittest9207 largeedittest9208 largeedittest9209 largeedittest921 largeedittest9210 largeedittest9211 largeedittest9212 largeedittest9213 largeedittest9214 largeedittest9215 largeedittest9216 largeedittest9217 largeedittest9218 largeedittest9219 largeedittest922 largeedittest9220 largeedittest9221 largeedittest9222 largeedittest9223 largeedittest9224 largeedittest9225 largeedittest9226 largeedittest9227 largeedittest9228 largeedittest9229 largeedittest923 largeedittest9230 largeedittest9231 largeedittest9232 largeedittest9233 largeedittest9234 largeedittest9235 largeedittest9236 largeedittest9237 largeedittest9238 largeedittest9239 largeedittest924 largeedittest9240 largeedittest9241 largeedittest9242 largeedittest9243 largeedittest9244 largeedittest9245 largeedittest9246 largeedittest9247 largeedittest9248 largeedittest9249 largeedittest925 largeedittest9250 largeedittest9251 largeedittest9252 largeedittest9253 largeedittest9254 largeedittest9255 largeedittest9256 largeedittest9257 largeedittest9258 largeedittest9259 largeedittest926 largeedittest9260 largeedittest9261 largeedittest9262 largeedittest9263 largeedittest9264 largeedittest9265 largeedittest9266 largeedittest9267 largeedittest9268 largeedittest9269 largeedittest927 largeedittest9270 largeedittest9271 largeedittest9272 largeedittest9273 largeedittest9274 largeedittest9275 largeedittest9276 largeedittest9277 largeedittest9278 largeedittest9279 largeedittest928 largeedittest9280 largeedittest9281 largeedittest9282 largeedittest9283 largeedittest9284 largeedittest9285 largeedittest9286 largeedittest9287 largeedittest9288 largeedittest9289 largeedittest929 largeedittest9290 largeedittest9291 largeedittest9292 largeedittest9293 largeedittest9294 largeedittest9295 largeedittest9296 largeedittest9297 largeedittest9298 largeedittest9299 largeedittest93 largeedittest930 largeedittest9300 largeedittest9301 largeedittest9302 largeedittest9303 largeedittest9304 largeedittest9305 largeedittest9306 largeedittest9307 largeedittest9308 largeedittest9309 largeedittest931 largeedittest9310 largeedittest9311 largeedittest9312 largeedittest9313 largeedittest9314 largeedittest9315 largeedittest9316 largeedittest9317 largeedittest9318 largeedittest9319 largeedittest932 largeedittest9320 largeedittest9321 largeedittest9322 largeedittest9323 largeedittest9324 largeedittest9325 largeedittest9326 largeedittest9327 largeedittest9328 largeedittest9329 largeedittest933 largeedittest9330 largeedittest9331 largeedittest9332 largeedittest9333 largeedittest9334 largeedittest9335 largeedittest9336 largeedittest9337 largeedittest9338 largeedittest9339 largeedittest934 largeedittest9340 largeedittest9341 largeedittest9342 largeedittest9343 largeedittest9344 largeedittest9345 largeedittest9346 largeedittest9347 largeedittest9348 largeedittest9349 largeedittest935 largeedittest9350 largeedittest9351 largeedittest9352 largeedittest9353 largeedittest9354 largeedittest9355 largeedittest9356 largeedittest9357 largeedittest9358 largeedittest9359 largeedittest936 largeedittest9360 largeedittest9361 largeedittest9362 largeedittest9363 largeedittest9364 largeedittest9365 largeedittest9366 largeedittest9367 largeedittest9368 largeedittest9369 largeedittest937 largeedittest9370 largeedittest9371 largeedittest9372 largeedittest9373 largeedittest9374 largeedittest9375 largeedittest9376 largeedittest9377 largeedittest9378 largeedittest9379 largeedittest938 largeedittest9380 largeedittest9381 largeedittest9382 largeedittest9383 largeedittest9384 largeedittest9385 largeedittest9386 largeedittest9387 largeedittest9388 largeedittest9389 largeedittest939 largeedittest9390 largeedittest9391 largeedittest9392 largeedittest9393 largeedittest9394 largeedittest9395 largeedittest9396 largeedittest9397 largeedittest9398 largeedittest9399 largeedittest94 largeedittest940 largeedittest9400 largeedittest9401 largeedittest9402 largeedittest9403 largeedittest9404 largeedittest9405 largeedittest9406 largeedittest9407 largeedittest9408 largeedittest9409 largeedittest941 largeedittest9410 largeedittest9411 largeedittest9412 largeedittest9413 largeedittest9414 largeedittest9415 largeedittest9416 largeedittest9417 largeedittest9418 largeedittest9419 largeedittest942 largeedittest9420 largeedittest9421 largeedittest9422 largeedittest9423 largeedittest9424 largeedittest9425 largeedittest9426 largeedittest9427 largeedittest9428 largeedittest9429 largeedittest943 largeedittest9430 largeedittest9431 largeedittest9432 largeedittest9433 largeedittest9434 largeedittest9435 largeedittest9436 largeedittest9437 largeedittest9438 largeedittest9439 largeedittest944 largeedittest9440 largeedittest9441 largeedittest9442 largeedittest9443 largeedittest9444 largeedittest9445 largeedittest9446 largeedittest9447 largeedittest9448 largeedittest9449 largeedittest945 largeedittest9450 largeedittest9451 largeedittest9452 largeedittest9453 largeedittest9454 largeedittest9455 largeedittest9456 largeedittest9457 largeedittest9458 largeedittest9459 largeedittest946 largeedittest9460 largeedittest9461 largeedittest9462 largeedittest9463 largeedittest9464 largeedittest9465 largeedittest9466 largeedittest9467 largeedittest9468 largeedittest9469 largeedittest947 largeedittest9470 largeedittest9471 largeedittest9472 largeedittest9473 largeedittest9474 largeedittest9475 largeedittest9476 largeedittest9477 largeedittest9478 largeedittest9479 largeedittest948 largeedittest9480 largeedittest9481 largeedittest9482 largeedittest9483 largeedittest9484 largeedittest9485 largeedittest9486 largeedittest9487 largeedittest9488 largeedittest9489 largeedittest949 largeedittest9490 largeedittest9491 largeedittest9492 largeedittest9493 largeedittest9494 largeedittest9495 largeedittest9496 largeedittest9497 largeedittest9498 largeedittest9499 largeedittest95 largeedittest950 largeedittest9500 largeedittest9501 largeedittest9502 largeedittest9503 largeedittest9504 largeedittest9505 largeedittest9506 largeedittest9507 largeedittest9508 largeedittest9509 largeedittest951 largeedittest9510 largeedittest9511 largeedittest9512 largeedittest9513 largeedittest9514 largeedittest9515 largeedittest9516 largeedittest9517 largeedittest9518 largeedittest9519 largeedittest952 largeedittest9520 largeedittest9521 largeedittest9522 largeedittest9523 largeedittest9524 largeedittest9525 largeedittest9526 largeedittest9527 largeedittest9528 largeedittest9529 largeedittest953 largeedittest9530 largeedittest9531 largeedittest9532 largeedittest9533 largeedittest9534 largeedittest9535 largeedittest9536 largeedittest9537 largeedittest9538 largeedittest9539 largeedittest954 largeedittest9540 largeedittest9541 largeedittest9542 largeedittest9543 largeedittest9544 largeedittest9545 largeedittest9546 largeedittest9547 largeedittest9548 largeedittest9549 largeedittest955 largeedittest9550 largeedittest9551 largeedittest9552 largeedittest9553 largeedittest9554 largeedittest9555 largeedittest9556 largeedittest9557 largeedittest9558 largeedittest9559 largeedittest956 largeedittest9560 largeedittest9561 largeedittest9562 largeedittest9563 largeedittest9564 largeedittest9565 largeedittest9566 largeedittest9567 largeedittest9568 largeedittest9569 largeedittest957 largeedittest9570 largeedittest9571 largeedittest9572 largeedittest9573 largeedittest9574 largeedittest9575 largeedittest9576 largeedittest9577 largeedittest9578 largeedittest9579 largeedittest958 largeedittest9580 largeedittest9581 largeedittest9582 largeedittest9583 largeedittest9584 largeedittest9585 largeedittest9586 largeedittest9587 largeedittest9588 largeedittest9589 largeedittest959 largeedittest9590 largeedittest9591 largeedittest9592 largeedittest9593 largeedittest9594 largeedittest9595 largeedittest9596 largeedittest9597 largeedittest9598 largeedittest9599 largeedittest96 largeedittest960 largeedittest9600 largeedittest9601 largeedittest9602 largeedittest9603 largeedittest9604 largeedittest9605 largeedittest9606 largeedittest9607 largeedittest9608 largeedittest9609 largeedittest961 largeedittest9610 largeedittest9611 largeedittest9612 largeedittest9613 largeedittest9614 largeedittest9615 largeedittest9616 largeedittest9617 largeedittest9618 largeedittest9619 largeedittest962 largeedittest9620 largeedittest9621 largeedittest9622 largeedittest9623 largeedittest9624 largeedittest9625 largeedittest9626 largeedittest9627 largeedittest9628 largeedittest9629 largeedittest963 largeedittest9630 largeedittest9631 largeedittest9632 largeedittest9633 largeedittest9634 largeedittest9635 largeedittest9636 largeedittest9637 largeedittest9638 largeedittest9639 largeedittest964 largeedittest9640 largeedittest9641 largeedittest9642 largeedittest9643 largeedittest9644 largeedittest9645 largeedittest9646 largeedittest9647 largeedittest9648 largeedittest9649 largeedittest965 largeedittest9650 largeedittest9651 largeedittest9652 largeedittest9653 largeedittest9654 largeedittest9655 largeedittest9656 largeedittest9657 largeedittest9658 largeedittest9659 largeedittest966 largeedittest9660 largeedittest9661 largeedittest9662 largeedittest9663 largeedittest9664 largeedittest9665 largeedittest9666 largeedittest9667 largeedittest9668 largeedittest9669 largeedittest967 largeedittest9670 largeedittest9671 largeedittest9672 largeedittest9673 largeedittest9674 largeedittest9675 largeedittest9676 largeedittest9677 largeedittest9678 largeedittest9679 largeedittest968 largeedittest9680 largeedittest9681 largeedittest9682 largeedittest9683 largeedittest9684 largeedittest9685 largeedittest9686 largeedittest9687 largeedittest9688 largeedittest9689 largeedittest969 largeedittest9690 largeedittest9691 largeedittest9692 largeedittest9693 largeedittest9694 largeedittest9695 largeedittest9696 largeedittest9697 largeedittest9698 largeedittest9699 largeedittest97 largeedittest970 largeedittest9700 largeedittest9701 largeedittest9702 largeedittest9703 largeedittest9704 largeedittest9705 largeedittest9706 largeedittest9707 largeedittest9708 largeedittest9709 largeedittest971 largeedittest9710 largeedittest9711 largeedittest9712 largeedittest9713 largeedittest9714 largeedittest9715 largeedittest9716 largeedittest9717 largeedittest9718 largeedittest9719 largeedittest972 largeedittest9720 largeedittest9721 largeedittest9722 largeedittest9723 largeedittest9724 largeedittest9725 largeedittest9726 largeedittest9727 largeedittest9728 largeedittest9729 largeedittest973 largeedittest9730 largeedittest9731 largeedittest9732 largeedittest9733 largeedittest9734 largeedittest9735 largeedittest9736 largeedittest9737 largeedittest9738 largeedittest9739 largeedittest974 largeedittest9740 largeedittest9741 largeedittest9742 largeedittest9743 largeedittest9744 largeedittest9745 largeedittest9746 largeedittest9747 largeedittest9748 largeedittest9749 largeedittest975 largeedittest9750 largeedittest9751 largeedittest9752 largeedittest9753 largeedittest9754 largeedittest9755 largeedittest9756 largeedittest9757 largeedittest9758 largeedittest9759 largeedittest976 largeedittest9760 largeedittest9761 largeedittest9762 largeedittest9763 largeedittest9764 largeedittest9765 largeedittest9766 largeedittest9767 largeedittest9768 largeedittest9769 largeedittest977 largeedittest9770 largeedittest9771 largeedittest9772 largeedittest9773 largeedittest9774 largeedittest9775 largeedittest9776 largeedittest9777 largeedittest9778 largeedittest9779 largeedittest978 largeedittest9780 largeedittest9781 largeedittest9782 largeedittest9783 largeedittest9784 largeedittest9785 largeedittest9786 largeedittest9787 largeedittest9788 largeedittest9789 largeedittest979 largeedittest9790 largeedittest9791 largeedittest9792 largeedittest9793 largeedittest9794 largeedittest9795 largeedittest9796 largeedittest9797 largeedittest9798 largeedittest9799 largeedittest98 largeedittest980 largeedittest9800 largeedittest9801 largeedittest9802 largeedittest9803 largeedittest9804 largeedittest9805 largeedittest9806 largeedittest9807 largeedittest9808 largeedittest9809 largeedittest981 largeedittest9810 largeedittest9811 largeedittest9812 largeedittest9813 largeedittest9814 largeedittest9815 largeedittest9816 largeedittest9817 largeedittest9818 largeedittest9819 largeedittest982 largeedittest9820 largeedittest9821 largeedittest9822 largeedittest9823 largeedittest9824 largeedittest9825 largeedittest9826 largeedittest9827 largeedittest9828 largeedittest9829 largeedittest983 largeedittest9830 largeedittest9831 largeedittest9832 largeedittest9833 largeedittest9834 largeedittest9835 largeedittest9836 largeedittest9837 largeedittest9838 largeedittest9839 largeedittest984 largeedittest9840 largeedittest9841 largeedittest9842 largeedittest9843 largeedittest9844 largeedittest9845 largeedittest9846 largeedittest9847 largeedittest9848 largeedittest9849 largeedittest985 largeedittest9850 largeedittest9851 largeedittest9852 largeedittest9853 largeedittest9854 largeedittest9855 largeedittest9856 largeedittest9857 largeedittest9858 largeedittest9859 largeedittest986 largeedittest9860 largeedittest9861 largeedittest9862 largeedittest9863 largeedittest9864 largeedittest9865 largeedittest9866 largeedittest9867 largeedittest9868 largeedittest9869 largeedittest987 largeedittest9870 largeedittest9871 largeedittest9872 largeedittest9873 largeedittest9874 largeedittest9875 largeedittest9876 largeedittest9877 largeedittest9878 largeedittest9879 largeedittest988 largeedittest9880 largeedittest9881 largeedittest9882 largeedittest9883 largeedittest9884 largeedittest9885 largeedittest9886 largeedittest9887 largeedittest9888 largeedittest9889 largeedittest989 largeedittest9890 largeedittest9891 largeedittest9892 largeedittest9893 largeedittest9894 largeedittest9895 largeedittest9896 largeedittest9897 largeedittest9898 largeedittest9899 largeedittest99 largeedittest990 largeedittest9900 largeedittest9901 largeedittest9902 largeedittest9903 largeedittest9904 largeedittest9905 largeedittest9906 largeedittest9907 largeedittest9908 largeedittest9909 largeedittest991 largeedittest9910 largeedittest9911 largeedittest9912 largeedittest9913 largeedittest9914 largeedittest9915 largeedittest9916 largeedittest9917 largeedittest9918 largeedittest9919 largeedittest992 largeedittest9920 largeedittest9921 largeedittest9922 largeedittest9923 largeedittest9924 largeedittest9925 largeedittest9926 largeedittest9927 largeedittest9928 largeedittest9929 largeedittest993 largeedittest9930 largeedittest9931 largeedittest9932 largeedittest9933 largeedittest9934 largeedittest9935 largeedittest9936 largeedittest9937 largeedittest9938 largeedittest9939 largeedittest994 largeedittest9940 largeedittest9941 largeedittest9942 largeedittest9943 largeedittest9944 largeedittest9945 largeedittest9946 largeedittest9947 largeedittest9948 largeedittest9949 largeedittest995 largeedittest9950 largeedittest9951 largeedittest9952 largeedittest9953 largeedittest9954 largeedittest9955 largeedittest9956 largeedittest9957 largeedittest9958 largeedittest9959 largeedittest996 largeedittest9960 largeedittest9961 largeedittest9962 largeedittest9963 largeedittest9964 largeedittest9965 largeedittest9966 largeedittest9967 largeedittest9968 largeedittest9969 largeedittest997 largeedittest9970 largeedittest9971 largeedittest9972 largeedittest9973 largeedittest9974 largeedittest9975 largeedittest9976 largeedittest9977 largeedittest9978 largeedittest9979 largeedittest998 largeedittest9980 largeedittest9981 largeedittest9982 largeedittest9983 largeedittest9984 largeedittest9985 largeedittest9986 largeedittest9987 largeedittest9988 largeedittest9989 largeedittest999 largeedittest9990 largeedittest9991 largeedittest9992 largeedittest9993 largeedittest9994 largeedittest9995 largeedittest9996 largeedittest9997 largeedittest9998 largeedittest9999 longcallback previousreader printdepthlimit something.to.break.tail.recursion startup sum testlog thesum tracetest.tracedplist word1 word2] [tracetest.tracedplist]] , as expected.
CALL: UNTRACE CONTENTS
PASS: [TRACED] output [[] [] []] , as expected.
INFO: Running invalid instruction: [(TRACED "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: (TRACE [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Running invalid instruction: [(TRACE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TRACE .
INFO: Running invalid instruction: [(TRACE "name "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(TRACE {name} )]
INFO: error code is 4 .
INFO: error text is TRACE doesn't like {name} as input .
INFO: Running invalid instruction: [(TRACE [[a] [b] {c}] )]
INFO: error code is 4 .
INFO: error text is TRACE doesn't like {c} as input .
INFO: Running invalid instruction: [(TRACE [a b {c}] )]
INFO: error code is 4 .
INFO: error text is TRACE doesn't like {c} as input .
INFO: Running invalid instruction: [(TRACE [[a b {c}]] )]
INFO: error code is 4 .
INFO: error text is TRACE doesn't like {c} as input .
INFO: Running invalid instruction: [(TRACE [[a] [b] [c] [d]] )]
INFO: error code is 4 .
INFO: error text is TRACE doesn't like [[a] [b] [c] [d]] as input .
INFO: Running invalid instruction: [(TRACE [[[a]]] )]
INFO: error code is 4 .
INFO: error text is TRACE doesn't like [a] as input .
CALL: (UNTRACE [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Running invalid instruction: [(UNTRACE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to UNTRACE .
INFO: Running invalid instruction: [(UNTRACE "name "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(UNTRACE {name} )]
INFO: error code is 4 .
INFO: error text is UNTRACE doesn't like {name} as input .
INFO: Running invalid instruction: [(UNTRACE [[a] [b] {c}] )]
INFO: error code is 4 .
INFO: error text is UNTRACE doesn't like {c} as input .
INFO: Running invalid instruction: [(UNTRACE [a b {c}] )]
INFO: error code is 4 .
INFO: error text is UNTRACE doesn't like {c} as input .
INFO: Running invalid instruction: [(UNTRACE [[a b {c}]] )]
INFO: error code is 4 .
INFO: error text is UNTRACE doesn't like {c} as input .
INFO: Running invalid instruction: [(UNTRACE [[a] [b] [c] [d]] )]
INFO: error code is 4 .
INFO: error text is UNTRACE doesn't like [[a] [b] [c] [d]] as input .
INFO: Running invalid instruction: [(UNTRACE [[[a]]] )]
INFO: error code is 4 .
INFO: error text is UNTRACE doesn't like [a] as input .
PASS: [MEMBERP "STEPTEST.STEPPEDPROCEDURE (ITEM 1 STEPPED)] output false , as expected.
CALL: STEP "STEPTEST.STEPPEDPROCEDURE
PASS: [MEMBERP "STEPTEST.STEPPEDPROCEDURE (ITEM 1 STEPPED)] output true , as expected.
CALL: STEPTEST.STEPPEDPROCEDURE
CALL: UNSTEP "STEPTEST.STEPPEDPROCEDURE
PASS: [MEMBERP "STEPTEST.STEPPEDPROCEDURE (ITEM 1 STEPPED)] output false , as expected.
CALL: STEPTEST.STEPPEDPROCEDURE
PASS: [MEMBERP "STEPTEST.STEPPEDVARIABLE (ITEM 2 STEPPED)] output false , as expected.
CALL: STEP NAMELIST "STEPTEST.STEPPEDVARIABLE
PASS: [MEMBERP "STEPTEST.STEPPEDVARIABLE (ITEM 2 STEPPED)] output true , as expected.
CALL: STEPTEST.SHADOWVARIABLE
CALL: UNSTEP NAMELIST "STEPTEST.STEPPEDVARIABLE
PASS: [MEMBERP "STEPTEST.STEPPEDVARIABLE (ITEM 2 STEPPED)] output false , as expected.
CALL: STEPTEST.SHADOWVARIABLE
CALL: PPROP "STEPTEST.STEPPEDPLIST "SOMEPROPERTY 0
PASS: [MEMBERP "STEPTEST.STEPPEDPLIST (ITEM 3 STEPPED)] output false , as expected.
CALL: STEP PLLIST "STEPTEST.STEPPEDPLIST
PASS: [MEMBERP "STEPTEST.STEPPEDPLIST (ITEM 3 STEPPED)] output true , as expected.
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY1 123
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY2 "123
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY3 "value
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY4 [1 2 3]
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY5 {1 2 3}
CALL: UNSTEP PLLIST "STEPTEST.STEPPEDPLIST
PASS: [MEMBERP "STEPTEST.STEPPEDPLIST (ITEM 3 STEPPED)] output false , as expected.
INFO: Running STEP CONTENTS
INFO: Ran UNSTEP CONTENTS
PASS: [STEPPED] output [[] [] []] , as expected.
INFO: Running invalid instruction: [(STEPPED "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: (STEP [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Running invalid instruction: [(STEP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to STEP .
INFO: Running invalid instruction: [(STEP "name "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(STEP {name} )]
INFO: error code is 4 .
INFO: error text is STEP doesn't like {name} as input .
INFO: Running invalid instruction: [(STEP [[a] [b] {c}] )]
INFO: error code is 4 .
INFO: error text is STEP doesn't like {c} as input .
INFO: Running invalid instruction: [(STEP [a b {c}] )]
INFO: error code is 4 .
INFO: error text is STEP doesn't like {c} as input .
INFO: Running invalid instruction: [(STEP [[a b {c}]] )]
INFO: error code is 4 .
INFO: error text is STEP doesn't like {c} as input .
INFO: Running invalid instruction: [(STEP [[a] [b] [c] [d]] )]
INFO: error code is 4 .
INFO: error text is STEP doesn't like [[a] [b] [c] [d]] as input .
INFO: Running invalid instruction: [(STEP [[[a]]] )]
INFO: error code is 4 .
INFO: error text is STEP doesn't like [a] as input .
CALL: (UNSTEP [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Running invalid instruction: [(UNSTEP)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to UNSTEP .
INFO: Running invalid instruction: [(UNSTEP "name "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(UNSTEP {name} )]
INFO: error code is 4 .
INFO: error text is UNSTEP doesn't like {name} as input .
INFO: Running invalid instruction: [(UNSTEP [[] [] {}] )]
INFO: error code is 4 .
INFO: error text is UNSTEP doesn't like {} as input .
INFO: Running invalid instruction: [(UNSTEP [word word {array}] )]
INFO: error code is 4 .
INFO: error text is UNSTEP doesn't like {array} as input .
INFO: Running invalid instruction: [(UNSTEP [[] [] [] []] )]
INFO: error code is 4 .
INFO: error text is UNSTEP doesn't like [[] [] [] []] as input .
INFO: Running invalid instruction: [(UNSTEP [[a] [b] {c}] )]
INFO: error code is 4 .
INFO: error text is UNSTEP doesn't like {c} as input .
INFO: Running invalid instruction: [(UNSTEP [a b {c}] )]
INFO: error code is 4 .
INFO: error text is UNSTEP doesn't like {c} as input .
INFO: Running invalid instruction: [(UNSTEP [[a b {c}]] )]
INFO: error code is 4 .
INFO: error text is UNSTEP doesn't like {c} as input .
INFO: Running invalid instruction: [(UNSTEP [[a] [b] [c] [d]] )]
INFO: error code is 4 .
INFO: error text is UNSTEP doesn't like [[a] [b] [c] [d]] as input .
INFO: Running invalid instruction: [(UNSTEP [[[a]]] )]
INFO: error code is 4 .
INFO: error text is UNSTEP doesn't like [a] as input .
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE (ITEM 1 BURIED)] output false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE PROCEDURES] output true , as expected.
CALL: BURY "BURYTEST.BURIEDPROCEDURE
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE (ITEM 1 BURIED)] output true , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE PROCEDURES] output false , as expected.
CALL: BURYTEST.BURIEDPROCEDURE
CALL: UNBURY "BURYTEST.BURIEDPROCEDURE
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE (ITEM 1 BURIED)] output false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE PROCEDURES] output true , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 BURIED)] output false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 NAMES)] output true , as expected.
CALL: BURY NAMELIST "BURYTEST.BURIEDVARIABLE
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 BURIED)] output true , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 NAMES)] output false , as expected.
PASS: [:BURYTEST.BURIEDVARIABLE = 123] output true , as expected.
CALL: UNBURY NAMELIST "BURYTEST.BURIEDVARIABLE
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 BURIED)] output false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 NAMES)] output true , as expected.
CALL: PPROP "BURYTEST.BURIEDPLIST "SOMEPROPERTY 123
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 BURIED)] output false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 PLISTS)] output true , as expected.
CALL: BURY PLLIST "BURYTEST.BURIEDPLIST
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 BURIED)] output true , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 PLISTS)] output false , as expected.
PASS: [GPROP "BURYTEST.BURIEDPLIST "SOMEPROPERTY] output 123 , as expected.
CALL: UNBURY PLLIST "BURYTEST.BURIEDPLIST
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 BURIED)] output false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 PLISTS)] output true , as expected.
INFO: Running invalid instruction: [(BURIED "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: (BURY [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Running invalid instruction: [(BURY)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to BURY .
INFO: Running invalid instruction: [(BURY "name "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(BURY {name} )]
INFO: error code is 4 .
INFO: error text is BURY doesn't like {name} as input .
INFO: Running invalid instruction: [(BURY [[a] [b] {c}] )]
INFO: error code is 4 .
INFO: error text is BURY doesn't like {c} as input .
INFO: Running invalid instruction: [(BURY [a b {c}] )]
INFO: error code is 4 .
INFO: error text is BURY doesn't like {c} as input .
INFO: Running invalid instruction: [(BURY [[a b {c}]] )]
INFO: error code is 4 .
INFO: error text is BURY doesn't like {c} as input .
INFO: Running invalid instruction: [(BURY [[a] [b] [c] [d]] )]
INFO: error code is 4 .
INFO: error text is BURY doesn't like [[a] [b] [c] [d]] as input .
INFO: Running invalid instruction: [(BURY [[[a]]] )]
INFO: error code is 4 .
INFO: error text is BURY doesn't like [a] as input .
CALL: (UNBURY [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Running invalid instruction: [(UNBURY)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to UNBURY .
INFO: Running invalid instruction: [(UNBURY "name "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(UNBURY {name} )]
INFO: error code is 4 .
INFO: error text is UNBURY doesn't like {name} as input .
INFO: Running invalid instruction: [(UNBURY [[a] [b] {c}] )]
INFO: error code is 4 .
INFO: error text is UNBURY doesn't like {c} as input .
INFO: Running invalid instruction: [(UNBURY [a b {c}] )]
INFO: error code is 4 .
INFO: error text is UNBURY doesn't like {c} as input .
INFO: Running invalid instruction: [(UNBURY [[a b {c}]] )]
INFO: error code is 4 .
INFO: error text is UNBURY doesn't like {c} as input .
INFO: Running invalid instruction: [(UNBURY [[a] [b] [c] [d]] )]
INFO: error code is 4 .
INFO: error text is UNBURY doesn't like [[a] [b] [c] [d]] as input .
INFO: Running invalid instruction: [(UNBURY [[[a]]] )]
INFO: error code is 4 .
INFO: error text is UNBURY doesn't like [a] as input .
INFO: Running invalid instruction: [(BURYALL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(UNBURYALL "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: BURYALL
PASS: [BURIED] output [[# #test .eqtest .fmslogo.sort.defaultsortpredicate .fmslogo.sort.listtoword .fmslogo.sort.merge .fmslogo.sort.mergepairwise .fmslogo.sort.mergesort .fmslogo.sort.wordtolist ?rest ` a.colorization.test abs abstest activeareatest activeareatest.badinput activeareatest.smoketest andtest angleiscloseenough applytest applytest.applyoutput applytest.badinput applytest.bug1519088 applytest.lambdatemplate applytest.lambdatemplate.newscopetest applytest.nestedapply applytest.nonprimitive applytest.nooutput applytest.proceduretexttemplate applytest.proceduretexttemplate.newscopetest applytest.questionmarktemplate applytest.smoketest arc arc2 arcbadinputtest arccostest arcsintest arcsmoketest arctantest arctest arraybadinputtest arrayorigintest arrayptest arraysmoketest arraytest arraytolist asciitest ashifttest.badinput ashifttest.smoketest backq.all.commas backq.combine backq.recursive backq.unquote backq.word backticktest backticktest.badinput backticktest.examplesfrommanual backticktest.smoketest backticktest.wordshorthand beforeptest bitandtest.badinput bitandtest.smoketest bitblocktest bitblocktest.badinput bitblocktest.smoketest bitcopytest bitfittest bitfittest.badinput bitfittest.smoketest bitload.badinput bitloadsizetest bitmaptest bitmodetest bitmodetest.badinput bitmodetest.smoketest bitnottest.badinput bitnottest.smoketest bitortest.badinput bitortest.smoketest bitpastetoindextest.badinput bitpastetoindextest.smoketest bitsave.badinput bitsave.withactivearea bitwisetest bitxortest.badinput bitxortest.smoketest bodyhasallemptylines bodyhasemptylines bug1349374test bug1377856test bug1383281test bug1384267test bug1388325test bug1397560test bug1448155test bug1458661test bug1563318.applysum bug1563318.crash bug1563318.defaultrest bug1563318.oneinput buryall burytest burytest.badinput burytest.buriedprocedure burytest.buryall burytest.procedure burytest.propertylist burytest.variable butfirststest butfirststest.badinput butfirststest.smoketest butfirsttest butlasttest buttonptest byetest byetest.badinput cascade cascade.eval cascade.setup cascade1 cascadetest cascadetest.badinput cascadetest.smoketest cascadetest.vowel? catchtest catchtest.badinput catchtest.catchbuiltinerror catchtest.catchusererror catchtest.doublecatcherror catchtest.doublecatcherror.innercatcherror catchtest.doublecatcherror.throwerror catchtest.skiperrortag catchtest.skiperrortag.catcherror catchtest.skiperrortag.throw catchtest.skipthrowtag catchtest.skipthrowtag.catchthrowtag catchtest.skipthrowtag.throwerror catchtest.skipthrowtagwithvalue catchtest.skipthrowtagwithvalue.catchinnertag catchtest.skipthrowtagwithvalue.throwoutertag catchtest.smoketest catchtest.smoketest.throw catchtest.throw.builtin.error chartest chdirtest checkerror checkerroritem checkexecutiontime checkscreen circle circle2 client.onreadytosend colorerracttest colorindextest colornametest colorsetgettest colortest colortest.output.5 combine combinetest combinetest.badinput combinetest.smoketest commandlinetest commandlinetest.alreadyrunning commandlinetest.parameter.filename commandlinetest.parameter.l commandlinetest.runtest commandlinetest.widthheight controlflowtest copydef.allow.redefinitions copydef.xcor copydefmaybeoutputtest copydefoptest copydefoutputtest copydefstoptest copydeftest copydeftest.badinput copydeftest.erasemecopy copydeftest.eraseoriginal copydeftest.infix copydeftest.innontailrecursiveprocedure copydeftest.libraryprocedure copydeftest.nontailrecursivecount copydeftest.primitive copydeftest.primitivewithinputs copydeftest.redefp copydeftest.specialform copydeftest.userdefined copydeftotest costest definedptest definedptest.badinput definedptest.smoketest definetest definetest.badinput definetest.bodyhasemptylines definetest.bodyisallemptylines definetest.smoketest dequeue differencetest difficultcomments1 difficultcomments2 dir directorysmoketest directorytest dllcalltest dllfreetest dllloadtest dllsmoketest dlltest donothing doorientationtest echo edall edalltest.badinput edalltest.displaybyhwnd editortest edittest.badinput edittest.manyvariables ellipsearc2 emptyptest equalptest equalptest.badinput equalptest.deeplynestedlist equalptest.international equalptest.smoketest erasetest erasetest.badinput erasetest.eraseall erasetest.eraseprocedure erasetest.erasepropertylist erasetest.erasevariable erasetest.ern erasetest.erpl erracttest erracttest.bug1517326 erracttest.bug1517326.continue5 erracttest.catchblockserract erracttest.changeerract.output.6 erracttest.changeerractinerract erracttest.erractaftercatch erracttest.errorinerract erracttest.output.5 erracttest.output.nexterractvalue erracttest.outputwrongvalue erracttest.recoverableerror.outputnothing erracttest.smoketest erracttest.unrecoverableerror.outputnothing erracttest.unrecoverableerror.outputvalue error.30.test errortest errortest.bug1577034 errortest.call.output.run.5 errortest.output.run.5 evaltest evaltest.catcherrormanytimes evaltest.catchtoomanyinputserror evaltest.nontailrecursive evaltest.nontailrecursivecount evaltest.tailrecursive evaltest.tailrecursivecount exptest failifnotfalse failifnottrue fencetest fencetest.badinput fencetest.bug1573061 fencetest.smoketest fileexists filesareequal filetest filetest.allopen filetest.badinput filetest.closeall filetest.closereader filetest.dribble filetest.eofponstdin filetest.erasefile filetest.openappend filetest.opendirectoryasfile filetest.openopenfile filetest.openopenfile.helper filetest.openupdate filetest.setread.closedfile filetest.setreadpos filetest.setwritepos filetest.smoketest filltest filltimerevent filter firststest firststest.badinput firststest.smoketest firsttest floodcolortest fontfacenamestest fontfacenamestest.badinput fontfacenamestest.manualtest fontfacenamestest.smoketest for for.done foreach foreach.done foreach1 foreachtest foreachtest.badinput foreachtest.output foreachtest.output.from.variable foreachtest.output.from.variable.worker foreachtest.output.worker foreachtest.smoketest foreachtest.stop forevertest forevertest.badinput forevertest.errorinforever forevertest.outputinforever forevertest.smoketest forevertest.stopinforever forloop formtest formtest.badinput formtest.bug1327706 formtest.smoketest forstep fputtest fputtest.badinput fputtest.smoketest fulltexttest fulltexttest.badinput fulltexttest.smoketest gif.smoketest gifload.badinput gifsave.badinput gifsave.overwritesfile gifsize.badinput gifsize.smoketest giftest goldenratio goldenratiotest greaterequalptest greaterequalptest.badinput greaterequalptest.smoketest greaterptest greaterptest.badinput greaterptest.smoketest greatlogoatlastest greatlogoatlastest.tok1.1 greatlogoatlastest.tok1.10 greatlogoatlastest.tok1.11 greatlogoatlastest.tok1.2 greatlogoatlastest.tok1.3 greatlogoatlastest.tok1.4 greatlogoatlastest.tok1.5 greatlogoatlastest.tok1.6 greatlogoatlastest.tok1.7 greatlogoatlastest.tok1.8 greatlogoatlastest.tok1.9 greatlogoatlastest.tok2.1 greatlogoatlastest.tok2.2 greatlogoatlastest.tok2.3 greatlogoatlastest.tok2.4 greatlogoatlastest.tok2.5 greatlogoatlastest.tok3.1 greatlogoatlastest.tok3.2 greatlogoatlastest.tok3.3 greatlogoatlastest.tok3.4 greatlogoatlastest.tok3.5 greatlogoatlastest.tok3.6 greatlogoatlastest.tok3.7 greatlogoatlastest.tok3.8 greatlogoatlastest.tok3.9 helptest i.dont.know.what.to.do.with.value icon iftest ignore inporttest inttest iseq iseq.integer? iseq1 iseqtest ispseudolocbuild itemtest itemtest.badinput itemtest.badinput.recoverable itemtest.output.2 itemtest.smoketest labelbadinputtest labelcircletest labeltest lasttest lessequalptest lessequalptest.badinput lessequalptest.smoketest lessptest lessptest.badinput lessptest.smoketest linecontinuation3 listptest listtest listtest.smoketest listtoarray listtoarray1 listtoarraytest listtoarraytest.badinput listtoarraytest.smoketest lntest loadtest localefalse localetrue localmake localvartest log10test logictest logoversiontest logoversiontest.badinput logoversiontest.smoketest lowercasetest lowercasetest.badinput lowercasetest.international lowercasetest.smoketest lputtest lputtest.badinput lputtest.smoketest lshifttest.badinput lshifttest.smoketest macro.return.unbound.instead.of.list macroexpandtest macroexpandtest.badinput macroexpandtest.macroforward macroexpandtest.outputnothing macroexpandtest.smoketest macrotest macrotest.myrun macrotest.outputnothing macrotest.outputtest macrotest.smoketest macrotest.stoptest map map1 maptest maptest.badinput maptest.smoketest mathtest mdarray mdarraytest mdarraytest.badinput mdarraytest.onedimensional mdarraytest.origin mdarraytest.smoketest mditem mditemtest.badinput mditemtest.smoketest mdsetitem mdsetitemtest.badinput mdsetitemtest.smoketest memberptest messageboxtest messageboxtest.badinput messageboxtest.smoketest miditest miditest.badinput miditest.devicezero miditest.longformat miditest.playtune miditest.runalreadyopentest miditest.rundevicenotopentest miditest.smoketest minustest misctest mkdirtest modulotest mousetest mousetest.badinput mousetest.simpletest multidllloadtest my.proc.to.step myadd myaddcopy mymacro namelist nearest.decimal.places networktest networktest.client.echo networktest.client.receivelargepacket networktest.client.receiveunframedpacket networktest.client.shutdownrace networktest.client.smoketest networktest.hostname networktest.netshutdowncrash networktest.server.receiveunframedpacket networktest.server.shutdownrace networktest.server.twoconnections networktest.servercommand networktest.smoketest no.input.no.output nodestest notequalptest notequalptest.badinput notequalptest.smoketest nottest numberptest one.input.no.output orientation orientationtest orientationtest.bug1429938 ortest outporttest output.373 parsetest parsetest.deeplynestedinfixexpression parsetest.deeplyparenthesizedexpression parsetest.expression parsetest.func parsetest.infixexpression parsetest.infixexpression.priority parsetest.longinstructionline parsetest.longinstructionlinewithcatch parsetest.lotsofnegationoperators parsetest.manyinputs parsetest.manynestedcalls parsetest.number parsetest.parsechar255 parsetest.symbolsofinclusion parsetest.word pasteincircle pen pencolortest penmodetest pensizetest pensizetest.badinput pensizetest.setgettest pensizetest.smoketest pentest penupdowntest perspectivetest perspectivetest.badinput perspectivetest.smoketest pi pitest pixeltest pixeltest.badinput pixeltest.smoketest plisttest pllist poall polygontest polygontest.definepolygon polygontest.drawface polygontest.rotateperspective polygontest.smoketest pon pons pop popl popls pops porttest potest potest.badinput potest.longinput potest.longinput.definedprocedurewithlongline potest.longinput.procedurewithlongline potest.smoketest pots powertest predicatetest printtest printtest.deeplynestedarray printtest.deeplynestedlist printtest.performance printtest.printdepthandwidthlimit printtest.printdepthlimit printtest.printwidthlimit printtest.pseudoloc printtest.runprintdepthlimittest printtest.runprintwidthlimittest printtest.smoketest procedure.shadows.myshadowedvar procedure.with.to.inside.it procedureinworkingdirectory procedureptest procedureptest.badinput procedureptest.smoketest proceduretest proceduretest.complexproc proceduretest.àcçênt producttest push questionboxtest questionboxtest.badinput questionboxtest.smoketest queue queuetest queuetest.badinput queuetest.circulartest queuetest.smoketest quoted quotedtest quotedtest.badinput quotedtest.smoketest quotienttest radarccostest radarcsintest radarctantest radcostest radsintest radtantest randomtest randomtest.badinput randomtest.smoketest rawasciitest readcharstest readcharstest.badinput readcharstest.commander readcharstest.eoftest readcharstest.readbinarydata readcharstest.smoketest readchartest readchartest.badinput readchartest.readdata readchartest.smoketest readrawlinetest readrawlinetest.badinput readrawlinetest.readrawlinefromui readrawlinetest.smoketest readrawlinetest.ui readrawlinetest.uicancel readwordtest readwordtest.badinput readwordtest.readwordfromui readwordtest.smoketest readwordtest.ui readwordtest.uicancel reduce reducetest reducetest.badinput reducetest.max reducetest.max.rest reducetest.smoketest refreshtest remaindertest remdup remduptest remduptest.badinput remduptest.smoketest remove removetest removetest.badinput removetest.smoketest repcounttest repcounttest.badinput repcounttest.smoketest repcounttest.timercallback repcounttest.timertest repeattest repeattest.badinput repeattest.errorinrepeat repeattest.outputinrepeat repeattest.smoketest repeattest.stopinrepeat reporttest reporttestfailed reporttestinfo reporttestinitialize reporttestpassed reporttestuninitialize rerandomtest.badinput rerandomtest.smoketest reverse reverse.helper reversetest reversetest.badinput reversetest.smoketest rmdirtest round.vector roundtest runbadinputtest runbitmapcreateerrortest runbitmapinvaliderrortest runbitmapopenerrortest rundlldatatypenotpairedtest rundllfunctionnotfoundtest rundllinvaliddatatypetest rundllinvalidoutputtypetest rundllloaderrortest rundllnotloadedtest rundoesntlikeinputtest runexpecterrortest runfilesystemerrortest rungifreaderrortest rungifwriteerrortest runhasnovaluetest runidontknowhowtotest runisaprimitivetest runnonrecoverabledoesntlikeinputtest runnonrecoverableidontknowhowtotest runnotenoughinputstest runoutofboundstest runoutofmemorytest runparsetest runparsetest.badinput runparsetest.smoketest runprinttest runprinttest.helper runresulttest runresulttest.badinput runresulttest.smoketest runstoppingtest runtest runtoomanyinputstest runwindowalreadyexiststest runwindowdoesnotexisttest runyoudontsaywhattodowithtest sampleproc screencolortest screentest scrunchtest selectboxtest selectboxtest.badinput selectboxtest.smoketest sentencetest sentencetest.badinput sentencetest.noalias sentencetest.smoketest setbitindex.badinput setbitindex.smoketest setbitmodetest.badinputisrecoverable setbitmodetest.converttointeger setbitmodetest.output.2 setitemtest setlabelfonttest setorientation setpixeltest.badinput setpixeltest.smoketest setrandomorientation settextfont shellscripttest shelltest shelltest.badinput shelltest.smoketest shelltest.waityields sign signtest simplereporttest simplereporttestnocatch sintest slowdrawtest slowdrawtest.badinput slowdrawtest.buried slowdrawtest.redefptest slowdrawtest.smoketest slowdrawtest.timecommand sort sorttest sorttest.after? sorttest.badinput sorttest.nonpredicate sorttest.oneinputbydefault sorttest.oneinputproc sorttest.performance sorttest.regression sorttest.sortbylegs sorttest.sortbyname sorttest.threeinputproc soundtest soundtest.badinput soundtest.frequency.a4 soundtest.frequency.b4 soundtest.frequency.c4 soundtest.frequency.c5 soundtest.frequency.d4 soundtest.frequency.d5 soundtest.frequency.e4 soundtest.frequency.f4 soundtest.frequency.g4 soundtest.sound soundtest.tone sqrttest stacktest stacktest.badinput stacktest.circulartest stacktest.smoketest statustest statustest.badinput statustest.smoketest steptest steptest.badinput steptest.procedure steptest.propertylist steptest.shadowvariable steptest.stepall steptest.steppedprocedure steptest.variable sumtest tantest testall testlib.repeatword testsmallwindowhang testtest testtest.badinput testtest.scopetest testtest.smoketest texttest texttest.badinput texttest.smoketest thingtest thingtest.badinput thingtest.shadowedvariable thingtest.smoketest throwtest.badinput throwtest.usererror throwtest.usererror.actualthrowlocation tildainline timecommand timertest timertest.badinput timertest.largecallback timertest.runnotfoundtest timertest.smoketest timetest timetest.badinput timetest.smoketest timewait totest totest.baddefaultinputs totest.chaineddefaults totest.chaineddefaultstest totest.defaultinput totest.defaultnumberofinputs totest.nooutput totest.output5 totest.outputdefaultinput totest.outputdefaultinput.twoinputs totest.outputrest totest.outputrest.twoinputs totest.repeatedinput totest.repeatedinputtest totest.rest totest.singleinput totest.smoketest traceinstruction traceinstructionnocatch tracetest tracetest.badinput tracetest.capturetrace tracetest.checktrace tracetest.checktrace.inner tracetest.function tracetest.procedure tracetest.procedure.defaultinputs tracetest.procedure.restinput tracetest.propertylist tracetest.traceall tracetest.tracedfunction tracetest.tracedprocedure tracetest.tracedprocedure.withinputs tracetest.variable turtlemodetest turtlemodetest.badinput turtlemodetest.smoketest turtletest turtletest.badinput turtletest.characteristics turtletest.smoketest turtletest.withownpen typetest typetest.smoketest uiautomation.findchildwindow uiautomation.findwindow uiautomation.getchildwindowbyclass uiautomation.initialize uiautomation.postbuttonpushtowindow uiautomation.postevent uiautomation.postfocustowindow uiautomation.postkeytowindow uiautomation.postmessagetowindow uiautomation.poststringtowindow uiautomation.sendbuttonpushtowindow uiautomation.sendfocustowindow uiautomation.sendkeytowindow uiautomation.sendmessage uiautomation.sendmessagetowindow uiautomation.sendstringtowindow uiautomation.setfocus uiautomation.timerevent uiautomation.uninitialize unburyall unicon unlimitedmessagebox unlimitedprint uppercasetest uppercasetest.badinput uppercasetest.international uppercasetest.smoketest waittest waittest.badinput waittest.smoketest while windowfileedittest windowfileedittest.bug1330752 windowfileedittest.longfilename windowsettest windowsettest.badinput windowsettest.bug1429960 windowstest windowstest.button windowstest.button.badinput windowstest.checkbox windowstest.checkbox.badinput windowstest.checkbox.deletegroupbox windowstest.combobox windowstest.combobox.badinput windowstest.debugwindows windowstest.debugwindows.badinput windowstest.debugwindows.stress windowstest.dialog.badinput windowstest.dialog.badinput.fromcallback windowstest.dialog.smoketest windowstest.groupbox windowstest.groupbox.badinput windowstest.listbox windowstest.listbox.badinput windowstest.mainwindow.smoketest windowstest.radiobutton windowstest.radiobutton.badinput windowstest.radiobutton.deletegroupbox windowstest.regressiontest windowstest.scrollbar windowstest.scrollbar.badinput windowstest.scrollbar.badinput.output.5 windowstest.setup windowstest.static windowstest.static.badinput windowstest.window.badinput windowstest.window.smoketest windowtest windowtest.badinput windowtest.smoketest wordproctest wordptest wordtest workspacetest workspacetest.arraywithbinarydata.allvalues workspacetest.arraywithbinarydata.allvalues.saveandload workspacetest.arraywithbinarydata.eachvalueseparately workspacetest.saveandloadshortarray workspacetest.saveandloadshortword workspacetest.savepartofworkspace workspacetest.wordwithbinarydata.allvalues workspacetest.wordwithbinarydata.eachvalueseparately wraptest wraptest.badinput wraptest.smoketest writebinarydata xcor ycor yesnoboxtest yesnoboxtest.badinput yesnoboxtest.smoketest zoomtest zoomtest.badinput zoomtest.smoketest zoomtest.zoomstayscentered ~callme ~ignoreme] [a array caseignoredp count erract erract.was.called instruction isok lambda.function.ran largeedittest1 largeedittest10 largeedittest100 largeedittest1000 largeedittest10000 largeedittest1001 largeedittest1002 largeedittest1003 largeedittest1004 largeedittest1005 largeedittest1006 largeedittest1007 largeedittest1008 largeedittest1009 largeedittest101 largeedittest1010 largeedittest1011 largeedittest1012 largeedittest1013 largeedittest1014 largeedittest1015 largeedittest1016 largeedittest1017 largeedittest1018 largeedittest1019 largeedittest102 largeedittest1020 largeedittest1021 largeedittest1022 largeedittest1023 largeedittest1024 largeedittest1025 largeedittest1026 largeedittest1027 largeedittest1028 largeedittest1029 largeedittest103 largeedittest1030 largeedittest1031 largeedittest1032 largeedittest1033 largeedittest1034 largeedittest1035 largeedittest1036 largeedittest1037 largeedittest1038 largeedittest1039 largeedittest104 largeedittest1040 largeedittest1041 largeedittest1042 largeedittest1043 largeedittest1044 largeedittest1045 largeedittest1046 largeedittest1047 largeedittest1048 largeedittest1049 largeedittest105 largeedittest1050 largeedittest1051 largeedittest1052 largeedittest1053 largeedittest1054 largeedittest1055 largeedittest1056 largeedittest1057 largeedittest1058 largeedittest1059 largeedittest106 largeedittest1060 largeedittest1061 largeedittest1062 largeedittest1063 largeedittest1064 largeedittest1065 largeedittest1066 largeedittest1067 largeedittest1068 largeedittest1069 largeedittest107 largeedittest1070 largeedittest1071 largeedittest1072 largeedittest1073 largeedittest1074 largeedittest1075 largeedittest1076 largeedittest1077 largeedittest1078 largeedittest1079 largeedittest108 largeedittest1080 largeedittest1081 largeedittest1082 largeedittest1083 largeedittest1084 largeedittest1085 largeedittest1086 largeedittest1087 largeedittest1088 largeedittest1089 largeedittest109 largeedittest1090 largeedittest1091 largeedittest1092 largeedittest1093 largeedittest1094 largeedittest1095 largeedittest1096 largeedittest1097 largeedittest1098 largeedittest1099 largeedittest11 largeedittest110 largeedittest1100 largeedittest1101 largeedittest1102 largeedittest1103 largeedittest1104 largeedittest1105 largeedittest1106 largeedittest1107 largeedittest1108 largeedittest1109 largeedittest111 largeedittest1110 largeedittest1111 largeedittest1112 largeedittest1113 largeedittest1114 largeedittest1115 largeedittest1116 largeedittest1117 largeedittest1118 largeedittest1119 largeedittest112 largeedittest1120 largeedittest1121 largeedittest1122 largeedittest1123 largeedittest1124 largeedittest1125 largeedittest1126 largeedittest1127 largeedittest1128 largeedittest1129 largeedittest113 largeedittest1130 largeedittest1131 largeedittest1132 largeedittest1133 largeedittest1134 largeedittest1135 largeedittest1136 largeedittest1137 largeedittest1138 largeedittest1139 largeedittest114 largeedittest1140 largeedittest1141 largeedittest1142 largeedittest1143 largeedittest1144 largeedittest1145 largeedittest1146 largeedittest1147 largeedittest1148 largeedittest1149 largeedittest115 largeedittest1150 largeedittest1151 largeedittest1152 largeedittest1153 largeedittest1154 largeedittest1155 largeedittest1156 largeedittest1157 largeedittest1158 largeedittest1159 largeedittest116 largeedittest1160 largeedittest1161 largeedittest1162 largeedittest1163 largeedittest1164 largeedittest1165 largeedittest1166 largeedittest1167 largeedittest1168 largeedittest1169 largeedittest117 largeedittest1170 largeedittest1171 largeedittest1172 largeedittest1173 largeedittest1174 largeedittest1175 largeedittest1176 largeedittest1177 largeedittest1178 largeedittest1179 largeedittest118 largeedittest1180 largeedittest1181 largeedittest1182 largeedittest1183 largeedittest1184 largeedittest1185 largeedittest1186 largeedittest1187 largeedittest1188 largeedittest1189 largeedittest119 largeedittest1190 largeedittest1191 largeedittest1192 largeedittest1193 largeedittest1194 largeedittest1195 largeedittest1196 largeedittest1197 largeedittest1198 largeedittest1199 largeedittest12 largeedittest120 largeedittest1200 largeedittest1201 largeedittest1202 largeedittest1203 largeedittest1204 largeedittest1205 largeedittest1206 largeedittest1207 largeedittest1208 largeedittest1209 largeedittest121 largeedittest1210 largeedittest1211 largeedittest1212 largeedittest1213 largeedittest1214 largeedittest1215 largeedittest1216 largeedittest1217 largeedittest1218 largeedittest1219 largeedittest122 largeedittest1220 largeedittest1221 largeedittest1222 largeedittest1223 largeedittest1224 largeedittest1225 largeedittest1226 largeedittest1227 largeedittest1228 largeedittest1229 largeedittest123 largeedittest1230 largeedittest1231 largeedittest1232 largeedittest1233 largeedittest1234 largeedittest1235 largeedittest1236 largeedittest1237 largeedittest1238 largeedittest1239 largeedittest124 largeedittest1240 largeedittest1241 largeedittest1242 largeedittest1243 largeedittest1244 largeedittest1245 largeedittest1246 largeedittest1247 largeedittest1248 largeedittest1249 largeedittest125 largeedittest1250 largeedittest1251 largeedittest1252 largeedittest1253 largeedittest1254 largeedittest1255 largeedittest1256 largeedittest1257 largeedittest1258 largeedittest1259 largeedittest126 largeedittest1260 largeedittest1261 largeedittest1262 largeedittest1263 largeedittest1264 largeedittest1265 largeedittest1266 largeedittest1267 largeedittest1268 largeedittest1269 largeedittest127 largeedittest1270 largeedittest1271 largeedittest1272 largeedittest1273 largeedittest1274 largeedittest1275 largeedittest1276 largeedittest1277 largeedittest1278 largeedittest1279 largeedittest128 largeedittest1280 largeedittest1281 largeedittest1282 largeedittest1283 largeedittest1284 largeedittest1285 largeedittest1286 largeedittest1287 largeedittest1288 largeedittest1289 largeedittest129 largeedittest1290 largeedittest1291 largeedittest1292 largeedittest1293 largeedittest1294 largeedittest1295 largeedittest1296 largeedittest1297 largeedittest1298 largeedittest1299 largeedittest13 largeedittest130 largeedittest1300 largeedittest1301 largeedittest1302 largeedittest1303 largeedittest1304 largeedittest1305 largeedittest1306 largeedittest1307 largeedittest1308 largeedittest1309 largeedittest131 largeedittest1310 largeedittest1311 largeedittest1312 largeedittest1313 largeedittest1314 largeedittest1315 largeedittest1316 largeedittest1317 largeedittest1318 largeedittest1319 largeedittest132 largeedittest1320 largeedittest1321 largeedittest1322 largeedittest1323 largeedittest1324 largeedittest1325 largeedittest1326 largeedittest1327 largeedittest1328 largeedittest1329 largeedittest133 largeedittest1330 largeedittest1331 largeedittest1332 largeedittest1333 largeedittest1334 largeedittest1335 largeedittest1336 largeedittest1337 largeedittest1338 largeedittest1339 largeedittest134 largeedittest1340 largeedittest1341 largeedittest1342 largeedittest1343 largeedittest1344 largeedittest1345 largeedittest1346 largeedittest1347 largeedittest1348 largeedittest1349 largeedittest135 largeedittest1350 largeedittest1351 largeedittest1352 largeedittest1353 largeedittest1354 largeedittest1355 largeedittest1356 largeedittest1357 largeedittest1358 largeedittest1359 largeedittest136 largeedittest1360 largeedittest1361 largeedittest1362 largeedittest1363 largeedittest1364 largeedittest1365 largeedittest1366 largeedittest1367 largeedittest1368 largeedittest1369 largeedittest137 largeedittest1370 largeedittest1371 largeedittest1372 largeedittest1373 largeedittest1374 largeedittest1375 largeedittest1376 largeedittest1377 largeedittest1378 largeedittest1379 largeedittest138 largeedittest1380 largeedittest1381 largeedittest1382 largeedittest1383 largeedittest1384 largeedittest1385 largeedittest1386 largeedittest1387 largeedittest1388 largeedittest1389 largeedittest139 largeedittest1390 largeedittest1391 largeedittest1392 largeedittest1393 largeedittest1394 largeedittest1395 largeedittest1396 largeedittest1397 largeedittest1398 largeedittest1399 largeedittest14 largeedittest140 largeedittest1400 largeedittest1401 largeedittest1402 largeedittest1403 largeedittest1404 largeedittest1405 largeedittest1406 largeedittest1407 largeedittest1408 largeedittest1409 largeedittest141 largeedittest1410 largeedittest1411 largeedittest1412 largeedittest1413 largeedittest1414 largeedittest1415 largeedittest1416 largeedittest1417 largeedittest1418 largeedittest1419 largeedittest142 largeedittest1420 largeedittest1421 largeedittest1422 largeedittest1423 largeedittest1424 largeedittest1425 largeedittest1426 largeedittest1427 largeedittest1428 largeedittest1429 largeedittest143 largeedittest1430 largeedittest1431 largeedittest1432 largeedittest1433 largeedittest1434 largeedittest1435 largeedittest1436 largeedittest1437 largeedittest1438 largeedittest1439 largeedittest144 largeedittest1440 largeedittest1441 largeedittest1442 largeedittest1443 largeedittest1444 largeedittest1445 largeedittest1446 largeedittest1447 largeedittest1448 largeedittest1449 largeedittest145 largeedittest1450 largeedittest1451 largeedittest1452 largeedittest1453 largeedittest1454 largeedittest1455 largeedittest1456 largeedittest1457 largeedittest1458 largeedittest1459 largeedittest146 largeedittest1460 largeedittest1461 largeedittest1462 largeedittest1463 largeedittest1464 largeedittest1465 largeedittest1466 largeedittest1467 largeedittest1468 largeedittest1469 largeedittest147 largeedittest1470 largeedittest1471 largeedittest1472 largeedittest1473 largeedittest1474 largeedittest1475 largeedittest1476 largeedittest1477 largeedittest1478 largeedittest1479 largeedittest148 largeedittest1480 largeedittest1481 largeedittest1482 largeedittest1483 largeedittest1484 largeedittest1485 largeedittest1486 largeedittest1487 largeedittest1488 largeedittest1489 largeedittest149 largeedittest1490 largeedittest1491 largeedittest1492 largeedittest1493 largeedittest1494 largeedittest1495 largeedittest1496 largeedittest1497 largeedittest1498 largeedittest1499 largeedittest15 largeedittest150 largeedittest1500 largeedittest1501 largeedittest1502 largeedittest1503 largeedittest1504 largeedittest1505 largeedittest1506 largeedittest1507 largeedittest1508 largeedittest1509 largeedittest151 largeedittest1510 largeedittest1511 largeedittest1512 largeedittest1513 largeedittest1514 largeedittest1515 largeedittest1516 largeedittest1517 largeedittest1518 largeedittest1519 largeedittest152 largeedittest1520 largeedittest1521 largeedittest1522 largeedittest1523 largeedittest1524 largeedittest1525 largeedittest1526 largeedittest1527 largeedittest1528 largeedittest1529 largeedittest153 largeedittest1530 largeedittest1531 largeedittest1532 largeedittest1533 largeedittest1534 largeedittest1535 largeedittest1536 largeedittest1537 largeedittest1538 largeedittest1539 largeedittest154 largeedittest1540 largeedittest1541 largeedittest1542 largeedittest1543 largeedittest1544 largeedittest1545 largeedittest1546 largeedittest1547 largeedittest1548 largeedittest1549 largeedittest155 largeedittest1550 largeedittest1551 largeedittest1552 largeedittest1553 largeedittest1554 largeedittest1555 largeedittest1556 largeedittest1557 largeedittest1558 largeedittest1559 largeedittest156 largeedittest1560 largeedittest1561 largeedittest1562 largeedittest1563 largeedittest1564 largeedittest1565 largeedittest1566 largeedittest1567 largeedittest1568 largeedittest1569 largeedittest157 largeedittest1570 largeedittest1571 largeedittest1572 largeedittest1573 largeedittest1574 largeedittest1575 largeedittest1576 largeedittest1577 largeedittest1578 largeedittest1579 largeedittest158 largeedittest1580 largeedittest1581 largeedittest1582 largeedittest1583 largeedittest1584 largeedittest1585 largeedittest1586 largeedittest1587 largeedittest1588 largeedittest1589 largeedittest159 largeedittest1590 largeedittest1591 largeedittest1592 largeedittest1593 largeedittest1594 largeedittest1595 largeedittest1596 largeedittest1597 largeedittest1598 largeedittest1599 largeedittest16 largeedittest160 largeedittest1600 largeedittest1601 largeedittest1602 largeedittest1603 largeedittest1604 largeedittest1605 largeedittest1606 largeedittest1607 largeedittest1608 largeedittest1609 largeedittest161 largeedittest1610 largeedittest1611 largeedittest1612 largeedittest1613 largeedittest1614 largeedittest1615 largeedittest1616 largeedittest1617 largeedittest1618 largeedittest1619 largeedittest162 largeedittest1620 largeedittest1621 largeedittest1622 largeedittest1623 largeedittest1624 largeedittest1625 largeedittest1626 largeedittest1627 largeedittest1628 largeedittest1629 largeedittest163 largeedittest1630 largeedittest1631 largeedittest1632 largeedittest1633 largeedittest1634 largeedittest1635 largeedittest1636 largeedittest1637 largeedittest1638 largeedittest1639 largeedittest164 largeedittest1640 largeedittest1641 largeedittest1642 largeedittest1643 largeedittest1644 largeedittest1645 largeedittest1646 largeedittest1647 largeedittest1648 largeedittest1649 largeedittest165 largeedittest1650 largeedittest1651 largeedittest1652 largeedittest1653 largeedittest1654 largeedittest1655 largeedittest1656 largeedittest1657 largeedittest1658 largeedittest1659 largeedittest166 largeedittest1660 largeedittest1661 largeedittest1662 largeedittest1663 largeedittest1664 largeedittest1665 largeedittest1666 largeedittest1667 largeedittest1668 largeedittest1669 largeedittest167 largeedittest1670 largeedittest1671 largeedittest1672 largeedittest1673 largeedittest1674 largeedittest1675 largeedittest1676 largeedittest1677 largeedittest1678 largeedittest1679 largeedittest168 largeedittest1680 largeedittest1681 largeedittest1682 largeedittest1683 largeedittest1684 largeedittest1685 largeedittest1686 largeedittest1687 largeedittest1688 largeedittest1689 largeedittest169 largeedittest1690 largeedittest1691 largeedittest1692 largeedittest1693 largeedittest1694 largeedittest1695 largeedittest1696 largeedittest1697 largeedittest1698 largeedittest1699 largeedittest17 largeedittest170 largeedittest1700 largeedittest1701 largeedittest1702 largeedittest1703 largeedittest1704 largeedittest1705 largeedittest1706 largeedittest1707 largeedittest1708 largeedittest1709 largeedittest171 largeedittest1710 largeedittest1711 largeedittest1712 largeedittest1713 largeedittest1714 largeedittest1715 largeedittest1716 largeedittest1717 largeedittest1718 largeedittest1719 largeedittest172 largeedittest1720 largeedittest1721 largeedittest1722 largeedittest1723 largeedittest1724 largeedittest1725 largeedittest1726 largeedittest1727 largeedittest1728 largeedittest1729 largeedittest173 largeedittest1730 largeedittest1731 largeedittest1732 largeedittest1733 largeedittest1734 largeedittest1735 largeedittest1736 largeedittest1737 largeedittest1738 largeedittest1739 largeedittest174 largeedittest1740 largeedittest1741 largeedittest1742 largeedittest1743 largeedittest1744 largeedittest1745 largeedittest1746 largeedittest1747 largeedittest1748 largeedittest1749 largeedittest175 largeedittest1750 largeedittest1751 largeedittest1752 largeedittest1753 largeedittest1754 largeedittest1755 largeedittest1756 largeedittest1757 largeedittest1758 largeedittest1759 largeedittest176 largeedittest1760 largeedittest1761 largeedittest1762 largeedittest1763 largeedittest1764 largeedittest1765 largeedittest1766 largeedittest1767 largeedittest1768 largeedittest1769 largeedittest177 largeedittest1770 largeedittest1771 largeedittest1772 largeedittest1773 largeedittest1774 largeedittest1775 largeedittest1776 largeedittest1777 largeedittest1778 largeedittest1779 largeedittest178 largeedittest1780 largeedittest1781 largeedittest1782 largeedittest1783 largeedittest1784 largeedittest1785 largeedittest1786 largeedittest1787 largeedittest1788 largeedittest1789 largeedittest179 largeedittest1790 largeedittest1791 largeedittest1792 largeedittest1793 largeedittest1794 largeedittest1795 largeedittest1796 largeedittest1797 largeedittest1798 largeedittest1799 largeedittest18 largeedittest180 largeedittest1800 largeedittest1801 largeedittest1802 largeedittest1803 largeedittest1804 largeedittest1805 largeedittest1806 largeedittest1807 largeedittest1808 largeedittest1809 largeedittest181 largeedittest1810 largeedittest1811 largeedittest1812 largeedittest1813 largeedittest1814 largeedittest1815 largeedittest1816 largeedittest1817 largeedittest1818 largeedittest1819 largeedittest182 largeedittest1820 largeedittest1821 largeedittest1822 largeedittest1823 largeedittest1824 largeedittest1825 largeedittest1826 largeedittest1827 largeedittest1828 largeedittest1829 largeedittest183 largeedittest1830 largeedittest1831 largeedittest1832 largeedittest1833 largeedittest1834 largeedittest1835 largeedittest1836 largeedittest1837 largeedittest1838 largeedittest1839 largeedittest184 largeedittest1840 largeedittest1841 largeedittest1842 largeedittest1843 largeedittest1844 largeedittest1845 largeedittest1846 largeedittest1847 largeedittest1848 largeedittest1849 largeedittest185 largeedittest1850 largeedittest1851 largeedittest1852 largeedittest1853 largeedittest1854 largeedittest1855 largeedittest1856 largeedittest1857 largeedittest1858 largeedittest1859 largeedittest186 largeedittest1860 largeedittest1861 largeedittest1862 largeedittest1863 largeedittest1864 largeedittest1865 largeedittest1866 largeedittest1867 largeedittest1868 largeedittest1869 largeedittest187 largeedittest1870 largeedittest1871 largeedittest1872 largeedittest1873 largeedittest1874 largeedittest1875 largeedittest1876 largeedittest1877 largeedittest1878 largeedittest1879 largeedittest188 largeedittest1880 largeedittest1881 largeedittest1882 largeedittest1883 largeedittest1884 largeedittest1885 largeedittest1886 largeedittest1887 largeedittest1888 largeedittest1889 largeedittest189 largeedittest1890 largeedittest1891 largeedittest1892 largeedittest1893 largeedittest1894 largeedittest1895 largeedittest1896 largeedittest1897 largeedittest1898 largeedittest1899 largeedittest19 largeedittest190 largeedittest1900 largeedittest1901 largeedittest1902 largeedittest1903 largeedittest1904 largeedittest1905 largeedittest1906 largeedittest1907 largeedittest1908 largeedittest1909 largeedittest191 largeedittest1910 largeedittest1911 largeedittest1912 largeedittest1913 largeedittest1914 largeedittest1915 largeedittest1916 largeedittest1917 largeedittest1918 largeedittest1919 largeedittest192 largeedittest1920 largeedittest1921 largeedittest1922 largeedittest1923 largeedittest1924 largeedittest1925 largeedittest1926 largeedittest1927 largeedittest1928 largeedittest1929 largeedittest193 largeedittest1930 largeedittest1931 largeedittest1932 largeedittest1933 largeedittest1934 largeedittest1935 largeedittest1936 largeedittest1937 largeedittest1938 largeedittest1939 largeedittest194 largeedittest1940 largeedittest1941 largeedittest1942 largeedittest1943 largeedittest1944 largeedittest1945 largeedittest1946 largeedittest1947 largeedittest1948 largeedittest1949 largeedittest195 largeedittest1950 largeedittest1951 largeedittest1952 largeedittest1953 largeedittest1954 largeedittest1955 largeedittest1956 largeedittest1957 largeedittest1958 largeedittest1959 largeedittest196 largeedittest1960 largeedittest1961 largeedittest1962 largeedittest1963 largeedittest1964 largeedittest1965 largeedittest1966 largeedittest1967 largeedittest1968 largeedittest1969 largeedittest197 largeedittest1970 largeedittest1971 largeedittest1972 largeedittest1973 largeedittest1974 largeedittest1975 largeedittest1976 largeedittest1977 largeedittest1978 largeedittest1979 largeedittest198 largeedittest1980 largeedittest1981 largeedittest1982 largeedittest1983 largeedittest1984 largeedittest1985 largeedittest1986 largeedittest1987 largeedittest1988 largeedittest1989 largeedittest199 largeedittest1990 largeedittest1991 largeedittest1992 largeedittest1993 largeedittest1994 largeedittest1995 largeedittest1996 largeedittest1997 largeedittest1998 largeedittest1999 largeedittest2 largeedittest20 largeedittest200 largeedittest2000 largeedittest2001 largeedittest2002 largeedittest2003 largeedittest2004 largeedittest2005 largeedittest2006 largeedittest2007 largeedittest2008 largeedittest2009 largeedittest201 largeedittest2010 largeedittest2011 largeedittest2012 largeedittest2013 largeedittest2014 largeedittest2015 largeedittest2016 largeedittest2017 largeedittest2018 largeedittest2019 largeedittest202 largeedittest2020 largeedittest2021 largeedittest2022 largeedittest2023 largeedittest2024 largeedittest2025 largeedittest2026 largeedittest2027 largeedittest2028 largeedittest2029 largeedittest203 largeedittest2030 largeedittest2031 largeedittest2032 largeedittest2033 largeedittest2034 largeedittest2035 largeedittest2036 largeedittest2037 largeedittest2038 largeedittest2039 largeedittest204 largeedittest2040 largeedittest2041 largeedittest2042 largeedittest2043 largeedittest2044 largeedittest2045 largeedittest2046 largeedittest2047 largeedittest2048 largeedittest2049 largeedittest205 largeedittest2050 largeedittest2051 largeedittest2052 largeedittest2053 largeedittest2054 largeedittest2055 largeedittest2056 largeedittest2057 largeedittest2058 largeedittest2059 largeedittest206 largeedittest2060 largeedittest2061 largeedittest2062 largeedittest2063 largeedittest2064 largeedittest2065 largeedittest2066 largeedittest2067 largeedittest2068 largeedittest2069 largeedittest207 largeedittest2070 largeedittest2071 largeedittest2072 largeedittest2073 largeedittest2074 largeedittest2075 largeedittest2076 largeedittest2077 largeedittest2078 largeedittest2079 largeedittest208 largeedittest2080 largeedittest2081 largeedittest2082 largeedittest2083 largeedittest2084 largeedittest2085 largeedittest2086 largeedittest2087 largeedittest2088 largeedittest2089 largeedittest209 largeedittest2090 largeedittest2091 largeedittest2092 largeedittest2093 largeedittest2094 largeedittest2095 largeedittest2096 largeedittest2097 largeedittest2098 largeedittest2099 largeedittest21 largeedittest210 largeedittest2100 largeedittest2101 largeedittest2102 largeedittest2103 largeedittest2104 largeedittest2105 largeedittest2106 largeedittest2107 largeedittest2108 largeedittest2109 largeedittest211 largeedittest2110 largeedittest2111 largeedittest2112 largeedittest2113 largeedittest2114 largeedittest2115 largeedittest2116 largeedittest2117 largeedittest2118 largeedittest2119 largeedittest212 largeedittest2120 largeedittest2121 largeedittest2122 largeedittest2123 largeedittest2124 largeedittest2125 largeedittest2126 largeedittest2127 largeedittest2128 largeedittest2129 largeedittest213 largeedittest2130 largeedittest2131 largeedittest2132 largeedittest2133 largeedittest2134 largeedittest2135 largeedittest2136 largeedittest2137 largeedittest2138 largeedittest2139 largeedittest214 largeedittest2140 largeedittest2141 largeedittest2142 largeedittest2143 largeedittest2144 largeedittest2145 largeedittest2146 largeedittest2147 largeedittest2148 largeedittest2149 largeedittest215 largeedittest2150 largeedittest2151 largeedittest2152 largeedittest2153 largeedittest2154 largeedittest2155 largeedittest2156 largeedittest2157 largeedittest2158 largeedittest2159 largeedittest216 largeedittest2160 largeedittest2161 largeedittest2162 largeedittest2163 largeedittest2164 largeedittest2165 largeedittest2166 largeedittest2167 largeedittest2168 largeedittest2169 largeedittest217 largeedittest2170 largeedittest2171 largeedittest2172 largeedittest2173 largeedittest2174 largeedittest2175 largeedittest2176 largeedittest2177 largeedittest2178 largeedittest2179 largeedittest218 largeedittest2180 largeedittest2181 largeedittest2182 largeedittest2183 largeedittest2184 largeedittest2185 largeedittest2186 largeedittest2187 largeedittest2188 largeedittest2189 largeedittest219 largeedittest2190 largeedittest2191 largeedittest2192 largeedittest2193 largeedittest2194 largeedittest2195 largeedittest2196 largeedittest2197 largeedittest2198 largeedittest2199 largeedittest22 largeedittest220 largeedittest2200 largeedittest2201 largeedittest2202 largeedittest2203 largeedittest2204 largeedittest2205 largeedittest2206 largeedittest2207 largeedittest2208 largeedittest2209 largeedittest221 largeedittest2210 largeedittest2211 largeedittest2212 largeedittest2213 largeedittest2214 largeedittest2215 largeedittest2216 largeedittest2217 largeedittest2218 largeedittest2219 largeedittest222 largeedittest2220 largeedittest2221 largeedittest2222 largeedittest2223 largeedittest2224 largeedittest2225 largeedittest2226 largeedittest2227 largeedittest2228 largeedittest2229 largeedittest223 largeedittest2230 largeedittest2231 largeedittest2232 largeedittest2233 largeedittest2234 largeedittest2235 largeedittest2236 largeedittest2237 largeedittest2238 largeedittest2239 largeedittest224 largeedittest2240 largeedittest2241 largeedittest2242 largeedittest2243 largeedittest2244 largeedittest2245 largeedittest2246 largeedittest2247 largeedittest2248 largeedittest2249 largeedittest225 largeedittest2250 largeedittest2251 largeedittest2252 largeedittest2253 largeedittest2254 largeedittest2255 largeedittest2256 largeedittest2257 largeedittest2258 largeedittest2259 largeedittest226 largeedittest2260 largeedittest2261 largeedittest2262 largeedittest2263 largeedittest2264 largeedittest2265 largeedittest2266 largeedittest2267 largeedittest2268 largeedittest2269 largeedittest227 largeedittest2270 largeedittest2271 largeedittest2272 largeedittest2273 largeedittest2274 largeedittest2275 largeedittest2276 largeedittest2277 largeedittest2278 largeedittest2279 largeedittest228 largeedittest2280 largeedittest2281 largeedittest2282 largeedittest2283 largeedittest2284 largeedittest2285 largeedittest2286 largeedittest2287 largeedittest2288 largeedittest2289 largeedittest229 largeedittest2290 largeedittest2291 largeedittest2292 largeedittest2293 largeedittest2294 largeedittest2295 largeedittest2296 largeedittest2297 largeedittest2298 largeedittest2299 largeedittest23 largeedittest230 largeedittest2300 largeedittest2301 largeedittest2302 largeedittest2303 largeedittest2304 largeedittest2305 largeedittest2306 largeedittest2307 largeedittest2308 largeedittest2309 largeedittest231 largeedittest2310 largeedittest2311 largeedittest2312 largeedittest2313 largeedittest2314 largeedittest2315 largeedittest2316 largeedittest2317 largeedittest2318 largeedittest2319 largeedittest232 largeedittest2320 largeedittest2321 largeedittest2322 largeedittest2323 largeedittest2324 largeedittest2325 largeedittest2326 largeedittest2327 largeedittest2328 largeedittest2329 largeedittest233 largeedittest2330 largeedittest2331 largeedittest2332 largeedittest2333 largeedittest2334 largeedittest2335 largeedittest2336 largeedittest2337 largeedittest2338 largeedittest2339 largeedittest234 largeedittest2340 largeedittest2341 largeedittest2342 largeedittest2343 largeedittest2344 largeedittest2345 largeedittest2346 largeedittest2347 largeedittest2348 largeedittest2349 largeedittest235 largeedittest2350 largeedittest2351 largeedittest2352 largeedittest2353 largeedittest2354 largeedittest2355 largeedittest2356 largeedittest2357 largeedittest2358 largeedittest2359 largeedittest236 largeedittest2360 largeedittest2361 largeedittest2362 largeedittest2363 largeedittest2364 largeedittest2365 largeedittest2366 largeedittest2367 largeedittest2368 largeedittest2369 largeedittest237 largeedittest2370 largeedittest2371 largeedittest2372 largeedittest2373 largeedittest2374 largeedittest2375 largeedittest2376 largeedittest2377 largeedittest2378 largeedittest2379 largeedittest238 largeedittest2380 largeedittest2381 largeedittest2382 largeedittest2383 largeedittest2384 largeedittest2385 largeedittest2386 largeedittest2387 largeedittest2388 largeedittest2389 largeedittest239 largeedittest2390 largeedittest2391 largeedittest2392 largeedittest2393 largeedittest2394 largeedittest2395 largeedittest2396 largeedittest2397 largeedittest2398 largeedittest2399 largeedittest24 largeedittest240 largeedittest2400 largeedittest2401 largeedittest2402 largeedittest2403 largeedittest2404 largeedittest2405 largeedittest2406 largeedittest2407 largeedittest2408 largeedittest2409 largeedittest241 largeedittest2410 largeedittest2411 largeedittest2412 largeedittest2413 largeedittest2414 largeedittest2415 largeedittest2416 largeedittest2417 largeedittest2418 largeedittest2419 largeedittest242 largeedittest2420 largeedittest2421 largeedittest2422 largeedittest2423 largeedittest2424 largeedittest2425 largeedittest2426 largeedittest2427 largeedittest2428 largeedittest2429 largeedittest243 largeedittest2430 largeedittest2431 largeedittest2432 largeedittest2433 largeedittest2434 largeedittest2435 largeedittest2436 largeedittest2437 largeedittest2438 largeedittest2439 largeedittest244 largeedittest2440 largeedittest2441 largeedittest2442 largeedittest2443 largeedittest2444 largeedittest2445 largeedittest2446 largeedittest2447 largeedittest2448 largeedittest2449 largeedittest245 largeedittest2450 largeedittest2451 largeedittest2452 largeedittest2453 largeedittest2454 largeedittest2455 largeedittest2456 largeedittest2457 largeedittest2458 largeedittest2459 largeedittest246 largeedittest2460 largeedittest2461 largeedittest2462 largeedittest2463 largeedittest2464 largeedittest2465 largeedittest2466 largeedittest2467 largeedittest2468 largeedittest2469 largeedittest247 largeedittest2470 largeedittest2471 largeedittest2472 largeedittest2473 largeedittest2474 largeedittest2475 largeedittest2476 largeedittest2477 largeedittest2478 largeedittest2479 largeedittest248 largeedittest2480 largeedittest2481 largeedittest2482 largeedittest2483 largeedittest2484 largeedittest2485 largeedittest2486 largeedittest2487 largeedittest2488 largeedittest2489 largeedittest249 largeedittest2490 largeedittest2491 largeedittest2492 largeedittest2493 largeedittest2494 largeedittest2495 largeedittest2496 largeedittest2497 largeedittest2498 largeedittest2499 largeedittest25 largeedittest250 largeedittest2500 largeedittest2501 largeedittest2502 largeedittest2503 largeedittest2504 largeedittest2505 largeedittest2506 largeedittest2507 largeedittest2508 largeedittest2509 largeedittest251 largeedittest2510 largeedittest2511 largeedittest2512 largeedittest2513 largeedittest2514 largeedittest2515 largeedittest2516 largeedittest2517 largeedittest2518 largeedittest2519 largeedittest252 largeedittest2520 largeedittest2521 largeedittest2522 largeedittest2523 largeedittest2524 largeedittest2525 largeedittest2526 largeedittest2527 largeedittest2528 largeedittest2529 largeedittest253 largeedittest2530 largeedittest2531 largeedittest2532 largeedittest2533 largeedittest2534 largeedittest2535 largeedittest2536 largeedittest2537 largeedittest2538 largeedittest2539 largeedittest254 largeedittest2540 largeedittest2541 largeedittest2542 largeedittest2543 largeedittest2544 largeedittest2545 largeedittest2546 largeedittest2547 largeedittest2548 largeedittest2549 largeedittest255 largeedittest2550 largeedittest2551 largeedittest2552 largeedittest2553 largeedittest2554 largeedittest2555 largeedittest2556 largeedittest2557 largeedittest2558 largeedittest2559 largeedittest256 largeedittest2560 largeedittest2561 largeedittest2562 largeedittest2563 largeedittest2564 largeedittest2565 largeedittest2566 largeedittest2567 largeedittest2568 largeedittest2569 largeedittest257 largeedittest2570 largeedittest2571 largeedittest2572 largeedittest2573 largeedittest2574 largeedittest2575 largeedittest2576 largeedittest2577 largeedittest2578 largeedittest2579 largeedittest258 largeedittest2580 largeedittest2581 largeedittest2582 largeedittest2583 largeedittest2584 largeedittest2585 largeedittest2586 largeedittest2587 largeedittest2588 largeedittest2589 largeedittest259 largeedittest2590 largeedittest2591 largeedittest2592 largeedittest2593 largeedittest2594 largeedittest2595 largeedittest2596 largeedittest2597 largeedittest2598 largeedittest2599 largeedittest26 largeedittest260 largeedittest2600 largeedittest2601 largeedittest2602 largeedittest2603 largeedittest2604 largeedittest2605 largeedittest2606 largeedittest2607 largeedittest2608 largeedittest2609 largeedittest261 largeedittest2610 largeedittest2611 largeedittest2612 largeedittest2613 largeedittest2614 largeedittest2615 largeedittest2616 largeedittest2617 largeedittest2618 largeedittest2619 largeedittest262 largeedittest2620 largeedittest2621 largeedittest2622 largeedittest2623 largeedittest2624 largeedittest2625 largeedittest2626 largeedittest2627 largeedittest2628 largeedittest2629 largeedittest263 largeedittest2630 largeedittest2631 largeedittest2632 largeedittest2633 largeedittest2634 largeedittest2635 largeedittest2636 largeedittest2637 largeedittest2638 largeedittest2639 largeedittest264 largeedittest2640 largeedittest2641 largeedittest2642 largeedittest2643 largeedittest2644 largeedittest2645 largeedittest2646 largeedittest2647 largeedittest2648 largeedittest2649 largeedittest265 largeedittest2650 largeedittest2651 largeedittest2652 largeedittest2653 largeedittest2654 largeedittest2655 largeedittest2656 largeedittest2657 largeedittest2658 largeedittest2659 largeedittest266 largeedittest2660 largeedittest2661 largeedittest2662 largeedittest2663 largeedittest2664 largeedittest2665 largeedittest2666 largeedittest2667 largeedittest2668 largeedittest2669 largeedittest267 largeedittest2670 largeedittest2671 largeedittest2672 largeedittest2673 largeedittest2674 largeedittest2675 largeedittest2676 largeedittest2677 largeedittest2678 largeedittest2679 largeedittest268 largeedittest2680 largeedittest2681 largeedittest2682 largeedittest2683 largeedittest2684 largeedittest2685 largeedittest2686 largeedittest2687 largeedittest2688 largeedittest2689 largeedittest269 largeedittest2690 largeedittest2691 largeedittest2692 largeedittest2693 largeedittest2694 largeedittest2695 largeedittest2696 largeedittest2697 largeedittest2698 largeedittest2699 largeedittest27 largeedittest270 largeedittest2700 largeedittest2701 largeedittest2702 largeedittest2703 largeedittest2704 largeedittest2705 largeedittest2706 largeedittest2707 largeedittest2708 largeedittest2709 largeedittest271 largeedittest2710 largeedittest2711 largeedittest2712 largeedittest2713 largeedittest2714 largeedittest2715 largeedittest2716 largeedittest2717 largeedittest2718 largeedittest2719 largeedittest272 largeedittest2720 largeedittest2721 largeedittest2722 largeedittest2723 largeedittest2724 largeedittest2725 largeedittest2726 largeedittest2727 largeedittest2728 largeedittest2729 largeedittest273 largeedittest2730 largeedittest2731 largeedittest2732 largeedittest2733 largeedittest2734 largeedittest2735 largeedittest2736 largeedittest2737 largeedittest2738 largeedittest2739 largeedittest274 largeedittest2740 largeedittest2741 largeedittest2742 largeedittest2743 largeedittest2744 largeedittest2745 largeedittest2746 largeedittest2747 largeedittest2748 largeedittest2749 largeedittest275 largeedittest2750 largeedittest2751 largeedittest2752 largeedittest2753 largeedittest2754 largeedittest2755 largeedittest2756 largeedittest2757 largeedittest2758 largeedittest2759 largeedittest276 largeedittest2760 largeedittest2761 largeedittest2762 largeedittest2763 largeedittest2764 largeedittest2765 largeedittest2766 largeedittest2767 largeedittest2768 largeedittest2769 largeedittest277 largeedittest2770 largeedittest2771 largeedittest2772 largeedittest2773 largeedittest2774 largeedittest2775 largeedittest2776 largeedittest2777 largeedittest2778 largeedittest2779 largeedittest278 largeedittest2780 largeedittest2781 largeedittest2782 largeedittest2783 largeedittest2784 largeedittest2785 largeedittest2786 largeedittest2787 largeedittest2788 largeedittest2789 largeedittest279 largeedittest2790 largeedittest2791 largeedittest2792 largeedittest2793 largeedittest2794 largeedittest2795 largeedittest2796 largeedittest2797 largeedittest2798 largeedittest2799 largeedittest28 largeedittest280 largeedittest2800 largeedittest2801 largeedittest2802 largeedittest2803 largeedittest2804 largeedittest2805 largeedittest2806 largeedittest2807 largeedittest2808 largeedittest2809 largeedittest281 largeedittest2810 largeedittest2811 largeedittest2812 largeedittest2813 largeedittest2814 largeedittest2815 largeedittest2816 largeedittest2817 largeedittest2818 largeedittest2819 largeedittest282 largeedittest2820 largeedittest2821 largeedittest2822 largeedittest2823 largeedittest2824 largeedittest2825 largeedittest2826 largeedittest2827 largeedittest2828 largeedittest2829 largeedittest283 largeedittest2830 largeedittest2831 largeedittest2832 largeedittest2833 largeedittest2834 largeedittest2835 largeedittest2836 largeedittest2837 largeedittest2838 largeedittest2839 largeedittest284 largeedittest2840 largeedittest2841 largeedittest2842 largeedittest2843 largeedittest2844 largeedittest2845 largeedittest2846 largeedittest2847 largeedittest2848 largeedittest2849 largeedittest285 largeedittest2850 largeedittest2851 largeedittest2852 largeedittest2853 largeedittest2854 largeedittest2855 largeedittest2856 largeedittest2857 largeedittest2858 largeedittest2859 largeedittest286 largeedittest2860 largeedittest2861 largeedittest2862 largeedittest2863 largeedittest2864 largeedittest2865 largeedittest2866 largeedittest2867 largeedittest2868 largeedittest2869 largeedittest287 largeedittest2870 largeedittest2871 largeedittest2872 largeedittest2873 largeedittest2874 largeedittest2875 largeedittest2876 largeedittest2877 largeedittest2878 largeedittest2879 largeedittest288 largeedittest2880 largeedittest2881 largeedittest2882 largeedittest2883 largeedittest2884 largeedittest2885 largeedittest2886 largeedittest2887 largeedittest2888 largeedittest2889 largeedittest289 largeedittest2890 largeedittest2891 largeedittest2892 largeedittest2893 largeedittest2894 largeedittest2895 largeedittest2896 largeedittest2897 largeedittest2898 largeedittest2899 largeedittest29 largeedittest290 largeedittest2900 largeedittest2901 largeedittest2902 largeedittest2903 largeedittest2904 largeedittest2905 largeedittest2906 largeedittest2907 largeedittest2908 largeedittest2909 largeedittest291 largeedittest2910 largeedittest2911 largeedittest2912 largeedittest2913 largeedittest2914 largeedittest2915 largeedittest2916 largeedittest2917 largeedittest2918 largeedittest2919 largeedittest292 largeedittest2920 largeedittest2921 largeedittest2922 largeedittest2923 largeedittest2924 largeedittest2925 largeedittest2926 largeedittest2927 largeedittest2928 largeedittest2929 largeedittest293 largeedittest2930 largeedittest2931 largeedittest2932 largeedittest2933 largeedittest2934 largeedittest2935 largeedittest2936 largeedittest2937 largeedittest2938 largeedittest2939 largeedittest294 largeedittest2940 largeedittest2941 largeedittest2942 largeedittest2943 largeedittest2944 largeedittest2945 largeedittest2946 largeedittest2947 largeedittest2948 largeedittest2949 largeedittest295 largeedittest2950 largeedittest2951 largeedittest2952 largeedittest2953 largeedittest2954 largeedittest2955 largeedittest2956 largeedittest2957 largeedittest2958 largeedittest2959 largeedittest296 largeedittest2960 largeedittest2961 largeedittest2962 largeedittest2963 largeedittest2964 largeedittest2965 largeedittest2966 largeedittest2967 largeedittest2968 largeedittest2969 largeedittest297 largeedittest2970 largeedittest2971 largeedittest2972 largeedittest2973 largeedittest2974 largeedittest2975 largeedittest2976 largeedittest2977 largeedittest2978 largeedittest2979 largeedittest298 largeedittest2980 largeedittest2981 largeedittest2982 largeedittest2983 largeedittest2984 largeedittest2985 largeedittest2986 largeedittest2987 largeedittest2988 largeedittest2989 largeedittest299 largeedittest2990 largeedittest2991 largeedittest2992 largeedittest2993 largeedittest2994 largeedittest2995 largeedittest2996 largeedittest2997 largeedittest2998 largeedittest2999 largeedittest3 largeedittest30 largeedittest300 largeedittest3000 largeedittest3001 largeedittest3002 largeedittest3003 largeedittest3004 largeedittest3005 largeedittest3006 largeedittest3007 largeedittest3008 largeedittest3009 largeedittest301 largeedittest3010 largeedittest3011 largeedittest3012 largeedittest3013 largeedittest3014 largeedittest3015 largeedittest3016 largeedittest3017 largeedittest3018 largeedittest3019 largeedittest302 largeedittest3020 largeedittest3021 largeedittest3022 largeedittest3023 largeedittest3024 largeedittest3025 largeedittest3026 largeedittest3027 largeedittest3028 largeedittest3029 largeedittest303 largeedittest3030 largeedittest3031 largeedittest3032 largeedittest3033 largeedittest3034 largeedittest3035 largeedittest3036 largeedittest3037 largeedittest3038 largeedittest3039 largeedittest304 largeedittest3040 largeedittest3041 largeedittest3042 largeedittest3043 largeedittest3044 largeedittest3045 largeedittest3046 largeedittest3047 largeedittest3048 largeedittest3049 largeedittest305 largeedittest3050 largeedittest3051 largeedittest3052 largeedittest3053 largeedittest3054 largeedittest3055 largeedittest3056 largeedittest3057 largeedittest3058 largeedittest3059 largeedittest306 largeedittest3060 largeedittest3061 largeedittest3062 largeedittest3063 largeedittest3064 largeedittest3065 largeedittest3066 largeedittest3067 largeedittest3068 largeedittest3069 largeedittest307 largeedittest3070 largeedittest3071 largeedittest3072 largeedittest3073 largeedittest3074 largeedittest3075 largeedittest3076 largeedittest3077 largeedittest3078 largeedittest3079 largeedittest308 largeedittest3080 largeedittest3081 largeedittest3082 largeedittest3083 largeedittest3084 largeedittest3085 largeedittest3086 largeedittest3087 largeedittest3088 largeedittest3089 largeedittest309 largeedittest3090 largeedittest3091 largeedittest3092 largeedittest3093 largeedittest3094 largeedittest3095 largeedittest3096 largeedittest3097 largeedittest3098 largeedittest3099 largeedittest31 largeedittest310 largeedittest3100 largeedittest3101 largeedittest3102 largeedittest3103 largeedittest3104 largeedittest3105 largeedittest3106 largeedittest3107 largeedittest3108 largeedittest3109 largeedittest311 largeedittest3110 largeedittest3111 largeedittest3112 largeedittest3113 largeedittest3114 largeedittest3115 largeedittest3116 largeedittest3117 largeedittest3118 largeedittest3119 largeedittest312 largeedittest3120 largeedittest3121 largeedittest3122 largeedittest3123 largeedittest3124 largeedittest3125 largeedittest3126 largeedittest3127 largeedittest3128 largeedittest3129 largeedittest313 largeedittest3130 largeedittest3131 largeedittest3132 largeedittest3133 largeedittest3134 largeedittest3135 largeedittest3136 largeedittest3137 largeedittest3138 largeedittest3139 largeedittest314 largeedittest3140 largeedittest3141 largeedittest3142 largeedittest3143 largeedittest3144 largeedittest3145 largeedittest3146 largeedittest3147 largeedittest3148 largeedittest3149 largeedittest315 largeedittest3150 largeedittest3151 largeedittest3152 largeedittest3153 largeedittest3154 largeedittest3155 largeedittest3156 largeedittest3157 largeedittest3158 largeedittest3159 largeedittest316 largeedittest3160 largeedittest3161 largeedittest3162 largeedittest3163 largeedittest3164 largeedittest3165 largeedittest3166 largeedittest3167 largeedittest3168 largeedittest3169 largeedittest317 largeedittest3170 largeedittest3171 largeedittest3172 largeedittest3173 largeedittest3174 largeedittest3175 largeedittest3176 largeedittest3177 largeedittest3178 largeedittest3179 largeedittest318 largeedittest3180 largeedittest3181 largeedittest3182 largeedittest3183 largeedittest3184 largeedittest3185 largeedittest3186 largeedittest3187 largeedittest3188 largeedittest3189 largeedittest319 largeedittest3190 largeedittest3191 largeedittest3192 largeedittest3193 largeedittest3194 largeedittest3195 largeedittest3196 largeedittest3197 largeedittest3198 largeedittest3199 largeedittest32 largeedittest320 largeedittest3200 largeedittest3201 largeedittest3202 largeedittest3203 largeedittest3204 largeedittest3205 largeedittest3206 largeedittest3207 largeedittest3208 largeedittest3209 largeedittest321 largeedittest3210 largeedittest3211 largeedittest3212 largeedittest3213 largeedittest3214 largeedittest3215 largeedittest3216 largeedittest3217 largeedittest3218 largeedittest3219 largeedittest322 largeedittest3220 largeedittest3221 largeedittest3222 largeedittest3223 largeedittest3224 largeedittest3225 largeedittest3226 largeedittest3227 largeedittest3228 largeedittest3229 largeedittest323 largeedittest3230 largeedittest3231 largeedittest3232 largeedittest3233 largeedittest3234 largeedittest3235 largeedittest3236 largeedittest3237 largeedittest3238 largeedittest3239 largeedittest324 largeedittest3240 largeedittest3241 largeedittest3242 largeedittest3243 largeedittest3244 largeedittest3245 largeedittest3246 largeedittest3247 largeedittest3248 largeedittest3249 largeedittest325 largeedittest3250 largeedittest3251 largeedittest3252 largeedittest3253 largeedittest3254 largeedittest3255 largeedittest3256 largeedittest3257 largeedittest3258 largeedittest3259 largeedittest326 largeedittest3260 largeedittest3261 largeedittest3262 largeedittest3263 largeedittest3264 largeedittest3265 largeedittest3266 largeedittest3267 largeedittest3268 largeedittest3269 largeedittest327 largeedittest3270 largeedittest3271 largeedittest3272 largeedittest3273 largeedittest3274 largeedittest3275 largeedittest3276 largeedittest3277 largeedittest3278 largeedittest3279 largeedittest328 largeedittest3280 largeedittest3281 largeedittest3282 largeedittest3283 largeedittest3284 largeedittest3285 largeedittest3286 largeedittest3287 largeedittest3288 largeedittest3289 largeedittest329 largeedittest3290 largeedittest3291 largeedittest3292 largeedittest3293 largeedittest3294 largeedittest3295 largeedittest3296 largeedittest3297 largeedittest3298 largeedittest3299 largeedittest33 largeedittest330 largeedittest3300 largeedittest3301 largeedittest3302 largeedittest3303 largeedittest3304 largeedittest3305 largeedittest3306 largeedittest3307 largeedittest3308 largeedittest3309 largeedittest331 largeedittest3310 largeedittest3311 largeedittest3312 largeedittest3313 largeedittest3314 largeedittest3315 largeedittest3316 largeedittest3317 largeedittest3318 largeedittest3319 largeedittest332 largeedittest3320 largeedittest3321 largeedittest3322 largeedittest3323 largeedittest3324 largeedittest3325 largeedittest3326 largeedittest3327 largeedittest3328 largeedittest3329 largeedittest333 largeedittest3330 largeedittest3331 largeedittest3332 largeedittest3333 largeedittest3334 largeedittest3335 largeedittest3336 largeedittest3337 largeedittest3338 largeedittest3339 largeedittest334 largeedittest3340 largeedittest3341 largeedittest3342 largeedittest3343 largeedittest3344 largeedittest3345 largeedittest3346 largeedittest3347 largeedittest3348 largeedittest3349 largeedittest335 largeedittest3350 largeedittest3351 largeedittest3352 largeedittest3353 largeedittest3354 largeedittest3355 largeedittest3356 largeedittest3357 largeedittest3358 largeedittest3359 largeedittest336 largeedittest3360 largeedittest3361 largeedittest3362 largeedittest3363 largeedittest3364 largeedittest3365 largeedittest3366 largeedittest3367 largeedittest3368 largeedittest3369 largeedittest337 largeedittest3370 largeedittest3371 largeedittest3372 largeedittest3373 largeedittest3374 largeedittest3375 largeedittest3376 largeedittest3377 largeedittest3378 largeedittest3379 largeedittest338 largeedittest3380 largeedittest3381 largeedittest3382 largeedittest3383 largeedittest3384 largeedittest3385 largeedittest3386 largeedittest3387 largeedittest3388 largeedittest3389 largeedittest339 largeedittest3390 largeedittest3391 largeedittest3392 largeedittest3393 largeedittest3394 largeedittest3395 largeedittest3396 largeedittest3397 largeedittest3398 largeedittest3399 largeedittest34 largeedittest340 largeedittest3400 largeedittest3401 largeedittest3402 largeedittest3403 largeedittest3404 largeedittest3405 largeedittest3406 largeedittest3407 largeedittest3408 largeedittest3409 largeedittest341 largeedittest3410 largeedittest3411 largeedittest3412 largeedittest3413 largeedittest3414 largeedittest3415 largeedittest3416 largeedittest3417 largeedittest3418 largeedittest3419 largeedittest342 largeedittest3420 largeedittest3421 largeedittest3422 largeedittest3423 largeedittest3424 largeedittest3425 largeedittest3426 largeedittest3427 largeedittest3428 largeedittest3429 largeedittest343 largeedittest3430 largeedittest3431 largeedittest3432 largeedittest3433 largeedittest3434 largeedittest3435 largeedittest3436 largeedittest3437 largeedittest3438 largeedittest3439 largeedittest344 largeedittest3440 largeedittest3441 largeedittest3442 largeedittest3443 largeedittest3444 largeedittest3445 largeedittest3446 largeedittest3447 largeedittest3448 largeedittest3449 largeedittest345 largeedittest3450 largeedittest3451 largeedittest3452 largeedittest3453 largeedittest3454 largeedittest3455 largeedittest3456 largeedittest3457 largeedittest3458 largeedittest3459 largeedittest346 largeedittest3460 largeedittest3461 largeedittest3462 largeedittest3463 largeedittest3464 largeedittest3465 largeedittest3466 largeedittest3467 largeedittest3468 largeedittest3469 largeedittest347 largeedittest3470 largeedittest3471 largeedittest3472 largeedittest3473 largeedittest3474 largeedittest3475 largeedittest3476 largeedittest3477 largeedittest3478 largeedittest3479 largeedittest348 largeedittest3480 largeedittest3481 largeedittest3482 largeedittest3483 largeedittest3484 largeedittest3485 largeedittest3486 largeedittest3487 largeedittest3488 largeedittest3489 largeedittest349 largeedittest3490 largeedittest3491 largeedittest3492 largeedittest3493 largeedittest3494 largeedittest3495 largeedittest3496 largeedittest3497 largeedittest3498 largeedittest3499 largeedittest35 largeedittest350 largeedittest3500 largeedittest3501 largeedittest3502 largeedittest3503 largeedittest3504 largeedittest3505 largeedittest3506 largeedittest3507 largeedittest3508 largeedittest3509 largeedittest351 largeedittest3510 largeedittest3511 largeedittest3512 largeedittest3513 largeedittest3514 largeedittest3515 largeedittest3516 largeedittest3517 largeedittest3518 largeedittest3519 largeedittest352 largeedittest3520 largeedittest3521 largeedittest3522 largeedittest3523 largeedittest3524 largeedittest3525 largeedittest3526 largeedittest3527 largeedittest3528 largeedittest3529 largeedittest353 largeedittest3530 largeedittest3531 largeedittest3532 largeedittest3533 largeedittest3534 largeedittest3535 largeedittest3536 largeedittest3537 largeedittest3538 largeedittest3539 largeedittest354 largeedittest3540 largeedittest3541 largeedittest3542 largeedittest3543 largeedittest3544 largeedittest3545 largeedittest3546 largeedittest3547 largeedittest3548 largeedittest3549 largeedittest355 largeedittest3550 largeedittest3551 largeedittest3552 largeedittest3553 largeedittest3554 largeedittest3555 largeedittest3556 largeedittest3557 largeedittest3558 largeedittest3559 largeedittest356 largeedittest3560 largeedittest3561 largeedittest3562 largeedittest3563 largeedittest3564 largeedittest3565 largeedittest3566 largeedittest3567 largeedittest3568 largeedittest3569 largeedittest357 largeedittest3570 largeedittest3571 largeedittest3572 largeedittest3573 largeedittest3574 largeedittest3575 largeedittest3576 largeedittest3577 largeedittest3578 largeedittest3579 largeedittest358 largeedittest3580 largeedittest3581 largeedittest3582 largeedittest3583 largeedittest3584 largeedittest3585 largeedittest3586 largeedittest3587 largeedittest3588 largeedittest3589 largeedittest359 largeedittest3590 largeedittest3591 largeedittest3592 largeedittest3593 largeedittest3594 largeedittest3595 largeedittest3596 largeedittest3597 largeedittest3598 largeedittest3599 largeedittest36 largeedittest360 largeedittest3600 largeedittest3601 largeedittest3602 largeedittest3603 largeedittest3604 largeedittest3605 largeedittest3606 largeedittest3607 largeedittest3608 largeedittest3609 largeedittest361 largeedittest3610 largeedittest3611 largeedittest3612 largeedittest3613 largeedittest3614 largeedittest3615 largeedittest3616 largeedittest3617 largeedittest3618 largeedittest3619 largeedittest362 largeedittest3620 largeedittest3621 largeedittest3622 largeedittest3623 largeedittest3624 largeedittest3625 largeedittest3626 largeedittest3627 largeedittest3628 largeedittest3629 largeedittest363 largeedittest3630 largeedittest3631 largeedittest3632 largeedittest3633 largeedittest3634 largeedittest3635 largeedittest3636 largeedittest3637 largeedittest3638 largeedittest3639 largeedittest364 largeedittest3640 largeedittest3641 largeedittest3642 largeedittest3643 largeedittest3644 largeedittest3645 largeedittest3646 largeedittest3647 largeedittest3648 largeedittest3649 largeedittest365 largeedittest3650 largeedittest3651 largeedittest3652 largeedittest3653 largeedittest3654 largeedittest3655 largeedittest3656 largeedittest3657 largeedittest3658 largeedittest3659 largeedittest366 largeedittest3660 largeedittest3661 largeedittest3662 largeedittest3663 largeedittest3664 largeedittest3665 largeedittest3666 largeedittest3667 largeedittest3668 largeedittest3669 largeedittest367 largeedittest3670 largeedittest3671 largeedittest3672 largeedittest3673 largeedittest3674 largeedittest3675 largeedittest3676 largeedittest3677 largeedittest3678 largeedittest3679 largeedittest368 largeedittest3680 largeedittest3681 largeedittest3682 largeedittest3683 largeedittest3684 largeedittest3685 largeedittest3686 largeedittest3687 largeedittest3688 largeedittest3689 largeedittest369 largeedittest3690 largeedittest3691 largeedittest3692 largeedittest3693 largeedittest3694 largeedittest3695 largeedittest3696 largeedittest3697 largeedittest3698 largeedittest3699 largeedittest37 largeedittest370 largeedittest3700 largeedittest3701 largeedittest3702 largeedittest3703 largeedittest3704 largeedittest3705 largeedittest3706 largeedittest3707 largeedittest3708 largeedittest3709 largeedittest371 largeedittest3710 largeedittest3711 largeedittest3712 largeedittest3713 largeedittest3714 largeedittest3715 largeedittest3716 largeedittest3717 largeedittest3718 largeedittest3719 largeedittest372 largeedittest3720 largeedittest3721 largeedittest3722 largeedittest3723 largeedittest3724 largeedittest3725 largeedittest3726 largeedittest3727 largeedittest3728 largeedittest3729 largeedittest373 largeedittest3730 largeedittest3731 largeedittest3732 largeedittest3733 largeedittest3734 largeedittest3735 largeedittest3736 largeedittest3737 largeedittest3738 largeedittest3739 largeedittest374 largeedittest3740 largeedittest3741 largeedittest3742 largeedittest3743 largeedittest3744 largeedittest3745 largeedittest3746 largeedittest3747 largeedittest3748 largeedittest3749 largeedittest375 largeedittest3750 largeedittest3751 largeedittest3752 largeedittest3753 largeedittest3754 largeedittest3755 largeedittest3756 largeedittest3757 largeedittest3758 largeedittest3759 largeedittest376 largeedittest3760 largeedittest3761 largeedittest3762 largeedittest3763 largeedittest3764 largeedittest3765 largeedittest3766 largeedittest3767 largeedittest3768 largeedittest3769 largeedittest377 largeedittest3770 largeedittest3771 largeedittest3772 largeedittest3773 largeedittest3774 largeedittest3775 largeedittest3776 largeedittest3777 largeedittest3778 largeedittest3779 largeedittest378 largeedittest3780 largeedittest3781 largeedittest3782 largeedittest3783 largeedittest3784 largeedittest3785 largeedittest3786 largeedittest3787 largeedittest3788 largeedittest3789 largeedittest379 largeedittest3790 largeedittest3791 largeedittest3792 largeedittest3793 largeedittest3794 largeedittest3795 largeedittest3796 largeedittest3797 largeedittest3798 largeedittest3799 largeedittest38 largeedittest380 largeedittest3800 largeedittest3801 largeedittest3802 largeedittest3803 largeedittest3804 largeedittest3805 largeedittest3806 largeedittest3807 largeedittest3808 largeedittest3809 largeedittest381 largeedittest3810 largeedittest3811 largeedittest3812 largeedittest3813 largeedittest3814 largeedittest3815 largeedittest3816 largeedittest3817 largeedittest3818 largeedittest3819 largeedittest382 largeedittest3820 largeedittest3821 largeedittest3822 largeedittest3823 largeedittest3824 largeedittest3825 largeedittest3826 largeedittest3827 largeedittest3828 largeedittest3829 largeedittest383 largeedittest3830 largeedittest3831 largeedittest3832 largeedittest3833 largeedittest3834 largeedittest3835 largeedittest3836 largeedittest3837 largeedittest3838 largeedittest3839 largeedittest384 largeedittest3840 largeedittest3841 largeedittest3842 largeedittest3843 largeedittest3844 largeedittest3845 largeedittest3846 largeedittest3847 largeedittest3848 largeedittest3849 largeedittest385 largeedittest3850 largeedittest3851 largeedittest3852 largeedittest3853 largeedittest3854 largeedittest3855 largeedittest3856 largeedittest3857 largeedittest3858 largeedittest3859 largeedittest386 largeedittest3860 largeedittest3861 largeedittest3862 largeedittest3863 largeedittest3864 largeedittest3865 largeedittest3866 largeedittest3867 largeedittest3868 largeedittest3869 largeedittest387 largeedittest3870 largeedittest3871 largeedittest3872 largeedittest3873 largeedittest3874 largeedittest3875 largeedittest3876 largeedittest3877 largeedittest3878 largeedittest3879 largeedittest388 largeedittest3880 largeedittest3881 largeedittest3882 largeedittest3883 largeedittest3884 largeedittest3885 largeedittest3886 largeedittest3887 largeedittest3888 largeedittest3889 largeedittest389 largeedittest3890 largeedittest3891 largeedittest3892 largeedittest3893 largeedittest3894 largeedittest3895 largeedittest3896 largeedittest3897 largeedittest3898 largeedittest3899 largeedittest39 largeedittest390 largeedittest3900 largeedittest3901 largeedittest3902 largeedittest3903 largeedittest3904 largeedittest3905 largeedittest3906 largeedittest3907 largeedittest3908 largeedittest3909 largeedittest391 largeedittest3910 largeedittest3911 largeedittest3912 largeedittest3913 largeedittest3914 largeedittest3915 largeedittest3916 largeedittest3917 largeedittest3918 largeedittest3919 largeedittest392 largeedittest3920 largeedittest3921 largeedittest3922 largeedittest3923 largeedittest3924 largeedittest3925 largeedittest3926 largeedittest3927 largeedittest3928 largeedittest3929 largeedittest393 largeedittest3930 largeedittest3931 largeedittest3932 largeedittest3933 largeedittest3934 largeedittest3935 largeedittest3936 largeedittest3937 largeedittest3938 largeedittest3939 largeedittest394 largeedittest3940 largeedittest3941 largeedittest3942 largeedittest3943 largeedittest3944 largeedittest3945 largeedittest3946 largeedittest3947 largeedittest3948 largeedittest3949 largeedittest395 largeedittest3950 largeedittest3951 largeedittest3952 largeedittest3953 largeedittest3954 largeedittest3955 largeedittest3956 largeedittest3957 largeedittest3958 largeedittest3959 largeedittest396 largeedittest3960 largeedittest3961 largeedittest3962 largeedittest3963 largeedittest3964 largeedittest3965 largeedittest3966 largeedittest3967 largeedittest3968 largeedittest3969 largeedittest397 largeedittest3970 largeedittest3971 largeedittest3972 largeedittest3973 largeedittest3974 largeedittest3975 largeedittest3976 largeedittest3977 largeedittest3978 largeedittest3979 largeedittest398 largeedittest3980 largeedittest3981 largeedittest3982 largeedittest3983 largeedittest3984 largeedittest3985 largeedittest3986 largeedittest3987 largeedittest3988 largeedittest3989 largeedittest399 largeedittest3990 largeedittest3991 largeedittest3992 largeedittest3993 largeedittest3994 largeedittest3995 largeedittest3996 largeedittest3997 largeedittest3998 largeedittest3999 largeedittest4 largeedittest40 largeedittest400 largeedittest4000 largeedittest4001 largeedittest4002 largeedittest4003 largeedittest4004 largeedittest4005 largeedittest4006 largeedittest4007 largeedittest4008 largeedittest4009 largeedittest401 largeedittest4010 largeedittest4011 largeedittest4012 largeedittest4013 largeedittest4014 largeedittest4015 largeedittest4016 largeedittest4017 largeedittest4018 largeedittest4019 largeedittest402 largeedittest4020 largeedittest4021 largeedittest4022 largeedittest4023 largeedittest4024 largeedittest4025 largeedittest4026 largeedittest4027 largeedittest4028 largeedittest4029 largeedittest403 largeedittest4030 largeedittest4031 largeedittest4032 largeedittest4033 largeedittest4034 largeedittest4035 largeedittest4036 largeedittest4037 largeedittest4038 largeedittest4039 largeedittest404 largeedittest4040 largeedittest4041 largeedittest4042 largeedittest4043 largeedittest4044 largeedittest4045 largeedittest4046 largeedittest4047 largeedittest4048 largeedittest4049 largeedittest405 largeedittest4050 largeedittest4051 largeedittest4052 largeedittest4053 largeedittest4054 largeedittest4055 largeedittest4056 largeedittest4057 largeedittest4058 largeedittest4059 largeedittest406 largeedittest4060 largeedittest4061 largeedittest4062 largeedittest4063 largeedittest4064 largeedittest4065 largeedittest4066 largeedittest4067 largeedittest4068 largeedittest4069 largeedittest407 largeedittest4070 largeedittest4071 largeedittest4072 largeedittest4073 largeedittest4074 largeedittest4075 largeedittest4076 largeedittest4077 largeedittest4078 largeedittest4079 largeedittest408 largeedittest4080 largeedittest4081 largeedittest4082 largeedittest4083 largeedittest4084 largeedittest4085 largeedittest4086 largeedittest4087 largeedittest4088 largeedittest4089 largeedittest409 largeedittest4090 largeedittest4091 largeedittest4092 largeedittest4093 largeedittest4094 largeedittest4095 largeedittest4096 largeedittest4097 largeedittest4098 largeedittest4099 largeedittest41 largeedittest410 largeedittest4100 largeedittest4101 largeedittest4102 largeedittest4103 largeedittest4104 largeedittest4105 largeedittest4106 largeedittest4107 largeedittest4108 largeedittest4109 largeedittest411 largeedittest4110 largeedittest4111 largeedittest4112 largeedittest4113 largeedittest4114 largeedittest4115 largeedittest4116 largeedittest4117 largeedittest4118 largeedittest4119 largeedittest412 largeedittest4120 largeedittest4121 largeedittest4122 largeedittest4123 largeedittest4124 largeedittest4125 largeedittest4126 largeedittest4127 largeedittest4128 largeedittest4129 largeedittest413 largeedittest4130 largeedittest4131 largeedittest4132 largeedittest4133 largeedittest4134 largeedittest4135 largeedittest4136 largeedittest4137 largeedittest4138 largeedittest4139 largeedittest414 largeedittest4140 largeedittest4141 largeedittest4142 largeedittest4143 largeedittest4144 largeedittest4145 largeedittest4146 largeedittest4147 largeedittest4148 largeedittest4149 largeedittest415 largeedittest4150 largeedittest4151 largeedittest4152 largeedittest4153 largeedittest4154 largeedittest4155 largeedittest4156 largeedittest4157 largeedittest4158 largeedittest4159 largeedittest416 largeedittest4160 largeedittest4161 largeedittest4162 largeedittest4163 largeedittest4164 largeedittest4165 largeedittest4166 largeedittest4167 largeedittest4168 largeedittest4169 largeedittest417 largeedittest4170 largeedittest4171 largeedittest4172 largeedittest4173 largeedittest4174 largeedittest4175 largeedittest4176 largeedittest4177 largeedittest4178 largeedittest4179 largeedittest418 largeedittest4180 largeedittest4181 largeedittest4182 largeedittest4183 largeedittest4184 largeedittest4185 largeedittest4186 largeedittest4187 largeedittest4188 largeedittest4189 largeedittest419 largeedittest4190 largeedittest4191 largeedittest4192 largeedittest4193 largeedittest4194 largeedittest4195 largeedittest4196 largeedittest4197 largeedittest4198 largeedittest4199 largeedittest42 largeedittest420 largeedittest4200 largeedittest4201 largeedittest4202 largeedittest4203 largeedittest4204 largeedittest4205 largeedittest4206 largeedittest4207 largeedittest4208 largeedittest4209 largeedittest421 largeedittest4210 largeedittest4211 largeedittest4212 largeedittest4213 largeedittest4214 largeedittest4215 largeedittest4216 largeedittest4217 largeedittest4218 largeedittest4219 largeedittest422 largeedittest4220 largeedittest4221 largeedittest4222 largeedittest4223 largeedittest4224 largeedittest4225 largeedittest4226 largeedittest4227 largeedittest4228 largeedittest4229 largeedittest423 largeedittest4230 largeedittest4231 largeedittest4232 largeedittest4233 largeedittest4234 largeedittest4235 largeedittest4236 largeedittest4237 largeedittest4238 largeedittest4239 largeedittest424 largeedittest4240 largeedittest4241 largeedittest4242 largeedittest4243 largeedittest4244 largeedittest4245 largeedittest4246 largeedittest4247 largeedittest4248 largeedittest4249 largeedittest425 largeedittest4250 largeedittest4251 largeedittest4252 largeedittest4253 largeedittest4254 largeedittest4255 largeedittest4256 largeedittest4257 largeedittest4258 largeedittest4259 largeedittest426 largeedittest4260 largeedittest4261 largeedittest4262 largeedittest4263 largeedittest4264 largeedittest4265 largeedittest4266 largeedittest4267 largeedittest4268 largeedittest4269 largeedittest427 largeedittest4270 largeedittest4271 largeedittest4272 largeedittest4273 largeedittest4274 largeedittest4275 largeedittest4276 largeedittest4277 largeedittest4278 largeedittest4279 largeedittest428 largeedittest4280 largeedittest4281 largeedittest4282 largeedittest4283 largeedittest4284 largeedittest4285 largeedittest4286 largeedittest4287 largeedittest4288 largeedittest4289 largeedittest429 largeedittest4290 largeedittest4291 largeedittest4292 largeedittest4293 largeedittest4294 largeedittest4295 largeedittest4296 largeedittest4297 largeedittest4298 largeedittest4299 largeedittest43 largeedittest430 largeedittest4300 largeedittest4301 largeedittest4302 largeedittest4303 largeedittest4304 largeedittest4305 largeedittest4306 largeedittest4307 largeedittest4308 largeedittest4309 largeedittest431 largeedittest4310 largeedittest4311 largeedittest4312 largeedittest4313 largeedittest4314 largeedittest4315 largeedittest4316 largeedittest4317 largeedittest4318 largeedittest4319 largeedittest432 largeedittest4320 largeedittest4321 largeedittest4322 largeedittest4323 largeedittest4324 largeedittest4325 largeedittest4326 largeedittest4327 largeedittest4328 largeedittest4329 largeedittest433 largeedittest4330 largeedittest4331 largeedittest4332 largeedittest4333 largeedittest4334 largeedittest4335 largeedittest4336 largeedittest4337 largeedittest4338 largeedittest4339 largeedittest434 largeedittest4340 largeedittest4341 largeedittest4342 largeedittest4343 largeedittest4344 largeedittest4345 largeedittest4346 largeedittest4347 largeedittest4348 largeedittest4349 largeedittest435 largeedittest4350 largeedittest4351 largeedittest4352 largeedittest4353 largeedittest4354 largeedittest4355 largeedittest4356 largeedittest4357 largeedittest4358 largeedittest4359 largeedittest436 largeedittest4360 largeedittest4361 largeedittest4362 largeedittest4363 largeedittest4364 largeedittest4365 largeedittest4366 largeedittest4367 largeedittest4368 largeedittest4369 largeedittest437 largeedittest4370 largeedittest4371 largeedittest4372 largeedittest4373 largeedittest4374 largeedittest4375 largeedittest4376 largeedittest4377 largeedittest4378 largeedittest4379 largeedittest438 largeedittest4380 largeedittest4381 largeedittest4382 largeedittest4383 largeedittest4384 largeedittest4385 largeedittest4386 largeedittest4387 largeedittest4388 largeedittest4389 largeedittest439 largeedittest4390 largeedittest4391 largeedittest4392 largeedittest4393 largeedittest4394 largeedittest4395 largeedittest4396 largeedittest4397 largeedittest4398 largeedittest4399 largeedittest44 largeedittest440 largeedittest4400 largeedittest4401 largeedittest4402 largeedittest4403 largeedittest4404 largeedittest4405 largeedittest4406 largeedittest4407 largeedittest4408 largeedittest4409 largeedittest441 largeedittest4410 largeedittest4411 largeedittest4412 largeedittest4413 largeedittest4414 largeedittest4415 largeedittest4416 largeedittest4417 largeedittest4418 largeedittest4419 largeedittest442 largeedittest4420 largeedittest4421 largeedittest4422 largeedittest4423 largeedittest4424 largeedittest4425 largeedittest4426 largeedittest4427 largeedittest4428 largeedittest4429 largeedittest443 largeedittest4430 largeedittest4431 largeedittest4432 largeedittest4433 largeedittest4434 largeedittest4435 largeedittest4436 largeedittest4437 largeedittest4438 largeedittest4439 largeedittest444 largeedittest4440 largeedittest4441 largeedittest4442 largeedittest4443 largeedittest4444 largeedittest4445 largeedittest4446 largeedittest4447 largeedittest4448 largeedittest4449 largeedittest445 largeedittest4450 largeedittest4451 largeedittest4452 largeedittest4453 largeedittest4454 largeedittest4455 largeedittest4456 largeedittest4457 largeedittest4458 largeedittest4459 largeedittest446 largeedittest4460 largeedittest4461 largeedittest4462 largeedittest4463 largeedittest4464 largeedittest4465 largeedittest4466 largeedittest4467 largeedittest4468 largeedittest4469 largeedittest447 largeedittest4470 largeedittest4471 largeedittest4472 largeedittest4473 largeedittest4474 largeedittest4475 largeedittest4476 largeedittest4477 largeedittest4478 largeedittest4479 largeedittest448 largeedittest4480 largeedittest4481 largeedittest4482 largeedittest4483 largeedittest4484 largeedittest4485 largeedittest4486 largeedittest4487 largeedittest4488 largeedittest4489 largeedittest449 largeedittest4490 largeedittest4491 largeedittest4492 largeedittest4493 largeedittest4494 largeedittest4495 largeedittest4496 largeedittest4497 largeedittest4498 largeedittest4499 largeedittest45 largeedittest450 largeedittest4500 largeedittest4501 largeedittest4502 largeedittest4503 largeedittest4504 largeedittest4505 largeedittest4506 largeedittest4507 largeedittest4508 largeedittest4509 largeedittest451 largeedittest4510 largeedittest4511 largeedittest4512 largeedittest4513 largeedittest4514 largeedittest4515 largeedittest4516 largeedittest4517 largeedittest4518 largeedittest4519 largeedittest452 largeedittest4520 largeedittest4521 largeedittest4522 largeedittest4523 largeedittest4524 largeedittest4525 largeedittest4526 largeedittest4527 largeedittest4528 largeedittest4529 largeedittest453 largeedittest4530 largeedittest4531 largeedittest4532 largeedittest4533 largeedittest4534 largeedittest4535 largeedittest4536 largeedittest4537 largeedittest4538 largeedittest4539 largeedittest454 largeedittest4540 largeedittest4541 largeedittest4542 largeedittest4543 largeedittest4544 largeedittest4545 largeedittest4546 largeedittest4547 largeedittest4548 largeedittest4549 largeedittest455 largeedittest4550 largeedittest4551 largeedittest4552 largeedittest4553 largeedittest4554 largeedittest4555 largeedittest4556 largeedittest4557 largeedittest4558 largeedittest4559 largeedittest456 largeedittest4560 largeedittest4561 largeedittest4562 largeedittest4563 largeedittest4564 largeedittest4565 largeedittest4566 largeedittest4567 largeedittest4568 largeedittest4569 largeedittest457 largeedittest4570 largeedittest4571 largeedittest4572 largeedittest4573 largeedittest4574 largeedittest4575 largeedittest4576 largeedittest4577 largeedittest4578 largeedittest4579 largeedittest458 largeedittest4580 largeedittest4581 largeedittest4582 largeedittest4583 largeedittest4584 largeedittest4585 largeedittest4586 largeedittest4587 largeedittest4588 largeedittest4589 largeedittest459 largeedittest4590 largeedittest4591 largeedittest4592 largeedittest4593 largeedittest4594 largeedittest4595 largeedittest4596 largeedittest4597 largeedittest4598 largeedittest4599 largeedittest46 largeedittest460 largeedittest4600 largeedittest4601 largeedittest4602 largeedittest4603 largeedittest4604 largeedittest4605 largeedittest4606 largeedittest4607 largeedittest4608 largeedittest4609 largeedittest461 largeedittest4610 largeedittest4611 largeedittest4612 largeedittest4613 largeedittest4614 largeedittest4615 largeedittest4616 largeedittest4617 largeedittest4618 largeedittest4619 largeedittest462 largeedittest4620 largeedittest4621 largeedittest4622 largeedittest4623 largeedittest4624 largeedittest4625 largeedittest4626 largeedittest4627 largeedittest4628 largeedittest4629 largeedittest463 largeedittest4630 largeedittest4631 largeedittest4632 largeedittest4633 largeedittest4634 largeedittest4635 largeedittest4636 largeedittest4637 largeedittest4638 largeedittest4639 largeedittest464 largeedittest4640 largeedittest4641 largeedittest4642 largeedittest4643 largeedittest4644 largeedittest4645 largeedittest4646 largeedittest4647 largeedittest4648 largeedittest4649 largeedittest465 largeedittest4650 largeedittest4651 largeedittest4652 largeedittest4653 largeedittest4654 largeedittest4655 largeedittest4656 largeedittest4657 largeedittest4658 largeedittest4659 largeedittest466 largeedittest4660 largeedittest4661 largeedittest4662 largeedittest4663 largeedittest4664 largeedittest4665 largeedittest4666 largeedittest4667 largeedittest4668 largeedittest4669 largeedittest467 largeedittest4670 largeedittest4671 largeedittest4672 largeedittest4673 largeedittest4674 largeedittest4675 largeedittest4676 largeedittest4677 largeedittest4678 largeedittest4679 largeedittest468 largeedittest4680 largeedittest4681 largeedittest4682 largeedittest4683 largeedittest4684 largeedittest4685 largeedittest4686 largeedittest4687 largeedittest4688 largeedittest4689 largeedittest469 largeedittest4690 largeedittest4691 largeedittest4692 largeedittest4693 largeedittest4694 largeedittest4695 largeedittest4696 largeedittest4697 largeedittest4698 largeedittest4699 largeedittest47 largeedittest470 largeedittest4700 largeedittest4701 largeedittest4702 largeedittest4703 largeedittest4704 largeedittest4705 largeedittest4706 largeedittest4707 largeedittest4708 largeedittest4709 largeedittest471 largeedittest4710 largeedittest4711 largeedittest4712 largeedittest4713 largeedittest4714 largeedittest4715 largeedittest4716 largeedittest4717 largeedittest4718 largeedittest4719 largeedittest472 largeedittest4720 largeedittest4721 largeedittest4722 largeedittest4723 largeedittest4724 largeedittest4725 largeedittest4726 largeedittest4727 largeedittest4728 largeedittest4729 largeedittest473 largeedittest4730 largeedittest4731 largeedittest4732 largeedittest4733 largeedittest4734 largeedittest4735 largeedittest4736 largeedittest4737 largeedittest4738 largeedittest4739 largeedittest474 largeedittest4740 largeedittest4741 largeedittest4742 largeedittest4743 largeedittest4744 largeedittest4745 largeedittest4746 largeedittest4747 largeedittest4748 largeedittest4749 largeedittest475 largeedittest4750 largeedittest4751 largeedittest4752 largeedittest4753 largeedittest4754 largeedittest4755 largeedittest4756 largeedittest4757 largeedittest4758 largeedittest4759 largeedittest476 largeedittest4760 largeedittest4761 largeedittest4762 largeedittest4763 largeedittest4764 largeedittest4765 largeedittest4766 largeedittest4767 largeedittest4768 largeedittest4769 largeedittest477 largeedittest4770 largeedittest4771 largeedittest4772 largeedittest4773 largeedittest4774 largeedittest4775 largeedittest4776 largeedittest4777 largeedittest4778 largeedittest4779 largeedittest478 largeedittest4780 largeedittest4781 largeedittest4782 largeedittest4783 largeedittest4784 largeedittest4785 largeedittest4786 largeedittest4787 largeedittest4788 largeedittest4789 largeedittest479 largeedittest4790 largeedittest4791 largeedittest4792 largeedittest4793 largeedittest4794 largeedittest4795 largeedittest4796 largeedittest4797 largeedittest4798 largeedittest4799 largeedittest48 largeedittest480 largeedittest4800 largeedittest4801 largeedittest4802 largeedittest4803 largeedittest4804 largeedittest4805 largeedittest4806 largeedittest4807 largeedittest4808 largeedittest4809 largeedittest481 largeedittest4810 largeedittest4811 largeedittest4812 largeedittest4813 largeedittest4814 largeedittest4815 largeedittest4816 largeedittest4817 largeedittest4818 largeedittest4819 largeedittest482 largeedittest4820 largeedittest4821 largeedittest4822 largeedittest4823 largeedittest4824 largeedittest4825 largeedittest4826 largeedittest4827 largeedittest4828 largeedittest4829 largeedittest483 largeedittest4830 largeedittest4831 largeedittest4832 largeedittest4833 largeedittest4834 largeedittest4835 largeedittest4836 largeedittest4837 largeedittest4838 largeedittest4839 largeedittest484 largeedittest4840 largeedittest4841 largeedittest4842 largeedittest4843 largeedittest4844 largeedittest4845 largeedittest4846 largeedittest4847 largeedittest4848 largeedittest4849 largeedittest485 largeedittest4850 largeedittest4851 largeedittest4852 largeedittest4853 largeedittest4854 largeedittest4855 largeedittest4856 largeedittest4857 largeedittest4858 largeedittest4859 largeedittest486 largeedittest4860 largeedittest4861 largeedittest4862 largeedittest4863 largeedittest4864 largeedittest4865 largeedittest4866 largeedittest4867 largeedittest4868 largeedittest4869 largeedittest487 largeedittest4870 largeedittest4871 largeedittest4872 largeedittest4873 largeedittest4874 largeedittest4875 largeedittest4876 largeedittest4877 largeedittest4878 largeedittest4879 largeedittest488 largeedittest4880 largeedittest4881 largeedittest4882 largeedittest4883 largeedittest4884 largeedittest4885 largeedittest4886 largeedittest4887 largeedittest4888 largeedittest4889 largeedittest489 largeedittest4890 largeedittest4891 largeedittest4892 largeedittest4893 largeedittest4894 largeedittest4895 largeedittest4896 largeedittest4897 largeedittest4898 largeedittest4899 largeedittest49 largeedittest490 largeedittest4900 largeedittest4901 largeedittest4902 largeedittest4903 largeedittest4904 largeedittest4905 largeedittest4906 largeedittest4907 largeedittest4908 largeedittest4909 largeedittest491 largeedittest4910 largeedittest4911 largeedittest4912 largeedittest4913 largeedittest4914 largeedittest4915 largeedittest4916 largeedittest4917 largeedittest4918 largeedittest4919 largeedittest492 largeedittest4920 largeedittest4921 largeedittest4922 largeedittest4923 largeedittest4924 largeedittest4925 largeedittest4926 largeedittest4927 largeedittest4928 largeedittest4929 largeedittest493 largeedittest4930 largeedittest4931 largeedittest4932 largeedittest4933 largeedittest4934 largeedittest4935 largeedittest4936 largeedittest4937 largeedittest4938 largeedittest4939 largeedittest494 largeedittest4940 largeedittest4941 largeedittest4942 largeedittest4943 largeedittest4944 largeedittest4945 largeedittest4946 largeedittest4947 largeedittest4948 largeedittest4949 largeedittest495 largeedittest4950 largeedittest4951 largeedittest4952 largeedittest4953 largeedittest4954 largeedittest4955 largeedittest4956 largeedittest4957 largeedittest4958 largeedittest4959 largeedittest496 largeedittest4960 largeedittest4961 largeedittest4962 largeedittest4963 largeedittest4964 largeedittest4965 largeedittest4966 largeedittest4967 largeedittest4968 largeedittest4969 largeedittest497 largeedittest4970 largeedittest4971 largeedittest4972 largeedittest4973 largeedittest4974 largeedittest4975 largeedittest4976 largeedittest4977 largeedittest4978 largeedittest4979 largeedittest498 largeedittest4980 largeedittest4981 largeedittest4982 largeedittest4983 largeedittest4984 largeedittest4985 largeedittest4986 largeedittest4987 largeedittest4988 largeedittest4989 largeedittest499 largeedittest4990 largeedittest4991 largeedittest4992 largeedittest4993 largeedittest4994 largeedittest4995 largeedittest4996 largeedittest4997 largeedittest4998 largeedittest4999 largeedittest5 largeedittest50 largeedittest500 largeedittest5000 largeedittest5001 largeedittest5002 largeedittest5003 largeedittest5004 largeedittest5005 largeedittest5006 largeedittest5007 largeedittest5008 largeedittest5009 largeedittest501 largeedittest5010 largeedittest5011 largeedittest5012 largeedittest5013 largeedittest5014 largeedittest5015 largeedittest5016 largeedittest5017 largeedittest5018 largeedittest5019 largeedittest502 largeedittest5020 largeedittest5021 largeedittest5022 largeedittest5023 largeedittest5024 largeedittest5025 largeedittest5026 largeedittest5027 largeedittest5028 largeedittest5029 largeedittest503 largeedittest5030 largeedittest5031 largeedittest5032 largeedittest5033 largeedittest5034 largeedittest5035 largeedittest5036 largeedittest5037 largeedittest5038 largeedittest5039 largeedittest504 largeedittest5040 largeedittest5041 largeedittest5042 largeedittest5043 largeedittest5044 largeedittest5045 largeedittest5046 largeedittest5047 largeedittest5048 largeedittest5049 largeedittest505 largeedittest5050 largeedittest5051 largeedittest5052 largeedittest5053 largeedittest5054 largeedittest5055 largeedittest5056 largeedittest5057 largeedittest5058 largeedittest5059 largeedittest506 largeedittest5060 largeedittest5061 largeedittest5062 largeedittest5063 largeedittest5064 largeedittest5065 largeedittest5066 largeedittest5067 largeedittest5068 largeedittest5069 largeedittest507 largeedittest5070 largeedittest5071 largeedittest5072 largeedittest5073 largeedittest5074 largeedittest5075 largeedittest5076 largeedittest5077 largeedittest5078 largeedittest5079 largeedittest508 largeedittest5080 largeedittest5081 largeedittest5082 largeedittest5083 largeedittest5084 largeedittest5085 largeedittest5086 largeedittest5087 largeedittest5088 largeedittest5089 largeedittest509 largeedittest5090 largeedittest5091 largeedittest5092 largeedittest5093 largeedittest5094 largeedittest5095 largeedittest5096 largeedittest5097 largeedittest5098 largeedittest5099 largeedittest51 largeedittest510 largeedittest5100 largeedittest5101 largeedittest5102 largeedittest5103 largeedittest5104 largeedittest5105 largeedittest5106 largeedittest5107 largeedittest5108 largeedittest5109 largeedittest511 largeedittest5110 largeedittest5111 largeedittest5112 largeedittest5113 largeedittest5114 largeedittest5115 largeedittest5116 largeedittest5117 largeedittest5118 largeedittest5119 largeedittest512 largeedittest5120 largeedittest5121 largeedittest5122 largeedittest5123 largeedittest5124 largeedittest5125 largeedittest5126 largeedittest5127 largeedittest5128 largeedittest5129 largeedittest513 largeedittest5130 largeedittest5131 largeedittest5132 largeedittest5133 largeedittest5134 largeedittest5135 largeedittest5136 largeedittest5137 largeedittest5138 largeedittest5139 largeedittest514 largeedittest5140 largeedittest5141 largeedittest5142 largeedittest5143 largeedittest5144 largeedittest5145 largeedittest5146 largeedittest5147 largeedittest5148 largeedittest5149 largeedittest515 largeedittest5150 largeedittest5151 largeedittest5152 largeedittest5153 largeedittest5154 largeedittest5155 largeedittest5156 largeedittest5157 largeedittest5158 largeedittest5159 largeedittest516 largeedittest5160 largeedittest5161 largeedittest5162 largeedittest5163 largeedittest5164 largeedittest5165 largeedittest5166 largeedittest5167 largeedittest5168 largeedittest5169 largeedittest517 largeedittest5170 largeedittest5171 largeedittest5172 largeedittest5173 largeedittest5174 largeedittest5175 largeedittest5176 largeedittest5177 largeedittest5178 largeedittest5179 largeedittest518 largeedittest5180 largeedittest5181 largeedittest5182 largeedittest5183 largeedittest5184 largeedittest5185 largeedittest5186 largeedittest5187 largeedittest5188 largeedittest5189 largeedittest519 largeedittest5190 largeedittest5191 largeedittest5192 largeedittest5193 largeedittest5194 largeedittest5195 largeedittest5196 largeedittest5197 largeedittest5198 largeedittest5199 largeedittest52 largeedittest520 largeedittest5200 largeedittest5201 largeedittest5202 largeedittest5203 largeedittest5204 largeedittest5205 largeedittest5206 largeedittest5207 largeedittest5208 largeedittest5209 largeedittest521 largeedittest5210 largeedittest5211 largeedittest5212 largeedittest5213 largeedittest5214 largeedittest5215 largeedittest5216 largeedittest5217 largeedittest5218 largeedittest5219 largeedittest522 largeedittest5220 largeedittest5221 largeedittest5222 largeedittest5223 largeedittest5224 largeedittest5225 largeedittest5226 largeedittest5227 largeedittest5228 largeedittest5229 largeedittest523 largeedittest5230 largeedittest5231 largeedittest5232 largeedittest5233 largeedittest5234 largeedittest5235 largeedittest5236 largeedittest5237 largeedittest5238 largeedittest5239 largeedittest524 largeedittest5240 largeedittest5241 largeedittest5242 largeedittest5243 largeedittest5244 largeedittest5245 largeedittest5246 largeedittest5247 largeedittest5248 largeedittest5249 largeedittest525 largeedittest5250 largeedittest5251 largeedittest5252 largeedittest5253 largeedittest5254 largeedittest5255 largeedittest5256 largeedittest5257 largeedittest5258 largeedittest5259 largeedittest526 largeedittest5260 largeedittest5261 largeedittest5262 largeedittest5263 largeedittest5264 largeedittest5265 largeedittest5266 largeedittest5267 largeedittest5268 largeedittest5269 largeedittest527 largeedittest5270 largeedittest5271 largeedittest5272 largeedittest5273 largeedittest5274 largeedittest5275 largeedittest5276 largeedittest5277 largeedittest5278 largeedittest5279 largeedittest528 largeedittest5280 largeedittest5281 largeedittest5282 largeedittest5283 largeedittest5284 largeedittest5285 largeedittest5286 largeedittest5287 largeedittest5288 largeedittest5289 largeedittest529 largeedittest5290 largeedittest5291 largeedittest5292 largeedittest5293 largeedittest5294 largeedittest5295 largeedittest5296 largeedittest5297 largeedittest5298 largeedittest5299 largeedittest53 largeedittest530 largeedittest5300 largeedittest5301 largeedittest5302 largeedittest5303 largeedittest5304 largeedittest5305 largeedittest5306 largeedittest5307 largeedittest5308 largeedittest5309 largeedittest531 largeedittest5310 largeedittest5311 largeedittest5312 largeedittest5313 largeedittest5314 largeedittest5315 largeedittest5316 largeedittest5317 largeedittest5318 largeedittest5319 largeedittest532 largeedittest5320 largeedittest5321 largeedittest5322 largeedittest5323 largeedittest5324 largeedittest5325 largeedittest5326 largeedittest5327 largeedittest5328 largeedittest5329 largeedittest533 largeedittest5330 largeedittest5331 largeedittest5332 largeedittest5333 largeedittest5334 largeedittest5335 largeedittest5336 largeedittest5337 largeedittest5338 largeedittest5339 largeedittest534 largeedittest5340 largeedittest5341 largeedittest5342 largeedittest5343 largeedittest5344 largeedittest5345 largeedittest5346 largeedittest5347 largeedittest5348 largeedittest5349 largeedittest535 largeedittest5350 largeedittest5351 largeedittest5352 largeedittest5353 largeedittest5354 largeedittest5355 largeedittest5356 largeedittest5357 largeedittest5358 largeedittest5359 largeedittest536 largeedittest5360 largeedittest5361 largeedittest5362 largeedittest5363 largeedittest5364 largeedittest5365 largeedittest5366 largeedittest5367 largeedittest5368 largeedittest5369 largeedittest537 largeedittest5370 largeedittest5371 largeedittest5372 largeedittest5373 largeedittest5374 largeedittest5375 largeedittest5376 largeedittest5377 largeedittest5378 largeedittest5379 largeedittest538 largeedittest5380 largeedittest5381 largeedittest5382 largeedittest5383 largeedittest5384 largeedittest5385 largeedittest5386 largeedittest5387 largeedittest5388 largeedittest5389 largeedittest539 largeedittest5390 largeedittest5391 largeedittest5392 largeedittest5393 largeedittest5394 largeedittest5395 largeedittest5396 largeedittest5397 largeedittest5398 largeedittest5399 largeedittest54 largeedittest540 largeedittest5400 largeedittest5401 largeedittest5402 largeedittest5403 largeedittest5404 largeedittest5405 largeedittest5406 largeedittest5407 largeedittest5408 largeedittest5409 largeedittest541 largeedittest5410 largeedittest5411 largeedittest5412 largeedittest5413 largeedittest5414 largeedittest5415 largeedittest5416 largeedittest5417 largeedittest5418 largeedittest5419 largeedittest542 largeedittest5420 largeedittest5421 largeedittest5422 largeedittest5423 largeedittest5424 largeedittest5425 largeedittest5426 largeedittest5427 largeedittest5428 largeedittest5429 largeedittest543 largeedittest5430 largeedittest5431 largeedittest5432 largeedittest5433 largeedittest5434 largeedittest5435 largeedittest5436 largeedittest5437 largeedittest5438 largeedittest5439 largeedittest544 largeedittest5440 largeedittest5441 largeedittest5442 largeedittest5443 largeedittest5444 largeedittest5445 largeedittest5446 largeedittest5447 largeedittest5448 largeedittest5449 largeedittest545 largeedittest5450 largeedittest5451 largeedittest5452 largeedittest5453 largeedittest5454 largeedittest5455 largeedittest5456 largeedittest5457 largeedittest5458 largeedittest5459 largeedittest546 largeedittest5460 largeedittest5461 largeedittest5462 largeedittest5463 largeedittest5464 largeedittest5465 largeedittest5466 largeedittest5467 largeedittest5468 largeedittest5469 largeedittest547 largeedittest5470 largeedittest5471 largeedittest5472 largeedittest5473 largeedittest5474 largeedittest5475 largeedittest5476 largeedittest5477 largeedittest5478 largeedittest5479 largeedittest548 largeedittest5480 largeedittest5481 largeedittest5482 largeedittest5483 largeedittest5484 largeedittest5485 largeedittest5486 largeedittest5487 largeedittest5488 largeedittest5489 largeedittest549 largeedittest5490 largeedittest5491 largeedittest5492 largeedittest5493 largeedittest5494 largeedittest5495 largeedittest5496 largeedittest5497 largeedittest5498 largeedittest5499 largeedittest55 largeedittest550 largeedittest5500 largeedittest5501 largeedittest5502 largeedittest5503 largeedittest5504 largeedittest5505 largeedittest5506 largeedittest5507 largeedittest5508 largeedittest5509 largeedittest551 largeedittest5510 largeedittest5511 largeedittest5512 largeedittest5513 largeedittest5514 largeedittest5515 largeedittest5516 largeedittest5517 largeedittest5518 largeedittest5519 largeedittest552 largeedittest5520 largeedittest5521 largeedittest5522 largeedittest5523 largeedittest5524 largeedittest5525 largeedittest5526 largeedittest5527 largeedittest5528 largeedittest5529 largeedittest553 largeedittest5530 largeedittest5531 largeedittest5532 largeedittest5533 largeedittest5534 largeedittest5535 largeedittest5536 largeedittest5537 largeedittest5538 largeedittest5539 largeedittest554 largeedittest5540 largeedittest5541 largeedittest5542 largeedittest5543 largeedittest5544 largeedittest5545 largeedittest5546 largeedittest5547 largeedittest5548 largeedittest5549 largeedittest555 largeedittest5550 largeedittest5551 largeedittest5552 largeedittest5553 largeedittest5554 largeedittest5555 largeedittest5556 largeedittest5557 largeedittest5558 largeedittest5559 largeedittest556 largeedittest5560 largeedittest5561 largeedittest5562 largeedittest5563 largeedittest5564 largeedittest5565 largeedittest5566 largeedittest5567 largeedittest5568 largeedittest5569 largeedittest557 largeedittest5570 largeedittest5571 largeedittest5572 largeedittest5573 largeedittest5574 largeedittest5575 largeedittest5576 largeedittest5577 largeedittest5578 largeedittest5579 largeedittest558 largeedittest5580 largeedittest5581 largeedittest5582 largeedittest5583 largeedittest5584 largeedittest5585 largeedittest5586 largeedittest5587 largeedittest5588 largeedittest5589 largeedittest559 largeedittest5590 largeedittest5591 largeedittest5592 largeedittest5593 largeedittest5594 largeedittest5595 largeedittest5596 largeedittest5597 largeedittest5598 largeedittest5599 largeedittest56 largeedittest560 largeedittest5600 largeedittest5601 largeedittest5602 largeedittest5603 largeedittest5604 largeedittest5605 largeedittest5606 largeedittest5607 largeedittest5608 largeedittest5609 largeedittest561 largeedittest5610 largeedittest5611 largeedittest5612 largeedittest5613 largeedittest5614 largeedittest5615 largeedittest5616 largeedittest5617 largeedittest5618 largeedittest5619 largeedittest562 largeedittest5620 largeedittest5621 largeedittest5622 largeedittest5623 largeedittest5624 largeedittest5625 largeedittest5626 largeedittest5627 largeedittest5628 largeedittest5629 largeedittest563 largeedittest5630 largeedittest5631 largeedittest5632 largeedittest5633 largeedittest5634 largeedittest5635 largeedittest5636 largeedittest5637 largeedittest5638 largeedittest5639 largeedittest564 largeedittest5640 largeedittest5641 largeedittest5642 largeedittest5643 largeedittest5644 largeedittest5645 largeedittest5646 largeedittest5647 largeedittest5648 largeedittest5649 largeedittest565 largeedittest5650 largeedittest5651 largeedittest5652 largeedittest5653 largeedittest5654 largeedittest5655 largeedittest5656 largeedittest5657 largeedittest5658 largeedittest5659 largeedittest566 largeedittest5660 largeedittest5661 largeedittest5662 largeedittest5663 largeedittest5664 largeedittest5665 largeedittest5666 largeedittest5667 largeedittest5668 largeedittest5669 largeedittest567 largeedittest5670 largeedittest5671 largeedittest5672 largeedittest5673 largeedittest5674 largeedittest5675 largeedittest5676 largeedittest5677 largeedittest5678 largeedittest5679 largeedittest568 largeedittest5680 largeedittest5681 largeedittest5682 largeedittest5683 largeedittest5684 largeedittest5685 largeedittest5686 largeedittest5687 largeedittest5688 largeedittest5689 largeedittest569 largeedittest5690 largeedittest5691 largeedittest5692 largeedittest5693 largeedittest5694 largeedittest5695 largeedittest5696 largeedittest5697 largeedittest5698 largeedittest5699 largeedittest57 largeedittest570 largeedittest5700 largeedittest5701 largeedittest5702 largeedittest5703 largeedittest5704 largeedittest5705 largeedittest5706 largeedittest5707 largeedittest5708 largeedittest5709 largeedittest571 largeedittest5710 largeedittest5711 largeedittest5712 largeedittest5713 largeedittest5714 largeedittest5715 largeedittest5716 largeedittest5717 largeedittest5718 largeedittest5719 largeedittest572 largeedittest5720 largeedittest5721 largeedittest5722 largeedittest5723 largeedittest5724 largeedittest5725 largeedittest5726 largeedittest5727 largeedittest5728 largeedittest5729 largeedittest573 largeedittest5730 largeedittest5731 largeedittest5732 largeedittest5733 largeedittest5734 largeedittest5735 largeedittest5736 largeedittest5737 largeedittest5738 largeedittest5739 largeedittest574 largeedittest5740 largeedittest5741 largeedittest5742 largeedittest5743 largeedittest5744 largeedittest5745 largeedittest5746 largeedittest5747 largeedittest5748 largeedittest5749 largeedittest575 largeedittest5750 largeedittest5751 largeedittest5752 largeedittest5753 largeedittest5754 largeedittest5755 largeedittest5756 largeedittest5757 largeedittest5758 largeedittest5759 largeedittest576 largeedittest5760 largeedittest5761 largeedittest5762 largeedittest5763 largeedittest5764 largeedittest5765 largeedittest5766 largeedittest5767 largeedittest5768 largeedittest5769 largeedittest577 largeedittest5770 largeedittest5771 largeedittest5772 largeedittest5773 largeedittest5774 largeedittest5775 largeedittest5776 largeedittest5777 largeedittest5778 largeedittest5779 largeedittest578 largeedittest5780 largeedittest5781 largeedittest5782 largeedittest5783 largeedittest5784 largeedittest5785 largeedittest5786 largeedittest5787 largeedittest5788 largeedittest5789 largeedittest579 largeedittest5790 largeedittest5791 largeedittest5792 largeedittest5793 largeedittest5794 largeedittest5795 largeedittest5796 largeedittest5797 largeedittest5798 largeedittest5799 largeedittest58 largeedittest580 largeedittest5800 largeedittest5801 largeedittest5802 largeedittest5803 largeedittest5804 largeedittest5805 largeedittest5806 largeedittest5807 largeedittest5808 largeedittest5809 largeedittest581 largeedittest5810 largeedittest5811 largeedittest5812 largeedittest5813 largeedittest5814 largeedittest5815 largeedittest5816 largeedittest5817 largeedittest5818 largeedittest5819 largeedittest582 largeedittest5820 largeedittest5821 largeedittest5822 largeedittest5823 largeedittest5824 largeedittest5825 largeedittest5826 largeedittest5827 largeedittest5828 largeedittest5829 largeedittest583 largeedittest5830 largeedittest5831 largeedittest5832 largeedittest5833 largeedittest5834 largeedittest5835 largeedittest5836 largeedittest5837 largeedittest5838 largeedittest5839 largeedittest584 largeedittest5840 largeedittest5841 largeedittest5842 largeedittest5843 largeedittest5844 largeedittest5845 largeedittest5846 largeedittest5847 largeedittest5848 largeedittest5849 largeedittest585 largeedittest5850 largeedittest5851 largeedittest5852 largeedittest5853 largeedittest5854 largeedittest5855 largeedittest5856 largeedittest5857 largeedittest5858 largeedittest5859 largeedittest586 largeedittest5860 largeedittest5861 largeedittest5862 largeedittest5863 largeedittest5864 largeedittest5865 largeedittest5866 largeedittest5867 largeedittest5868 largeedittest5869 largeedittest587 largeedittest5870 largeedittest5871 largeedittest5872 largeedittest5873 largeedittest5874 largeedittest5875 largeedittest5876 largeedittest5877 largeedittest5878 largeedittest5879 largeedittest588 largeedittest5880 largeedittest5881 largeedittest5882 largeedittest5883 largeedittest5884 largeedittest5885 largeedittest5886 largeedittest5887 largeedittest5888 largeedittest5889 largeedittest589 largeedittest5890 largeedittest5891 largeedittest5892 largeedittest5893 largeedittest5894 largeedittest5895 largeedittest5896 largeedittest5897 largeedittest5898 largeedittest5899 largeedittest59 largeedittest590 largeedittest5900 largeedittest5901 largeedittest5902 largeedittest5903 largeedittest5904 largeedittest5905 largeedittest5906 largeedittest5907 largeedittest5908 largeedittest5909 largeedittest591 largeedittest5910 largeedittest5911 largeedittest5912 largeedittest5913 largeedittest5914 largeedittest5915 largeedittest5916 largeedittest5917 largeedittest5918 largeedittest5919 largeedittest592 largeedittest5920 largeedittest5921 largeedittest5922 largeedittest5923 largeedittest5924 largeedittest5925 largeedittest5926 largeedittest5927 largeedittest5928 largeedittest5929 largeedittest593 largeedittest5930 largeedittest5931 largeedittest5932 largeedittest5933 largeedittest5934 largeedittest5935 largeedittest5936 largeedittest5937 largeedittest5938 largeedittest5939 largeedittest594 largeedittest5940 largeedittest5941 largeedittest5942 largeedittest5943 largeedittest5944 largeedittest5945 largeedittest5946 largeedittest5947 largeedittest5948 largeedittest5949 largeedittest595 largeedittest5950 largeedittest5951 largeedittest5952 largeedittest5953 largeedittest5954 largeedittest5955 largeedittest5956 largeedittest5957 largeedittest5958 largeedittest5959 largeedittest596 largeedittest5960 largeedittest5961 largeedittest5962 largeedittest5963 largeedittest5964 largeedittest5965 largeedittest5966 largeedittest5967 largeedittest5968 largeedittest5969 largeedittest597 largeedittest5970 largeedittest5971 largeedittest5972 largeedittest5973 largeedittest5974 largeedittest5975 largeedittest5976 largeedittest5977 largeedittest5978 largeedittest5979 largeedittest598 largeedittest5980 largeedittest5981 largeedittest5982 largeedittest5983 largeedittest5984 largeedittest5985 largeedittest5986 largeedittest5987 largeedittest5988 largeedittest5989 largeedittest599 largeedittest5990 largeedittest5991 largeedittest5992 largeedittest5993 largeedittest5994 largeedittest5995 largeedittest5996 largeedittest5997 largeedittest5998 largeedittest5999 largeedittest6 largeedittest60 largeedittest600 largeedittest6000 largeedittest6001 largeedittest6002 largeedittest6003 largeedittest6004 largeedittest6005 largeedittest6006 largeedittest6007 largeedittest6008 largeedittest6009 largeedittest601 largeedittest6010 largeedittest6011 largeedittest6012 largeedittest6013 largeedittest6014 largeedittest6015 largeedittest6016 largeedittest6017 largeedittest6018 largeedittest6019 largeedittest602 largeedittest6020 largeedittest6021 largeedittest6022 largeedittest6023 largeedittest6024 largeedittest6025 largeedittest6026 largeedittest6027 largeedittest6028 largeedittest6029 largeedittest603 largeedittest6030 largeedittest6031 largeedittest6032 largeedittest6033 largeedittest6034 largeedittest6035 largeedittest6036 largeedittest6037 largeedittest6038 largeedittest6039 largeedittest604 largeedittest6040 largeedittest6041 largeedittest6042 largeedittest6043 largeedittest6044 largeedittest6045 largeedittest6046 largeedittest6047 largeedittest6048 largeedittest6049 largeedittest605 largeedittest6050 largeedittest6051 largeedittest6052 largeedittest6053 largeedittest6054 largeedittest6055 largeedittest6056 largeedittest6057 largeedittest6058 largeedittest6059 largeedittest606 largeedittest6060 largeedittest6061 largeedittest6062 largeedittest6063 largeedittest6064 largeedittest6065 largeedittest6066 largeedittest6067 largeedittest6068 largeedittest6069 largeedittest607 largeedittest6070 largeedittest6071 largeedittest6072 largeedittest6073 largeedittest6074 largeedittest6075 largeedittest6076 largeedittest6077 largeedittest6078 largeedittest6079 largeedittest608 largeedittest6080 largeedittest6081 largeedittest6082 largeedittest6083 largeedittest6084 largeedittest6085 largeedittest6086 largeedittest6087 largeedittest6088 largeedittest6089 largeedittest609 largeedittest6090 largeedittest6091 largeedittest6092 largeedittest6093 largeedittest6094 largeedittest6095 largeedittest6096 largeedittest6097 largeedittest6098 largeedittest6099 largeedittest61 largeedittest610 largeedittest6100 largeedittest6101 largeedittest6102 largeedittest6103 largeedittest6104 largeedittest6105 largeedittest6106 largeedittest6107 largeedittest6108 largeedittest6109 largeedittest611 largeedittest6110 largeedittest6111 largeedittest6112 largeedittest6113 largeedittest6114 largeedittest6115 largeedittest6116 largeedittest6117 largeedittest6118 largeedittest6119 largeedittest612 largeedittest6120 largeedittest6121 largeedittest6122 largeedittest6123 largeedittest6124 largeedittest6125 largeedittest6126 largeedittest6127 largeedittest6128 largeedittest6129 largeedittest613 largeedittest6130 largeedittest6131 largeedittest6132 largeedittest6133 largeedittest6134 largeedittest6135 largeedittest6136 largeedittest6137 largeedittest6138 largeedittest6139 largeedittest614 largeedittest6140 largeedittest6141 largeedittest6142 largeedittest6143 largeedittest6144 largeedittest6145 largeedittest6146 largeedittest6147 largeedittest6148 largeedittest6149 largeedittest615 largeedittest6150 largeedittest6151 largeedittest6152 largeedittest6153 largeedittest6154 largeedittest6155 largeedittest6156 largeedittest6157 largeedittest6158 largeedittest6159 largeedittest616 largeedittest6160 largeedittest6161 largeedittest6162 largeedittest6163 largeedittest6164 largeedittest6165 largeedittest6166 largeedittest6167 largeedittest6168 largeedittest6169 largeedittest617 largeedittest6170 largeedittest6171 largeedittest6172 largeedittest6173 largeedittest6174 largeedittest6175 largeedittest6176 largeedittest6177 largeedittest6178 largeedittest6179 largeedittest618 largeedittest6180 largeedittest6181 largeedittest6182 largeedittest6183 largeedittest6184 largeedittest6185 largeedittest6186 largeedittest6187 largeedittest6188 largeedittest6189 largeedittest619 largeedittest6190 largeedittest6191 largeedittest6192 largeedittest6193 largeedittest6194 largeedittest6195 largeedittest6196 largeedittest6197 largeedittest6198 largeedittest6199 largeedittest62 largeedittest620 largeedittest6200 largeedittest6201 largeedittest6202 largeedittest6203 largeedittest6204 largeedittest6205 largeedittest6206 largeedittest6207 largeedittest6208 largeedittest6209 largeedittest621 largeedittest6210 largeedittest6211 largeedittest6212 largeedittest6213 largeedittest6214 largeedittest6215 largeedittest6216 largeedittest6217 largeedittest6218 largeedittest6219 largeedittest622 largeedittest6220 largeedittest6221 largeedittest6222 largeedittest6223 largeedittest6224 largeedittest6225 largeedittest6226 largeedittest6227 largeedittest6228 largeedittest6229 largeedittest623 largeedittest6230 largeedittest6231 largeedittest6232 largeedittest6233 largeedittest6234 largeedittest6235 largeedittest6236 largeedittest6237 largeedittest6238 largeedittest6239 largeedittest624 largeedittest6240 largeedittest6241 largeedittest6242 largeedittest6243 largeedittest6244 largeedittest6245 largeedittest6246 largeedittest6247 largeedittest6248 largeedittest6249 largeedittest625 largeedittest6250 largeedittest6251 largeedittest6252 largeedittest6253 largeedittest6254 largeedittest6255 largeedittest6256 largeedittest6257 largeedittest6258 largeedittest6259 largeedittest626 largeedittest6260 largeedittest6261 largeedittest6262 largeedittest6263 largeedittest6264 largeedittest6265 largeedittest6266 largeedittest6267 largeedittest6268 largeedittest6269 largeedittest627 largeedittest6270 largeedittest6271 largeedittest6272 largeedittest6273 largeedittest6274 largeedittest6275 largeedittest6276 largeedittest6277 largeedittest6278 largeedittest6279 largeedittest628 largeedittest6280 largeedittest6281 largeedittest6282 largeedittest6283 largeedittest6284 largeedittest6285 largeedittest6286 largeedittest6287 largeedittest6288 largeedittest6289 largeedittest629 largeedittest6290 largeedittest6291 largeedittest6292 largeedittest6293 largeedittest6294 largeedittest6295 largeedittest6296 largeedittest6297 largeedittest6298 largeedittest6299 largeedittest63 largeedittest630 largeedittest6300 largeedittest6301 largeedittest6302 largeedittest6303 largeedittest6304 largeedittest6305 largeedittest6306 largeedittest6307 largeedittest6308 largeedittest6309 largeedittest631 largeedittest6310 largeedittest6311 largeedittest6312 largeedittest6313 largeedittest6314 largeedittest6315 largeedittest6316 largeedittest6317 largeedittest6318 largeedittest6319 largeedittest632 largeedittest6320 largeedittest6321 largeedittest6322 largeedittest6323 largeedittest6324 largeedittest6325 largeedittest6326 largeedittest6327 largeedittest6328 largeedittest6329 largeedittest633 largeedittest6330 largeedittest6331 largeedittest6332 largeedittest6333 largeedittest6334 largeedittest6335 largeedittest6336 largeedittest6337 largeedittest6338 largeedittest6339 largeedittest634 largeedittest6340 largeedittest6341 largeedittest6342 largeedittest6343 largeedittest6344 largeedittest6345 largeedittest6346 largeedittest6347 largeedittest6348 largeedittest6349 largeedittest635 largeedittest6350 largeedittest6351 largeedittest6352 largeedittest6353 largeedittest6354 largeedittest6355 largeedittest6356 largeedittest6357 largeedittest6358 largeedittest6359 largeedittest636 largeedittest6360 largeedittest6361 largeedittest6362 largeedittest6363 largeedittest6364 largeedittest6365 largeedittest6366 largeedittest6367 largeedittest6368 largeedittest6369 largeedittest637 largeedittest6370 largeedittest6371 largeedittest6372 largeedittest6373 largeedittest6374 largeedittest6375 largeedittest6376 largeedittest6377 largeedittest6378 largeedittest6379 largeedittest638 largeedittest6380 largeedittest6381 largeedittest6382 largeedittest6383 largeedittest6384 largeedittest6385 largeedittest6386 largeedittest6387 largeedittest6388 largeedittest6389 largeedittest639 largeedittest6390 largeedittest6391 largeedittest6392 largeedittest6393 largeedittest6394 largeedittest6395 largeedittest6396 largeedittest6397 largeedittest6398 largeedittest6399 largeedittest64 largeedittest640 largeedittest6400 largeedittest6401 largeedittest6402 largeedittest6403 largeedittest6404 largeedittest6405 largeedittest6406 largeedittest6407 largeedittest6408 largeedittest6409 largeedittest641 largeedittest6410 largeedittest6411 largeedittest6412 largeedittest6413 largeedittest6414 largeedittest6415 largeedittest6416 largeedittest6417 largeedittest6418 largeedittest6419 largeedittest642 largeedittest6420 largeedittest6421 largeedittest6422 largeedittest6423 largeedittest6424 largeedittest6425 largeedittest6426 largeedittest6427 largeedittest6428 largeedittest6429 largeedittest643 largeedittest6430 largeedittest6431 largeedittest6432 largeedittest6433 largeedittest6434 largeedittest6435 largeedittest6436 largeedittest6437 largeedittest6438 largeedittest6439 largeedittest644 largeedittest6440 largeedittest6441 largeedittest6442 largeedittest6443 largeedittest6444 largeedittest6445 largeedittest6446 largeedittest6447 largeedittest6448 largeedittest6449 largeedittest645 largeedittest6450 largeedittest6451 largeedittest6452 largeedittest6453 largeedittest6454 largeedittest6455 largeedittest6456 largeedittest6457 largeedittest6458 largeedittest6459 largeedittest646 largeedittest6460 largeedittest6461 largeedittest6462 largeedittest6463 largeedittest6464 largeedittest6465 largeedittest6466 largeedittest6467 largeedittest6468 largeedittest6469 largeedittest647 largeedittest6470 largeedittest6471 largeedittest6472 largeedittest6473 largeedittest6474 largeedittest6475 largeedittest6476 largeedittest6477 largeedittest6478 largeedittest6479 largeedittest648 largeedittest6480 largeedittest6481 largeedittest6482 largeedittest6483 largeedittest6484 largeedittest6485 largeedittest6486 largeedittest6487 largeedittest6488 largeedittest6489 largeedittest649 largeedittest6490 largeedittest6491 largeedittest6492 largeedittest6493 largeedittest6494 largeedittest6495 largeedittest6496 largeedittest6497 largeedittest6498 largeedittest6499 largeedittest65 largeedittest650 largeedittest6500 largeedittest6501 largeedittest6502 largeedittest6503 largeedittest6504 largeedittest6505 largeedittest6506 largeedittest6507 largeedittest6508 largeedittest6509 largeedittest651 largeedittest6510 largeedittest6511 largeedittest6512 largeedittest6513 largeedittest6514 largeedittest6515 largeedittest6516 largeedittest6517 largeedittest6518 largeedittest6519 largeedittest652 largeedittest6520 largeedittest6521 largeedittest6522 largeedittest6523 largeedittest6524 largeedittest6525 largeedittest6526 largeedittest6527 largeedittest6528 largeedittest6529 largeedittest653 largeedittest6530 largeedittest6531 largeedittest6532 largeedittest6533 largeedittest6534 largeedittest6535 largeedittest6536 largeedittest6537 largeedittest6538 largeedittest6539 largeedittest654 largeedittest6540 largeedittest6541 largeedittest6542 largeedittest6543 largeedittest6544 largeedittest6545 largeedittest6546 largeedittest6547 largeedittest6548 largeedittest6549 largeedittest655 largeedittest6550 largeedittest6551 largeedittest6552 largeedittest6553 largeedittest6554 largeedittest6555 largeedittest6556 largeedittest6557 largeedittest6558 largeedittest6559 largeedittest656 largeedittest6560 largeedittest6561 largeedittest6562 largeedittest6563 largeedittest6564 largeedittest6565 largeedittest6566 largeedittest6567 largeedittest6568 largeedittest6569 largeedittest657 largeedittest6570 largeedittest6571 largeedittest6572 largeedittest6573 largeedittest6574 largeedittest6575 largeedittest6576 largeedittest6577 largeedittest6578 largeedittest6579 largeedittest658 largeedittest6580 largeedittest6581 largeedittest6582 largeedittest6583 largeedittest6584 largeedittest6585 largeedittest6586 largeedittest6587 largeedittest6588 largeedittest6589 largeedittest659 largeedittest6590 largeedittest6591 largeedittest6592 largeedittest6593 largeedittest6594 largeedittest6595 largeedittest6596 largeedittest6597 largeedittest6598 largeedittest6599 largeedittest66 largeedittest660 largeedittest6600 largeedittest6601 largeedittest6602 largeedittest6603 largeedittest6604 largeedittest6605 largeedittest6606 largeedittest6607 largeedittest6608 largeedittest6609 largeedittest661 largeedittest6610 largeedittest6611 largeedittest6612 largeedittest6613 largeedittest6614 largeedittest6615 largeedittest6616 largeedittest6617 largeedittest6618 largeedittest6619 largeedittest662 largeedittest6620 largeedittest6621 largeedittest6622 largeedittest6623 largeedittest6624 largeedittest6625 largeedittest6626 largeedittest6627 largeedittest6628 largeedittest6629 largeedittest663 largeedittest6630 largeedittest6631 largeedittest6632 largeedittest6633 largeedittest6634 largeedittest6635 largeedittest6636 largeedittest6637 largeedittest6638 largeedittest6639 largeedittest664 largeedittest6640 largeedittest6641 largeedittest6642 largeedittest6643 largeedittest6644 largeedittest6645 largeedittest6646 largeedittest6647 largeedittest6648 largeedittest6649 largeedittest665 largeedittest6650 largeedittest6651 largeedittest6652 largeedittest6653 largeedittest6654 largeedittest6655 largeedittest6656 largeedittest6657 largeedittest6658 largeedittest6659 largeedittest666 largeedittest6660 largeedittest6661 largeedittest6662 largeedittest6663 largeedittest6664 largeedittest6665 largeedittest6666 largeedittest6667 largeedittest6668 largeedittest6669 largeedittest667 largeedittest6670 largeedittest6671 largeedittest6672 largeedittest6673 largeedittest6674 largeedittest6675 largeedittest6676 largeedittest6677 largeedittest6678 largeedittest6679 largeedittest668 largeedittest6680 largeedittest6681 largeedittest6682 largeedittest6683 largeedittest6684 largeedittest6685 largeedittest6686 largeedittest6687 largeedittest6688 largeedittest6689 largeedittest669 largeedittest6690 largeedittest6691 largeedittest6692 largeedittest6693 largeedittest6694 largeedittest6695 largeedittest6696 largeedittest6697 largeedittest6698 largeedittest6699 largeedittest67 largeedittest670 largeedittest6700 largeedittest6701 largeedittest6702 largeedittest6703 largeedittest6704 largeedittest6705 largeedittest6706 largeedittest6707 largeedittest6708 largeedittest6709 largeedittest671 largeedittest6710 largeedittest6711 largeedittest6712 largeedittest6713 largeedittest6714 largeedittest6715 largeedittest6716 largeedittest6717 largeedittest6718 largeedittest6719 largeedittest672 largeedittest6720 largeedittest6721 largeedittest6722 largeedittest6723 largeedittest6724 largeedittest6725 largeedittest6726 largeedittest6727 largeedittest6728 largeedittest6729 largeedittest673 largeedittest6730 largeedittest6731 largeedittest6732 largeedittest6733 largeedittest6734 largeedittest6735 largeedittest6736 largeedittest6737 largeedittest6738 largeedittest6739 largeedittest674 largeedittest6740 largeedittest6741 largeedittest6742 largeedittest6743 largeedittest6744 largeedittest6745 largeedittest6746 largeedittest6747 largeedittest6748 largeedittest6749 largeedittest675 largeedittest6750 largeedittest6751 largeedittest6752 largeedittest6753 largeedittest6754 largeedittest6755 largeedittest6756 largeedittest6757 largeedittest6758 largeedittest6759 largeedittest676 largeedittest6760 largeedittest6761 largeedittest6762 largeedittest6763 largeedittest6764 largeedittest6765 largeedittest6766 largeedittest6767 largeedittest6768 largeedittest6769 largeedittest677 largeedittest6770 largeedittest6771 largeedittest6772 largeedittest6773 largeedittest6774 largeedittest6775 largeedittest6776 largeedittest6777 largeedittest6778 largeedittest6779 largeedittest678 largeedittest6780 largeedittest6781 largeedittest6782 largeedittest6783 largeedittest6784 largeedittest6785 largeedittest6786 largeedittest6787 largeedittest6788 largeedittest6789 largeedittest679 largeedittest6790 largeedittest6791 largeedittest6792 largeedittest6793 largeedittest6794 largeedittest6795 largeedittest6796 largeedittest6797 largeedittest6798 largeedittest6799 largeedittest68 largeedittest680 largeedittest6800 largeedittest6801 largeedittest6802 largeedittest6803 largeedittest6804 largeedittest6805 largeedittest6806 largeedittest6807 largeedittest6808 largeedittest6809 largeedittest681 largeedittest6810 largeedittest6811 largeedittest6812 largeedittest6813 largeedittest6814 largeedittest6815 largeedittest6816 largeedittest6817 largeedittest6818 largeedittest6819 largeedittest682 largeedittest6820 largeedittest6821 largeedittest6822 largeedittest6823 largeedittest6824 largeedittest6825 largeedittest6826 largeedittest6827 largeedittest6828 largeedittest6829 largeedittest683 largeedittest6830 largeedittest6831 largeedittest6832 largeedittest6833 largeedittest6834 largeedittest6835 largeedittest6836 largeedittest6837 largeedittest6838 largeedittest6839 largeedittest684 largeedittest6840 largeedittest6841 largeedittest6842 largeedittest6843 largeedittest6844 largeedittest6845 largeedittest6846 largeedittest6847 largeedittest6848 largeedittest6849 largeedittest685 largeedittest6850 largeedittest6851 largeedittest6852 largeedittest6853 largeedittest6854 largeedittest6855 largeedittest6856 largeedittest6857 largeedittest6858 largeedittest6859 largeedittest686 largeedittest6860 largeedittest6861 largeedittest6862 largeedittest6863 largeedittest6864 largeedittest6865 largeedittest6866 largeedittest6867 largeedittest6868 largeedittest6869 largeedittest687 largeedittest6870 largeedittest6871 largeedittest6872 largeedittest6873 largeedittest6874 largeedittest6875 largeedittest6876 largeedittest6877 largeedittest6878 largeedittest6879 largeedittest688 largeedittest6880 largeedittest6881 largeedittest6882 largeedittest6883 largeedittest6884 largeedittest6885 largeedittest6886 largeedittest6887 largeedittest6888 largeedittest6889 largeedittest689 largeedittest6890 largeedittest6891 largeedittest6892 largeedittest6893 largeedittest6894 largeedittest6895 largeedittest6896 largeedittest6897 largeedittest6898 largeedittest6899 largeedittest69 largeedittest690 largeedittest6900 largeedittest6901 largeedittest6902 largeedittest6903 largeedittest6904 largeedittest6905 largeedittest6906 largeedittest6907 largeedittest6908 largeedittest6909 largeedittest691 largeedittest6910 largeedittest6911 largeedittest6912 largeedittest6913 largeedittest6914 largeedittest6915 largeedittest6916 largeedittest6917 largeedittest6918 largeedittest6919 largeedittest692 largeedittest6920 largeedittest6921 largeedittest6922 largeedittest6923 largeedittest6924 largeedittest6925 largeedittest6926 largeedittest6927 largeedittest6928 largeedittest6929 largeedittest693 largeedittest6930 largeedittest6931 largeedittest6932 largeedittest6933 largeedittest6934 largeedittest6935 largeedittest6936 largeedittest6937 largeedittest6938 largeedittest6939 largeedittest694 largeedittest6940 largeedittest6941 largeedittest6942 largeedittest6943 largeedittest6944 largeedittest6945 largeedittest6946 largeedittest6947 largeedittest6948 largeedittest6949 largeedittest695 largeedittest6950 largeedittest6951 largeedittest6952 largeedittest6953 largeedittest6954 largeedittest6955 largeedittest6956 largeedittest6957 largeedittest6958 largeedittest6959 largeedittest696 largeedittest6960 largeedittest6961 largeedittest6962 largeedittest6963 largeedittest6964 largeedittest6965 largeedittest6966 largeedittest6967 largeedittest6968 largeedittest6969 largeedittest697 largeedittest6970 largeedittest6971 largeedittest6972 largeedittest6973 largeedittest6974 largeedittest6975 largeedittest6976 largeedittest6977 largeedittest6978 largeedittest6979 largeedittest698 largeedittest6980 largeedittest6981 largeedittest6982 largeedittest6983 largeedittest6984 largeedittest6985 largeedittest6986 largeedittest6987 largeedittest6988 largeedittest6989 largeedittest699 largeedittest6990 largeedittest6991 largeedittest6992 largeedittest6993 largeedittest6994 largeedittest6995 largeedittest6996 largeedittest6997 largeedittest6998 largeedittest6999 largeedittest7 largeedittest70 largeedittest700 largeedittest7000 largeedittest7001 largeedittest7002 largeedittest7003 largeedittest7004 largeedittest7005 largeedittest7006 largeedittest7007 largeedittest7008 largeedittest7009 largeedittest701 largeedittest7010 largeedittest7011 largeedittest7012 largeedittest7013 largeedittest7014 largeedittest7015 largeedittest7016 largeedittest7017 largeedittest7018 largeedittest7019 largeedittest702 largeedittest7020 largeedittest7021 largeedittest7022 largeedittest7023 largeedittest7024 largeedittest7025 largeedittest7026 largeedittest7027 largeedittest7028 largeedittest7029 largeedittest703 largeedittest7030 largeedittest7031 largeedittest7032 largeedittest7033 largeedittest7034 largeedittest7035 largeedittest7036 largeedittest7037 largeedittest7038 largeedittest7039 largeedittest704 largeedittest7040 largeedittest7041 largeedittest7042 largeedittest7043 largeedittest7044 largeedittest7045 largeedittest7046 largeedittest7047 largeedittest7048 largeedittest7049 largeedittest705 largeedittest7050 largeedittest7051 largeedittest7052 largeedittest7053 largeedittest7054 largeedittest7055 largeedittest7056 largeedittest7057 largeedittest7058 largeedittest7059 largeedittest706 largeedittest7060 largeedittest7061 largeedittest7062 largeedittest7063 largeedittest7064 largeedittest7065 largeedittest7066 largeedittest7067 largeedittest7068 largeedittest7069 largeedittest707 largeedittest7070 largeedittest7071 largeedittest7072 largeedittest7073 largeedittest7074 largeedittest7075 largeedittest7076 largeedittest7077 largeedittest7078 largeedittest7079 largeedittest708 largeedittest7080 largeedittest7081 largeedittest7082 largeedittest7083 largeedittest7084 largeedittest7085 largeedittest7086 largeedittest7087 largeedittest7088 largeedittest7089 largeedittest709 largeedittest7090 largeedittest7091 largeedittest7092 largeedittest7093 largeedittest7094 largeedittest7095 largeedittest7096 largeedittest7097 largeedittest7098 largeedittest7099 largeedittest71 largeedittest710 largeedittest7100 largeedittest7101 largeedittest7102 largeedittest7103 largeedittest7104 largeedittest7105 largeedittest7106 largeedittest7107 largeedittest7108 largeedittest7109 largeedittest711 largeedittest7110 largeedittest7111 largeedittest7112 largeedittest7113 largeedittest7114 largeedittest7115 largeedittest7116 largeedittest7117 largeedittest7118 largeedittest7119 largeedittest712 largeedittest7120 largeedittest7121 largeedittest7122 largeedittest7123 largeedittest7124 largeedittest7125 largeedittest7126 largeedittest7127 largeedittest7128 largeedittest7129 largeedittest713 largeedittest7130 largeedittest7131 largeedittest7132 largeedittest7133 largeedittest7134 largeedittest7135 largeedittest7136 largeedittest7137 largeedittest7138 largeedittest7139 largeedittest714 largeedittest7140 largeedittest7141 largeedittest7142 largeedittest7143 largeedittest7144 largeedittest7145 largeedittest7146 largeedittest7147 largeedittest7148 largeedittest7149 largeedittest715 largeedittest7150 largeedittest7151 largeedittest7152 largeedittest7153 largeedittest7154 largeedittest7155 largeedittest7156 largeedittest7157 largeedittest7158 largeedittest7159 largeedittest716 largeedittest7160 largeedittest7161 largeedittest7162 largeedittest7163 largeedittest7164 largeedittest7165 largeedittest7166 largeedittest7167 largeedittest7168 largeedittest7169 largeedittest717 largeedittest7170 largeedittest7171 largeedittest7172 largeedittest7173 largeedittest7174 largeedittest7175 largeedittest7176 largeedittest7177 largeedittest7178 largeedittest7179 largeedittest718 largeedittest7180 largeedittest7181 largeedittest7182 largeedittest7183 largeedittest7184 largeedittest7185 largeedittest7186 largeedittest7187 largeedittest7188 largeedittest7189 largeedittest719 largeedittest7190 largeedittest7191 largeedittest7192 largeedittest7193 largeedittest7194 largeedittest7195 largeedittest7196 largeedittest7197 largeedittest7198 largeedittest7199 largeedittest72 largeedittest720 largeedittest7200 largeedittest7201 largeedittest7202 largeedittest7203 largeedittest7204 largeedittest7205 largeedittest7206 largeedittest7207 largeedittest7208 largeedittest7209 largeedittest721 largeedittest7210 largeedittest7211 largeedittest7212 largeedittest7213 largeedittest7214 largeedittest7215 largeedittest7216 largeedittest7217 largeedittest7218 largeedittest7219 largeedittest722 largeedittest7220 largeedittest7221 largeedittest7222 largeedittest7223 largeedittest7224 largeedittest7225 largeedittest7226 largeedittest7227 largeedittest7228 largeedittest7229 largeedittest723 largeedittest7230 largeedittest7231 largeedittest7232 largeedittest7233 largeedittest7234 largeedittest7235 largeedittest7236 largeedittest7237 largeedittest7238 largeedittest7239 largeedittest724 largeedittest7240 largeedittest7241 largeedittest7242 largeedittest7243 largeedittest7244 largeedittest7245 largeedittest7246 largeedittest7247 largeedittest7248 largeedittest7249 largeedittest725 largeedittest7250 largeedittest7251 largeedittest7252 largeedittest7253 largeedittest7254 largeedittest7255 largeedittest7256 largeedittest7257 largeedittest7258 largeedittest7259 largeedittest726 largeedittest7260 largeedittest7261 largeedittest7262 largeedittest7263 largeedittest7264 largeedittest7265 largeedittest7266 largeedittest7267 largeedittest7268 largeedittest7269 largeedittest727 largeedittest7270 largeedittest7271 largeedittest7272 largeedittest7273 largeedittest7274 largeedittest7275 largeedittest7276 largeedittest7277 largeedittest7278 largeedittest7279 largeedittest728 largeedittest7280 largeedittest7281 largeedittest7282 largeedittest7283 largeedittest7284 largeedittest7285 largeedittest7286 largeedittest7287 largeedittest7288 largeedittest7289 largeedittest729 largeedittest7290 largeedittest7291 largeedittest7292 largeedittest7293 largeedittest7294 largeedittest7295 largeedittest7296 largeedittest7297 largeedittest7298 largeedittest7299 largeedittest73 largeedittest730 largeedittest7300 largeedittest7301 largeedittest7302 largeedittest7303 largeedittest7304 largeedittest7305 largeedittest7306 largeedittest7307 largeedittest7308 largeedittest7309 largeedittest731 largeedittest7310 largeedittest7311 largeedittest7312 largeedittest7313 largeedittest7314 largeedittest7315 largeedittest7316 largeedittest7317 largeedittest7318 largeedittest7319 largeedittest732 largeedittest7320 largeedittest7321 largeedittest7322 largeedittest7323 largeedittest7324 largeedittest7325 largeedittest7326 largeedittest7327 largeedittest7328 largeedittest7329 largeedittest733 largeedittest7330 largeedittest7331 largeedittest7332 largeedittest7333 largeedittest7334 largeedittest7335 largeedittest7336 largeedittest7337 largeedittest7338 largeedittest7339 largeedittest734 largeedittest7340 largeedittest7341 largeedittest7342 largeedittest7343 largeedittest7344 largeedittest7345 largeedittest7346 largeedittest7347 largeedittest7348 largeedittest7349 largeedittest735 largeedittest7350 largeedittest7351 largeedittest7352 largeedittest7353 largeedittest7354 largeedittest7355 largeedittest7356 largeedittest7357 largeedittest7358 largeedittest7359 largeedittest736 largeedittest7360 largeedittest7361 largeedittest7362 largeedittest7363 largeedittest7364 largeedittest7365 largeedittest7366 largeedittest7367 largeedittest7368 largeedittest7369 largeedittest737 largeedittest7370 largeedittest7371 largeedittest7372 largeedittest7373 largeedittest7374 largeedittest7375 largeedittest7376 largeedittest7377 largeedittest7378 largeedittest7379 largeedittest738 largeedittest7380 largeedittest7381 largeedittest7382 largeedittest7383 largeedittest7384 largeedittest7385 largeedittest7386 largeedittest7387 largeedittest7388 largeedittest7389 largeedittest739 largeedittest7390 largeedittest7391 largeedittest7392 largeedittest7393 largeedittest7394 largeedittest7395 largeedittest7396 largeedittest7397 largeedittest7398 largeedittest7399 largeedittest74 largeedittest740 largeedittest7400 largeedittest7401 largeedittest7402 largeedittest7403 largeedittest7404 largeedittest7405 largeedittest7406 largeedittest7407 largeedittest7408 largeedittest7409 largeedittest741 largeedittest7410 largeedittest7411 largeedittest7412 largeedittest7413 largeedittest7414 largeedittest7415 largeedittest7416 largeedittest7417 largeedittest7418 largeedittest7419 largeedittest742 largeedittest7420 largeedittest7421 largeedittest7422 largeedittest7423 largeedittest7424 largeedittest7425 largeedittest7426 largeedittest7427 largeedittest7428 largeedittest7429 largeedittest743 largeedittest7430 largeedittest7431 largeedittest7432 largeedittest7433 largeedittest7434 largeedittest7435 largeedittest7436 largeedittest7437 largeedittest7438 largeedittest7439 largeedittest744 largeedittest7440 largeedittest7441 largeedittest7442 largeedittest7443 largeedittest7444 largeedittest7445 largeedittest7446 largeedittest7447 largeedittest7448 largeedittest7449 largeedittest745 largeedittest7450 largeedittest7451 largeedittest7452 largeedittest7453 largeedittest7454 largeedittest7455 largeedittest7456 largeedittest7457 largeedittest7458 largeedittest7459 largeedittest746 largeedittest7460 largeedittest7461 largeedittest7462 largeedittest7463 largeedittest7464 largeedittest7465 largeedittest7466 largeedittest7467 largeedittest7468 largeedittest7469 largeedittest747 largeedittest7470 largeedittest7471 largeedittest7472 largeedittest7473 largeedittest7474 largeedittest7475 largeedittest7476 largeedittest7477 largeedittest7478 largeedittest7479 largeedittest748 largeedittest7480 largeedittest7481 largeedittest7482 largeedittest7483 largeedittest7484 largeedittest7485 largeedittest7486 largeedittest7487 largeedittest7488 largeedittest7489 largeedittest749 largeedittest7490 largeedittest7491 largeedittest7492 largeedittest7493 largeedittest7494 largeedittest7495 largeedittest7496 largeedittest7497 largeedittest7498 largeedittest7499 largeedittest75 largeedittest750 largeedittest7500 largeedittest7501 largeedittest7502 largeedittest7503 largeedittest7504 largeedittest7505 largeedittest7506 largeedittest7507 largeedittest7508 largeedittest7509 largeedittest751 largeedittest7510 largeedittest7511 largeedittest7512 largeedittest7513 largeedittest7514 largeedittest7515 largeedittest7516 largeedittest7517 largeedittest7518 largeedittest7519 largeedittest752 largeedittest7520 largeedittest7521 largeedittest7522 largeedittest7523 largeedittest7524 largeedittest7525 largeedittest7526 largeedittest7527 largeedittest7528 largeedittest7529 largeedittest753 largeedittest7530 largeedittest7531 largeedittest7532 largeedittest7533 largeedittest7534 largeedittest7535 largeedittest7536 largeedittest7537 largeedittest7538 largeedittest7539 largeedittest754 largeedittest7540 largeedittest7541 largeedittest7542 largeedittest7543 largeedittest7544 largeedittest7545 largeedittest7546 largeedittest7547 largeedittest7548 largeedittest7549 largeedittest755 largeedittest7550 largeedittest7551 largeedittest7552 largeedittest7553 largeedittest7554 largeedittest7555 largeedittest7556 largeedittest7557 largeedittest7558 largeedittest7559 largeedittest756 largeedittest7560 largeedittest7561 largeedittest7562 largeedittest7563 largeedittest7564 largeedittest7565 largeedittest7566 largeedittest7567 largeedittest7568 largeedittest7569 largeedittest757 largeedittest7570 largeedittest7571 largeedittest7572 largeedittest7573 largeedittest7574 largeedittest7575 largeedittest7576 largeedittest7577 largeedittest7578 largeedittest7579 largeedittest758 largeedittest7580 largeedittest7581 largeedittest7582 largeedittest7583 largeedittest7584 largeedittest7585 largeedittest7586 largeedittest7587 largeedittest7588 largeedittest7589 largeedittest759 largeedittest7590 largeedittest7591 largeedittest7592 largeedittest7593 largeedittest7594 largeedittest7595 largeedittest7596 largeedittest7597 largeedittest7598 largeedittest7599 largeedittest76 largeedittest760 largeedittest7600 largeedittest7601 largeedittest7602 largeedittest7603 largeedittest7604 largeedittest7605 largeedittest7606 largeedittest7607 largeedittest7608 largeedittest7609 largeedittest761 largeedittest7610 largeedittest7611 largeedittest7612 largeedittest7613 largeedittest7614 largeedittest7615 largeedittest7616 largeedittest7617 largeedittest7618 largeedittest7619 largeedittest762 largeedittest7620 largeedittest7621 largeedittest7622 largeedittest7623 largeedittest7624 largeedittest7625 largeedittest7626 largeedittest7627 largeedittest7628 largeedittest7629 largeedittest763 largeedittest7630 largeedittest7631 largeedittest7632 largeedittest7633 largeedittest7634 largeedittest7635 largeedittest7636 largeedittest7637 largeedittest7638 largeedittest7639 largeedittest764 largeedittest7640 largeedittest7641 largeedittest7642 largeedittest7643 largeedittest7644 largeedittest7645 largeedittest7646 largeedittest7647 largeedittest7648 largeedittest7649 largeedittest765 largeedittest7650 largeedittest7651 largeedittest7652 largeedittest7653 largeedittest7654 largeedittest7655 largeedittest7656 largeedittest7657 largeedittest7658 largeedittest7659 largeedittest766 largeedittest7660 largeedittest7661 largeedittest7662 largeedittest7663 largeedittest7664 largeedittest7665 largeedittest7666 largeedittest7667 largeedittest7668 largeedittest7669 largeedittest767 largeedittest7670 largeedittest7671 largeedittest7672 largeedittest7673 largeedittest7674 largeedittest7675 largeedittest7676 largeedittest7677 largeedittest7678 largeedittest7679 largeedittest768 largeedittest7680 largeedittest7681 largeedittest7682 largeedittest7683 largeedittest7684 largeedittest7685 largeedittest7686 largeedittest7687 largeedittest7688 largeedittest7689 largeedittest769 largeedittest7690 largeedittest7691 largeedittest7692 largeedittest7693 largeedittest7694 largeedittest7695 largeedittest7696 largeedittest7697 largeedittest7698 largeedittest7699 largeedittest77 largeedittest770 largeedittest7700 largeedittest7701 largeedittest7702 largeedittest7703 largeedittest7704 largeedittest7705 largeedittest7706 largeedittest7707 largeedittest7708 largeedittest7709 largeedittest771 largeedittest7710 largeedittest7711 largeedittest7712 largeedittest7713 largeedittest7714 largeedittest7715 largeedittest7716 largeedittest7717 largeedittest7718 largeedittest7719 largeedittest772 largeedittest7720 largeedittest7721 largeedittest7722 largeedittest7723 largeedittest7724 largeedittest7725 largeedittest7726 largeedittest7727 largeedittest7728 largeedittest7729 largeedittest773 largeedittest7730 largeedittest7731 largeedittest7732 largeedittest7733 largeedittest7734 largeedittest7735 largeedittest7736 largeedittest7737 largeedittest7738 largeedittest7739 largeedittest774 largeedittest7740 largeedittest7741 largeedittest7742 largeedittest7743 largeedittest7744 largeedittest7745 largeedittest7746 largeedittest7747 largeedittest7748 largeedittest7749 largeedittest775 largeedittest7750 largeedittest7751 largeedittest7752 largeedittest7753 largeedittest7754 largeedittest7755 largeedittest7756 largeedittest7757 largeedittest7758 largeedittest7759 largeedittest776 largeedittest7760 largeedittest7761 largeedittest7762 largeedittest7763 largeedittest7764 largeedittest7765 largeedittest7766 largeedittest7767 largeedittest7768 largeedittest7769 largeedittest777 largeedittest7770 largeedittest7771 largeedittest7772 largeedittest7773 largeedittest7774 largeedittest7775 largeedittest7776 largeedittest7777 largeedittest7778 largeedittest7779 largeedittest778 largeedittest7780 largeedittest7781 largeedittest7782 largeedittest7783 largeedittest7784 largeedittest7785 largeedittest7786 largeedittest7787 largeedittest7788 largeedittest7789 largeedittest779 largeedittest7790 largeedittest7791 largeedittest7792 largeedittest7793 largeedittest7794 largeedittest7795 largeedittest7796 largeedittest7797 largeedittest7798 largeedittest7799 largeedittest78 largeedittest780 largeedittest7800 largeedittest7801 largeedittest7802 largeedittest7803 largeedittest7804 largeedittest7805 largeedittest7806 largeedittest7807 largeedittest7808 largeedittest7809 largeedittest781 largeedittest7810 largeedittest7811 largeedittest7812 largeedittest7813 largeedittest7814 largeedittest7815 largeedittest7816 largeedittest7817 largeedittest7818 largeedittest7819 largeedittest782 largeedittest7820 largeedittest7821 largeedittest7822 largeedittest7823 largeedittest7824 largeedittest7825 largeedittest7826 largeedittest7827 largeedittest7828 largeedittest7829 largeedittest783 largeedittest7830 largeedittest7831 largeedittest7832 largeedittest7833 largeedittest7834 largeedittest7835 largeedittest7836 largeedittest7837 largeedittest7838 largeedittest7839 largeedittest784 largeedittest7840 largeedittest7841 largeedittest7842 largeedittest7843 largeedittest7844 largeedittest7845 largeedittest7846 largeedittest7847 largeedittest7848 largeedittest7849 largeedittest785 largeedittest7850 largeedittest7851 largeedittest7852 largeedittest7853 largeedittest7854 largeedittest7855 largeedittest7856 largeedittest7857 largeedittest7858 largeedittest7859 largeedittest786 largeedittest7860 largeedittest7861 largeedittest7862 largeedittest7863 largeedittest7864 largeedittest7865 largeedittest7866 largeedittest7867 largeedittest7868 largeedittest7869 largeedittest787 largeedittest7870 largeedittest7871 largeedittest7872 largeedittest7873 largeedittest7874 largeedittest7875 largeedittest7876 largeedittest7877 largeedittest7878 largeedittest7879 largeedittest788 largeedittest7880 largeedittest7881 largeedittest7882 largeedittest7883 largeedittest7884 largeedittest7885 largeedittest7886 largeedittest7887 largeedittest7888 largeedittest7889 largeedittest789 largeedittest7890 largeedittest7891 largeedittest7892 largeedittest7893 largeedittest7894 largeedittest7895 largeedittest7896 largeedittest7897 largeedittest7898 largeedittest7899 largeedittest79 largeedittest790 largeedittest7900 largeedittest7901 largeedittest7902 largeedittest7903 largeedittest7904 largeedittest7905 largeedittest7906 largeedittest7907 largeedittest7908 largeedittest7909 largeedittest791 largeedittest7910 largeedittest7911 largeedittest7912 largeedittest7913 largeedittest7914 largeedittest7915 largeedittest7916 largeedittest7917 largeedittest7918 largeedittest7919 largeedittest792 largeedittest7920 largeedittest7921 largeedittest7922 largeedittest7923 largeedittest7924 largeedittest7925 largeedittest7926 largeedittest7927 largeedittest7928 largeedittest7929 largeedittest793 largeedittest7930 largeedittest7931 largeedittest7932 largeedittest7933 largeedittest7934 largeedittest7935 largeedittest7936 largeedittest7937 largeedittest7938 largeedittest7939 largeedittest794 largeedittest7940 largeedittest7941 largeedittest7942 largeedittest7943 largeedittest7944 largeedittest7945 largeedittest7946 largeedittest7947 largeedittest7948 largeedittest7949 largeedittest795 largeedittest7950 largeedittest7951 largeedittest7952 largeedittest7953 largeedittest7954 largeedittest7955 largeedittest7956 largeedittest7957 largeedittest7958 largeedittest7959 largeedittest796 largeedittest7960 largeedittest7961 largeedittest7962 largeedittest7963 largeedittest7964 largeedittest7965 largeedittest7966 largeedittest7967 largeedittest7968 largeedittest7969 largeedittest797 largeedittest7970 largeedittest7971 largeedittest7972 largeedittest7973 largeedittest7974 largeedittest7975 largeedittest7976 largeedittest7977 largeedittest7978 largeedittest7979 largeedittest798 largeedittest7980 largeedittest7981 largeedittest7982 largeedittest7983 largeedittest7984 largeedittest7985 largeedittest7986 largeedittest7987 largeedittest7988 largeedittest7989 largeedittest799 largeedittest7990 largeedittest7991 largeedittest7992 largeedittest7993 largeedittest7994 largeedittest7995 largeedittest7996 largeedittest7997 largeedittest7998 largeedittest7999 largeedittest8 largeedittest80 largeedittest800 largeedittest8000 largeedittest8001 largeedittest8002 largeedittest8003 largeedittest8004 largeedittest8005 largeedittest8006 largeedittest8007 largeedittest8008 largeedittest8009 largeedittest801 largeedittest8010 largeedittest8011 largeedittest8012 largeedittest8013 largeedittest8014 largeedittest8015 largeedittest8016 largeedittest8017 largeedittest8018 largeedittest8019 largeedittest802 largeedittest8020 largeedittest8021 largeedittest8022 largeedittest8023 largeedittest8024 largeedittest8025 largeedittest8026 largeedittest8027 largeedittest8028 largeedittest8029 largeedittest803 largeedittest8030 largeedittest8031 largeedittest8032 largeedittest8033 largeedittest8034 largeedittest8035 largeedittest8036 largeedittest8037 largeedittest8038 largeedittest8039 largeedittest804 largeedittest8040 largeedittest8041 largeedittest8042 largeedittest8043 largeedittest8044 largeedittest8045 largeedittest8046 largeedittest8047 largeedittest8048 largeedittest8049 largeedittest805 largeedittest8050 largeedittest8051 largeedittest8052 largeedittest8053 largeedittest8054 largeedittest8055 largeedittest8056 largeedittest8057 largeedittest8058 largeedittest8059 largeedittest806 largeedittest8060 largeedittest8061 largeedittest8062 largeedittest8063 largeedittest8064 largeedittest8065 largeedittest8066 largeedittest8067 largeedittest8068 largeedittest8069 largeedittest807 largeedittest8070 largeedittest8071 largeedittest8072 largeedittest8073 largeedittest8074 largeedittest8075 largeedittest8076 largeedittest8077 largeedittest8078 largeedittest8079 largeedittest808 largeedittest8080 largeedittest8081 largeedittest8082 largeedittest8083 largeedittest8084 largeedittest8085 largeedittest8086 largeedittest8087 largeedittest8088 largeedittest8089 largeedittest809 largeedittest8090 largeedittest8091 largeedittest8092 largeedittest8093 largeedittest8094 largeedittest8095 largeedittest8096 largeedittest8097 largeedittest8098 largeedittest8099 largeedittest81 largeedittest810 largeedittest8100 largeedittest8101 largeedittest8102 largeedittest8103 largeedittest8104 largeedittest8105 largeedittest8106 largeedittest8107 largeedittest8108 largeedittest8109 largeedittest811 largeedittest8110 largeedittest8111 largeedittest8112 largeedittest8113 largeedittest8114 largeedittest8115 largeedittest8116 largeedittest8117 largeedittest8118 largeedittest8119 largeedittest812 largeedittest8120 largeedittest8121 largeedittest8122 largeedittest8123 largeedittest8124 largeedittest8125 largeedittest8126 largeedittest8127 largeedittest8128 largeedittest8129 largeedittest813 largeedittest8130 largeedittest8131 largeedittest8132 largeedittest8133 largeedittest8134 largeedittest8135 largeedittest8136 largeedittest8137 largeedittest8138 largeedittest8139 largeedittest814 largeedittest8140 largeedittest8141 largeedittest8142 largeedittest8143 largeedittest8144 largeedittest8145 largeedittest8146 largeedittest8147 largeedittest8148 largeedittest8149 largeedittest815 largeedittest8150 largeedittest8151 largeedittest8152 largeedittest8153 largeedittest8154 largeedittest8155 largeedittest8156 largeedittest8157 largeedittest8158 largeedittest8159 largeedittest816 largeedittest8160 largeedittest8161 largeedittest8162 largeedittest8163 largeedittest8164 largeedittest8165 largeedittest8166 largeedittest8167 largeedittest8168 largeedittest8169 largeedittest817 largeedittest8170 largeedittest8171 largeedittest8172 largeedittest8173 largeedittest8174 largeedittest8175 largeedittest8176 largeedittest8177 largeedittest8178 largeedittest8179 largeedittest818 largeedittest8180 largeedittest8181 largeedittest8182 largeedittest8183 largeedittest8184 largeedittest8185 largeedittest8186 largeedittest8187 largeedittest8188 largeedittest8189 largeedittest819 largeedittest8190 largeedittest8191 largeedittest8192 largeedittest8193 largeedittest8194 largeedittest8195 largeedittest8196 largeedittest8197 largeedittest8198 largeedittest8199 largeedittest82 largeedittest820 largeedittest8200 largeedittest8201 largeedittest8202 largeedittest8203 largeedittest8204 largeedittest8205 largeedittest8206 largeedittest8207 largeedittest8208 largeedittest8209 largeedittest821 largeedittest8210 largeedittest8211 largeedittest8212 largeedittest8213 largeedittest8214 largeedittest8215 largeedittest8216 largeedittest8217 largeedittest8218 largeedittest8219 largeedittest822 largeedittest8220 largeedittest8221 largeedittest8222 largeedittest8223 largeedittest8224 largeedittest8225 largeedittest8226 largeedittest8227 largeedittest8228 largeedittest8229 largeedittest823 largeedittest8230 largeedittest8231 largeedittest8232 largeedittest8233 largeedittest8234 largeedittest8235 largeedittest8236 largeedittest8237 largeedittest8238 largeedittest8239 largeedittest824 largeedittest8240 largeedittest8241 largeedittest8242 largeedittest8243 largeedittest8244 largeedittest8245 largeedittest8246 largeedittest8247 largeedittest8248 largeedittest8249 largeedittest825 largeedittest8250 largeedittest8251 largeedittest8252 largeedittest8253 largeedittest8254 largeedittest8255 largeedittest8256 largeedittest8257 largeedittest8258 largeedittest8259 largeedittest826 largeedittest8260 largeedittest8261 largeedittest8262 largeedittest8263 largeedittest8264 largeedittest8265 largeedittest8266 largeedittest8267 largeedittest8268 largeedittest8269 largeedittest827 largeedittest8270 largeedittest8271 largeedittest8272 largeedittest8273 largeedittest8274 largeedittest8275 largeedittest8276 largeedittest8277 largeedittest8278 largeedittest8279 largeedittest828 largeedittest8280 largeedittest8281 largeedittest8282 largeedittest8283 largeedittest8284 largeedittest8285 largeedittest8286 largeedittest8287 largeedittest8288 largeedittest8289 largeedittest829 largeedittest8290 largeedittest8291 largeedittest8292 largeedittest8293 largeedittest8294 largeedittest8295 largeedittest8296 largeedittest8297 largeedittest8298 largeedittest8299 largeedittest83 largeedittest830 largeedittest8300 largeedittest8301 largeedittest8302 largeedittest8303 largeedittest8304 largeedittest8305 largeedittest8306 largeedittest8307 largeedittest8308 largeedittest8309 largeedittest831 largeedittest8310 largeedittest8311 largeedittest8312 largeedittest8313 largeedittest8314 largeedittest8315 largeedittest8316 largeedittest8317 largeedittest8318 largeedittest8319 largeedittest832 largeedittest8320 largeedittest8321 largeedittest8322 largeedittest8323 largeedittest8324 largeedittest8325 largeedittest8326 largeedittest8327 largeedittest8328 largeedittest8329 largeedittest833 largeedittest8330 largeedittest8331 largeedittest8332 largeedittest8333 largeedittest8334 largeedittest8335 largeedittest8336 largeedittest8337 largeedittest8338 largeedittest8339 largeedittest834 largeedittest8340 largeedittest8341 largeedittest8342 largeedittest8343 largeedittest8344 largeedittest8345 largeedittest8346 largeedittest8347 largeedittest8348 largeedittest8349 largeedittest835 largeedittest8350 largeedittest8351 largeedittest8352 largeedittest8353 largeedittest8354 largeedittest8355 largeedittest8356 largeedittest8357 largeedittest8358 largeedittest8359 largeedittest836 largeedittest8360 largeedittest8361 largeedittest8362 largeedittest8363 largeedittest8364 largeedittest8365 largeedittest8366 largeedittest8367 largeedittest8368 largeedittest8369 largeedittest837 largeedittest8370 largeedittest8371 largeedittest8372 largeedittest8373 largeedittest8374 largeedittest8375 largeedittest8376 largeedittest8377 largeedittest8378 largeedittest8379 largeedittest838 largeedittest8380 largeedittest8381 largeedittest8382 largeedittest8383 largeedittest8384 largeedittest8385 largeedittest8386 largeedittest8387 largeedittest8388 largeedittest8389 largeedittest839 largeedittest8390 largeedittest8391 largeedittest8392 largeedittest8393 largeedittest8394 largeedittest8395 largeedittest8396 largeedittest8397 largeedittest8398 largeedittest8399 largeedittest84 largeedittest840 largeedittest8400 largeedittest8401 largeedittest8402 largeedittest8403 largeedittest8404 largeedittest8405 largeedittest8406 largeedittest8407 largeedittest8408 largeedittest8409 largeedittest841 largeedittest8410 largeedittest8411 largeedittest8412 largeedittest8413 largeedittest8414 largeedittest8415 largeedittest8416 largeedittest8417 largeedittest8418 largeedittest8419 largeedittest842 largeedittest8420 largeedittest8421 largeedittest8422 largeedittest8423 largeedittest8424 largeedittest8425 largeedittest8426 largeedittest8427 largeedittest8428 largeedittest8429 largeedittest843 largeedittest8430 largeedittest8431 largeedittest8432 largeedittest8433 largeedittest8434 largeedittest8435 largeedittest8436 largeedittest8437 largeedittest8438 largeedittest8439 largeedittest844 largeedittest8440 largeedittest8441 largeedittest8442 largeedittest8443 largeedittest8444 largeedittest8445 largeedittest8446 largeedittest8447 largeedittest8448 largeedittest8449 largeedittest845 largeedittest8450 largeedittest8451 largeedittest8452 largeedittest8453 largeedittest8454 largeedittest8455 largeedittest8456 largeedittest8457 largeedittest8458 largeedittest8459 largeedittest846 largeedittest8460 largeedittest8461 largeedittest8462 largeedittest8463 largeedittest8464 largeedittest8465 largeedittest8466 largeedittest8467 largeedittest8468 largeedittest8469 largeedittest847 largeedittest8470 largeedittest8471 largeedittest8472 largeedittest8473 largeedittest8474 largeedittest8475 largeedittest8476 largeedittest8477 largeedittest8478 largeedittest8479 largeedittest848 largeedittest8480 largeedittest8481 largeedittest8482 largeedittest8483 largeedittest8484 largeedittest8485 largeedittest8486 largeedittest8487 largeedittest8488 largeedittest8489 largeedittest849 largeedittest8490 largeedittest8491 largeedittest8492 largeedittest8493 largeedittest8494 largeedittest8495 largeedittest8496 largeedittest8497 largeedittest8498 largeedittest8499 largeedittest85 largeedittest850 largeedittest8500 largeedittest8501 largeedittest8502 largeedittest8503 largeedittest8504 largeedittest8505 largeedittest8506 largeedittest8507 largeedittest8508 largeedittest8509 largeedittest851 largeedittest8510 largeedittest8511 largeedittest8512 largeedittest8513 largeedittest8514 largeedittest8515 largeedittest8516 largeedittest8517 largeedittest8518 largeedittest8519 largeedittest852 largeedittest8520 largeedittest8521 largeedittest8522 largeedittest8523 largeedittest8524 largeedittest8525 largeedittest8526 largeedittest8527 largeedittest8528 largeedittest8529 largeedittest853 largeedittest8530 largeedittest8531 largeedittest8532 largeedittest8533 largeedittest8534 largeedittest8535 largeedittest8536 largeedittest8537 largeedittest8538 largeedittest8539 largeedittest854 largeedittest8540 largeedittest8541 largeedittest8542 largeedittest8543 largeedittest8544 largeedittest8545 largeedittest8546 largeedittest8547 largeedittest8548 largeedittest8549 largeedittest855 largeedittest8550 largeedittest8551 largeedittest8552 largeedittest8553 largeedittest8554 largeedittest8555 largeedittest8556 largeedittest8557 largeedittest8558 largeedittest8559 largeedittest856 largeedittest8560 largeedittest8561 largeedittest8562 largeedittest8563 largeedittest8564 largeedittest8565 largeedittest8566 largeedittest8567 largeedittest8568 largeedittest8569 largeedittest857 largeedittest8570 largeedittest8571 largeedittest8572 largeedittest8573 largeedittest8574 largeedittest8575 largeedittest8576 largeedittest8577 largeedittest8578 largeedittest8579 largeedittest858 largeedittest8580 largeedittest8581 largeedittest8582 largeedittest8583 largeedittest8584 largeedittest8585 largeedittest8586 largeedittest8587 largeedittest8588 largeedittest8589 largeedittest859 largeedittest8590 largeedittest8591 largeedittest8592 largeedittest8593 largeedittest8594 largeedittest8595 largeedittest8596 largeedittest8597 largeedittest8598 largeedittest8599 largeedittest86 largeedittest860 largeedittest8600 largeedittest8601 largeedittest8602 largeedittest8603 largeedittest8604 largeedittest8605 largeedittest8606 largeedittest8607 largeedittest8608 largeedittest8609 largeedittest861 largeedittest8610 largeedittest8611 largeedittest8612 largeedittest8613 largeedittest8614 largeedittest8615 largeedittest8616 largeedittest8617 largeedittest8618 largeedittest8619 largeedittest862 largeedittest8620 largeedittest8621 largeedittest8622 largeedittest8623 largeedittest8624 largeedittest8625 largeedittest8626 largeedittest8627 largeedittest8628 largeedittest8629 largeedittest863 largeedittest8630 largeedittest8631 largeedittest8632 largeedittest8633 largeedittest8634 largeedittest8635 largeedittest8636 largeedittest8637 largeedittest8638 largeedittest8639 largeedittest864 largeedittest8640 largeedittest8641 largeedittest8642 largeedittest8643 largeedittest8644 largeedittest8645 largeedittest8646 largeedittest8647 largeedittest8648 largeedittest8649 largeedittest865 largeedittest8650 largeedittest8651 largeedittest8652 largeedittest8653 largeedittest8654 largeedittest8655 largeedittest8656 largeedittest8657 largeedittest8658 largeedittest8659 largeedittest866 largeedittest8660 largeedittest8661 largeedittest8662 largeedittest8663 largeedittest8664 largeedittest8665 largeedittest8666 largeedittest8667 largeedittest8668 largeedittest8669 largeedittest867 largeedittest8670 largeedittest8671 largeedittest8672 largeedittest8673 largeedittest8674 largeedittest8675 largeedittest8676 largeedittest8677 largeedittest8678 largeedittest8679 largeedittest868 largeedittest8680 largeedittest8681 largeedittest8682 largeedittest8683 largeedittest8684 largeedittest8685 largeedittest8686 largeedittest8687 largeedittest8688 largeedittest8689 largeedittest869 largeedittest8690 largeedittest8691 largeedittest8692 largeedittest8693 largeedittest8694 largeedittest8695 largeedittest8696 largeedittest8697 largeedittest8698 largeedittest8699 largeedittest87 largeedittest870 largeedittest8700 largeedittest8701 largeedittest8702 largeedittest8703 largeedittest8704 largeedittest8705 largeedittest8706 largeedittest8707 largeedittest8708 largeedittest8709 largeedittest871 largeedittest8710 largeedittest8711 largeedittest8712 largeedittest8713 largeedittest8714 largeedittest8715 largeedittest8716 largeedittest8717 largeedittest8718 largeedittest8719 largeedittest872 largeedittest8720 largeedittest8721 largeedittest8722 largeedittest8723 largeedittest8724 largeedittest8725 largeedittest8726 largeedittest8727 largeedittest8728 largeedittest8729 largeedittest873 largeedittest8730 largeedittest8731 largeedittest8732 largeedittest8733 largeedittest8734 largeedittest8735 largeedittest8736 largeedittest8737 largeedittest8738 largeedittest8739 largeedittest874 largeedittest8740 largeedittest8741 largeedittest8742 largeedittest8743 largeedittest8744 largeedittest8745 largeedittest8746 largeedittest8747 largeedittest8748 largeedittest8749 largeedittest875 largeedittest8750 largeedittest8751 largeedittest8752 largeedittest8753 largeedittest8754 largeedittest8755 largeedittest8756 largeedittest8757 largeedittest8758 largeedittest8759 largeedittest876 largeedittest8760 largeedittest8761 largeedittest8762 largeedittest8763 largeedittest8764 largeedittest8765 largeedittest8766 largeedittest8767 largeedittest8768 largeedittest8769 largeedittest877 largeedittest8770 largeedittest8771 largeedittest8772 largeedittest8773 largeedittest8774 largeedittest8775 largeedittest8776 largeedittest8777 largeedittest8778 largeedittest8779 largeedittest878 largeedittest8780 largeedittest8781 largeedittest8782 largeedittest8783 largeedittest8784 largeedittest8785 largeedittest8786 largeedittest8787 largeedittest8788 largeedittest8789 largeedittest879 largeedittest8790 largeedittest8791 largeedittest8792 largeedittest8793 largeedittest8794 largeedittest8795 largeedittest8796 largeedittest8797 largeedittest8798 largeedittest8799 largeedittest88 largeedittest880 largeedittest8800 largeedittest8801 largeedittest8802 largeedittest8803 largeedittest8804 largeedittest8805 largeedittest8806 largeedittest8807 largeedittest8808 largeedittest8809 largeedittest881 largeedittest8810 largeedittest8811 largeedittest8812 largeedittest8813 largeedittest8814 largeedittest8815 largeedittest8816 largeedittest8817 largeedittest8818 largeedittest8819 largeedittest882 largeedittest8820 largeedittest8821 largeedittest8822 largeedittest8823 largeedittest8824 largeedittest8825 largeedittest8826 largeedittest8827 largeedittest8828 largeedittest8829 largeedittest883 largeedittest8830 largeedittest8831 largeedittest8832 largeedittest8833 largeedittest8834 largeedittest8835 largeedittest8836 largeedittest8837 largeedittest8838 largeedittest8839 largeedittest884 largeedittest8840 largeedittest8841 largeedittest8842 largeedittest8843 largeedittest8844 largeedittest8845 largeedittest8846 largeedittest8847 largeedittest8848 largeedittest8849 largeedittest885 largeedittest8850 largeedittest8851 largeedittest8852 largeedittest8853 largeedittest8854 largeedittest8855 largeedittest8856 largeedittest8857 largeedittest8858 largeedittest8859 largeedittest886 largeedittest8860 largeedittest8861 largeedittest8862 largeedittest8863 largeedittest8864 largeedittest8865 largeedittest8866 largeedittest8867 largeedittest8868 largeedittest8869 largeedittest887 largeedittest8870 largeedittest8871 largeedittest8872 largeedittest8873 largeedittest8874 largeedittest8875 largeedittest8876 largeedittest8877 largeedittest8878 largeedittest8879 largeedittest888 largeedittest8880 largeedittest8881 largeedittest8882 largeedittest8883 largeedittest8884 largeedittest8885 largeedittest8886 largeedittest8887 largeedittest8888 largeedittest8889 largeedittest889 largeedittest8890 largeedittest8891 largeedittest8892 largeedittest8893 largeedittest8894 largeedittest8895 largeedittest8896 largeedittest8897 largeedittest8898 largeedittest8899 largeedittest89 largeedittest890 largeedittest8900 largeedittest8901 largeedittest8902 largeedittest8903 largeedittest8904 largeedittest8905 largeedittest8906 largeedittest8907 largeedittest8908 largeedittest8909 largeedittest891 largeedittest8910 largeedittest8911 largeedittest8912 largeedittest8913 largeedittest8914 largeedittest8915 largeedittest8916 largeedittest8917 largeedittest8918 largeedittest8919 largeedittest892 largeedittest8920 largeedittest8921 largeedittest8922 largeedittest8923 largeedittest8924 largeedittest8925 largeedittest8926 largeedittest8927 largeedittest8928 largeedittest8929 largeedittest893 largeedittest8930 largeedittest8931 largeedittest8932 largeedittest8933 largeedittest8934 largeedittest8935 largeedittest8936 largeedittest8937 largeedittest8938 largeedittest8939 largeedittest894 largeedittest8940 largeedittest8941 largeedittest8942 largeedittest8943 largeedittest8944 largeedittest8945 largeedittest8946 largeedittest8947 largeedittest8948 largeedittest8949 largeedittest895 largeedittest8950 largeedittest8951 largeedittest8952 largeedittest8953 largeedittest8954 largeedittest8955 largeedittest8956 largeedittest8957 largeedittest8958 largeedittest8959 largeedittest896 largeedittest8960 largeedittest8961 largeedittest8962 largeedittest8963 largeedittest8964 largeedittest8965 largeedittest8966 largeedittest8967 largeedittest8968 largeedittest8969 largeedittest897 largeedittest8970 largeedittest8971 largeedittest8972 largeedittest8973 largeedittest8974 largeedittest8975 largeedittest8976 largeedittest8977 largeedittest8978 largeedittest8979 largeedittest898 largeedittest8980 largeedittest8981 largeedittest8982 largeedittest8983 largeedittest8984 largeedittest8985 largeedittest8986 largeedittest8987 largeedittest8988 largeedittest8989 largeedittest899 largeedittest8990 largeedittest8991 largeedittest8992 largeedittest8993 largeedittest8994 largeedittest8995 largeedittest8996 largeedittest8997 largeedittest8998 largeedittest8999 largeedittest9 largeedittest90 largeedittest900 largeedittest9000 largeedittest9001 largeedittest9002 largeedittest9003 largeedittest9004 largeedittest9005 largeedittest9006 largeedittest9007 largeedittest9008 largeedittest9009 largeedittest901 largeedittest9010 largeedittest9011 largeedittest9012 largeedittest9013 largeedittest9014 largeedittest9015 largeedittest9016 largeedittest9017 largeedittest9018 largeedittest9019 largeedittest902 largeedittest9020 largeedittest9021 largeedittest9022 largeedittest9023 largeedittest9024 largeedittest9025 largeedittest9026 largeedittest9027 largeedittest9028 largeedittest9029 largeedittest903 largeedittest9030 largeedittest9031 largeedittest9032 largeedittest9033 largeedittest9034 largeedittest9035 largeedittest9036 largeedittest9037 largeedittest9038 largeedittest9039 largeedittest904 largeedittest9040 largeedittest9041 largeedittest9042 largeedittest9043 largeedittest9044 largeedittest9045 largeedittest9046 largeedittest9047 largeedittest9048 largeedittest9049 largeedittest905 largeedittest9050 largeedittest9051 largeedittest9052 largeedittest9053 largeedittest9054 largeedittest9055 largeedittest9056 largeedittest9057 largeedittest9058 largeedittest9059 largeedittest906 largeedittest9060 largeedittest9061 largeedittest9062 largeedittest9063 largeedittest9064 largeedittest9065 largeedittest9066 largeedittest9067 largeedittest9068 largeedittest9069 largeedittest907 largeedittest9070 largeedittest9071 largeedittest9072 largeedittest9073 largeedittest9074 largeedittest9075 largeedittest9076 largeedittest9077 largeedittest9078 largeedittest9079 largeedittest908 largeedittest9080 largeedittest9081 largeedittest9082 largeedittest9083 largeedittest9084 largeedittest9085 largeedittest9086 largeedittest9087 largeedittest9088 largeedittest9089 largeedittest909 largeedittest9090 largeedittest9091 largeedittest9092 largeedittest9093 largeedittest9094 largeedittest9095 largeedittest9096 largeedittest9097 largeedittest9098 largeedittest9099 largeedittest91 largeedittest910 largeedittest9100 largeedittest9101 largeedittest9102 largeedittest9103 largeedittest9104 largeedittest9105 largeedittest9106 largeedittest9107 largeedittest9108 largeedittest9109 largeedittest911 largeedittest9110 largeedittest9111 largeedittest9112 largeedittest9113 largeedittest9114 largeedittest9115 largeedittest9116 largeedittest9117 largeedittest9118 largeedittest9119 largeedittest912 largeedittest9120 largeedittest9121 largeedittest9122 largeedittest9123 largeedittest9124 largeedittest9125 largeedittest9126 largeedittest9127 largeedittest9128 largeedittest9129 largeedittest913 largeedittest9130 largeedittest9131 largeedittest9132 largeedittest9133 largeedittest9134 largeedittest9135 largeedittest9136 largeedittest9137 largeedittest9138 largeedittest9139 largeedittest914 largeedittest9140 largeedittest9141 largeedittest9142 largeedittest9143 largeedittest9144 largeedittest9145 largeedittest9146 largeedittest9147 largeedittest9148 largeedittest9149 largeedittest915 largeedittest9150 largeedittest9151 largeedittest9152 largeedittest9153 largeedittest9154 largeedittest9155 largeedittest9156 largeedittest9157 largeedittest9158 largeedittest9159 largeedittest916 largeedittest9160 largeedittest9161 largeedittest9162 largeedittest9163 largeedittest9164 largeedittest9165 largeedittest9166 largeedittest9167 largeedittest9168 largeedittest9169 largeedittest917 largeedittest9170 largeedittest9171 largeedittest9172 largeedittest9173 largeedittest9174 largeedittest9175 largeedittest9176 largeedittest9177 largeedittest9178 largeedittest9179 largeedittest918 largeedittest9180 largeedittest9181 largeedittest9182 largeedittest9183 largeedittest9184 largeedittest9185 largeedittest9186 largeedittest9187 largeedittest9188 largeedittest9189 largeedittest919 largeedittest9190 largeedittest9191 largeedittest9192 largeedittest9193 largeedittest9194 largeedittest9195 largeedittest9196 largeedittest9197 largeedittest9198 largeedittest9199 largeedittest92 largeedittest920 largeedittest9200 largeedittest9201 largeedittest9202 largeedittest9203 largeedittest9204 largeedittest9205 largeedittest9206 largeedittest9207 largeedittest9208 largeedittest9209 largeedittest921 largeedittest9210 largeedittest9211 largeedittest9212 largeedittest9213 largeedittest9214 largeedittest9215 largeedittest9216 largeedittest9217 largeedittest9218 largeedittest9219 largeedittest922 largeedittest9220 largeedittest9221 largeedittest9222 largeedittest9223 largeedittest9224 largeedittest9225 largeedittest9226 largeedittest9227 largeedittest9228 largeedittest9229 largeedittest923 largeedittest9230 largeedittest9231 largeedittest9232 largeedittest9233 largeedittest9234 largeedittest9235 largeedittest9236 largeedittest9237 largeedittest9238 largeedittest9239 largeedittest924 largeedittest9240 largeedittest9241 largeedittest9242 largeedittest9243 largeedittest9244 largeedittest9245 largeedittest9246 largeedittest9247 largeedittest9248 largeedittest9249 largeedittest925 largeedittest9250 largeedittest9251 largeedittest9252 largeedittest9253 largeedittest9254 largeedittest9255 largeedittest9256 largeedittest9257 largeedittest9258 largeedittest9259 largeedittest926 largeedittest9260 largeedittest9261 largeedittest9262 largeedittest9263 largeedittest9264 largeedittest9265 largeedittest9266 largeedittest9267 largeedittest9268 largeedittest9269 largeedittest927 largeedittest9270 largeedittest9271 largeedittest9272 largeedittest9273 largeedittest9274 largeedittest9275 largeedittest9276 largeedittest9277 largeedittest9278 largeedittest9279 largeedittest928 largeedittest9280 largeedittest9281 largeedittest9282 largeedittest9283 largeedittest9284 largeedittest9285 largeedittest9286 largeedittest9287 largeedittest9288 largeedittest9289 largeedittest929 largeedittest9290 largeedittest9291 largeedittest9292 largeedittest9293 largeedittest9294 largeedittest9295 largeedittest9296 largeedittest9297 largeedittest9298 largeedittest9299 largeedittest93 largeedittest930 largeedittest9300 largeedittest9301 largeedittest9302 largeedittest9303 largeedittest9304 largeedittest9305 largeedittest9306 largeedittest9307 largeedittest9308 largeedittest9309 largeedittest931 largeedittest9310 largeedittest9311 largeedittest9312 largeedittest9313 largeedittest9314 largeedittest9315 largeedittest9316 largeedittest9317 largeedittest9318 largeedittest9319 largeedittest932 largeedittest9320 largeedittest9321 largeedittest9322 largeedittest9323 largeedittest9324 largeedittest9325 largeedittest9326 largeedittest9327 largeedittest9328 largeedittest9329 largeedittest933 largeedittest9330 largeedittest9331 largeedittest9332 largeedittest9333 largeedittest9334 largeedittest9335 largeedittest9336 largeedittest9337 largeedittest9338 largeedittest9339 largeedittest934 largeedittest9340 largeedittest9341 largeedittest9342 largeedittest9343 largeedittest9344 largeedittest9345 largeedittest9346 largeedittest9347 largeedittest9348 largeedittest9349 largeedittest935 largeedittest9350 largeedittest9351 largeedittest9352 largeedittest9353 largeedittest9354 largeedittest9355 largeedittest9356 largeedittest9357 largeedittest9358 largeedittest9359 largeedittest936 largeedittest9360 largeedittest9361 largeedittest9362 largeedittest9363 largeedittest9364 largeedittest9365 largeedittest9366 largeedittest9367 largeedittest9368 largeedittest9369 largeedittest937 largeedittest9370 largeedittest9371 largeedittest9372 largeedittest9373 largeedittest9374 largeedittest9375 largeedittest9376 largeedittest9377 largeedittest9378 largeedittest9379 largeedittest938 largeedittest9380 largeedittest9381 largeedittest9382 largeedittest9383 largeedittest9384 largeedittest9385 largeedittest9386 largeedittest9387 largeedittest9388 largeedittest9389 largeedittest939 largeedittest9390 largeedittest9391 largeedittest9392 largeedittest9393 largeedittest9394 largeedittest9395 largeedittest9396 largeedittest9397 largeedittest9398 largeedittest9399 largeedittest94 largeedittest940 largeedittest9400 largeedittest9401 largeedittest9402 largeedittest9403 largeedittest9404 largeedittest9405 largeedittest9406 largeedittest9407 largeedittest9408 largeedittest9409 largeedittest941 largeedittest9410 largeedittest9411 largeedittest9412 largeedittest9413 largeedittest9414 largeedittest9415 largeedittest9416 largeedittest9417 largeedittest9418 largeedittest9419 largeedittest942 largeedittest9420 largeedittest9421 largeedittest9422 largeedittest9423 largeedittest9424 largeedittest9425 largeedittest9426 largeedittest9427 largeedittest9428 largeedittest9429 largeedittest943 largeedittest9430 largeedittest9431 largeedittest9432 largeedittest9433 largeedittest9434 largeedittest9435 largeedittest9436 largeedittest9437 largeedittest9438 largeedittest9439 largeedittest944 largeedittest9440 largeedittest9441 largeedittest9442 largeedittest9443 largeedittest9444 largeedittest9445 largeedittest9446 largeedittest9447 largeedittest9448 largeedittest9449 largeedittest945 largeedittest9450 largeedittest9451 largeedittest9452 largeedittest9453 largeedittest9454 largeedittest9455 largeedittest9456 largeedittest9457 largeedittest9458 largeedittest9459 largeedittest946 largeedittest9460 largeedittest9461 largeedittest9462 largeedittest9463 largeedittest9464 largeedittest9465 largeedittest9466 largeedittest9467 largeedittest9468 largeedittest9469 largeedittest947 largeedittest9470 largeedittest9471 largeedittest9472 largeedittest9473 largeedittest9474 largeedittest9475 largeedittest9476 largeedittest9477 largeedittest9478 largeedittest9479 largeedittest948 largeedittest9480 largeedittest9481 largeedittest9482 largeedittest9483 largeedittest9484 largeedittest9485 largeedittest9486 largeedittest9487 largeedittest9488 largeedittest9489 largeedittest949 largeedittest9490 largeedittest9491 largeedittest9492 largeedittest9493 largeedittest9494 largeedittest9495 largeedittest9496 largeedittest9497 largeedittest9498 largeedittest9499 largeedittest95 largeedittest950 largeedittest9500 largeedittest9501 largeedittest9502 largeedittest9503 largeedittest9504 largeedittest9505 largeedittest9506 largeedittest9507 largeedittest9508 largeedittest9509 largeedittest951 largeedittest9510 largeedittest9511 largeedittest9512 largeedittest9513 largeedittest9514 largeedittest9515 largeedittest9516 largeedittest9517 largeedittest9518 largeedittest9519 largeedittest952 largeedittest9520 largeedittest9521 largeedittest9522 largeedittest9523 largeedittest9524 largeedittest9525 largeedittest9526 largeedittest9527 largeedittest9528 largeedittest9529 largeedittest953 largeedittest9530 largeedittest9531 largeedittest9532 largeedittest9533 largeedittest9534 largeedittest9535 largeedittest9536 largeedittest9537 largeedittest9538 largeedittest9539 largeedittest954 largeedittest9540 largeedittest9541 largeedittest9542 largeedittest9543 largeedittest9544 largeedittest9545 largeedittest9546 largeedittest9547 largeedittest9548 largeedittest9549 largeedittest955 largeedittest9550 largeedittest9551 largeedittest9552 largeedittest9553 largeedittest9554 largeedittest9555 largeedittest9556 largeedittest9557 largeedittest9558 largeedittest9559 largeedittest956 largeedittest9560 largeedittest9561 largeedittest9562 largeedittest9563 largeedittest9564 largeedittest9565 largeedittest9566 largeedittest9567 largeedittest9568 largeedittest9569 largeedittest957 largeedittest9570 largeedittest9571 largeedittest9572 largeedittest9573 largeedittest9574 largeedittest9575 largeedittest9576 largeedittest9577 largeedittest9578 largeedittest9579 largeedittest958 largeedittest9580 largeedittest9581 largeedittest9582 largeedittest9583 largeedittest9584 largeedittest9585 largeedittest9586 largeedittest9587 largeedittest9588 largeedittest9589 largeedittest959 largeedittest9590 largeedittest9591 largeedittest9592 largeedittest9593 largeedittest9594 largeedittest9595 largeedittest9596 largeedittest9597 largeedittest9598 largeedittest9599 largeedittest96 largeedittest960 largeedittest9600 largeedittest9601 largeedittest9602 largeedittest9603 largeedittest9604 largeedittest9605 largeedittest9606 largeedittest9607 largeedittest9608 largeedittest9609 largeedittest961 largeedittest9610 largeedittest9611 largeedittest9612 largeedittest9613 largeedittest9614 largeedittest9615 largeedittest9616 largeedittest9617 largeedittest9618 largeedittest9619 largeedittest962 largeedittest9620 largeedittest9621 largeedittest9622 largeedittest9623 largeedittest9624 largeedittest9625 largeedittest9626 largeedittest9627 largeedittest9628 largeedittest9629 largeedittest963 largeedittest9630 largeedittest9631 largeedittest9632 largeedittest9633 largeedittest9634 largeedittest9635 largeedittest9636 largeedittest9637 largeedittest9638 largeedittest9639 largeedittest964 largeedittest9640 largeedittest9641 largeedittest9642 largeedittest9643 largeedittest9644 largeedittest9645 largeedittest9646 largeedittest9647 largeedittest9648 largeedittest9649 largeedittest965 largeedittest9650 largeedittest9651 largeedittest9652 largeedittest9653 largeedittest9654 largeedittest9655 largeedittest9656 largeedittest9657 largeedittest9658 largeedittest9659 largeedittest966 largeedittest9660 largeedittest9661 largeedittest9662 largeedittest9663 largeedittest9664 largeedittest9665 largeedittest9666 largeedittest9667 largeedittest9668 largeedittest9669 largeedittest967 largeedittest9670 largeedittest9671 largeedittest9672 largeedittest9673 largeedittest9674 largeedittest9675 largeedittest9676 largeedittest9677 largeedittest9678 largeedittest9679 largeedittest968 largeedittest9680 largeedittest9681 largeedittest9682 largeedittest9683 largeedittest9684 largeedittest9685 largeedittest9686 largeedittest9687 largeedittest9688 largeedittest9689 largeedittest969 largeedittest9690 largeedittest9691 largeedittest9692 largeedittest9693 largeedittest9694 largeedittest9695 largeedittest9696 largeedittest9697 largeedittest9698 largeedittest9699 largeedittest97 largeedittest970 largeedittest9700 largeedittest9701 largeedittest9702 largeedittest9703 largeedittest9704 largeedittest9705 largeedittest9706 largeedittest9707 largeedittest9708 largeedittest9709 largeedittest971 largeedittest9710 largeedittest9711 largeedittest9712 largeedittest9713 largeedittest9714 largeedittest9715 largeedittest9716 largeedittest9717 largeedittest9718 largeedittest9719 largeedittest972 largeedittest9720 largeedittest9721 largeedittest9722 largeedittest9723 largeedittest9724 largeedittest9725 largeedittest9726 largeedittest9727 largeedittest9728 largeedittest9729 largeedittest973 largeedittest9730 largeedittest9731 largeedittest9732 largeedittest9733 largeedittest9734 largeedittest9735 largeedittest9736 largeedittest9737 largeedittest9738 largeedittest9739 largeedittest974 largeedittest9740 largeedittest9741 largeedittest9742 largeedittest9743 largeedittest9744 largeedittest9745 largeedittest9746 largeedittest9747 largeedittest9748 largeedittest9749 largeedittest975 largeedittest9750 largeedittest9751 largeedittest9752 largeedittest9753 largeedittest9754 largeedittest9755 largeedittest9756 largeedittest9757 largeedittest9758 largeedittest9759 largeedittest976 largeedittest9760 largeedittest9761 largeedittest9762 largeedittest9763 largeedittest9764 largeedittest9765 largeedittest9766 largeedittest9767 largeedittest9768 largeedittest9769 largeedittest977 largeedittest9770 largeedittest9771 largeedittest9772 largeedittest9773 largeedittest9774 largeedittest9775 largeedittest9776 largeedittest9777 largeedittest9778 largeedittest9779 largeedittest978 largeedittest9780 largeedittest9781 largeedittest9782 largeedittest9783 largeedittest9784 largeedittest9785 largeedittest9786 largeedittest9787 largeedittest9788 largeedittest9789 largeedittest979 largeedittest9790 largeedittest9791 largeedittest9792 largeedittest9793 largeedittest9794 largeedittest9795 largeedittest9796 largeedittest9797 largeedittest9798 largeedittest9799 largeedittest98 largeedittest980 largeedittest9800 largeedittest9801 largeedittest9802 largeedittest9803 largeedittest9804 largeedittest9805 largeedittest9806 largeedittest9807 largeedittest9808 largeedittest9809 largeedittest981 largeedittest9810 largeedittest9811 largeedittest9812 largeedittest9813 largeedittest9814 largeedittest9815 largeedittest9816 largeedittest9817 largeedittest9818 largeedittest9819 largeedittest982 largeedittest9820 largeedittest9821 largeedittest9822 largeedittest9823 largeedittest9824 largeedittest9825 largeedittest9826 largeedittest9827 largeedittest9828 largeedittest9829 largeedittest983 largeedittest9830 largeedittest9831 largeedittest9832 largeedittest9833 largeedittest9834 largeedittest9835 largeedittest9836 largeedittest9837 largeedittest9838 largeedittest9839 largeedittest984 largeedittest9840 largeedittest9841 largeedittest9842 largeedittest9843 largeedittest9844 largeedittest9845 largeedittest9846 largeedittest9847 largeedittest9848 largeedittest9849 largeedittest985 largeedittest9850 largeedittest9851 largeedittest9852 largeedittest9853 largeedittest9854 largeedittest9855 largeedittest9856 largeedittest9857 largeedittest9858 largeedittest9859 largeedittest986 largeedittest9860 largeedittest9861 largeedittest9862 largeedittest9863 largeedittest9864 largeedittest9865 largeedittest9866 largeedittest9867 largeedittest9868 largeedittest9869 largeedittest987 largeedittest9870 largeedittest9871 largeedittest9872 largeedittest9873 largeedittest9874 largeedittest9875 largeedittest9876 largeedittest9877 largeedittest9878 largeedittest9879 largeedittest988 largeedittest9880 largeedittest9881 largeedittest9882 largeedittest9883 largeedittest9884 largeedittest9885 largeedittest9886 largeedittest9887 largeedittest9888 largeedittest9889 largeedittest989 largeedittest9890 largeedittest9891 largeedittest9892 largeedittest9893 largeedittest9894 largeedittest9895 largeedittest9896 largeedittest9897 largeedittest9898 largeedittest9899 largeedittest99 largeedittest990 largeedittest9900 largeedittest9901 largeedittest9902 largeedittest9903 largeedittest9904 largeedittest9905 largeedittest9906 largeedittest9907 largeedittest9908 largeedittest9909 largeedittest991 largeedittest9910 largeedittest9911 largeedittest9912 largeedittest9913 largeedittest9914 largeedittest9915 largeedittest9916 largeedittest9917 largeedittest9918 largeedittest9919 largeedittest992 largeedittest9920 largeedittest9921 largeedittest9922 largeedittest9923 largeedittest9924 largeedittest9925 largeedittest9926 largeedittest9927 largeedittest9928 largeedittest9929 largeedittest993 largeedittest9930 largeedittest9931 largeedittest9932 largeedittest9933 largeedittest9934 largeedittest9935 largeedittest9936 largeedittest9937 largeedittest9938 largeedittest9939 largeedittest994 largeedittest9940 largeedittest9941 largeedittest9942 largeedittest9943 largeedittest9944 largeedittest9945 largeedittest9946 largeedittest9947 largeedittest9948 largeedittest9949 largeedittest995 largeedittest9950 largeedittest9951 largeedittest9952 largeedittest9953 largeedittest9954 largeedittest9955 largeedittest9956 largeedittest9957 largeedittest9958 largeedittest9959 largeedittest996 largeedittest9960 largeedittest9961 largeedittest9962 largeedittest9963 largeedittest9964 largeedittest9965 largeedittest9966 largeedittest9967 largeedittest9968 largeedittest9969 largeedittest997 largeedittest9970 largeedittest9971 largeedittest9972 largeedittest9973 largeedittest9974 largeedittest9975 largeedittest9976 largeedittest9977 largeedittest9978 largeedittest9979 largeedittest998 largeedittest9980 largeedittest9981 largeedittest9982 largeedittest9983 largeedittest9984 largeedittest9985 largeedittest9986 largeedittest9987 largeedittest9988 largeedittest9989 largeedittest999 largeedittest9990 largeedittest9991 largeedittest9992 largeedittest9993 largeedittest9994 largeedittest9995 largeedittest9996 largeedittest9997 largeedittest9998 largeedittest9999 longcallback previousreader printdepthlimit realcontents savedburied something.to.break.tail.recursion startup sum testlog thesum tracetest.tracedplist uiautomation.eventqueue word1 word2] [burytest.buriedplist steptest.steppedplist tracetest.tracedplist]] , as expected.
PASS: CONTENTS returned [[] [] []] , as expected.
INFO: Called UNBURYALL
PASS: [BURIED] output [[] [] []] , as expected.
CALL: ERASETEST.ERASEDPROCEDURE
PASS: [PROCEDURE? "ERASETEST.ERASEDPROCEDURE] output true , as expected.
PASS: [MEMBER? "ERASETEST.ERASEDPROCEDURE (ITEM 1 CONTENTS)] output true , as expected.
CALL: ERASE "ERASETEST.ERASEDPROCEDURE
INFO: Running invalid instruction: [ERASETEST.ERASEDPROCEDUE]
PASS: error code is 13 , as expected.
INFO: error text is I don't know how to ERASETEST.ERASEDPROCEDUE .
PASS: [PROCEDURE? "ERASETEST.ERASEDPROCEDURE] output false , as expected.
PASS: [MEMBER? "ERASETEST.ERASEDPROCEDURE (ITEM 1 CONTENTS)] output false , as expected.
PASS: [MEMBERP "ERASETEST.VARIABLE (ITEM 2 NAMES)] output true , as expected.
CALL: ERASE NAMELIST "ERASETEST.BURIEDVARIABLE
PASS: [MEMBERP "ERASETEST.BURIEDVARIABLE (ITEM 2 NAMES)] output false , as expected.
INFO: Running invalid instruction: [:ERASETEST.BURIEDVARIABLE = 123]
PASS: error code is 11 , as expected.
INFO: error text is ERASETEST.BURIEDVARIABLE has no value .
CALL: PPROP "ERASETEST.ERASEDPLIST "SOMEPROPERTY 123
PASS: [GPROP "ERASETEST.ERASEDPLIST "SOMEPROPERTY] output 123 , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST (ITEM 3 PLISTS)] output true , as expected.
CALL: ERASE PLLIST "ERASETEST.ERASEDPLIST
PASS: [GPROP "ERASETEST.ERASEDPLIST "SOMEPROPERTY] output [] , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST (ITEM 3 PLISTS)] output false , as expected.
PASS: [MEMBERP "ERASETEST.VARIABLE1 (ITEM 2 NAMES)] output true , as expected.
PASS: [MEMBERP "ERASETEST.VARIABLE2 (ITEM 2 NAMES)] output true , as expected.
CALL: ERN [ERASETEST.VARIABLE1 ERASETEST.VARIABLE2]
PASS: [MEMBERP "ERASETEST.VARIABLE1 (ITEM 2 NAMES)] output false , as expected.
PASS: [MEMBERP "ERASETEST.VARIABLE2 (ITEM 2 NAMES)] output false , as expected.
INFO: Running invalid instruction: [:ERASETEST.VARIABLE1 = 123]
PASS: error code is 11 , as expected.
INFO: error text is ERASETEST.VARIABLE1 has no value .
INFO: Running invalid instruction: [:ERASETEST.VARIABLE2 = 321]
PASS: error code is 11 , as expected.
INFO: error text is ERASETEST.VARIABLE2 has no value .
CALL: PPROP "ERASETEST.ERASEDPLIST1 "SOMEPROPERTY 123
CALL: PPROP "ERASETEST.ERASEDPLIST2 "SOMEPROPERTY 321
PASS: [GPROP "ERASETEST.ERASEDPLIST1 "SOMEPROPERTY] output 123 , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST1 (ITEM 3 PLISTS)] output true , as expected.
PASS: [GPROP "ERASETEST.ERASEDPLIST2 "SOMEPROPERTY] output 321 , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST2 (ITEM 3 PLISTS)] output true , as expected.
CALL: ERPL [ERASETEST.ERASEDPLIST1 ERASETEST.ERASEDPLIST2]
PASS: [GPROP "ERASETEST.ERASEDPLIST1 "SOMEPROPERTY] output [] , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST1 (ITEM 3 PLISTS)] output false , as expected.
PASS: [GPROP "ERASETEST.ERASEDPLIST2 "SOMEPROPERTY] output [] , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST2 (ITEM 3 PLISTS)] output false , as expected.
CALL: (ERASE [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Running invalid instruction: [(ERASE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ERASE .
INFO: Running invalid instruction: [(ERASE "name "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ERASE {name} )]
INFO: error code is 4 .
INFO: error text is ERASE doesn't like {name} as input .
INFO: Running invalid instruction: [(ERASE [[a] [b] {c}] )]
INFO: error code is 4 .
INFO: error text is ERASE doesn't like {c} as input .
INFO: Running invalid instruction: [(ERASE [a b {c}] )]
INFO: error code is 4 .
INFO: error text is ERASE doesn't like {c} as input .
INFO: Running invalid instruction: [(ERASE [[a b {c}]] )]
INFO: error code is 4 .
INFO: error text is ERASE doesn't like {c} as input .
INFO: Running invalid instruction: [(ERASE [[a] [b] [c] [d]] )]
INFO: error code is 4 .
INFO: error text is ERASE doesn't like [[a] [b] [c] [d]] as input .
INFO: Running invalid instruction: [(ERASE [[[a]]] )]
INFO: error code is 4 .
INFO: error text is ERASE doesn't like [a] as input .
INFO: Running invalid instruction: [ERASE "FORWARD]
PASS: error code is 22 , as expected.
INFO: error text is FORWARD is a primitive .
INFO: Running invalid instruction: [(ERALL 10)]
INFO: error code is 7 .
INFO: error text is if doesn't like 10 as input .
INFO: Running invalid instruction: [(ERALL [] )]
INFO: error code is 7 .
INFO: error text is if doesn't like [] as input .
INFO: Running invalid instruction: [(ERALL {a} )]
INFO: error code is 7 .
INFO: error text is if doesn't like {a} as input .
INFO: Running invalid instruction: [(ERALL "no)]
INFO: error code is 7 .
INFO: error text is if doesn't like no as input .
INFO: Running invalid instruction: [(ERALL "false "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ERPS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ERNS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ERPLS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ERN)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ERN .
INFO: Running invalid instruction: [(ERN "a "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ERN {a} )]
INFO: error code is 4 .
INFO: error text is namelist doesn't like {a} as input .
INFO: Running invalid instruction: [(ERPL)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ERPL .
INFO: Running invalid instruction: [(ERPL "a "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(ERPL {a} )]
INFO: error code is 4 .
INFO: error text is pllist doesn't like {a} as input .
PASS: [PROCEDURE? "ERASETEST.ERASEALL] output true , as expected.
CALL: MAKE "version LOGOVERSION
PASS: [LIST? :version] output true , as expected.
PASS: [COUNT :version] output 4 , as expected.
PASS: [ITEM 1 :version] output FMSLogo , as expected.
PASS: [ITEM 2 :version] output 6.27.0 , as expected.
PASS: [ITEM 3 :version] output Windows , as expected.
PASS: [ITEM 4 :version] output 1033 , as expected.
INFO: Running invalid instruction: [(LOGOVERSION "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: REFRESH
INFO: Running invalid instruction: [(REFRESH "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: NOREFRESH
INFO: Running invalid instruction: [(NOREFRESH "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [QUOTED "Hello] output "Hello , as expected.
PASS: [QUOTED "] output " , as expected.
PASS: [QUOTED 123] output "123 , as expected.
PASS: [QUOTED [1 2 3]] output [1 2 3] , as expected.
PASS: [QUOTED :quotedtest.array] output {1 2 3} , as expected.
INFO: Running invalid instruction: [(QUOTED)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to QUOTED .
INFO: Running invalid instruction: [(QUOTED "Hello "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [` []] output [] , as expected.
PASS: [` [a b c]] output [a b c] , as expected.
PASS: [` [, [FIRST [a b]] , [BUTFIRST [x y z]]]] output [a [y z]] , as expected.
PASS: [` [,@ [FIRST [a b]] ,@ [BUTFIRST [x y z]]]] output [a y z] , as expected.
PASS: [` [1 , [2] , [3]]] output [1 2 3] , as expected.
PASS: [` [1 ,@ [2] ,@ [3]]] output [1 2 3] , as expected.
PASS: [` [foo baz , [BUTFIRST [a b c]] garply ,@ [BUTFIRST [a b c]]]] output [foo baz [b c] garply b c] , as expected.
PASS: [` [a ` [b , [1+2] , [foo , [1+3] d] e] f]] output [a ` [b , [1+2] , [foo 4 d] e] f] , as expected.
CALL: MAKE "name1 "x
CALL: MAKE "name2 "y
PASS: [` [a ` [b ,:,:name1 ,",:name2 d] e]] output [a ` [b , [:x] , ["y] d] e] , as expected.
CALL: make "foo [a b c]
PASS: [` [,:foo]] output [[a b c]] , as expected.
PASS: [` [,@:foo]] output [a b c] , as expected.
PASS: [` [,1+2]] output [3] , as expected.
CALL: DEFINE "BACKTICKTEST.OUTPUTABC [[] [OUTPUT [a b c]]]
PASS: [` [,BACKTICKTEST.OUTPUTABC]] output [[a b c]] , as expected.
PASS: [` [,@BACKTICKTEST.OUTPUTABC]] output [a b c] , as expected.
INFO: Running invalid instruction: [(`)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to ` .
INFO: Running invalid instruction: [(` [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [` 123]
INFO: error code is 4 .
INFO: error text is ` doesn't like 123 as input .
INFO: Running invalid instruction: [` {1 2 3}]
INFO: error code is 4 .
INFO: error text is ` doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [` [,:doesnotexist]]
PASS: error code is 11 , as expected.
INFO: error text is doesnotexist has no value .
PASS: [MACROEXPAND [MACROEXPANDTEST.OUTPUTNOTHING]] output [] , as expected.
PASS: [MACROEXPAND [MACROEXPANDTEST.MACROFORWARD 10]] output [FORWARD 10] , as expected.
INFO: Running invalid instruction: [MACROEXPAND "badinput]
INFO: error code is 21 .
INFO: error text is b is not a macro. .
INFO: Running invalid instruction: [MACROEXPAND 123]
INFO: error code is 7 .
INFO: error text is macrop doesn't like 1 as input .
INFO: Running invalid instruction: [MACROEXPAND []]
INFO: error code is 7 .
INFO: error text is first doesn't like [] as input .
INFO: Running invalid instruction: [MACROEXPAND {abc}]
INFO: error code is 7 .
INFO: error text is bf doesn't like {abc} as input .
INFO: Running invalid instruction: [MACROEXPAND "FORWARD]
INFO: error code is 21 .
INFO: error text is F is not a macro. .
INFO: Running invalid instruction: [(MACROEXPAND)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MACROEXPAND .
INFO: Running invalid instruction: [(MACROEXPAND "MACROEXPANDTEST.OUTPUTNOTHING "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: make "binaryword "
CALL: repeat 256 [make "binaryword (word :binaryword char (REPCOUNT - 1))]
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: [COUNT :binaryword] output 0 . We expected 256 .
CALL: MAKE "binaryword WORD "a WORD CHAR 0 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: :binaryword is not expected for value 0.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: :binaryword is not expected for value 0.
CALL: MAKE "binaryword WORD "a WORD CHAR 1 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 1.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 1.
CALL: MAKE "binaryword WORD "a WORD CHAR 2 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 2.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 2.
CALL: MAKE "binaryword WORD "a WORD CHAR 3 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 3.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 3.
CALL: MAKE "binaryword WORD "a WORD CHAR 4 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 4.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 4.
CALL: MAKE "binaryword WORD "a WORD CHAR 5 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 5.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 5.
CALL: MAKE "binaryword WORD "a WORD CHAR 6 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 6.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 6.
CALL: MAKE "binaryword WORD "a WORD CHAR 7 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 7.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 7.
CALL: MAKE "binaryword WORD "a WORD CHAR 8 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 8.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 8.
CALL: MAKE "binaryword WORD "a WORD CHAR 9 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 9.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 9.
CALL: MAKE "binaryword WORD "a WORD CHAR 10 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 10.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 10.
CALL: MAKE "binaryword WORD "a WORD CHAR 11 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 11.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 11.
CALL: MAKE "binaryword WORD "a WORD CHAR 12 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 12.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 12.
CALL: MAKE "binaryword WORD "a WORD CHAR 13 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: :binaryword is not expected for value 13.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: :binaryword is not expected for value 13.
CALL: MAKE "binaryword WORD "a WORD CHAR 14 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 14.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 14.
CALL: MAKE "binaryword WORD "a WORD CHAR 15 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 15.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 15.
CALL: MAKE "binaryword WORD "a WORD CHAR 16 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 16.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 16.
CALL: MAKE "binaryword WORD "a WORD CHAR 17 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 17.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 17.
CALL: MAKE "binaryword WORD "a WORD CHAR 18 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 18.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 18.
CALL: MAKE "binaryword WORD "a WORD CHAR 19 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 19.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 19.
CALL: MAKE "binaryword WORD "a WORD CHAR 20 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 20.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 20.
CALL: MAKE "binaryword WORD "a WORD CHAR 21 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 21.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 21.
CALL: MAKE "binaryword WORD "a WORD CHAR 22 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 22.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 22.
CALL: MAKE "binaryword WORD "a WORD CHAR 23 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 23.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 23.
CALL: MAKE "binaryword WORD "a WORD CHAR 24 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 24.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 24.
CALL: MAKE "binaryword WORD "a WORD CHAR 25 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 25.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 25.
CALL: MAKE "binaryword WORD "a WORD CHAR 26 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: :binaryword is not expected for value 26.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: :binaryword is not expected for value 26.
CALL: MAKE "binaryword WORD "a WORD CHAR 27 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 27.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 27.
CALL: MAKE "binaryword WORD "a WORD CHAR 28 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 28.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 28.
CALL: MAKE "binaryword WORD "a WORD CHAR 29 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 29.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 29.
CALL: MAKE "binaryword WORD "a WORD CHAR 30 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 30.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 30.
CALL: MAKE "binaryword WORD "a WORD CHAR 31 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 31.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 31.
CALL: MAKE "binaryword WORD "a WORD CHAR 32 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 32.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 32.
CALL: MAKE "binaryword WORD "a WORD CHAR 33 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 33.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 33.
CALL: MAKE "binaryword WORD "a WORD CHAR 34 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 34.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 34.
CALL: MAKE "binaryword WORD "a WORD CHAR 35 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 35.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 35.
CALL: MAKE "binaryword WORD "a WORD CHAR 36 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 36.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 36.
CALL: MAKE "binaryword WORD "a WORD CHAR 37 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 37.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 37.
CALL: MAKE "binaryword WORD "a WORD CHAR 38 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 38.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 38.
CALL: MAKE "binaryword WORD "a WORD CHAR 39 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 39.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 39.
CALL: MAKE "binaryword WORD "a WORD CHAR 40 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 40.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 40.
CALL: MAKE "binaryword WORD "a WORD CHAR 41 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 41.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 41.
CALL: MAKE "binaryword WORD "a WORD CHAR 42 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 42.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 42.
CALL: MAKE "binaryword WORD "a WORD CHAR 43 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 43.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 43.
CALL: MAKE "binaryword WORD "a WORD CHAR 44 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 44.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 44.
CALL: MAKE "binaryword WORD "a WORD CHAR 45 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 45.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 45.
CALL: MAKE "binaryword WORD "a WORD CHAR 46 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 46.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 46.
CALL: MAKE "binaryword WORD "a WORD CHAR 47 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 47.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 47.
CALL: MAKE "binaryword WORD "a WORD CHAR 48 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 48.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 48.
CALL: MAKE "binaryword WORD "a WORD CHAR 49 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 49.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 49.
CALL: MAKE "binaryword WORD "a WORD CHAR 50 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 50.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 50.
CALL: MAKE "binaryword WORD "a WORD CHAR 51 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 51.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 51.
CALL: MAKE "binaryword WORD "a WORD CHAR 52 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 52.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 52.
CALL: MAKE "binaryword WORD "a WORD CHAR 53 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 53.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 53.
CALL: MAKE "binaryword WORD "a WORD CHAR 54 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 54.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 54.
CALL: MAKE "binaryword WORD "a WORD CHAR 55 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 55.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 55.
CALL: MAKE "binaryword WORD "a WORD CHAR 56 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 56.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 56.
CALL: MAKE "binaryword WORD "a WORD CHAR 57 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 57.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 57.
CALL: MAKE "binaryword WORD "a WORD CHAR 58 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 58.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 58.
CALL: MAKE "binaryword WORD "a WORD CHAR 59 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 59.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 59.
CALL: MAKE "binaryword WORD "a WORD CHAR 60 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 60.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 60.
CALL: MAKE "binaryword WORD "a WORD CHAR 61 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 61.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 61.
CALL: MAKE "binaryword WORD "a WORD CHAR 62 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 62.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 62.
CALL: MAKE "binaryword WORD "a WORD CHAR 63 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 63.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 63.
CALL: MAKE "binaryword WORD "a WORD CHAR 64 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 64.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 64.
CALL: MAKE "binaryword WORD "a WORD CHAR 65 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 65.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 65.
CALL: MAKE "binaryword WORD "a WORD CHAR 66 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 66.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 66.
CALL: MAKE "binaryword WORD "a WORD CHAR 67 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 67.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 67.
CALL: MAKE "binaryword WORD "a WORD CHAR 68 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 68.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 68.
CALL: MAKE "binaryword WORD "a WORD CHAR 69 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 69.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 69.
CALL: MAKE "binaryword WORD "a WORD CHAR 70 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 70.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 70.
CALL: MAKE "binaryword WORD "a WORD CHAR 71 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 71.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 71.
CALL: MAKE "binaryword WORD "a WORD CHAR 72 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 72.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 72.
CALL: MAKE "binaryword WORD "a WORD CHAR 73 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 73.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 73.
CALL: MAKE "binaryword WORD "a WORD CHAR 74 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 74.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 74.
CALL: MAKE "binaryword WORD "a WORD CHAR 75 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 75.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 75.
CALL: MAKE "binaryword WORD "a WORD CHAR 76 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 76.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 76.
CALL: MAKE "binaryword WORD "a WORD CHAR 77 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 77.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 77.
CALL: MAKE "binaryword WORD "a WORD CHAR 78 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 78.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 78.
CALL: MAKE "binaryword WORD "a WORD CHAR 79 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 79.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 79.
CALL: MAKE "binaryword WORD "a WORD CHAR 80 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 80.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 80.
CALL: MAKE "binaryword WORD "a WORD CHAR 81 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 81.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 81.
CALL: MAKE "binaryword WORD "a WORD CHAR 82 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 82.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 82.
CALL: MAKE "binaryword WORD "a WORD CHAR 83 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 83.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 83.
CALL: MAKE "binaryword WORD "a WORD CHAR 84 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 84.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 84.
CALL: MAKE "binaryword WORD "a WORD CHAR 85 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 85.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 85.
CALL: MAKE "binaryword WORD "a WORD CHAR 86 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 86.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 86.
CALL: MAKE "binaryword WORD "a WORD CHAR 87 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 87.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 87.
CALL: MAKE "binaryword WORD "a WORD CHAR 88 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 88.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 88.
CALL: MAKE "binaryword WORD "a WORD CHAR 89 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 89.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 89.
CALL: MAKE "binaryword WORD "a WORD CHAR 90 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 90.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 90.
CALL: MAKE "binaryword WORD "a WORD CHAR 91 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 91.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 91.
CALL: MAKE "binaryword WORD "a WORD CHAR 92 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 92.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 92.
CALL: MAKE "binaryword WORD "a WORD CHAR 93 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 93.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 93.
CALL: MAKE "binaryword WORD "a WORD CHAR 94 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 94.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 94.
CALL: MAKE "binaryword WORD "a WORD CHAR 95 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 95.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 95.
CALL: MAKE "binaryword WORD "a WORD CHAR 96 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 96.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 96.
CALL: MAKE "binaryword WORD "a WORD CHAR 97 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 97.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 97.
CALL: MAKE "binaryword WORD "a WORD CHAR 98 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 98.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 98.
CALL: MAKE "binaryword WORD "a WORD CHAR 99 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 99.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 99.
CALL: MAKE "binaryword WORD "a WORD CHAR 100 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 100.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 100.
CALL: MAKE "binaryword WORD "a WORD CHAR 101 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 101.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 101.
CALL: MAKE "binaryword WORD "a WORD CHAR 102 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 102.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 102.
CALL: MAKE "binaryword WORD "a WORD CHAR 103 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 103.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 103.
CALL: MAKE "binaryword WORD "a WORD CHAR 104 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 104.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 104.
CALL: MAKE "binaryword WORD "a WORD CHAR 105 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 105.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 105.
CALL: MAKE "binaryword WORD "a WORD CHAR 106 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 106.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 106.
CALL: MAKE "binaryword WORD "a WORD CHAR 107 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 107.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 107.
CALL: MAKE "binaryword WORD "a WORD CHAR 108 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 108.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 108.
CALL: MAKE "binaryword WORD "a WORD CHAR 109 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 109.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 109.
CALL: MAKE "binaryword WORD "a WORD CHAR 110 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 110.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 110.
CALL: MAKE "binaryword WORD "a WORD CHAR 111 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 111.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 111.
CALL: MAKE "binaryword WORD "a WORD CHAR 112 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 112.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 112.
CALL: MAKE "binaryword WORD "a WORD CHAR 113 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 113.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 113.
CALL: MAKE "binaryword WORD "a WORD CHAR 114 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 114.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 114.
CALL: MAKE "binaryword WORD "a WORD CHAR 115 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 115.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 115.
CALL: MAKE "binaryword WORD "a WORD CHAR 116 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 116.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 116.
CALL: MAKE "binaryword WORD "a WORD CHAR 117 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 117.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 117.
CALL: MAKE "binaryword WORD "a WORD CHAR 118 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 118.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 118.
CALL: MAKE "binaryword WORD "a WORD CHAR 119 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 119.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 119.
CALL: MAKE "binaryword WORD "a WORD CHAR 120 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 120.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 120.
CALL: MAKE "binaryword WORD "a WORD CHAR 121 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 121.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 121.
CALL: MAKE "binaryword WORD "a WORD CHAR 122 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 122.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 122.
CALL: MAKE "binaryword WORD "a WORD CHAR 123 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 123.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 123.
CALL: MAKE "binaryword WORD "a WORD CHAR 124 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 124.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 124.
CALL: MAKE "binaryword WORD "a WORD CHAR 125 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 125.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 125.
CALL: MAKE "binaryword WORD "a WORD CHAR 126 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 126.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 126.
CALL: MAKE "binaryword WORD "a WORD CHAR 127 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 127.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 127.
CALL: MAKE "binaryword WORD "a WORD CHAR 128 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 128.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 128.
CALL: MAKE "binaryword WORD "a WORD CHAR 129 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 129.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 129.
CALL: MAKE "binaryword WORD "a WORD CHAR 130 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 130.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 130.
CALL: MAKE "binaryword WORD "a WORD CHAR 131 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 131.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 131.
CALL: MAKE "binaryword WORD "a WORD CHAR 132 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 132.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 132.
CALL: MAKE "binaryword WORD "a WORD CHAR 133 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 133.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 133.
CALL: MAKE "binaryword WORD "a WORD CHAR 134 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 134.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 134.
CALL: MAKE "binaryword WORD "a WORD CHAR 135 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 135.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 135.
CALL: MAKE "binaryword WORD "a WORD CHAR 136 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 136.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 136.
CALL: MAKE "binaryword WORD "a WORD CHAR 137 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 137.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 137.
CALL: MAKE "binaryword WORD "a WORD CHAR 138 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 138.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 138.
CALL: MAKE "binaryword WORD "a WORD CHAR 139 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 139.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 139.
CALL: MAKE "binaryword WORD "a WORD CHAR 140 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 140.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 140.
CALL: MAKE "binaryword WORD "a WORD CHAR 141 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 141.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 141.
CALL: MAKE "binaryword WORD "a WORD CHAR 142 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 142.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 142.
CALL: MAKE "binaryword WORD "a WORD CHAR 143 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 143.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 143.
CALL: MAKE "binaryword WORD "a WORD CHAR 144 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 144.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 144.
CALL: MAKE "binaryword WORD "a WORD CHAR 145 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 145.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 145.
CALL: MAKE "binaryword WORD "a WORD CHAR 146 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 146.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 146.
CALL: MAKE "binaryword WORD "a WORD CHAR 147 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 147.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 147.
CALL: MAKE "binaryword WORD "a WORD CHAR 148 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 148.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 148.
CALL: MAKE "binaryword WORD "a WORD CHAR 149 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 149.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 149.
CALL: MAKE "binaryword WORD "a WORD CHAR 150 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 150.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 150.
CALL: MAKE "binaryword WORD "a WORD CHAR 151 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 151.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 151.
CALL: MAKE "binaryword WORD "a WORD CHAR 152 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 152.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 152.
CALL: MAKE "binaryword WORD "a WORD CHAR 153 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 153.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 153.
CALL: MAKE "binaryword WORD "a WORD CHAR 154 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 154.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 154.
CALL: MAKE "binaryword WORD "a WORD CHAR 155 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 155.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 155.
CALL: MAKE "binaryword WORD "a WORD CHAR 156 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 156.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 156.
CALL: MAKE "binaryword WORD "a WORD CHAR 157 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 157.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 157.
CALL: MAKE "binaryword WORD "a WORD CHAR 158 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 158.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 158.
CALL: MAKE "binaryword WORD "a WORD CHAR 159 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 159.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 159.
CALL: MAKE "binaryword WORD "a WORD CHAR 160 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 160.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 160.
CALL: MAKE "binaryword WORD "a WORD CHAR 161 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 161.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 161.
CALL: MAKE "binaryword WORD "a WORD CHAR 162 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 162.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 162.
CALL: MAKE "binaryword WORD "a WORD CHAR 163 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 163.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 163.
CALL: MAKE "binaryword WORD "a WORD CHAR 164 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 164.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 164.
CALL: MAKE "binaryword WORD "a WORD CHAR 165 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 165.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 165.
CALL: MAKE "binaryword WORD "a WORD CHAR 166 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 166.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 166.
CALL: MAKE "binaryword WORD "a WORD CHAR 167 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 167.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 167.
CALL: MAKE "binaryword WORD "a WORD CHAR 168 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 168.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 168.
CALL: MAKE "binaryword WORD "a WORD CHAR 169 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 169.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 169.
CALL: MAKE "binaryword WORD "a WORD CHAR 170 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 170.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 170.
CALL: MAKE "binaryword WORD "a WORD CHAR 171 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 171.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 171.
CALL: MAKE "binaryword WORD "a WORD CHAR 172 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 172.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 172.
CALL: MAKE "binaryword WORD "a WORD CHAR 173 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 173.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 173.
CALL: MAKE "binaryword WORD "a WORD CHAR 174 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 174.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 174.
CALL: MAKE "binaryword WORD "a WORD CHAR 175 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 175.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 175.
CALL: MAKE "binaryword WORD "a WORD CHAR 176 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 176.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 176.
CALL: MAKE "binaryword WORD "a WORD CHAR 177 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 177.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 177.
CALL: MAKE "binaryword WORD "a WORD CHAR 178 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 178.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 178.
CALL: MAKE "binaryword WORD "a WORD CHAR 179 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 179.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 179.
CALL: MAKE "binaryword WORD "a WORD CHAR 180 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 180.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 180.
CALL: MAKE "binaryword WORD "a WORD CHAR 181 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 181.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 181.
CALL: MAKE "binaryword WORD "a WORD CHAR 182 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 182.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 182.
CALL: MAKE "binaryword WORD "a WORD CHAR 183 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 183.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 183.
CALL: MAKE "binaryword WORD "a WORD CHAR 184 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 184.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 184.
CALL: MAKE "binaryword WORD "a WORD CHAR 185 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 185.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 185.
CALL: MAKE "binaryword WORD "a WORD CHAR 186 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 186.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 186.
CALL: MAKE "binaryword WORD "a WORD CHAR 187 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 187.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 187.
CALL: MAKE "binaryword WORD "a WORD CHAR 188 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 188.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 188.
CALL: MAKE "binaryword WORD "a WORD CHAR 189 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 189.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 189.
CALL: MAKE "binaryword WORD "a WORD CHAR 190 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 190.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 190.
CALL: MAKE "binaryword WORD "a WORD CHAR 191 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 191.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 191.
CALL: MAKE "binaryword WORD "a WORD CHAR 192 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 192.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 192.
CALL: MAKE "binaryword WORD "a WORD CHAR 193 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 193.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 193.
CALL: MAKE "binaryword WORD "a WORD CHAR 194 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 194.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 194.
CALL: MAKE "binaryword WORD "a WORD CHAR 195 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 195.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 195.
CALL: MAKE "binaryword WORD "a WORD CHAR 196 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 196.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 196.
CALL: MAKE "binaryword WORD "a WORD CHAR 197 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 197.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 197.
CALL: MAKE "binaryword WORD "a WORD CHAR 198 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 198.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 198.
CALL: MAKE "binaryword WORD "a WORD CHAR 199 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 199.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 199.
CALL: MAKE "binaryword WORD "a WORD CHAR 200 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 200.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 200.
CALL: MAKE "binaryword WORD "a WORD CHAR 201 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 201.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 201.
CALL: MAKE "binaryword WORD "a WORD CHAR 202 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 202.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 202.
CALL: MAKE "binaryword WORD "a WORD CHAR 203 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 203.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 203.
CALL: MAKE "binaryword WORD "a WORD CHAR 204 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 204.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 204.
CALL: MAKE "binaryword WORD "a WORD CHAR 205 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 205.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 205.
CALL: MAKE "binaryword WORD "a WORD CHAR 206 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 206.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 206.
CALL: MAKE "binaryword WORD "a WORD CHAR 207 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 207.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 207.
CALL: MAKE "binaryword WORD "a WORD CHAR 208 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 208.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 208.
CALL: MAKE "binaryword WORD "a WORD CHAR 209 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 209.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 209.
CALL: MAKE "binaryword WORD "a WORD CHAR 210 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 210.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 210.
CALL: MAKE "binaryword WORD "a WORD CHAR 211 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 211.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 211.
CALL: MAKE "binaryword WORD "a WORD CHAR 212 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 212.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 212.
CALL: MAKE "binaryword WORD "a WORD CHAR 213 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 213.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 213.
CALL: MAKE "binaryword WORD "a WORD CHAR 214 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 214.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 214.
CALL: MAKE "binaryword WORD "a WORD CHAR 215 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 215.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 215.
CALL: MAKE "binaryword WORD "a WORD CHAR 216 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 216.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 216.
CALL: MAKE "binaryword WORD "a WORD CHAR 217 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 217.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 217.
CALL: MAKE "binaryword WORD "a WORD CHAR 218 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 218.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 218.
CALL: MAKE "binaryword WORD "a WORD CHAR 219 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 219.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 219.
CALL: MAKE "binaryword WORD "a WORD CHAR 220 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 220.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 220.
CALL: MAKE "binaryword WORD "a WORD CHAR 221 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 221.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 221.
CALL: MAKE "binaryword WORD "a WORD CHAR 222 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 222.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 222.
CALL: MAKE "binaryword WORD "a WORD CHAR 223 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 223.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 223.
CALL: MAKE "binaryword WORD "a WORD CHAR 224 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 224.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 224.
CALL: MAKE "binaryword WORD "a WORD CHAR 225 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 225.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 225.
CALL: MAKE "binaryword WORD "a WORD CHAR 226 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 226.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 226.
CALL: MAKE "binaryword WORD "a WORD CHAR 227 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 227.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 227.
CALL: MAKE "binaryword WORD "a WORD CHAR 228 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 228.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 228.
CALL: MAKE "binaryword WORD "a WORD CHAR 229 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 229.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 229.
CALL: MAKE "binaryword WORD "a WORD CHAR 230 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 230.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 230.
CALL: MAKE "binaryword WORD "a WORD CHAR 231 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 231.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 231.
CALL: MAKE "binaryword WORD "a WORD CHAR 232 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 232.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 232.
CALL: MAKE "binaryword WORD "a WORD CHAR 233 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 233.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 233.
CALL: MAKE "binaryword WORD "a WORD CHAR 234 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 234.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 234.
CALL: MAKE "binaryword WORD "a WORD CHAR 235 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 235.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 235.
CALL: MAKE "binaryword WORD "a WORD CHAR 236 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 236.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 236.
CALL: MAKE "binaryword WORD "a WORD CHAR 237 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 237.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 237.
CALL: MAKE "binaryword WORD "a WORD CHAR 238 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 238.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 238.
CALL: MAKE "binaryword WORD "a WORD CHAR 239 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 239.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 239.
CALL: MAKE "binaryword WORD "a WORD CHAR 240 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 240.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 240.
CALL: MAKE "binaryword WORD "a WORD CHAR 241 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 241.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 241.
CALL: MAKE "binaryword WORD "a WORD CHAR 242 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 242.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 242.
CALL: MAKE "binaryword WORD "a WORD CHAR 243 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 243.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 243.
CALL: MAKE "binaryword WORD "a WORD CHAR 244 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 244.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 244.
CALL: MAKE "binaryword WORD "a WORD CHAR 245 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 245.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 245.
CALL: MAKE "binaryword WORD "a WORD CHAR 246 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 246.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 246.
CALL: MAKE "binaryword WORD "a WORD CHAR 247 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 247.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 247.
CALL: MAKE "binaryword WORD "a WORD CHAR 248 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 248.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 248.
CALL: MAKE "binaryword WORD "a WORD CHAR 249 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 249.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 249.
CALL: MAKE "binaryword WORD "a WORD CHAR 250 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 250.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 250.
CALL: MAKE "binaryword WORD "a WORD CHAR 251 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 251.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 251.
CALL: MAKE "binaryword WORD "a WORD CHAR 252 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 252.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 252.
CALL: MAKE "binaryword WORD "a WORD CHAR 253 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 253.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 253.
CALL: MAKE "binaryword WORD "a WORD CHAR 254 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 254.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 254.
CALL: MAKE "binaryword WORD "a WORD CHAR 255 "z
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 255.
INFO: Saving [[] [binaryword]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: :binaryword is as expected for value 255.
CALL: MAKE "binaryarray ARRAY 256
CALL: REPEAT 256 [SETITEM REPCOUNT :binaryarray char (REPCOUNT - 1)]
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: [LOAD "testworkspace.lgo] threw error.  code= 6 . not enough inputs to |*|
FAIL: [COUNT :binaryarray] output 1 . We expected 256 .
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: [COUNT :binaryarray] output 1 . We expected 256 .
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 0
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: [LOAD "testworkspace.lgo] threw error.  code= 27 . unexpected '}'
FAIL: [COUNT :binaryarray] output 16 . We expected 2 .
FAIL: ITEM 1 :binaryarray does not equal CHAR 0.
FAIL: [ITEM 2 :binaryarray] output o . We expected [] .
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: [COUNT :binaryarray] output 16 . We expected 2 .
FAIL: ITEM 1 :binaryarray does not equal CHAR 0.
FAIL: [ITEM 2 :binaryarray] output o . We expected [] .
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 1
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 1, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 1, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 2
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 2, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 2, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 3
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 3, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 3, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 4
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 4, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 4, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 5
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 5, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 5, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 6
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 6, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 6, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 7
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 7, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 7, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 8
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 8, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 8, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 9
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 9, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 9, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 10
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 10, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 10, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 11
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 11, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 11, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 12
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 12, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 12, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 13
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: [COUNT :binaryarray] output 1 . We expected 2 .
FAIL: ITEM 1 :binaryarray does not equal CHAR 13.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: [COUNT :binaryarray] output 1 . We expected 2 .
FAIL: ITEM 1 :binaryarray does not equal CHAR 13.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 14
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 14, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 14, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 15
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 15, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 15, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 16
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 16, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 16, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 17
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 17, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 17, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 18
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 18, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 18, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 19
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 19, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 19, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 20
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 20, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 20, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 21
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 21, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 21, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 22
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 22, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 22, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 23
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 23, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 23, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 24
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 24, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 24, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 25
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 25, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 25, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 26
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: [COUNT :binaryarray] output 0 . We expected 2 .
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
FAIL: [COUNT :binaryarray] output 0 . We expected 2 .
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 27
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 27, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 27, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 28
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 28, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 28, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 29
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 29, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 29, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 30
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 30, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 30, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 31
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 31, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 31, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 32
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 32, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 32, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 33
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 33, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 33, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 34
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 34, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 34, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 35
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 35, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 35, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 36
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 36, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 36, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 37
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 37, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 37, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 38
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 38, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 38, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 39
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 39, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 39, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 40
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 40, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 40, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 41
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 41, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 41, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 42
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 42, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 42, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 43
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 43, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 43, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 44
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 44, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 44, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 45
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 45, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 45, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 46
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 46, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 46, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 47
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 47, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 47, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 48
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 48, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 48, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 49
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 49, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 49, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 50
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 50, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 50, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 51
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 51, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 51, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 52
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 52, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 52, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 53
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 53, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 53, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 54
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 54, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 54, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 55
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 55, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 55, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 56
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 56, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 56, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 57
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 57, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 57, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 58
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 58, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 58, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 59
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 59, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 59, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 60
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 60, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 60, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 61
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 61, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 61, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 62
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 62, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 62, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 63
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 63, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 63, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 64
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 64, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 64, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 65
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 65, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 65, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 66
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 66, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 66, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 67
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 67, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 67, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 68
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 68, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 68, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 69
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 69, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 69, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 70
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 70, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 70, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 71
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 71, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 71, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 72
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 72, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 72, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 73
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 73, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 73, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 74
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 74, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 74, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 75
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 75, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 75, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 76
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 76, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 76, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 77
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 77, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 77, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 78
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 78, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 78, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 79
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 79, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 79, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 80
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 80, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 80, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 81
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 81, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 81, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 82
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 82, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 82, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 83
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 83, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 83, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 84
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 84, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 84, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 85
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 85, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 85, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 86
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 86, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 86, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 87
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 87, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 87, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 88
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 88, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 88, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 89
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 89, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 89, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 90
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 90, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 90, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 91
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 91, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 91, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 92
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 92, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 92, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 93
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 93, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 93, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 94
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 94, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 94, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 95
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 95, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 95, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 96
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 96, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 96, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 97
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 97, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 97, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 98
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 98, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 98, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 99
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 99, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 99, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 100
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 100, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 100, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 101
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 101, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 101, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 102
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 102, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 102, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 103
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 103, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 103, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 104
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 104, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 104, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 105
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 105, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 105, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 106
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 106, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 106, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 107
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 107, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 107, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 108
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 108, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 108, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 109
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 109, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 109, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 110
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 110, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 110, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 111
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 111, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 111, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 112
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 112, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 112, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 113
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 113, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 113, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 114
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 114, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 114, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 115
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 115, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 115, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 116
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 116, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 116, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 117
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 117, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 117, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 118
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 118, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 118, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 119
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 119, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 119, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 120
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 120, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 120, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 121
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 121, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 121, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 122
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 122, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 122, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 123
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 123, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 123, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 124
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 124, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 124, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 125
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 125, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 125, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 126
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 126, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 126, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 127
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 127, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 127, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 128
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 128, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 128, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 129
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 129, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 129, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 130
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 130, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 130, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 131
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 131, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 131, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 132
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 132, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 132, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 133
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 133, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 133, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 134
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 134, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 134, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 135
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 135, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 135, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 136
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 136, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 136, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 137
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 137, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 137, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 138
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 138, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 138, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 139
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 139, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 139, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 140
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 140, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 140, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 141
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 141, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 141, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 142
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 142, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 142, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 143
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 143, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 143, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 144
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 144, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 144, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 145
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 145, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 145, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 146
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 146, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 146, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 147
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 147, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 147, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 148
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 148, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 148, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 149
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 149, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 149, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 150
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 150, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 150, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 151
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 151, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 151, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 152
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 152, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 152, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 153
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 153, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 153, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 154
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 154, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 154, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 155
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 155, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 155, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 156
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 156, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 156, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 157
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 157, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 157, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 158
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 158, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 158, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 159
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 159, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 159, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 160
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 160, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 160, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 161
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 161, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 161, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 162
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 162, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 162, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 163
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 163, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 163, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 164
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 164, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 164, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 165
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 165, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 165, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 166
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 166, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 166, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 167
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 167, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 167, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 168
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 168, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 168, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 169
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 169, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 169, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 170
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 170, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 170, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 171
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 171, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 171, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 172
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 172, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 172, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 173
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 173, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 173, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 174
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 174, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 174, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 175
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 175, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 175, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 176
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 176, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 176, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 177
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 177, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 177, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 178
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 178, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 178, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 179
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 179, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 179, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 180
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 180, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 180, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 181
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 181, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 181, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 182
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 182, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 182, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 183
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 183, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 183, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 184
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 184, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 184, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 185
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 185, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 185, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 186
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 186, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 186, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 187
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 187, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 187, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 188
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 188, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 188, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 189
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 189, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 189, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 190
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 190, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 190, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 191
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 191, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 191, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 192
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 192, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 192, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 193
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 193, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 193, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 194
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 194, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 194, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 195
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 195, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 195, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 196
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 196, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 196, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 197
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 197, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 197, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 198
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 198, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 198, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 199
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 199, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 199, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 200
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 200, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 200, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 201
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 201, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 201, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 202
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 202, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 202, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 203
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 203, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 203, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 204
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 204, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 204, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 205
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 205, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 205, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 206
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 206, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 206, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 207
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 207, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 207, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 208
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 208, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 208, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 209
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 209, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 209, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 210
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 210, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 210, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 211
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 211, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 211, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 212
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 212, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 212, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 213
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 213, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 213, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 214
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 214, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 214, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 215
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 215, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 215, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 216
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 216, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 216, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 217
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 217, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 217, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 218
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 218, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 218, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 219
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 219, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 219, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 220
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 220, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 220, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 221
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 221, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 221, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 222
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 222, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 222, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 223
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 223, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 223, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 224
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 224, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 224, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 225
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 225, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 225, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 226
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 226, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 226, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 227
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 227, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 227, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 228
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 228, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 228, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 229
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 229, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 229, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 230
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 230, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 230, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 231
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 231, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 231, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 232
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 232, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 232, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 233
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 233, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 233, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 234
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 234, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 234, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 235
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 235, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 235, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 236
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 236, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 236, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 237
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 237, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 237, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 238
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 238, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 238, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 239
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 239, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 239, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 240
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 240, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 240, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 241
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 241, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 241, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 242
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 242, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 242, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 243
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 243, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 243, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 244
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 244, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 244, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 245
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 245, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 245, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 246
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 246, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 246, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 247
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 247, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 247, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 248
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 248, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 248, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 249
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 249, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 249, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 250
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 250, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 250, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 251
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 251, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 251, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 252
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 252, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 252, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 253
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 253, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 253, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 254
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 254, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 254, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MAKE "binaryarray ARRAY 2
CALL: SETITEM 1 :binaryarray CHAR 255
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 255, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
INFO: Saving [[] [binaryarray]] to testworkspace.lgo
CALL: LOAD "testworkspace.lgo
PASS: [COUNT :binaryarray] output 2 , as expected.
PASS: ITEM 1 :binaryarray = CHAR 255, as expected.
PASS: [ITEM 2 :binaryarray] output [] , as expected.
CALL: MESSAGEBOX [YESNOBOX Test] [Press "OK"]
INFO: Running invalid instruction: [MESSAGEBOX [YESNOBOX Test] [Press "Cancel"]]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [(MESSAGEBOX [Title] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MESSAGEBOX .
INFO: Running invalid instruction: [(MESSAGEBOX [Title] [Message] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [YESNOBOX [YESNOBOX Test] [Press "Yes"]] output true , as expected.
PASS: [YESNOBOX [YESNOBOX Test] [Press "No"]] output false , as expected.
INFO: Running invalid instruction: [YESNOBOX [YESNOBOX Test] [Press "Cancel"]]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [IGNORE (YESNOBOX [Title] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to YESNOBOX .
INFO: Running invalid instruction: [IGNORE (YESNOBOX [Title] [Question] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: [SELECTBOX [SELECTBOX Test: Select First] [First Second Third]] output 1 , as expected.
PASS: [SELECTBOX [SELECTBOX Test: Select Second] [First Second Third]] output 2 , as expected.
PASS: [SELECTBOX [SELECTBOX Test: Select Third] [First Second Third]] output 3 , as expected.
INFO: Running invalid instruction: [SELECTBOX [SELECTBOX Test: Press Cancel] [First Second Third]]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [SELECTBOX [SELECTBOX Test: Press ESC] [First Second Third]]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [SELECTBOX [SELECTBOX Test: Press the X] [First Second Third]]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
PASS: [SELECTBOX [SELECTBOX Test: No Choice (press ok)] []] output 1 , as expected.
INFO: Running invalid instruction: [IGNORE (SELECTBOX [Title] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SELECTBOX .
INFO: Running invalid instruction: [IGNORE (SELECTBOX [Title] [1 2 3] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [IGNORE SELECTBOX [Title] {1 2 3}]
INFO: error code is 7 .
INFO: error text is SELECTBOX doesn't like {1 2 3} as input .
INFO: Running invalid instruction: [IGNORE SELECTBOX [Title] "choices]
INFO: error code is 7 .
INFO: error text is SELECTBOX doesn't like choices as input .
INFO: Running invalid instruction: [IGNORE SELECTBOX [Title] 12345]
INFO: error code is 7 .
INFO: error text is SELECTBOX doesn't like 12345 as input .
PASS: [QUESTIONBOX [QUESTIONBOX Test] [Press OK without typing anything.]] output [] , as expected.
PASS: [QUESTIONBOX [QUESTIONBOX Test] [Enter "Hello" and press OK.]] output [Hello] , as expected.
PASS: [QUESTIONBOX [QUESTIONBOX Test] [Enter "Hi Bye" and press OK.]] output [Hi Bye] , as expected.
INFO: Running invalid instruction: [QUESTIONBOX [QUESTIONBOX Test] [Press Cancel.]]
PASS: error code is 16 , as expected.
INFO: error text is Stopping... .
INFO: Running invalid instruction: [IGNORE (QUESTIONBOX [Title] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to QUESTIONBOX .
INFO: Running invalid instruction: [IGNORE (QUESTIONBOX [Title] [Question] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(windowcreate "main "name [caption] 0 0 120 400)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to windowcreate .
INFO: Running invalid instruction: [(windowcreate "main "name [caption] 0 0 120 400 [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [windowcreate "main "name10 [caption] [0] 0 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like [0] as input .
INFO: Running invalid instruction: [windowcreate "main "name20 [caption] {0} 0 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like {0} as input .
INFO: Running invalid instruction: [windowcreate "main "name25 [caption] 10.5 0 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [windowcreate "main "name30 [caption] 0 [0] 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like [0] as input .
INFO: Running invalid instruction: [windowcreate "main "name40 [caption] 0 {0} 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like {0} as input .
INFO: Running invalid instruction: [windowcreate "main "name45 [caption] 0 10.5 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [windowcreate "main "name50 [caption] 0 0 [120] 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like [120] as input .
INFO: Running invalid instruction: [windowcreate "main "name60 [caption] 0 0 {120} 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like {120} as input .
INFO: Running invalid instruction: [windowcreate "main "name70 [caption] 0 0 -120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like -120 as input .
INFO: Running invalid instruction: [windowcreate "main "name75 [caption] 0 0 10.5 400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [windowcreate "main "name80 [caption] 0 0 120 [400] []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like [400] as input .
INFO: Running invalid instruction: [windowcreate "main "name90 [caption] 0 0 120 {400} []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like {400} as input .
INFO: Running invalid instruction: [windowcreate "main "name00 [caption] 0 0 120 -400 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like -400 as input .
INFO: Running invalid instruction: [windowcreate "main "name05 [caption] 0 0 120 10.5 []]
PASS: error code is 7 , as expected.
INFO: error text is windowcreate doesn't like 10.5 as input .
CALL: windowcreate "main "goodwindow [caption] 0 0 100 100 []
INFO: Running invalid instruction: [windowcreate "main "goodwindow [newcaption] 0 0 100 100 []]
PASS: error code is 1001 , as expected.
PASS: error text is goodwindow already exists , as expected.
INFO: Running invalid instruction: [(windowenable "goodwindow)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to windowenable .
INFO: Running invalid instruction: [(windowenable "goodwindow LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [windowenable "nonexistent LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is nonexistent does not exist , as expected.
INFO: Running invalid instruction: [windowenable "goodwindow 1]
PASS: error code is 7 , as expected.
INFO: error text is windowenable doesn't like 1 as input .
INFO: Running invalid instruction: [windowenable "goodwindow [true]]
PASS: error code is 7 , as expected.
INFO: error text is windowenable doesn't like [true] as input .
INFO: Running invalid instruction: [windowenable "goodwindow {true}]
PASS: error code is 7 , as expected.
INFO: error text is windowenable doesn't like {true} as input .
INFO: Running invalid instruction: [(windowdelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to windowdelete .
INFO: Running invalid instruction: [(windowdelete "goodwindow "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(dialogcreate "main "name [caption] 0 0 120 400)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to dialogcreate .
INFO: Running invalid instruction: [(dialogcreate "main "name [caption] 0 0 120 400 [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [dialogcreate "main "name10 [caption] [0] 0 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like [0] as input .
INFO: Running invalid instruction: [dialogcreate "main "name20 [caption] {0} 0 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like {0} as input .
INFO: Running invalid instruction: [dialogcreate "main "name25 [caption] 10.5 0 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [dialogcreate "main "name30 [caption] 0 [0] 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like [0] as input .
INFO: Running invalid instruction: [dialogcreate "main "name40 [caption] 0 {0} 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like {0} as input .
INFO: Running invalid instruction: [dialogcreate "main "name45 [caption] 0 10.5 120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [dialogcreate "main "name50 [caption] 0 0 [120] 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like [120] as input .
INFO: Running invalid instruction: [dialogcreate "main "name60 [caption] 0 0 {120} 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like {120} as input .
INFO: Running invalid instruction: [dialogcreate "main "name70 [caption] 0 0 -120 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like -120 as input .
INFO: Running invalid instruction: [dialogcreate "main "name75 [caption] 0 0 10.5 400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [dialogcreate "main "name80 [caption] 0 0 120 [400] []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like [400] as input .
INFO: Running invalid instruction: [dialogcreate "main "name90 [caption] 0 0 120 {400} []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like {400} as input .
INFO: Running invalid instruction: [dialogcreate "main "name00 [caption] 0 0 120 -400 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like -400 as input .
INFO: Running invalid instruction: [dialogcreate "main "name05 [caption] 0 0 120 400.5 []]
PASS: error code is 7 , as expected.
INFO: error text is dialogcreate doesn't like 400.5 as input .
CALL: dialogcreate "main "gooddialog [caption] 0 0 100 100 [WINDOWSTEST.DIALOG.BADINPUT.FROMCALLBACK]
CALL: listboxcreate "main "notadialog 0 100 100 100
INFO: Running invalid instruction: [dialogcreate "main "gooddialog [newcaption] 0 0 100 100 []]
PASS: error code is 1001 , as expected.
PASS: error text is gooddialog already exists , as expected.
INFO: Running invalid instruction: [(dialogenable "gooddialog)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to dialogenable .
INFO: Running invalid instruction: [(dialogenable "gooddialog LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [dialogenable "nonexistent LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is nonexistent does not exist , as expected.
INFO: Running invalid instruction: [dialogenable "notadialog LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is notadialog does not exist , as expected.
INFO: Running invalid instruction: [dialogenable "gooddialog 1]
PASS: error code is 7 , as expected.
INFO: error text is dialogenable doesn't like 1 as input .
INFO: Running invalid instruction: [dialogenable "gooddialog [true]]
PASS: error code is 7 , as expected.
INFO: error text is dialogenable doesn't like [true] as input .
INFO: Running invalid instruction: [dialogenable "gooddialog {true}]
PASS: error code is 7 , as expected.
INFO: error text is dialogenable doesn't like {true} as input .
INFO: Running invalid instruction: [(dialogdelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to dialogdelete .
INFO: Running invalid instruction: [(dialogdelete "gooddialog "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [dialogdelete "nonexistent]
PASS: error code is 1002 , as expected.
PASS: error text is nonexistent does not exist , as expected.
INFO: Running invalid instruction: [dialogdelete "notadialog]
PASS: error code is 1002 , as expected.
PASS: error text is notadialog does not exist , as expected.
CALL: dialogdelete "gooddialog
CALL: listboxdelete "notadialog
CALL: WINDOWCREATE "main "windowstest.static "mytitle 0 0 100 100 []
CALL: STATICCREATE "windowstest.static "static [Initial Value] 0 0 100 20
CALL: STATICCREATE "static "static2 [Initial Value] 0 0 100 20
CALL: STATICUPDATE "static [New Value]
CALL: STATICDELETE "static
CALL: STATICDELETE "static2
CALL: WINDOWDELETE "windowtest.static
INFO: Running invalid instruction: [(staticcreate "main "name [caption] 0 0 120)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to staticcreate .
INFO: Running invalid instruction: [(staticcreate "main "name [caption] 0 0 120 400 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [staticcreate "main "name10 [caption] [0] 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like [0] as input .
INFO: Running invalid instruction: [staticcreate "main "name20 [caption] {0} 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like {0} as input .
INFO: Running invalid instruction: [staticcreate "main "name25 [caption] 10.5 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [staticcreate "main "name30 [caption] 0 [0] 120 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like [0] as input .
INFO: Running invalid instruction: [staticcreate "main "name40 [caption] 0 {0} 120 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like {0} as input .
INFO: Running invalid instruction: [staticcreate "main "name45 [caption] 0 10.5 120 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [staticcreate "main "name50 [caption] 0 0 [120] 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like [120] as input .
INFO: Running invalid instruction: [staticcreate "main "name60 [caption] 0 0 {120} 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like {120} as input .
INFO: Running invalid instruction: [staticcreate "main "name70 [caption] 0 0 -120 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like -120 as input .
INFO: Running invalid instruction: [staticcreate "main "name75 [caption] 0 0 10.5 400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [staticcreate "main "name80 [caption] 0 0 120 [400]]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like [400] as input .
INFO: Running invalid instruction: [staticcreate "main "name90 [caption] 0 0 120 {400}]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like {400} as input .
INFO: Running invalid instruction: [staticcreate "main "name00 [caption] 0 0 120 -400]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like -400 as input .
INFO: Running invalid instruction: [staticcreate "main "name05 [caption] 0 0 120 10.5]
PASS: error code is 7 , as expected.
INFO: error text is staticcreate doesn't like 10.5 as input .
CALL: staticcreate "main "goodstatic [newcaption] 0 0 100 100
INFO: Running invalid instruction: [staticcreate "main "goodstatic [newcaption] 0 0 100 100]
PASS: error code is 1001 , as expected.
PASS: error text is goodstatic already exists , as expected.
CALL: listboxcreate "main "notastatic 0 100 100 100
INFO: Running invalid instruction: [(staticupdate "goodstatic)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to staticupdate .
INFO: Running invalid instruction: [(staticupdate "goodstatic "newtext "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [staticupdate "nonexistent "newtext]
PASS: error code is 1002 , as expected.
PASS: error text is nonexistent does not exist , as expected.
INFO: Running invalid instruction: [staticupdate "notastatic "newtext]
PASS: error code is 1002 , as expected.
PASS: error text is notastatic does not exist , as expected.
INFO: Running invalid instruction: [(staticdelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to staticdelete .
INFO: Running invalid instruction: [(staticdelete "goodstatic "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [staticdelete "nonexistent]
PASS: error code is 1002 , as expected.
PASS: error text is nonexistent does not exist , as expected.
INFO: Running invalid instruction: [staticdelete "notastatic]
PASS: error code is 1002 , as expected.
PASS: error text is notastatic does not exist , as expected.
CALL: staticdelete "goodstatic
CALL: listboxdelete "notastatic
CALL: WINDOWCREATE "main "windowstest.listbox "mytitle 0 0 100 100 []
CALL: LISTBOXCREATE "windowstest.listbox "testlist 5 5 90 90
PASS: [LISTBOXGETSELECT "testlist] output [] , as expected.
CALL: LISTBOXADDSTRING "testlist "firststring
PASS: [LISTBOXGETSELECT "testlist] output [firststring] , as expected.
CALL: LISTBOXDELETESTRING "testlist 0
CALL: LISTBOXDELETESTRING "testlist 100
CALL: LISTBOXADDSTRING "testlist [secondstring]
PASS: [LISTBOXGETSELECT "testlist] output [secondstring] , as expected.
CALL: LISTBOXENABLE "testlist "false
CALL: LISTBOXENABLE "testlist "false
CALL: LISTBOXENABLE "testlist "true
INFO: Running invalid instruction: [(listboxcreate "main "name 0 0 120)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to listboxcreate .
INFO: Running invalid instruction: [(listboxcreate "main "name 0 0 120 400 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [listboxcreate "main "name10 [0] 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like [0] as input .
INFO: Running invalid instruction: [listboxcreate "main "name20 {0} 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like {0} as input .
INFO: Running invalid instruction: [listboxcreate "main "name25 10.5 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [listboxcreate "main "name30 0 [0] 120 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like [0] as input .
INFO: Running invalid instruction: [listboxcreate "main "name40 0 {0} 120 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like {0} as input .
INFO: Running invalid instruction: [listboxcreate "main "name45 0 10.5 120 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [listboxcreate "main "name50 0 0 [120] 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like [120] as input .
INFO: Running invalid instruction: [listboxcreate "main "name60 0 0 {120} 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like {120} as input .
INFO: Running invalid instruction: [listboxcreate "main "name70 0 0 -120 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like -120 as input .
INFO: Running invalid instruction: [listboxcreate "main "name75 0 0 10.5 400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [listboxcreate "main "name80 0 0 120 [400]]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like [400] as input .
INFO: Running invalid instruction: [listboxcreate "main "name90 0 0 120 {400}]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like {400} as input .
INFO: Running invalid instruction: [listboxcreate "main "name00 0 0 120 -400]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like -400 as input .
INFO: Running invalid instruction: [listboxcreate "main "name05 0 0 120 10.5]
PASS: error code is 7 , as expected.
INFO: error text is listboxcreate doesn't like 10.5 as input .
CALL: listboxcreate "main "goodlistbox 0 0 100 100
INFO: Running invalid instruction: [listboxcreate "main "goodlistbox 0 0 100 100]
PASS: error code is 1001 , as expected.
PASS: error text is goodlistbox already exists , as expected.
CALL: staticcreate "main "notalistbox [text] 0 100 100 100
INFO: Running invalid instruction: [(listboxenable "goodlistbox)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to listboxenable .
INFO: Running invalid instruction: [(listboxenable "goodlistbox LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [listboxenable "doesnotexist LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [listboxenable "notalistbox LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is notalistbox does not exist , as expected.
INFO: Running invalid instruction: [listboxenable "goodlistbox 1]
PASS: error code is 7 , as expected.
INFO: error text is listboxenable doesn't like 1 as input .
INFO: Running invalid instruction: [listboxenable "goodlistbox [true]]
PASS: error code is 7 , as expected.
INFO: error text is listboxenable doesn't like [true] as input .
INFO: Running invalid instruction: [listboxenable "goodlistbox {true}]
PASS: error code is 7 , as expected.
INFO: error text is listboxenable doesn't like {true} as input .
INFO: Running invalid instruction: [(listboxaddstring)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to listboxaddstring .
INFO: Running invalid instruction: [(listboxaddstring "goodlistbox "item "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [listboxaddstring "nonexistent "item]
PASS: error code is 1002 , as expected.
PASS: error text is nonexistent does not exist , as expected.
INFO: Running invalid instruction: [listboxaddstring "notalistbox "item]
PASS: error code is 1002 , as expected.
PASS: error text is notalistbox does not exist , as expected.
INFO: Running invalid instruction: [(listboxdeletestring "goodlistbox)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to listboxdeletestring .
INFO: Running invalid instruction: [(listboxdeletestring "goodlistbox 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: listboxaddstring "goodlistbox [selection]
INFO: Running invalid instruction: [listboxdeletestring "doesnotexist 0]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [listboxdeletestring "notalistbox 0]
PASS: error code is 1002 , as expected.
PASS: error text is notalistbox does not exist , as expected.
INFO: Running invalid instruction: [listboxdeletestring "goodlistbox -1]
PASS: error code is 7 , as expected.
INFO: error text is listboxdeletestring doesn't like -1 as input .
INFO: Running invalid instruction: [listboxdeletestring "goodlistbox 10.5]
PASS: error code is 7 , as expected.
INFO: error text is listboxdeletestring doesn't like 10.5 as input .
INFO: Running invalid instruction: [listboxdeletestring "goodlistbox [0]]
PASS: error code is 7 , as expected.
INFO: error text is listboxdeletestring doesn't like [0] as input .
INFO: Running invalid instruction: [listboxdeletestring "goodlistbox {0}]
PASS: error code is 7 , as expected.
INFO: error text is listboxdeletestring doesn't like {0} as input .
INFO: Running invalid instruction: [listboxdeletestring "goodlistbox "zero]
PASS: error code is 7 , as expected.
INFO: error text is listboxdeletestring doesn't like zero as input .
PASS: [listboxgetselect "goodlistbox] output [selection] , as expected.
INFO: Running invalid instruction: [(listboxgetselect)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to listboxgetselect .
INFO: Running invalid instruction: [(listboxgetselect "goodlistbox "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ignore listboxgetselect "doesnotexist]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [ignore listboxgetselect "notalistbox]
PASS: error code is 1002 , as expected.
PASS: error text is notalistbox does not exist , as expected.
INFO: Running invalid instruction: [(listboxdelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to listboxdelete .
INFO: Running invalid instruction: [(listboxdelete "goodlistbox "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [listboxdelete "notalistbox]
PASS: error code is 1002 , as expected.
PASS: error text is notalistbox does not exist , as expected.
INFO: Running invalid instruction: [listboxdelete "doesnotexist]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
CALL: listboxdelete "goodlistbox
CALL: staticdelete "notalistbox
CALL: WINDOWCREATE "main "windowstest.combobox "mytitle 0 0 100 100 []
CALL: COMBOBOXCREATE "windowstest.combobox "combobox 5 5 90 90
PASS: [COMBOBOXGETTEXT "combobox] output [] , as expected.
CALL: COMBOBOXADDSTRING "combobox "firststring
PASS: [COMBOBOXGETTEXT "combobox] output [firststring] , as expected.
CALL: COMBOBOXDELETESTRING "combobox 0
PASS: [COMBOBOXGETTEXT "combobox] output [] , as expected.
CALL: COMBOBOXDELETESTRING "combobox 100
CALL: COMBOBOXADDSTRING "combobox [secondstring]
PASS: [COMBOBOXGETTEXT "combobox] output [secondstring] , as expected.
CALL: COMBOBOXSETTEXT "combobox "text
PASS: [COMBOBOXGETTEXT "combobox] output [text] , as expected.
CALL: COMBOBOXENABLE "combobox "false
CALL: COMBOBOXENABLE "combobox "false
CALL: COMBOBOXENABLE "combobox "true
CALL: COMBOBOXDELETE "combobox
CALL: WINDOWDELETE "windowstest.combocombobox
INFO: Running invalid instruction: [(comboboxcreate "main "name 0 0 120)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to comboboxcreate .
INFO: Running invalid instruction: [(comboboxcreate "main "name 0 0 120 400 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [comboboxcreate "main "name10 [0] 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like [0] as input .
INFO: Running invalid instruction: [comboboxcreate "main "name20 {0} 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like {0} as input .
INFO: Running invalid instruction: [comboboxcreate "main "name25 10.5 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [comboboxcreate "main "name30 0 [0] 120 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like [0] as input .
INFO: Running invalid instruction: [comboboxcreate "main "name40 0 {0} 120 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like {0} as input .
INFO: Running invalid instruction: [comboboxcreate "main "name45 0 10.5 120 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [comboboxcreate "main "name50 0 0 [120] 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like [120] as input .
INFO: Running invalid instruction: [comboboxcreate "main "name60 0 0 {120} 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like {120} as input .
INFO: Running invalid instruction: [comboboxcreate "main "name70 0 0 -120 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like -120 as input .
INFO: Running invalid instruction: [comboboxcreate "main "name75 0 0 10.5 400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [comboboxcreate "main "name80 0 0 120 [400]]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like [400] as input .
INFO: Running invalid instruction: [comboboxcreate "main "name90 0 0 120 {400}]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like {400} as input .
INFO: Running invalid instruction: [comboboxcreate "main "name00 0 0 120 -400]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like -400 as input .
INFO: Running invalid instruction: [comboboxcreate "main "name05 0 0 120 10.5]
PASS: error code is 7 , as expected.
INFO: error text is comboboxcreate doesn't like 10.5 as input .
CALL: comboboxcreate "main "goodcombobox 0 0 100 100
INFO: Running invalid instruction: [comboboxcreate "main "goodcombobox 0 0 100 100]
PASS: error code is 1001 , as expected.
PASS: error text is goodcombobox already exists , as expected.
CALL: staticcreate "main "notacombobox [text] 0 100 100 100
INFO: Running invalid instruction: [(comboboxenable "goodcombobox)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to comboboxenable .
INFO: Running invalid instruction: [(comboboxenable "goodcombobox LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [comboboxenable "doesnotexist LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [comboboxenable "notacombobox LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is notacombobox does not exist , as expected.
INFO: Running invalid instruction: [comboboxenable "goodcombobox 1]
PASS: error code is 7 , as expected.
INFO: error text is comboboxenable doesn't like 1 as input .
INFO: Running invalid instruction: [comboboxenable "goodcombobox [true]]
PASS: error code is 7 , as expected.
INFO: error text is comboboxenable doesn't like [true] as input .
INFO: Running invalid instruction: [comboboxenable "goodcombobox {true}]
PASS: error code is 7 , as expected.
INFO: error text is comboboxenable doesn't like {true} as input .
INFO: Running invalid instruction: [(comboboxaddstring)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to comboboxaddstring .
INFO: Running invalid instruction: [(comboboxaddstring "goodcombobox "item "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [comboboxaddstring "nonexistent "item]
PASS: error code is 1002 , as expected.
PASS: error text is nonexistent does not exist , as expected.
INFO: Running invalid instruction: [comboboxaddstring "notacombobox "item]
PASS: error code is 1002 , as expected.
PASS: error text is notacombobox does not exist , as expected.
INFO: Running invalid instruction: [(comboboxdeletestring "goodcombobox)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to comboboxdeletestring .
INFO: Running invalid instruction: [(comboboxdeletestring "goodcombobox 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [comboboxdeletestring "doesnotexist 0]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [comboboxdeletestring "notacombobox 0]
PASS: error code is 1002 , as expected.
PASS: error text is notacombobox does not exist , as expected.
INFO: Running invalid instruction: [comboboxdeletestring "goodcombobox -1]
PASS: error code is 7 , as expected.
INFO: error text is comboboxdeletestring doesn't like -1 as input .
INFO: Running invalid instruction: [comboboxdeletestring "goodcombobox 10.5]
PASS: error code is 7 , as expected.
INFO: error text is comboboxdeletestring doesn't like 10.5 as input .
INFO: Running invalid instruction: [comboboxdeletestring "goodcombobox [0]]
PASS: error code is 7 , as expected.
INFO: error text is comboboxdeletestring doesn't like [0] as input .
INFO: Running invalid instruction: [comboboxdeletestring "goodcombobox {0}]
PASS: error code is 7 , as expected.
INFO: error text is comboboxdeletestring doesn't like {0} as input .
INFO: Running invalid instruction: [comboboxdeletestring "goodcombobox "zero]
PASS: error code is 7 , as expected.
INFO: error text is comboboxdeletestring doesn't like zero as input .
INFO: Running invalid instruction: [(comboboxgettext)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to comboboxgettext .
INFO: Running invalid instruction: [(comboboxgettext "goodcombobox "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ignore comboboxgettext "doesnotexist]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [ignore comboboxgettext "notacombobox]
PASS: error code is 1002 , as expected.
PASS: error text is notacombobox does not exist , as expected.
INFO: Running invalid instruction: [(comboboxsettext "goodcombobox)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to comboboxsettext .
INFO: Running invalid instruction: [(comboboxsettext "goodcombobox "text "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [comboboxsettext "doesnotexist "text]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [comboboxsettext "notacombobox "text]
PASS: error code is 1002 , as expected.
PASS: error text is notacombobox does not exist , as expected.
INFO: Running invalid instruction: [(comboboxdelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to comboboxdelete .
INFO: Running invalid instruction: [(comboboxdelete "goodcombobox "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [comboboxdelete "notacombobox]
PASS: error code is 1002 , as expected.
PASS: error text is notacombobox does not exist , as expected.
INFO: Running invalid instruction: [comboboxdelete "doesnotexist]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
CALL: comboboxdelete "goodcombobox
CALL: staticdelete "notacombobox
INFO: Running invalid instruction: [(groupboxcreate "main "name 0 0 120)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to groupboxcreate .
INFO: Running invalid instruction: [(groupboxcreate "main "name 0 0 120 400 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [groupboxcreate "main "name10 [0] 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like [0] as input .
INFO: Running invalid instruction: [groupboxcreate "main "name20 {0} 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like {0} as input .
INFO: Running invalid instruction: [groupboxcreate "main "name25 10.5 0 120 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [groupboxcreate "main "name30 0 [0] 120 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like [0] as input .
INFO: Running invalid instruction: [groupboxcreate "main "name40 0 {0} 120 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like {0} as input .
INFO: Running invalid instruction: [groupboxcreate "main "name45 0 10.5 120 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [groupboxcreate "main "name50 0 0 [120] 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like [120] as input .
INFO: Running invalid instruction: [groupboxcreate "main "name60 0 0 {120} 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like {120} as input .
INFO: Running invalid instruction: [groupboxcreate "main "name70 0 0 -120 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like -120 as input .
INFO: Running invalid instruction: [groupboxcreate "main "name75 0 0 10.5 400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [groupboxcreate "main "name80 0 0 120 [400]]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like [400] as input .
INFO: Running invalid instruction: [groupboxcreate "main "name90 0 0 120 {400}]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like {400} as input .
INFO: Running invalid instruction: [groupboxcreate "main "name00 0 0 120 -400]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like -400 as input .
INFO: Running invalid instruction: [groupboxcreate "main "name05 0 0 120 10.5]
PASS: error code is 7 , as expected.
INFO: error text is groupboxcreate doesn't like 10.5 as input .
CALL: groupboxcreate "main "goodgroupbox 0 0 100 100
INFO: Running invalid instruction: [groupboxcreate "main "goodgroupbox 0 0 100 100]
PASS: error code is 1001 , as expected.
PASS: error text is goodgroupbox already exists , as expected.
CALL: listboxcreate "main "notagroupbox 0 100 100 100
INFO: Running invalid instruction: [(groupboxdelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to groupboxdelete .
INFO: Running invalid instruction: [(groupboxdelete "groupbox "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [groupboxdelete "notagroupbox]
PASS: error code is 1002 , as expected.
PASS: error text is notagroupbox does not exist , as expected.
INFO: Running invalid instruction: [groupboxdelete "doesnotexist]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
CALL: listboxdelete "notagroupbox
CALL: groupboxdelete "goodgroupbox
PASS: [RADIOBUTTONGET "radio1] output true , as expected.
PASS: [RADIOBUTTONGET "radio2] output false , as expected.
CALL: RADIOBUTTONSET "radio1 "false
PASS: [RADIOBUTTONGET "radio1] output false , as expected.
CALL: RADIOBUTTONSET "radio2 "true
PASS: [RADIOBUTTONGET "radio2] output true , as expected.
CALL: RADIOBUTTONENABLE "radio1 "false
CALL: RADIOBUTTONENABLE "radio1 "false
CALL: RADIOBUTTONENABLE "radio1 "true
CALL: RADIOBUTTONDELETE "radio1
CALL: RADIOBUTTONDELETE "radio2
CALL: GROUPBOXCREATE "main "groupbox 10 5 80 60
INFO: Running invalid instruction: [(radiobuttoncreate "main "groupbox "name "label 0 0 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to radiobuttoncreate .
INFO: Running invalid instruction: [(radiobuttoncreate "main "groupbox "name "label 0 0 10 80 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [radiobuttoncreate "main "notfound "name "label 10 10 80 20]
PASS: error code is 1002 , as expected.
PASS: error text is notfound does not exist , as expected.
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name10 "label [10] 10 80 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like [10] as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name20 "label {10} 10 80 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like {10} as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name25 "label 10.5 10 80 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name30 "label 10 [10] 80 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like [10] as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name40 "label 10 {10} 80 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like {10} as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name45 "label 10 10.5 80 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name50 "label 10 10 [80] 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like [80] as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name60 "label 10 10 {80} 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like {80} as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name70 "label 10 10 -80 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like -80 as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name75 "label 10 10 8.5 20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like 8.5 as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name80 "label 10 10 80 [20]]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like [20] as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name90 "label 10 10 80 {20}]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like {20} as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name00 "label 10 10 80 -20]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like -20 as input .
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "name05 "label 10 10 80 20.5]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttoncreate doesn't like 20.5 as input .
CALL: radiobuttoncreate "main "groupbox "goodradiobutton "label 10 10 80 20
INFO: Running invalid instruction: [radiobuttoncreate "main "groupbox "goodradiobutton "label 10 10 80 20]
PASS: error code is 1001 , as expected.
PASS: error text is goodradiobutton already exists , as expected.
CALL: staticcreate "main "notaradiobutton [text] 0 100 100 100
INFO: Running invalid instruction: [(radiobuttonenable "goodradiobutton)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to radiobuttonenable .
INFO: Running invalid instruction: [(radiobuttonenable "goodradiobutton LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [radiobuttonenable "doesnotexist LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [radiobuttonenable "notaradiobutton LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is notaradiobutton does not exist , as expected.
INFO: Running invalid instruction: [radiobuttonenable "goodradiobutton 1]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttonenable doesn't like 1 as input .
INFO: Running invalid instruction: [radiobuttonenable "goodradiobutton [true]]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttonenable doesn't like [true] as input .
INFO: Running invalid instruction: [radiobuttonenable "goodradiobutton {true}]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttonenable doesn't like {true} as input .
INFO: Running invalid instruction: [(radiobuttonget)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to radiobuttonget .
INFO: Running invalid instruction: [(radiobuttonget "goodradiobutton "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [radiobuttonget "doesnotexist "item]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [radiobuttonget "notaradiobutton "item]
PASS: error code is 1002 , as expected.
PASS: error text is notaradiobutton does not exist , as expected.
CALL: radiobuttonset "goodradiobutton "false
INFO: Running invalid instruction: [(radiobuttonset "goodradiobutton)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to radiobuttonset .
INFO: Running invalid instruction: [(radiobuttonset "goodradiobutton LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [radiobuttonset "doesnotexist LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [radiobuttonset "notaradiobutton LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is notaradiobutton does not exist , as expected.
INFO: Running invalid instruction: [radiobuttonset "goodradiobutton 1]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttonset doesn't like 1 as input .
INFO: Running invalid instruction: [radiobuttonset "goodradiobutton [true]]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttonset doesn't like [true] as input .
INFO: Running invalid instruction: [radiobuttonset "goodradiobutton {true}]
PASS: error code is 7 , as expected.
INFO: error text is radiobuttonset doesn't like {true} as input .
PASS: [radiobuttonget "goodradiobutton] output false , as expected.
INFO: Running invalid instruction: [(radiobuttondelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to radiobuttondelete .
INFO: Running invalid instruction: [(radiobuttondelete "goodradiobutton "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [radiobuttondelete "notaradiobutton]
PASS: error code is 1002 , as expected.
PASS: error text is notaradiobutton does not exist , as expected.
INFO: Running invalid instruction: [radiobuttondelete "doesnotexist]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
CALL: radiobuttondelete "goodradiobutton
CALL: groupboxdelete "groupbox
CALL: staticdelete "notaradiobutton
CALL: WINDOWCREATE "main "windowstest.radiobutton "mytitle 0 0 100 100 []
CALL: GROUPBOXCREATE "windowstest.radiobutton "groupbox 10 5 80 60
CALL: RADIOBUTTONCREATE "windowstest.radiobutton "groupbox "radio [Radio] 20 15 60 20
CALL: GROUPBOXDELETE "groupbox
CALL: RADIOBUTTONSET "radio "false
PASS: [RADIOBUTTONGET "radio] output false , as expected.
CALL: RADIOBUTTONENABLE "radio "false
CALL: RADIOBUTTONENABLE "radio "false
CALL: RADIOBUTTONENABLE "radio "true
CALL: RADIOBUTTONDELETE "radio
CALL: WINDOWDELETE "windowstest.radiobutton
CALL: CHECKBOXSET "checkbox1 "true
CALL: CHECKBOXSET "checkbox2 "false
PASS: [CHECKBOXGET "checkbox1] output true , as expected.
PASS: [CHECKBOXGET "checkbox2] output false , as expected.
CALL: CHECKBOXSET "checkbox1 "false
PASS: [CHECKBOXGET "checkbox1] output false , as expected.
PASS: [CHECKBOXGET "checkbox2] output false , as expected.
CALL: CHECKBOXENABLE "checkbox1 "false
CALL: CHECKBOXENABLE "checkbox1 "false
CALL: CHECKBOXENABLE "checkbox1 "true
CALL: CHECKBOXDELETE "checkbox1
CALL: CHECKBOXDELETE "checkbox2
CALL: GROUPBOXCREATE "main "groupbox 10 5 80 60
INFO: Running invalid instruction: [(checkboxcreate "main "groupbox "name "label 0 0 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to checkboxcreate .
INFO: Running invalid instruction: [(checkboxcreate "main "groupbox "name "label 0 0 10 80 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [checkboxcreate "main "notfound "name01 "label 10 10 80 20]
PASS: error code is 1002 , as expected.
PASS: error text is notfound does not exist , as expected.
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name10 "label [10] 10 80 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like [10] as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name20 "label {10} 10 80 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like {10} as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name25 "label 10.5 10 80 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name30 "label 10 [10] 80 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like [10] as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name40 "label 10 {10} 80 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like {10} as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name45 "label 10 10.5 80 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name50 "label 10 10 [80] 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like [80] as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name60 "label 10 10 {80} 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like {80} as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name70 "label 10 10 -80 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like -80 as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name75 "label 10 10 8.5 20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like 8.5 as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name80 "label 10 10 80 [20]]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like [20] as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name90 "label 10 10 80 {20}]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like {20} as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name00 "label 10 10 80 -20]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like -20 as input .
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "name05 "label 10 10 80 20.5]
PASS: error code is 7 , as expected.
INFO: error text is checkboxcreate doesn't like 20.5 as input .
CALL: checkboxcreate "main "groupbox "goodcheckbox "label 10 10 80 20
INFO: Running invalid instruction: [checkboxcreate "main "groupbox "goodcheckbox "label 10 10 80 20]
PASS: error code is 1001 , as expected.
PASS: error text is goodcheckbox already exists , as expected.
CALL: staticcreate "main "notacheckbox [text] 0 100 100 100
INFO: Running invalid instruction: [(checkboxenable "goodcheckbox)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to checkboxenable .
INFO: Running invalid instruction: [(checkboxenable "goodcheckbox LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [checkboxenable "doesnotexist LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [checkboxenable "notacheckbox LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is notacheckbox does not exist , as expected.
INFO: Running invalid instruction: [checkboxenable "goodcheckbox 1]
PASS: error code is 7 , as expected.
INFO: error text is checkboxenable doesn't like 1 as input .
INFO: Running invalid instruction: [checkboxenable "goodcheckbox [true]]
PASS: error code is 7 , as expected.
INFO: error text is checkboxenable doesn't like [true] as input .
INFO: Running invalid instruction: [checkboxenable "goodcheckbox {true}]
PASS: error code is 7 , as expected.
INFO: error text is checkboxenable doesn't like {true} as input .
INFO: Running invalid instruction: [(checkboxget)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to checkboxget .
INFO: Running invalid instruction: [(checkboxget "goodcheckbox "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [checkboxget "doesnotexist "item]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [checkboxget "notacheckbox "item]
PASS: error code is 1002 , as expected.
PASS: error text is notacheckbox does not exist , as expected.
INFO: Running invalid instruction: [(checkboxset "goodcheckbox)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to checkboxset .
INFO: Running invalid instruction: [(checkboxset "goodcheckbox LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: checkboxset "goodcheckbox "false
INFO: Running invalid instruction: [checkboxset "doesnotexist LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [checkboxset "notacheckbox LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is notacheckbox does not exist , as expected.
INFO: Running invalid instruction: [checkboxset "goodcheckbox 1]
PASS: error code is 7 , as expected.
INFO: error text is checkboxset doesn't like 1 as input .
INFO: Running invalid instruction: [checkboxset "goodcheckbox [true]]
PASS: error code is 7 , as expected.
INFO: error text is checkboxset doesn't like [true] as input .
INFO: Running invalid instruction: [checkboxset "goodcheckbox {true}]
PASS: error code is 7 , as expected.
INFO: error text is checkboxset doesn't like {true} as input .
PASS: [checkboxget "goodcheckbox] output false , as expected.
INFO: Running invalid instruction: [(checkboxdelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to checkboxdelete .
INFO: Running invalid instruction: [(checkboxdelete "goodcheckbox "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [checkboxdelete "notacheckbox]
PASS: error code is 1002 , as expected.
PASS: error text is notacheckbox does not exist , as expected.
INFO: Running invalid instruction: [checkboxdelete "doesnotexist]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
CALL: checkboxdelete "goodcheckbox
CALL: groupboxdelete "groupbox
CALL: staticdelete "notacheckbox
CALL: WINDOWCREATE "main "windowstest.checkbox "mytitle 0 0 100 100 []
CALL: GROUPBOXCREATE "windowstest.checkbox "groupbox 10 5 80 60
CALL: CHECKBOXCREATE "windowstest.checkbox "groupbox "checkbox [Checkbox] 20 15 60 20
CALL: GROUPBOXDELETE "groupbox
CALL: CHECKBOXSET "checkbox "false
PASS: [CHECKBOXGET "checkbox] output false , as expected.
CALL: CHECKBOXENABLE "checkbox "false
CALL: CHECKBOXENABLE "checkbox "false
CALL: CHECKBOXENABLE "checkbox "true
CALL: CHECKBOXDELETE "checkbox
CALL: WINDOWDELETE "windowstest.checkbox
CALL: WINDOWCREATE "main "windowstest.scrollbar "mytitle 0 0 100 100 []
CALL: SCROLLBARCREATE "windowstest.scrollbar "horizontal 0 90 100 20 []
CALL: SCROLLBARCREATE "windowstest.scrollbar "vertical 90 0 20 100 []
PASS: [SCROLLBARGET "horizontal] output 0 , as expected.
CALL: SCROLLBARSET "horizontal 0 100 27
PASS: [SCROLLBARGET "horizontal] output 27 , as expected.
CALL: SCROLLBARSET "horizontal 0 100 91
PASS: [SCROLLBARGET "horizontal] output 91 , as expected.
CALL: SCROLLBARSET "horizontal -10 10 -10
PASS: [SCROLLBARGET "horizontal] output -10 , as expected.
CALL: SCROLLBARSET "horizontal -20 -10 -15
PASS: [SCROLLBARGET "horizontal] output -15 , as expected.
CALL: SCROLLBARSET "vertical 50 60 55
PASS: [SCROLLBARGET "vertical] output 55 , as expected.
PASS: [SCROLLBARGET "horizontal] output -15 , as expected.
CALL: SCROLLBARENABLE "horizontal "false
CALL: SCROLLBARENABLE "horizontal "false
CALL: SCROLLBARENABLE "horizontal "true
CALL: SCROLLBARDELETE "horizontal
CALL: SCROLLBARDELETE "vertical
CALL: WINDOWDELETE "windowstest.scrollbar
INFO: Running invalid instruction: [(scrollbarcreate "main "name 0 0 100 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to scrollbarcreate .
INFO: Running invalid instruction: [(scrollbarcreate "main "name 0 0 100 10 [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [scrollbarcreate "main "name10 [0] 0 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like [0] as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name20 {0} 0 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like {0} as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name25 10.5 0 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name30 0 [0] 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like [0] as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name40 0 {0} 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like {0} as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name45 0 10.5 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name50 0 0 [120] 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like [120] as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name60 0 0 {120} 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like {120} as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name70 0 0 -120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like -120 as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name75 0 0 10.5 10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name80 0 0 120 [10] []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like [10] as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name90 0 0 120 {10} []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like {10} as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name00 0 0 120 -10 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like -10 as input .
INFO: Running invalid instruction: [scrollbarcreate "main "name05 0 0 120 10.5 []]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarcreate doesn't like 10.5 as input .
CALL: scrollbarcreate "main "goodscrollbar 0 0 100 10 []
INFO: Running invalid instruction: [scrollbarcreate "main "goodscrollbar 0 0 100 10 []]
PASS: error code is 1001 , as expected.
PASS: error text is goodscrollbar already exists , as expected.
CALL: staticcreate "main "notascrollbar [text] 0 100 100 100
INFO: Running invalid instruction: [(scrollbarenable "goodscrollbar)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to scrollbarenable .
INFO: Running invalid instruction: [(scrollbarenable "goodscrollbar LOCALETRUE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [scrollbarenable "doesnotexist LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [scrollbarenable "notascrollbar LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is notascrollbar does not exist , as expected.
INFO: Running invalid instruction: [scrollbarenable "goodscrollbar 1]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarenable doesn't like 1 as input .
INFO: Running invalid instruction: [scrollbarenable "goodscrollbar [true]]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarenable doesn't like [true] as input .
INFO: Running invalid instruction: [scrollbarenable "goodscrollbar {true}]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarenable doesn't like {true} as input .
INFO: Running invalid instruction: [(scrollbarget)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to scrollbarget .
INFO: Running invalid instruction: [(scrollbarget "goodscrollbar "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [ignore scrollbarget "nonexistent]
PASS: error code is 1002 , as expected.
PASS: error text is nonexistent does not exist , as expected.
INFO: Running invalid instruction: [ignore scrollbarget "notascrollbar]
PASS: error code is 1002 , as expected.
PASS: error text is notascrollbar does not exist , as expected.
INFO: Running invalid instruction: [(scrollbarset "goodscrollbar 0 100)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to scrollbarset .
INFO: Running invalid instruction: [(scrollbarset "goodscrollbar 0 100 50 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [scrollbarset "doesnotexist 0 100 50]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [scrollbarset "notascrollbar 0 100 50]
PASS: error code is 1002 , as expected.
PASS: error text is notascrollbar does not exist , as expected.
CALL: scrollbarset "goodscrollbar 110 111 110
INFO: Running invalid instruction: [scrollbarset {not a string} [0] 10 5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like [0] as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar [0] 10 5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like [0] as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar {0} 10 5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like {0} as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar 0.5 10 5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like 0.5 as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar "zero 10 5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like zero as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar 0 [10] 5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like [10] as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar 0 {10} 5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like {10} as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar 0 10.5 5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like 10.5 as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar 0 "ten [5]]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like ten as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar 0 10 {5}]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like {5} as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar 0 10 5.5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like 5.5 as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar 0 10 "five]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like five as input .
INFO: Running invalid instruction: [scrollbarset "goodscrollbar 10 0 5]
PASS: error code is 7 , as expected.
INFO: error text is scrollbarset doesn't like 0 as input .
PASS: [scrollbarget "goodscrollbar] output 110 , as expected.
CALL: scrollbarset "goodscrollbar 1 0 2
FAIL: [scrollbarget "goodscrollbar] output 1 . We expected 2 .
INFO: Running invalid instruction: [(scrollbardelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to scrollbardelete .
INFO: Running invalid instruction: [(scrollbardelete "goodscrollbar "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [scrollbardelete "notascrollbar]
PASS: error code is 1002 , as expected.
PASS: error text is notascrollbar does not exist , as expected.
INFO: Running invalid instruction: [scrollbardelete "doesnotexist]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
CALL: staticdelete "notascrollbar
CALL: scrollbardelete "goodscrollbar
CALL: WINDOWCREATE "main "windowstest.button "mytitle 0 0 100 100 []
CALL: BUTTONCREATE "windowstest.button "button [initial text] 10 40 80 20 [make "value :value + 1]
CALL: UIAUTOMATION.SENDKEYTOWINDOW "mytitle "Button :VK_SPACE
PASS: [:value] output 1 , as expected.
CALL: BUTTONUPDATE "button [new text]
CALL: UIAUTOMATION.SENDFOCUSTOWINDOW "mytitle "Button
CALL: UIAUTOMATION.SENDBUTTONPUSHTOWINDOW "mytitle [new text]
PASS: [:value] output 2 , as expected.
CALL: BUTTONENABLE "button "false
CALL: BUTTONENABLE "button "false
CALL: BUTTONENABLE "button "true
CALL: BUTTONDELETE "button
CALL: WINDOWDELETE "windowstest.button
INFO: Running invalid instruction: [(buttoncreate "main "name "label 0 0 100 10)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to buttoncreate .
INFO: Running invalid instruction: [(buttoncreate "main "name "label 0 0 100 10 [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [buttoncreate "main "name10 "label [0] 0 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like [0] as input .
INFO: Running invalid instruction: [buttoncreate "main "name20 "label {0} 0 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like {0} as input .
INFO: Running invalid instruction: [buttoncreate "main "name25 "label 10.5 0 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [buttoncreate "main "name30 "label 0 [0] 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like [0] as input .
INFO: Running invalid instruction: [buttoncreate "main "name40 "label 0 {0} 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like {0} as input .
INFO: Running invalid instruction: [buttoncreate "main "name45 "label 0 10.5 120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [buttoncreate "main "name50 "label 0 0 [120] 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like [120] as input .
INFO: Running invalid instruction: [buttoncreate "main "name60 "label 0 0 {120} 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like {120} as input .
INFO: Running invalid instruction: [buttoncreate "main "name70 "label 0 0 -120 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like -120 as input .
INFO: Running invalid instruction: [buttoncreate "main "name75 "label 0 0 10.5 10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like 10.5 as input .
INFO: Running invalid instruction: [buttoncreate "main "name80 "label 0 0 120 [10] []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like [10] as input .
INFO: Running invalid instruction: [buttoncreate "main "name90 "label 0 0 120 {10} []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like {10} as input .
INFO: Running invalid instruction: [buttoncreate "main "name00 "label 0 0 120 -10 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like -10 as input .
INFO: Running invalid instruction: [buttoncreate "main "name05 "label 0 0 120 10.5 []]
PASS: error code is 7 , as expected.
INFO: error text is buttoncreate doesn't like 10.5 as input .
CALL: buttoncreate "main "goodbutton "label 0 0 100 10 []
INFO: Running invalid instruction: [buttoncreate "main "goodbutton "label 0 0 100 10 []]
PASS: error code is 1001 , as expected.
PASS: error text is goodbutton already exists , as expected.
CALL: staticcreate "main "notabutton [text] 0 100 100 100
INFO: Running invalid instruction: [(buttonenable "goodbutton)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to buttonenable .
INFO: Running invalid instruction: [(buttonenable "goodbutton "true "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [buttonenable "doesnotexist LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
INFO: Running invalid instruction: [buttonenable "notabutton LOCALETRUE]
PASS: error code is 1002 , as expected.
PASS: error text is notabutton does not exist , as expected.
INFO: Running invalid instruction: [buttonenable "goodbutton 1]
PASS: error code is 7 , as expected.
INFO: error text is buttonenable doesn't like 1 as input .
INFO: Running invalid instruction: [buttonenable "goodbutton [true]]
PASS: error code is 7 , as expected.
INFO: error text is buttonenable doesn't like [true] as input .
INFO: Running invalid instruction: [buttonenable "goodbutton {true}]
PASS: error code is 7 , as expected.
INFO: error text is buttonenable doesn't like {true} as input .
INFO: Running invalid instruction: [(buttonupdate "goodbutton)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to buttonupdate .
INFO: Running invalid instruction: [(buttonupdate "goodbutton "newlabel "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [buttonupdate "nonexistent "newlabel]
PASS: error code is 1002 , as expected.
PASS: error text is nonexistent does not exist , as expected.
INFO: Running invalid instruction: [buttonupdate "notabutton "newlabel]
PASS: error code is 1002 , as expected.
PASS: error text is notabutton does not exist , as expected.
INFO: Running invalid instruction: [(buttondelete)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to buttondelete .
INFO: Running invalid instruction: [(buttondelete "goodbutton "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [buttondelete "notabutton]
PASS: error code is 1002 , as expected.
PASS: error text is notabutton does not exist , as expected.
INFO: Running invalid instruction: [buttondelete "doesnotexist]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
CALL: staticdelete "notabutton
CALL: buttondelete "goodbutton
CALL: windowdelete "all
CALL: debugwindows
CALL: windowcreate "root "testwindow [window smoke test] 0 0 120 400 []
CALL: windowstest.setup "testwindow
CALL: debugwindows
CALL: windowdelete "testwindow
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: debugwindows
CALL: (debugwindows word 15 :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWCREATE "root "window "caption 0 0 120 400 []
INFO: Running invalid instruction: [(DEBUGWINDOWS "window "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(DEBUGWINDOWS "doesnotexist)]
PASS: error code is 1002 , as expected.
PASS: error text is doesnotexist does not exist , as expected.
CALL: WINDOWDELETE "window
PASS: The regression test for an inconsistent dialogthing list did not crash.
CALL: MOUSEOFF
CALL: MOUSEON [] [] [] [] []
CALL: MOUSEON " " " " "
CALL: MOUSEOFF
INFO: Running invalid instruction: [(MOUSEON [] [] [] [] )]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MOUSEON .
INFO: Running invalid instruction: [(MOUSEON [] [] [] [] [] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(MOUSEOFF "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(MOUSEPOS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
CALL: IGNORE MIDIOPEN
INFO: Running invalid instruction: [IGNORE MIDIOPEN]
PASS: error code is 1301 , as expected.
PASS: error text is MIDI Error: Already open , as expected.
CALL: MIDICLOSE
INFO: Running invalid instruction: [IGNORE (MIDIOPEN "badinput)]
PASS: error code is 7 , as expected.
INFO: error text is MIDIOPEN doesn't like badinput as input .
CALL: IGNORE MIDIOPEN
CALL: MIDICLOSE
INFO: Running invalid instruction: [IGNORE (MIDIOPEN [1 2 3] )]
PASS: error code is 7 , as expected.
INFO: error text is MIDIOPEN doesn't like [1 2 3] as input .
CALL: IGNORE MIDIOPEN
CALL: MIDICLOSE
INFO: Running invalid instruction: [IGNORE (MIDIOPEN {1 2 3} )]
PASS: error code is 7 , as expected.
INFO: error text is MIDIOPEN doesn't like {1 2 3} as input .
CALL: IGNORE MIDIOPEN
CALL: MIDICLOSE
INFO: Running invalid instruction: [IGNORE (MIDIOPEN 500)]
FAIL: error code is 1302 .  We expected 7 .
INFO: error text is MIDI Error: Invalid MIDI device .
CALL: IGNORE MIDIOPEN
CALL: MIDICLOSE
INFO: Running invalid instruction: [(MIDIOPEN 0 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(MIDICLOSE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [MIDICLOSE]
PASS: error code is 1303 , as expected.
PASS: error text is MIDI Error: Not open , as expected.
CALL: IGNORE MIDIOPEN
INFO: Running invalid instruction: [(MIDIMESSAGE)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to MIDIMESSAGE .
INFO: Running invalid instruction: [(MIDIMESSAGE [176 123 0] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [MIDIMESSAGE "176 123 0]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is MIDIMESSAGE doesn't like |176 123 0| as input .
INFO: Running invalid instruction: [MIDIMESSAGE {176 123 0}]
FAIL: error code is 4 .  We expected 7 .
INFO: error text is MIDIMESSAGE doesn't like {176 123 0} as input .
INFO: Running invalid instruction: [MIDIMESSAGE [176 123]]
FAIL: Running [MIDIMESSAGE [176 123]] did not throw an error.
INFO: Running invalid instruction: [MIDIMESSAGE [176 123 0 0]]
FAIL: Running [MIDIMESSAGE [176 123 0 0]] did not throw an error.
INFO: Running invalid instruction: [MIDIMESSAGE [176 onetwothree 0]]
PASS: error code is 7 , as expected.
INFO: error text is MIDIMESSAGE doesn't like onetwothree as input .
INFO: Running invalid instruction: [MIDIMESSAGE [176 [123] 0]]
PASS: error code is 7 , as expected.
INFO: error text is MIDIMESSAGE doesn't like [123] as input .
INFO: Running invalid instruction: [MIDIMESSAGE [176 {123} 0]]
PASS: error code is 7 , as expected.
INFO: error text is MIDIMESSAGE doesn't like {123} as input .
CALL: MIDICLOSE
INFO: Running invalid instruction: [(SOUND)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SOUND .
INFO: Running invalid instruction: [(SOUND [100 100] "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SOUND "string]
INFO: error code is 16 .
INFO: error text is Stopping... .
INFO: Running invalid instruction: [SOUND {100 100}]
INFO: error code is 16 .
INFO: error text is Stopping... .
INFO: Running invalid instruction: [SOUND [100]]
INFO: error code is 16 .
INFO: error text is Stopping... .
INFO: Running invalid instruction: [SOUND [100 100 100]]
INFO: error code is 16 .
INFO: error text is Stopping... .
INFO: Running invalid instruction: [SOUND []]
INFO: error code is 16 .
INFO: error text is Stopping... .
INFO: Running invalid instruction: [SOUND [100 string]]
INFO: error code is 7 .
INFO: error text is SOUND doesn't like string as input .
INFO: Running invalid instruction: [SOUND [100 [100]]]
INFO: error code is 7 .
INFO: error text is SOUND doesn't like [100] as input .
INFO: Running invalid instruction: [SOUND [100.5 100.0]]
INFO: error code is 7 .
INFO: error text is SOUND doesn't like 100.5 as input .
INFO: Running invalid instruction: [SOUND [100.0 100.5]]
INFO: error code is 7 .
INFO: error text is SOUND doesn't like 100.5 as input .
INFO: Running invalid instruction: [(TONE 100)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to TONE .
INFO: Running invalid instruction: [(TONE 100 100 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [TONE [100] 100]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like [100] as input .
INFO: Running invalid instruction: [TONE {100} 100]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like {100} as input .
INFO: Running invalid instruction: [TONE "ten 100]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like ten as input .
INFO: Running invalid instruction: [TONE 100.5 100]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like 100.5 as input .
INFO: Running invalid instruction: [TONE 1e20 100]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like 1e+20 as input .
INFO: Running invalid instruction: [TONE -1 100]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like -1 as input .
INFO: Running invalid instruction: [TONE 100 [100]]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like [100] as input .
INFO: Running invalid instruction: [TONE 100 {100}]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like {100} as input .
INFO: Running invalid instruction: [TONE 100 "ten]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like ten as input .
INFO: Running invalid instruction: [TONE 100 100.5]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like 100.5 as input .
INFO: Running invalid instruction: [TONE 100 1e20]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like 1e+20 as input .
INFO: Running invalid instruction: [TONE 100 -1]
PASS: error code is 7 , as expected.
INFO: error text is TONE doesn't like -1 as input .
CALL: WINDOWCREATE "main "mywindow "focuswindow 100 100 100 100 []
CALL: SETFOCUS "focuswindow
PASS: [(SHELL [fmslogo] "true)] output true , as expected.
PASS: [GETFOCUS] output FMSLogo , as expected.
CALL: WINDOWDELETE "mywindow
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -L commandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -L commandline createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -Lcommandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -l commandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -L     commandline createfile.lgo    ] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo commandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo "commandline createfile.lgo"] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo     commandline-createfile.lgo    ] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo     "commandline createfile.lgo"    ] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -w 200 -L commandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 200 , as expected.
PASS: [READWORD] output 1000 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -h 200 -L commandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 1000 , as expected.
PASS: [READWORD] output 200 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -H 200 -W 300 -L commandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 300 , as expected.
PASS: [READWORD] output 200 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -H200 -W300 -L commandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 300 , as expected.
PASS: [READWORD] output 200 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo    -w    200    -h    300 -L commandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 200 , as expected.
PASS: [READWORD] output 300 , as expected.
CALL: ERASEFILE "commandline-createfile.txt
PASS: [( SHELL [fmslogo -H 200 -W 300 commandline-createfile.lgo] "true )] output true , as expected.
PASS: [FILEEXISTS "commandline-createfile.txt] output true , as expected.
PASS: [READWORD] output 300 , as expected.
PASS: [READWORD] output 200 , as expected.
CALL: (NETSTARTUP 1)
CALL: IGNORE NETCONNECTON "localhost 9999 [] []
CALL: NETSHUTDOWN
CALL: NETSHUTDOWN
CALL: NETSTARTUP
PASS: [NETACCEPTON :localport [MAKE "onsendreadycounter :onsendreadycounter + 1] [QUEUE "server.data NETACCEPTRECEIVEVALUE]] output true , as expected.
CALL: WAIT 60 * 2
PASS: [SHELL [perl.exe sendtologo.pl LAPPY 1234]] output true , as expected.
CALL: WAIT 60 * 2
CALL: NETACCEPTOFF
CALL: NETSHUTDOWN
FAIL: [:onsendreadycounter] output 4 . We expected 3 .
PASS: [:server.data] output [[hello]] , as expected.
PASS: [NETACCEPTON :localport [] [QUEUE "server.data NETACCEPTRECEIVEVALUE]] output true , as expected.
PASS: [SHELL [perl.exe sendtologo.pl LAPPY 2222]] output true , as expected.
PASS: [SHELL [perl.exe sendtologo.pl LAPPY 2222]] output true , as expected.
FAIL: [:server.data] output [[hello]] . We expected [[Hello] [Hello]] .
CALL: NETSTARTUP
PASS: [NETACCEPTON 1234 [] []] output true , as expected.
CALL: NETSHUTDOWN
PASS: [SHELL [perl.exe networkserver.pl simple 5556]] output true , as expected.
CALL: WAIT 60
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME :remoteport [] [QUEUE "client.data NETCONNECTRECEIVEVALUE]] output true , as expected.
CALL: WAIT 60*2
CALL: NETCONNECTOFF
CALL: NETSHUTDOWN
PASS: [:client.data] output [[hello]] , as expected.
PASS: [SHELL [perl.exe networkserver.pl echo 5557]] output true , as expected.
CALL: WAIT 60
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME :remoteport [MAKE "onsendreadycounter :onsendreadycounter + 1] [QUEUE "client.data NETCONNECTRECEIVEVALUE]] output true , as expected.
CALL: WAIT 60*2
PASS: [NETCONNECTSENDVALUE "yodle] output true , as expected.
PASS: [NETCONNECTSENDVALUE "XXXXX] output false , as expected.
CALL: WAIT 60*2
CALL: NETCONNECTOFF
CALL: NETSHUTDOWN
PASS: [:onsendreadycounter] output 4 , as expected.
PASS: [:client.data] output [[yodle]] , as expected.
PASS: [SHELL [perl.exe networkserver.pl nonul 5555]] output true , as expected.
CALL: WAIT 60
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME :remoteport [] [QUEUE "client.data NETCONNECTRECEIVEVALUE]] output true , as expected.
CALL: WAIT 60*2
CALL: NETCONNECTOFF
CALL: NETSHUTDOWN
PASS: [:client.data] output [[Hello]] , as expected.
PASS: [SHELL [perl.exe networkserver.pl largepacket 5556]] output true , as expected.
CALL: WAIT 60
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME :remoteport [MAKE "onsendreadycounter :onsendreadycounter + 1] [QUEUE "client.data ITEM 1 NETCONNECTRECEIVEVALUE]] output true , as expected.
CALL: WAIT 60*2
CALL: NETCONNECTOFF
CALL: NETSHUTDOWN
FAIL: [:onsendreadycounter] output 4 . We expected 3 .
PASS: [APPLY "WORD :client.data] output  , as expected.
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME 4444 [] []] output true , as expected.
CALL: NETSHUTDOWN
CALL: SLOWDRAW 100
INFO: [FD 100] took 2013 ms to execute
PASS: [FD 100] ran in 2013 ms. Anywhere between 1666.66666666667 ms and 3333.33333333333 is acceptable.
INFO: [FORWARD 100] took 2663 ms to execute
PASS: [FORWARD 100] ran in 2663 ms. Anywhere between 1666.66666666667 ms and 3333.33333333333 is acceptable.
INFO: [BK 100] took 2003 ms to execute
PASS: [BK 100] ran in 2003 ms. Anywhere between 1666.66666666667 ms and 3333.33333333333 is acceptable.
INFO: [BACK 100] took 2033 ms to execute
PASS: [BACK 100] ran in 2033 ms. Anywhere between 1666.66666666667 ms and 3333.33333333333 is acceptable.
CALL: SLOWDRAW 200
INFO: [FD 100] took 4407 ms to execute
PASS: [FD 100] ran in 4407 ms. Anywhere between 3333.33333333333 ms and 6666.66666666667 is acceptable.
INFO: [FORWARD 100] took 4556 ms to execute
PASS: [FORWARD 100] ran in 4556 ms. Anywhere between 3333.33333333333 ms and 6666.66666666667 is acceptable.
INFO: [BK 100] took 5849 ms to execute
PASS: [BK 100] ran in 5849 ms. Anywhere between 3333.33333333333 ms and 6666.66666666667 is acceptable.
INFO: [BACK 100] took 4997 ms to execute
PASS: [BACK 100] ran in 4997 ms. Anywhere between 3333.33333333333 ms and 6666.66666666667 is acceptable.
CALL: SLOWDRAW 0
INFO: [FD 100] took 0 ms to execute
PASS: [FD 100] ran in 0 ms. Anywhere between 0 ms and 20 is acceptable.
INFO: [FORWARD 100] took 0 ms to execute
PASS: [FORWARD 100] ran in 0 ms. Anywhere between 0 ms and 20 is acceptable.
INFO: [BK 100] took 0 ms to execute
PASS: [BK 100] ran in 0 ms. Anywhere between 0 ms and 20 is acceptable.
INFO: [BACK 100] took 10 ms to execute
PASS: [BACK 100] ran in 10 ms. Anywhere between 0 ms and 20 is acceptable.
CALL: SLOWDRAW 100
INFO: Running invalid instruction: [:redefp]
PASS: error code is 11 , as expected.
INFO: error text is redefp has no value .
CALL: MAKE "redefp LOCALEFALSE
CALL: SLOWDRAW 100
PASS: [:redefp] output false , as expected.
CALL: MAKE "redefp LOCALETRUE
CALL: SLOWDRAW 100
PASS: [:redefp] output true , as expected.
PASS: SLOWDRAW buried all procedures that it defined.
CALL: SLOWDRAW 0
INFO: Running invalid instruction: [(SLOWDRAW)]
PASS: error code is 6 , as expected.
INFO: error text is not enough inputs to SLOWDRAW .
INFO: Running invalid instruction: [(SLOWDRAW 10 "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [SLOWDRAW -100]
INFO: error code is 4 .
INFO: error text is SLOWDRAW doesn't like -100 as input .
INFO: Running invalid instruction: [SLOWDRAW 100.5]
INFO: error code is 4 .
INFO: error text is SLOWDRAW doesn't like 100.5 as input .
INFO: Running invalid instruction: [SLOWDRAW [100]]
INFO: error code is 4 .
INFO: error text is SLOWDRAW doesn't like [100] as input .
INFO: Running invalid instruction: [SLOWDRAW {100}]
INFO: error code is 4 .
INFO: error text is SLOWDRAW doesn't like {100} as input .
CALL: SPLITSCREEN
CALL: PERSPECTIVE
CALL: PENPAINT
CALL: CS BK 100 LT 90 FD 50 LR 10 UP 20
CALL: SETPENSIZE [3 3] ST
CALL: SETPC [10 20 30] SETFC [40 50 60] SETSC [70 80 90]
CALL: PENREVERSE PENDOWN
CALL: STATUS
CALL: STATUS
PASS: The status window displayed the correct information.
CALL: (SETTURTLE 1 "true) FD 100 RT 90 FD 50 LR 10 DOWN 20
CALL: HT SETPENSIZE [6 6]
CALL: SETPC [1 2 3] SETFC [4 5 6] SETSC [7 8 9]
CALL: PENERASE PENUP
PASS: The status window displayed the correct information.
CALL: SETTURTLE 0
PASS: The status window displayed the correct information.
CALL: NOSTATUS
CALL: NOSTATUS
CALL: FULLSCREEN
CALL: STATUS
CALL: SPLITSCREEN
CALL: NOSTATUS
INFO: Running invalid instruction: [(STATUS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
INFO: Running invalid instruction: [(NOSTATUS "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
PASS: Resizing FMSLogo to be very small didn't cause an infinite loop.
INFO: Running invalid instruction: [(BYE "toomany)]
PASS: error code is 8 , as expected.
INFO: error text is too much inside ()'s .
