PASS: [-0] returned 0 , as expected.
PASS: [-0.0] returned 0 , as expected.
PASS: [.00] returned 0 , as expected.
PASS: [0e10] returned 0 , as expected.
PASS: [0e+10] returned 0 , as expected.
PASS: [0e-10] returned 0 , as expected.
PASS: [00012] returned 12 , as expected.
PASS: [1e3] returned 1000 , as expected.
PASS: [1.234e3] returned 1234 , as expected.
PASS: [1.234e+3] returned 1234 , as expected.
PASS: [1.23e-1] returned 0.123 , as expected.
PASS: [.5] returned 0.5 , as expected.
PASS: [-.5] returned -0.5 , as expected.
PASS: [0.50000] returned 0.5 , as expected.
PASS: [5000000000000000000000000000000000000000000000000] returned 5e+48 , as expected.
INFO: Executing invalid instruction: [1e1e]
PASS: Executing [1e1e] set error code to 13 , as expected
INFO: Executing [1e1e] set error string to [I don't know how to 1e1e]
INFO: Executing invalid instruction: [1e1.5]
PASS: Executing [1e1.5] set error code to 13 , as expected
INFO: Executing [1e1.5] set error string to [I don't know how to 1e1.5]
INFO: Executing invalid instruction: [1.1.]
PASS: Executing [1.1.] set error code to 13 , as expected
INFO: Executing [1.1.] set error string to [I don't know how to 1.1.]
INFO: Executing invalid instruction: [1..]
PASS: Executing [1..] set error code to 13 , as expected
INFO: Executing [1..] set error string to [I don't know how to 1..]
INFO: Executing invalid instruction: [.1.]
PASS: Executing [.1.] set error code to 13 , as expected
INFO: Executing [.1.] set error string to [I don't know how to .1.]
INFO: Executing invalid instruction: [50000000000000000000000000000000000000000000000000]
PASS: Executing [50000000000000000000000000000000000000000000000000] set error code to 13 , as expected
INFO: Executing [50000000000000000000000000000000000000000000000000] set error string to [I don't know how to 50000000000000000000000000000000000000000000000000]
PASS: ["WORD] returned WORD , as expected.
PASS: ["A B] returned A B , as expected.
PASS: [DIFFICULTCOMMENTS] returned 1 , as expected.
FAIL: [~IGNOREMEWASCALLED] returned true . We expected false
INFO: Executing invalid instruction: [5**5]
PASS: Executing [5**5] set error code to 6 , as expected
INFO: Executing [5**5] set error string to [not enough inputs to *]
INFO: Executing invalid instruction: [*5]
PASS: Executing [*5] set error code to 6 , as expected
INFO: Executing [*5] set error string to [not enough inputs to *]
INFO: Executing invalid instruction: [5*]
FAIL: ITEM 1 ERROR returned  7 , we expected 6
INFO: Executing invalid instruction: [-]
FAIL: ITEM 1 ERROR returned  7 , we expected 6
INFO: Executing invalid instruction: [(LOAD)]
PASS: Executing [(LOAD)] set error code to 6 , as expected
INFO: Executing [(LOAD)] set error string to [not enough inputs to LOAD]
INFO: Executing invalid instruction: [(LOAD "testlib.lgo "toomany)]
PASS: Executing [(LOAD "testlib.lgo "toomany)] set error code to 8 , as expected
INFO: Executing [(LOAD "testlib.lgo "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [LOAD "doesnotexist.lgo]
PASS: Executing [LOAD "doesnotexist.lgo] set error code to 18 , as expected
INFO: Executing [LOAD "doesnotexist.lgo] set error string to [File system error: Could not open file]
PASS: [procedureinworkingdirectory] returned 123 , as expected.
INFO: Executing invalid instruction
PASS: Executingset error code to 13
INFO: Executingset error string to [I don't know how to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
INFO: Executing invalid instruction: [(RUN)]
PASS: Executing [(RUN)] set error code to 6 , as expected
INFO: Executing [(RUN)] set error string to [not enough inputs to RUN]
INFO: Executing invalid instruction: [RUN {"FD 100}]
PASS: Executing [RUN {"FD 100}] set error code to 7
INFO: Executing [RUN {"FD 100}] set error string to [RUN doesn't like {"FD 100} as input]
INFO: Executing invalid instruction: [(RUN [FD 100] "toomany)]
PASS: Executing [(RUN [FD 100] "toomany)] set error code to 8 , as expected
INFO: Executing [(RUN [FD 100] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [FORWARD 1e10]
PASS: Executing [FORWARD 1e10] set error code to 3 , as expected
INFO: Executing [FORWARD 1e10] set error string to [turtle out of bounds]
INFO: Executing invalid instruction: [1 / 0]
PASS: Executing [1 / 0] set error code to 4 , as expected
INFO: Executing [1 / 0] set error string to [/ doesn't like 0 as input]
INFO: Executing invalid instruction: [IGNORE NO.INPUT.NO.OUTPUT]
PASS: Executing [IGNORE NO.INPUT.NO.OUTPUT] set error code to 5 , as expected
INFO: Executing [IGNORE NO.INPUT.NO.OUTPUT] set error string to [NO.INPUT.NO.OUTPUT didn't output to IGNORE]
INFO: Executing invalid instruction: [(ONE.INPUT.NO.OUTPUT)]
PASS: Executing [(ONE.INPUT.NO.OUTPUT)] set error code to 6 , as expected
INFO: Executing [(ONE.INPUT.NO.OUTPUT)] set error string to [not enough inputs to ONE.INPUT.NO.OUTPUT]
INFO: Executing invalid instruction: [FORWARD "tensteps]
PASS: Executing [FORWARD "tensteps] set error code to 7 , as expected
INFO: Executing [FORWARD "tensteps] set error string to [FORWARD doesn't like tensteps as input]
INFO: Executing invalid instruction: [(NO.INPUT.NO.OUTPUT "toomany)]
PASS: Executing [(NO.INPUT.NO.OUTPUT "toomany)] set error code to 8 , as expected
INFO: Executing [(NO.INPUT.NO.OUTPUT "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [I.DONT.KNOW.WHAT.TO.DO.WITH.VALUE]
PASS: Executing [I.DONT.KNOW.WHAT.TO.DO.WITH.VALUE] set error code to 9 , as expected
INFO: Executing [I.DONT.KNOW.WHAT.TO.DO.WITH.VALUE] set error string to [You don't say what to do with 1]
INFO: Executing invalid instruction: [(ONE.INPUT.NO.OUTPUT]
PASS: Executing [(ONE.INPUT.NO.OUTPUT] set error code to 10 , as expected
INFO: Executing [(ONE.INPUT.NO.OUTPUT] set error string to [too many ('s]
INFO: Executing invalid instruction: [ONE.INPUT.NO.OUTPUT :novalue]
PASS: Executing [ONE.INPUT.NO.OUTPUT :novalue] set error code to 11 , as expected
INFO: Executing [ONE.INPUT.NO.OUTPUT :novalue] set error string to [novalue has no value]
INFO: Executing invalid instruction: [)]
PASS: Executing [)] set error code to 12 , as expected
INFO: Executing [)] set error string to [unexpected ')']
INFO: Executing invalid instruction: [UNKNOWN.PROC]
PASS: Executing [UNKNOWN.PROC] set error code to 13 , as expected
INFO: Executing [UNKNOWN.PROC] set error string to [I don't know how to UNKNOWN.PROC]
INFO: Executing invalid instruction: [MY.PROC.TO.STEP]
PASS: Executing [MY.PROC.TO.STEP] set error code to 16 , as expected
INFO: Executing [MY.PROC.TO.STEP] set error string to [Stopping...]
INFO: Executing invalid instruction: [DRIBBLE "DELETEME.TXT]
PASS: Executing [DRIBBLE "DELETEME.TXT] set error code to 17 , as expected
INFO: Executing [DRIBBLE "DELETEME.TXT] set error string to [Already dribbling]
INFO: Executing invalid instruction: [OPENREAD "DELETEME.TXT]
PASS: Executing [OPENREAD "DELETEME.TXT] set error code to 18 , as expected
INFO: Executing [OPENREAD "DELETEME.TXT] set error string to [File system error: I can't open that file]
INFO: Executing invalid instruction: [THROW "ERROR]
PASS: Executing [THROW "ERROR] set error code to 21 , as expected
INFO: Executing [THROW "ERROR] set error string to [Throw "Error]
INFO: Executing invalid instruction: [DEFINE "forward [[]]]
PASS: Executing [DEFINE "forward [[]]] set error code to 22 , as expected
INFO: Executing [DEFINE "forward [[]]] set error string to [forward is a primitive]
INFO: Executing invalid instruction: [PROCEDURE.WITH.TO.INSIDE.IT]
PASS: Executing [PROCEDURE.WITH.TO.INSIDE.IT] set error code to 23 , as expected
INFO: Executing [PROCEDURE.WITH.TO.INSIDE.IT] set error string to [Can't use TO inside a procedure]
INFO: Executing invalid instruction: [TEXT "NO.SUCH.PROCEDURE.IS.DEFINED]
PASS: Executing [TEXT "NO.SUCH.PROCEDURE.IS.DEFINED] set error code to 24 , as expected
INFO: Executing [TEXT "NO.SUCH.PROCEDURE.IS.DEFINED] set error string to [I don't know how to NO.SUCH.PROCEDURE.IS.DEFINED]
INFO: Executing invalid instruction: [IFTRUE "x]
PASS: Executing [IFTRUE "x] set error code to 25 , as expected
INFO: Executing [IFTRUE "x] set error string to [IFTRUE without TEST]
INFO: Executing invalid instruction: [PARSE "]]
PASS: Executing [PARSE "]] set error code to 26 , as expected
INFO: Executing [PARSE "]] set error string to [unexpected ']']
INFO: Executing invalid instruction: [RUN "}]
PASS: Executing [RUN "}] set error code to 27 , as expected
INFO: Executing [RUN "}] set error string to [unexpected '}']
INFO: Executing invalid instruction: [MACRO.RETURN.UNBOUND.INSTEAD.OF.LIST]
PASS: Executing [MACRO.RETURN.UNBOUND.INSTEAD.OF.LIST] set error code to 29 , as expected
INFO: Executing [MACRO.RETURN.UNBOUND.INSTEAD.OF.LIST] set error string to [Macro returned Unbound instead of a list]
INFO: Executing invalid instruction: [APPLY "ONE.INPUT.NO.OUTPUT 1]
PASS: Executing [APPLY "ONE.INPUT.NO.OUTPUT 1] set error code to 32 , as expected
INFO: Executing [APPLY "ONE.INPUT.NO.OUTPUT 1] set error string to [APPLY doesn't like 1 as input]
INFO: Executing invalid instruction: [LOAD "endinmultilineinstruction.lgo]
PASS: Executing [LOAD "endinmultilineinstruction.lgo] set error code to 33 , as expected
INFO: Executing [LOAD "endinmultilineinstruction.lgo] set error string to [END inside multi-line instruction.]
INFO: Setting ERRACT to a value such that we can verify if it is called
INFO: Causing an unrecoverable error outside of a CATCH block
PASS: [:erract.was.called] returned true , as expected.
INFO: Setting ERRACT to a procedure that outputs 5
INFO: Calling "SUM 1 [1] ", which should run :erract to replace [1] with 5
PASS: [:thesum] returned 6 , as expected.
PASS: [(LIST)] returned [] , as expected.
PASS: [(LIST 1)] returned [1] , as expected.
PASS: [(LIST 1 2)] returned [1 2] , as expected.
PASS: [(LIST 1 2 3)] returned [1 2 3] , as expected.
PASS: [(LIST [1] )] returned [[1]] , as expected.
PASS: [(LIST [] )] returned [[]] , as expected.
PASS: [SE "abc "def] returned [abc def] , as expected.
PASS: [SENTENCE "abc "def] returned [abc def] , as expected.
PASS: [SENTENCE "abc [def]] returned [abc def] , as expected.
PASS: [SENTENCE [abc] "def] returned [abc def] , as expected.
PASS: [SENTENCE [abc def] "ghi] returned [abc def ghi] , as expected.
PASS: [SENTENCE [abc def] [ghi jlk]] returned [abc def ghi jlk] , as expected.
PASS: [SENTENCE [] [abc]] returned [abc] , as expected.
PASS: [SENTENCE [] []] returned [] , as expected.
PASS: [SENTENCE [[abc]] "def] returned [[abc] def] , as expected.
PASS: [(SE "A "sentence "is "simply "a "list "of "words)] returned [A sentence is simply a list of words] , as expected.
PASS: [(SENTENCE "A "sentence "is "simply "a "list "of "words)] returned [A sentence is simply a list of words] , as expected.
PASS: [(SENTENCE [] [abc] [] )] returned [abc] , as expected.
PASS: [(SE)] returned [] , as expected.
PASS: [(SENTENCE)] returned [] , as expected.
PASS: [(SE "abc)] returned [abc] , as expected.
PASS: [(SENTENCE "abc)] returned [abc] , as expected.
INFO: Executing invalid instruction: [SENTENCE "abc {def}]
PASS: Executing [SENTENCE "abc {def}] set error code to 7
INFO: Executing [SENTENCE "abc {def}] set error string to [SENTENCE doesn't like {def} as input]
INFO: Executing invalid instruction: [SENTENCE {abc} "def]
PASS: Executing [SENTENCE {abc} "def] set error code to 7
INFO: Executing [SENTENCE {abc} "def] set error string to [SENTENCE doesn't like {abc} as input]
INFO: Executing invalid instruction: [(SENTENCE "abc {def} "ghi)]
PASS: Executing [(SENTENCE "abc {def} "ghi)] set error code to 7
INFO: Executing [(SENTENCE "abc {def} "ghi)] set error string to [SENTENCE doesn't like {def} as input]
CALL: MAKE "list1 [1 2 3]
CALL: MAKE "list2 [4 5 6]
CALL: MAKE "sentence (SENTENCE :list1 :list2)
PASS: [:sentence] returned [1 2 3 4 5 6] , as expected.
PASS: [:list1] returned [1 2 3] , as expected.
PASS: [:list2] returned [4 5 6] , as expected.
PASS: [.EQ 1000 1000] returned false , as expected.
PASS: [.EQ :x :y] returned false , as expected.
PASS: [.EQ :x :x] returned true , as expected.
PASS: [.EQ " "] returned true , as expected.
PASS: [.EQ "false "false] returned true , as expected.
PASS: [.EQ "true "true] returned true , as expected.
PASS: [.EQ [] []] returned true , as expected.
INFO: Executing invalid instruction: [(.EQ)]
PASS: Executing [(.EQ)] set error code to 6 , as expected
INFO: Executing [(.EQ)] set error string to [not enough inputs to .EQ]
INFO: Executing invalid instruction: [(.EQ 1)]
PASS: Executing [(.EQ 1)] set error code to 6 , as expected
INFO: Executing [(.EQ 1)] set error string to [not enough inputs to .EQ]
INFO: Executing invalid instruction: [(.EQ 1 1 "toomany)]
PASS: Executing [(.EQ 1 1 "toomany)] set error code to 8 , as expected
INFO: Executing [(.EQ 1 1 "toomany)] set error string to [too much inside ()'s]
PASS: [EQUALP 1 1] returned true , as expected.
PASS: [EQUALP 0 0] returned true , as expected.
PASS: [EQUALP 3.14 3.14] returned true , as expected.
PASS: [EQUALP "hi "hi] returned true , as expected.
PASS: [EQUAL? ["a 1 "ab] ["a 1 "ab]] returned true , as expected.
PASS: [EQUAL? [[1 2 3] [1]] [[1 2 3] [1]]] returned true , as expected.
PASS: [EQUAL? 0 0] returned true , as expected.
PASS: [EQUALP " "] returned true , as expected.
PASS: [EQUALP "true "TRUE] returned true , as expected.
PASS: [EQUALP "false "FALSE] returned true , as expected.
PASS: [EQUAL? :myarray :myarray] returned true , as expected.
PASS: [EQUAL? :myarray :myarray] returned true , as expected.
PASS: [EQUAL? {} {}] returned false , as expected.
PASS: [EQUAL? {1 2 3} {1 2 3}] returned false , as expected.
PASS: [EQUALP 1 1.1] returned false , as expected.
PASS: [EQUALP 0 1] returned false , as expected.
PASS: [EQUALP "hi "hil] returned false , as expected.
PASS: [EQUALP "hil "hi] returned false , as expected.
PASS: [EQUALP "true "false] returned false , as expected.
INFO: Executing invalid instruction: [(EQUAL?)]
PASS: Executing [(EQUAL?)] set error code to 6 , as expected
INFO: Executing [(EQUAL?)] set error string to [not enough inputs to EQUAL?]
INFO: Executing invalid instruction: [(EQUAL? 1)]
PASS: Executing [(EQUAL? 1)] set error code to 6 , as expected
INFO: Executing [(EQUAL? 1)] set error string to [not enough inputs to EQUAL?]
INFO: Executing invalid instruction: [(EQUAL? 1 1 "toomany)]
PASS: Executing [(EQUAL? 1 1 "toomany)] set error code to 8 , as expected
INFO: Executing [(EQUAL? 1 1 "toomany)] set error string to [too much inside ()'s]
PASS: [EMPTYP []] returned true , as expected.
PASS: [EMPTY? []] returned true , as expected.
PASS: [EMPTY? [1]] returned false , as expected.
PASS: [EMPTY? [0]] returned false , as expected.
PASS: [EMPTY? 0] returned false , as expected.
PASS: [EMPTY? "] returned true , as expected.
PASS: [EMPTY? " ] returned false , as expected.
PASS: [EMPTY? {}] returned false , as expected.
INFO: Executing invalid instruction: [(EMPTY?)]
PASS: Executing [(EMPTY?)] set error code to 6 , as expected
INFO: Executing [(EMPTY?)] set error string to [not enough inputs to EMPTY?]
INFO: Executing invalid instruction: [(EMPTY? [] "toomany)]
PASS: Executing [(EMPTY? [] "toomany)] set error code to 8 , as expected
INFO: Executing [(EMPTY? [] "toomany)] set error string to [too much inside ()'s]
PASS: [NUMBERP 1] returned true , as expected.
PASS: [NUMBER? 1] returned true , as expected.
PASS: [NUMBER? 0] returned true , as expected.
PASS: [NUMBER? -1] returned true , as expected.
PASS: [NUMBER? 3.14] returned true , as expected.
PASS: [NUMBER? "1] returned true , as expected.
PASS: [NUMBER? "-1] returned true , as expected.
PASS: [NUMBER? "3.14] returned true , as expected.
PASS: [NUMBER? {}] returned false , as expected.
PASS: [NUMBER? {2}] returned false , as expected.
PASS: [NUMBER? []] returned false , as expected.
PASS: [NUMBER? [1]] returned false , as expected.
PASS: [NUMBER? "one] returned false , as expected.
PASS: [NUMBER? "1A] returned false , as expected.
PASS: [NUMBER? "] returned false , as expected.
INFO: Executing invalid instruction: [(NUMBER?)]
PASS: Executing [(NUMBER?)] set error code to 6 , as expected
INFO: Executing [(NUMBER?)] set error string to [not enough inputs to NUMBER?]
INFO: Executing invalid instruction: [(NUMBER? 1 "toomany)]
PASS: Executing [(NUMBER? 1 "toomany)] set error code to 8 , as expected
INFO: Executing [(NUMBER? 1 "toomany)] set error string to [too much inside ()'s]
PASS: [LISTP [1 2 3]] returned true , as expected.
PASS: [LIST? [1 2 3]] returned true , as expected.
PASS: [LIST? []] returned true , as expected.
PASS: [LIST? "list] returned false , as expected.
PASS: [LIST? "[1]] returned false , as expected.
PASS: [LIST? 1] returned false , as expected.
PASS: [LIST? 3.14] returned false , as expected.
PASS: [LIST? {1}] returned false , as expected.
PASS: [LIST? {}] returned false , as expected.
PASS: [LIST? "] returned false , as expected.
INFO: Executing invalid instruction: [(LIST?)]
PASS: Executing [(LIST?)] set error code to 6 , as expected
INFO: Executing [(LIST?)] set error string to [not enough inputs to LIST?]
INFO: Executing invalid instruction: [(LIST? [] "toomany)]
PASS: Executing [(LIST? [] "toomany)] set error code to 8 , as expected
INFO: Executing [(LIST? [] "toomany)] set error string to [too much inside ()'s]
PASS: [WORDP "hello] returned true , as expected.
PASS: [WORD? "hello] returned true , as expected.
PASS: [WORD? 123] returned true , as expected.
PASS: [WORD? 3.14] returned true , as expected.
PASS: [WORD? "] returned true , as expected.
PASS: [WORD? "[1]] returned true , as expected.
PASS: [WORD? []] returned false , as expected.
PASS: [WORD? ["hello]] returned false , as expected.
PASS: [WORD? {}] returned false , as expected.
PASS: [WORD? {"hello}] returned false , as expected.
INFO: Executing invalid instruction: [(WORD?)]
PASS: Executing [(WORD?)] set error code to 6 , as expected
INFO: Executing [(WORD?)] set error string to [not enough inputs to WORD?]
INFO: Executing invalid instruction: [(WORD? [] "toomany)]
PASS: Executing [(WORD? [] "toomany)] set error code to 8 , as expected
INFO: Executing [(WORD? [] "toomany)] set error string to [too much inside ()'s]
PASS: [ARRAYP {1 2 3}] returned true , as expected.
PASS: [ARRAY? {1 2 3}] returned true , as expected.
PASS: [ARRAY? {}] returned true , as expected.
PASS: [ARRAY? "word] returned false , as expected.
PASS: [ARRAY? "{}] returned false , as expected.
PASS: [ARRAY? 1] returned false , as expected.
PASS: [ARRAY? 3.14] returned false , as expected.
PASS: [ARRAY? [1]] returned false , as expected.
PASS: [ARRAY? []] returned false , as expected.
PASS: [ARRAY? "] returned false , as expected.
INFO: Executing invalid instruction: [(ARRAY?)]
PASS: Executing [(ARRAY?)] set error code to 6 , as expected
INFO: Executing [(ARRAY?)] set error string to [not enough inputs to ARRAY?]
INFO: Executing invalid instruction: [(ARRAY? {1} "toomany)]
PASS: Executing [(ARRAY? {1} "toomany)] set error code to 8 , as expected
INFO: Executing [(ARRAY? {1} "toomany)] set error string to [too much inside ()'s]
PASS: [MEMBERP 2 [1 2 3]] returned true , as expected.
PASS: [MEMBER? 2 [1 2 3]] returned true , as expected.
PASS: [MEMBER? 1 [1]] returned true , as expected.
PASS: [MEMBER? 1 [1 1 1]] returned true , as expected.
PASS: [MEMBER? 0 [1 2 3]] returned false , as expected.
PASS: [MEMBER? [2] [[1] [2] [3]]] returned true , as expected.
PASS: [MEMBER? 2 [[1] [2] [3]]] returned false , as expected.
PASS: [MEMBER? [2] [1 2 3]] returned false , as expected.
PASS: [MEMBER? 1 []] returned false , as expected.
PASS: [MEMBER? 1 {1}] returned true , as expected.
PASS: [MEMBER? 1 {1 1 1}] returned true , as expected.
PASS: [MEMBER? 12 {11 12 13}] returned true , as expected.
PASS: [MEMBER? 12 {}] returned false , as expected.
PASS: [MEMBER? 1 123] returned true , as expected.
PASS: [MEMBER? 4 123] returned false , as expected.
PASS: [MEMBER? 23 123] returned false , as expected.
PASS: [MEMBER? 1 "] returned false , as expected.
PASS: [MEMBER? [1] "123] returned false , as expected.
PASS: [MEMBER? " "hello] returned false , as expected.
PASS: [MEMBER? " (LIST ")] returned true , as expected.
PASS: [MEMBER? " :arrayofemptystring] returned true , as expected.
INFO: Executing invalid instruction: [(MEMBER?)]
PASS: Executing [(MEMBER?)] set error code to 6 , as expected
INFO: Executing [(MEMBER?)] set error string to [not enough inputs to MEMBER?]
INFO: Executing invalid instruction: [(MEMBER? 1)]
PASS: Executing [(MEMBER? 1)] set error code to 6 , as expected
INFO: Executing [(MEMBER? 1)] set error string to [not enough inputs to MEMBER?]
INFO: Executing invalid instruction: [(MEMBER? 2 [1 2 3] "toomany)]
PASS: Executing [(MEMBER? 2 [1 2 3] "toomany)] set error code to 8 , as expected
INFO: Executing [(MEMBER? 2 [1 2 3] "toomany)] set error string to [too much inside ()'s]
PASS: [BEFOREP "ABC "ABD] returned true , as expected.
PASS: [BEFORE? "ABC "ABD] returned true , as expected.
PASS: [BEFORE? "ABD "ABC] returned false , as expected.
PASS: [BEFORE? "ABC "ABC] returned false , as expected.
PASS: [BEFORE? "ABC "ABCD] returned true , as expected.
PASS: [BEFORE? "ABCD "ABC] returned false , as expected.
PASS: [BEFORE? " "A] returned true , as expected.
PASS: [BEFORE? "Z "] returned false , as expected.
INFO: Executing invalid instruction: [(BEFORE?)]
PASS: Executing [(BEFORE?)] set error code to 6 , as expected
INFO: Executing [(BEFORE?)] set error string to [not enough inputs to BEFORE?]
INFO: Executing invalid instruction: [(BEFORE? "ABC)]
PASS: Executing [(BEFORE? "ABC)] set error code to 6 , as expected
INFO: Executing [(BEFORE? "ABC)] set error string to [not enough inputs to BEFORE?]
INFO: Executing invalid instruction: [(BEFORE? "ABC [] )]
PASS: Executing [(BEFORE? "ABC [] )] set error code to 7
INFO: Executing [(BEFORE? "ABC [] )] set error string to [BEFORE? doesn't like [] as input]
INFO: Executing invalid instruction: [(BEFORE? [] "ABC)]
PASS: Executing [(BEFORE? [] "ABC)] set error code to 7
INFO: Executing [(BEFORE? [] "ABC)] set error string to [BEFORE? doesn't like [] as input]
INFO: Executing invalid instruction: [(BEFORE? "ABC "ABC "toomany)]
PASS: Executing [(BEFORE? "ABC "ABC "toomany)] set error code to 8 , as expected
INFO: Executing [(BEFORE? "ABC "ABC "toomany)] set error string to [too much inside ()'s]
PASS: [WORD "o "k] returned ok , as expected.
PASS: [WORD "4 "2] returned 42 , as expected.
PASS: [(WORD)] returned  , as expected.
PASS: [(WORD "o)] returned o , as expected.
PASS: [(WORD "o "k "ay)] returned okay , as expected.
PASS: [(WORD " ")] returned  , as expected.
PASS: [(WORD " "a ")] returned a , as expected.
INFO: Executing invalid instruction: [WORD [] "a]
PASS: Executing [WORD [] "a] set error code to 7
INFO: Executing [WORD [] "a] set error string to [WORD doesn't like [] as input]
INFO: Executing invalid instruction: [WORD "a []]
PASS: Executing [WORD "a []] set error code to 7
INFO: Executing [WORD "a []] set error string to [WORD doesn't like [] as input]
INFO: Executing invalid instruction: [WORD "a {}]
PASS: Executing [WORD "a {}] set error code to 7
INFO: Executing [WORD "a {}] set error string to [WORD doesn't like {} as input]
INFO: Executing invalid instruction: [WORD {} "a]
PASS: Executing [WORD {} "a] set error code to 7
INFO: Executing [WORD {} "a] set error string to [WORD doesn't like {} as input]
PASS: [ASCII "a] returned 97 , as expected.
PASS: [ASCII "A] returned 65 , as expected.
PASS: [ASCII 1] returned 49 , as expected.
PASS: [ASCII "(] returned 40 , as expected.
INFO: Executing invalid instruction: [(ASCII)]
PASS: Executing [(ASCII)] set error code to 6 , as expected
INFO: Executing [(ASCII)] set error string to [not enough inputs to ASCII]
INFO: Executing invalid instruction: [(ASCII "a "b)]
PASS: Executing [(ASCII "a "b)] set error code to 8 , as expected
INFO: Executing [(ASCII "a "b)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ASCII [a]]
PASS: Executing [ASCII [a]] set error code to 7
INFO: Executing [ASCII [a]] set error string to [ASCII doesn't like [a] as input]
INFO: Executing invalid instruction: [ASCII {a}]
PASS: Executing [ASCII {a}] set error code to 7
INFO: Executing [ASCII {a}] set error string to [ASCII doesn't like {a} as input]
INFO: Executing invalid instruction: [ASCII "ab]
PASS: Executing [ASCII "ab] set error code to 7
INFO: Executing [ASCII "ab] set error string to [ASCII doesn't like ab as input]
INFO: Executing invalid instruction: [ASCII 1.2]
PASS: Executing [ASCII 1.2] set error code to 7
INFO: Executing [ASCII 1.2] set error string to [ASCII doesn't like 1.2 as input]
PASS: [RAWASCII "a] returned 97 , as expected.
PASS: [RAWASCII "A] returned 65 , as expected.
PASS: [RAWASCII 1] returned 49 , as expected.
PASS: [RAWASCII CHAR 0] returned 0 , as expected.
PASS: [RAWASCII CHAR 5] returned 5 , as expected.
PASS: [RAWASCII CHAR 192] returned 192 , as expected.
INFO: Executing invalid instruction: [(RAWASCII)]
PASS: Executing [(RAWASCII)] set error code to 6 , as expected
INFO: Executing [(RAWASCII)] set error string to [not enough inputs to RAWASCII]
INFO: Executing invalid instruction: [(RAWASCII "a "b)]
PASS: Executing [(RAWASCII "a "b)] set error code to 8 , as expected
INFO: Executing [(RAWASCII "a "b)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RAWASCII [a]]
PASS: Executing [RAWASCII [a]] set error code to 7
INFO: Executing [RAWASCII [a]] set error string to [RAWASCII doesn't like [a] as input]
INFO: Executing invalid instruction: [RAWASCII {a}]
PASS: Executing [RAWASCII {a}] set error code to 7
INFO: Executing [RAWASCII {a}] set error string to [RAWASCII doesn't like {a} as input]
INFO: Executing invalid instruction: [RAWASCII "ab]
PASS: Executing [RAWASCII "ab] set error code to 7
INFO: Executing [RAWASCII "ab] set error string to [RAWASCII doesn't like ab as input]
INFO: Executing invalid instruction: [RAWASCII 1.2]
PASS: Executing [RAWASCII 1.2] set error code to 7
INFO: Executing [RAWASCII 1.2] set error string to [RAWASCII doesn't like 1.2 as input]
PASS: [FIRST [1 2 3]] returned 1 , as expected.
PASS: [FIRST [1]] returned 1 , as expected.
PASS: [FIRST {a b c}] returned 1 , as expected.
PASS: [FIRST {a b c}] returned 2 , as expected.
PASS: [FIRST "hello] returned h , as expected.
PASS: [FIRST "h] returned h , as expected.
INFO: Executing invalid instruction: [(FIRST)]
PASS: Executing [(FIRST)] set error code to 6 , as expected
INFO: Executing [(FIRST)] set error string to [not enough inputs to FIRST]
INFO: Executing invalid instruction: [(FIRST "word "toomany)]
PASS: Executing [(FIRST "word "toomany)] set error code to 8 , as expected
INFO: Executing [(FIRST "word "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [FIRST []]
PASS: Executing [FIRST []] set error code to 7
INFO: Executing [FIRST []] set error string to [FIRST doesn't like [] as input]
INFO: Executing invalid instruction: [FIRST "]
PASS: Executing [FIRST "] set error code to 7
INFO: Executing [FIRST "] set error string to [FIRST doesn't like  as input]
INFO: Executing invalid instruction: [FIRST {}]
PASS: Executing [FIRST {}] set error code to 7
INFO: Executing [FIRST {}] set error string to [FIRST doesn't like {} as input]
PASS: [FIRSTS [[1 2 3]]] returned [1] , as expected.
PASS: [FIRSTS [[1 2 3] [a b c]]] returned [1 a] , as expected.
PASS: [FIRSTS [[1 2 3] hello [1] h]] returned [1 h 1 h] , as expected.
PASS: [FIRSTS []] returned [] , as expected.
INFO: Executing invalid instruction: [(FIRSTS)]
PASS: Executing [(FIRSTS)] set error code to 6 , as expected
INFO: Executing [(FIRSTS)] set error string to [not enough inputs to FIRSTS]
INFO: Executing invalid instruction: [(FIRSTS [[1 2 3]] "toomany)]
PASS: Executing [(FIRSTS [[1 2 3]] "toomany)] set error code to 8 , as expected
INFO: Executing [(FIRSTS [[1 2 3]] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [FIRSTS (LIST [1 2 3] [] [1 2 3] )]
PASS: Executing [FIRSTS (LIST [1 2 3] [] [1 2 3] )] set error code to 7
INFO: Executing [FIRSTS (LIST [1 2 3] [] [1 2 3] )] set error string to [FIRSTS doesn't like [] as input]
INFO: Executing invalid instruction: [FIRSTS (LIST [1 2 3] " [1 2 3] )]
PASS: Executing [FIRSTS (LIST [1 2 3] " [1 2 3] )] set error code to 7
INFO: Executing [FIRSTS (LIST [1 2 3] " [1 2 3] )] set error string to [FIRSTS doesn't like  as input]
INFO: Executing invalid instruction: [FIRSTS (LIST [1 2 3] {} [1 2 3] )]
PASS: Executing [FIRSTS (LIST [1 2 3] {} [1 2 3] )] set error code to 7
INFO: Executing [FIRSTS (LIST [1 2 3] {} [1 2 3] )] set error string to [FIRSTS doesn't like {} as input]
PASS: [BF [1 2 3]] returned [2 3] , as expected.
PASS: [BUTFIRST [1 2 3]] returned [2 3] , as expected.
PASS: [BUTFIRST [1]] returned [] , as expected.
PASS: [BUTFIRST "hello] returned ello , as expected.
PASS: [BUTFIRST "h] returned  , as expected.
INFO: Executing invalid instruction: [(BUTFIRST)]
PASS: Executing [(BUTFIRST)] set error code to 6 , as expected
INFO: Executing [(BUTFIRST)] set error string to [not enough inputs to BUTFIRST]
INFO: Executing invalid instruction: [(BUTFIRST "word "toomany)]
PASS: Executing [(BUTFIRST "word "toomany)] set error code to 8 , as expected
INFO: Executing [(BUTFIRST "word "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [BUTFIRST []]
PASS: Executing [BUTFIRST []] set error code to 7
INFO: Executing [BUTFIRST []] set error string to [BUTFIRST doesn't like [] as input]
INFO: Executing invalid instruction: [BUTFIRST "]
PASS: Executing [BUTFIRST "] set error code to 7
INFO: Executing [BUTFIRST "] set error string to [BUTFIRST doesn't like  as input]
INFO: Executing invalid instruction: [BUTFIRST {1}]
PASS: Executing [BUTFIRST {1}] set error code to 7
INFO: Executing [BUTFIRST {1}] set error string to [BUTFIRST doesn't like {1} as input]
PASS: [BFS [[1 2 3]]] returned [[2 3]] , as expected.
PASS: [BUTFIRSTS [[1 2 3]]] returned [[2 3]] , as expected.
PASS: [BUTFIRSTS [[1 2 3] [a b c]]] returned [[2 3] [b c]] , as expected.
PASS: [BUTFIRSTS [[1 2 3] hello [1] h]] returned [[2 3] ello [] ] , as expected.
PASS: [BUTFIRSTS []] returned [] , as expected.
INFO: Executing invalid instruction: [(BUTFIRSTS)]
PASS: Executing [(BUTFIRSTS)] set error code to 6 , as expected
INFO: Executing [(BUTFIRSTS)] set error string to [not enough inputs to BUTFIRSTS]
INFO: Executing invalid instruction: [(BUTFIRSTS [[1 2 3]] "toomany)]
PASS: Executing [(BUTFIRSTS [[1 2 3]] "toomany)] set error code to 8 , as expected
INFO: Executing [(BUTFIRSTS [[1 2 3]] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [BUTFIRSTS (LIST [1 2 3] [] [1 2 3] )]
PASS: Executing [BUTFIRSTS (LIST [1 2 3] [] [1 2 3] )] set error code to 7
INFO: Executing [BUTFIRSTS (LIST [1 2 3] [] [1 2 3] )] set error string to [BUTFIRSTS doesn't like [] as input]
INFO: Executing invalid instruction: [BUTFIRSTS (LIST [1 2 3] " [1 2 3] )]
PASS: Executing [BUTFIRSTS (LIST [1 2 3] " [1 2 3] )] set error code to 7
INFO: Executing [BUTFIRSTS (LIST [1 2 3] " [1 2 3] )] set error string to [BUTFIRSTS doesn't like  as input]
INFO: Executing invalid instruction: [BUTFIRSTS (LIST [1 2 3] {1} [1 2 3] )]
PASS: Executing [BUTFIRSTS (LIST [1 2 3] {1} [1 2 3] )] set error code to 7
INFO: Executing [BUTFIRSTS (LIST [1 2 3] {1} [1 2 3] )] set error string to [BUTFIRSTS doesn't like {1} as input]
PASS: [BL [1 2 3]] returned [1 2] , as expected.
PASS: [BUTLAST [1 2 3]] returned [1 2] , as expected.
PASS: [BUTLAST [1]] returned [] , as expected.
PASS: [BUTLAST "hello] returned hell , as expected.
PASS: [BUTLAST "h] returned  , as expected.
INFO: Executing invalid instruction: [(BUTLAST)]
PASS: Executing [(BUTLAST)] set error code to 6 , as expected
INFO: Executing [(BUTLAST)] set error string to [not enough inputs to BUTLAST]
INFO: Executing invalid instruction: [(BUTLAST "word "toomany)]
PASS: Executing [(BUTLAST "word "toomany)] set error code to 8 , as expected
INFO: Executing [(BUTLAST "word "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [BUTLAST []]
PASS: Executing [BUTLAST []] set error code to 7
INFO: Executing [BUTLAST []] set error string to [BUTLAST doesn't like [] as input]
INFO: Executing invalid instruction: [BUTLAST "]
PASS: Executing [BUTLAST "] set error code to 7
INFO: Executing [BUTLAST "] set error string to [BUTLAST doesn't like  as input]
INFO: Executing invalid instruction: [BUTLAST {1}]
PASS: Executing [BUTLAST {1}] set error code to 7
INFO: Executing [BUTLAST {1}] set error string to [BUTLAST doesn't like {1} as input]
PASS: [LAST [1 2 3]] returned 3 , as expected.
PASS: [LAST [1 2]] returned 2 , as expected.
PASS: [LAST [1]] returned 1 , as expected.
PASS: [LAST "hello] returned o , as expected.
PASS: [LAST "h] returned h , as expected.
INFO: Executing invalid instruction: [(LAST)]
PASS: Executing [(LAST)] set error code to 6 , as expected
INFO: Executing [(LAST)] set error string to [not enough inputs to LAST]
INFO: Executing invalid instruction: [(LAST "word "toomany)]
PASS: Executing [(LAST "word "toomany)] set error code to 8 , as expected
INFO: Executing [(LAST "word "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [LAST []]
PASS: Executing [LAST []] set error code to 7
INFO: Executing [LAST []] set error string to [LAST doesn't like [] as input]
INFO: Executing invalid instruction: [LAST "]
PASS: Executing [LAST "] set error code to 7
INFO: Executing [LAST "] set error string to [LAST doesn't like  as input]
INFO: Executing invalid instruction: [LAST {1}]
PASS: Executing [LAST {1}] set error code to 7
INFO: Executing [LAST {1}] set error string to [LAST doesn't like {1} as input]
PASS: [COUNT :myarray] returned 4 , as expected.
PASS: [ITEM 1 :myarray] returned [] , as expected.
PASS: [ITEM 2 :myarray] returned [] , as expected.
PASS: [ITEM 3 :myarray] returned [] , as expected.
PASS: [ITEM 4 :myarray] returned [] , as expected.
PASS: [ITEM 1 :myarray] returned 42 , as expected.
PASS: [ITEM 2 :myarray] returned hi , as expected.
PASS: [ITEM 3 :myarray] returned [list] , as expected.
PASS: [ITEM 1 :myarray] returned 1 , as expected.
PASS: [ITEM 2 :myarray] returned 2 , as expected.
PASS: [ITEM 3 :myarray] returned 3 , as expected.
PASS: [ITEM 4 :myarray] returned 4 , as expected.
PASS: [COUNT :newarray] returned 4 , as expected.
PASS: [ITEM 1 :newarray] returned 1 , as expected.
PASS: [ITEM 2 :newarray] returned 2 , as expected.
PASS: [ITEM 3 :newarray] returned 3 , as expected.
PASS: [ITEM 4 :newarray] returned 4 , as expected.
PASS: [COUNT :myarray] returned 3 , as expected.
PASS: [ITEM 0 :myarray] returned [] , as expected.
PASS: [ITEM 1 :myarray] returned [] , as expected.
PASS: [ITEM 2 :myarray] returned [] , as expected.
PASS: [ITEM 0 :myarray] returned 0 , as expected.
PASS: [ITEM 1 :myarray] returned 1 , as expected.
PASS: [ITEM 2 :myarray] returned 2 , as expected.
PASS: [ITEM 0 :myarray] returned [0] , as expected.
PASS: [ITEM 1 :myarray] returned [1] , as expected.
PASS: [ITEM 2 :myarray] returned [2] , as expected.
PASS: [COUNT :myarray] returned 3 , as expected.
PASS: [ITEM -100 :myarray] returned 0 , as expected.
PASS: [ITEM -99 :myarray] returned 1 , as expected.
PASS: [ITEM -98 :myarray] returned 2 , as expected.
PASS: [COUNT :myarray] returned 4 , as expected.
PASS: [ITEM 2 :myarray] returned 1 , as expected.
PASS: [ITEM 3 :myarray] returned 2 , as expected.
PASS: [ITEM 4 :myarray] returned 3 , as expected.
PASS: [ITEM 5 :myarray] returned 4 , as expected.
PASS: [COUNT :myarray] returned 4 , as expected.
PASS: [ITEM -2 :myarray] returned 1 , as expected.
PASS: [ITEM -1 :myarray] returned 2 , as expected.
PASS: [ITEM 0 :myarray] returned 3 , as expected.
PASS: [ITEM 1 :myarray] returned 4 , as expected.
INFO: Executing invalid instruction: [ARRAY -1]
PASS: Executing [ARRAY -1] set error code to 7
INFO: Executing [ARRAY -1] set error string to [ARRAY doesn't like -1 as input]
INFO: Executing invalid instruction: [ARRAY 1.23]
PASS: Executing [ARRAY 1.23] set error code to 7
INFO: Executing [ARRAY 1.23] set error string to [ARRAY doesn't like 1.23 as input]
INFO: Executing invalid instruction: [ARRAY "two]
PASS: Executing [ARRAY "two] set error code to 7
INFO: Executing [ARRAY "two] set error string to [ARRAY doesn't like two as input]
INFO: Executing invalid instruction: [ARRAY {}]
PASS: Executing [ARRAY {}] set error code to 7
INFO: Executing [ARRAY {}] set error string to [ARRAY doesn't like {} as input]
INFO: Executing invalid instruction: [ARRAY []]
PASS: Executing [ARRAY []] set error code to 7
INFO: Executing [ARRAY []] set error string to [ARRAY doesn't like [] as input]
INFO: Executing invalid instruction: [(ARRAY 5 "origin)]
PASS: Executing [(ARRAY 5 "origin)] set error code to 7
INFO: Executing [(ARRAY 5 "origin)] set error string to [ARRAY doesn't like origin as input]
INFO: Executing invalid instruction: [(ARRAY 5 1.23)]
PASS: Executing [(ARRAY 5 1.23)] set error code to 7
INFO: Executing [(ARRAY 5 1.23)] set error string to [ARRAY doesn't like 1.23 as input]
INFO: Executing invalid instruction: [(ARRAY 5 {5} )]
PASS: Executing [(ARRAY 5 {5} )] set error code to 7
INFO: Executing [(ARRAY 5 {5} )] set error string to [ARRAY doesn't like {5} as input]
INFO: Executing invalid instruction: [(ARRAY 5 [5] )]
PASS: Executing [(ARRAY 5 [5] )] set error code to 7
INFO: Executing [(ARRAY 5 [5] )] set error string to [ARRAY doesn't like [5] as input]
INFO: Creating an empty array (regression test for bug #1349374)
INFO: Executing invalid instruction: [(SETITEM)]
PASS: Executing [(SETITEM)] set error code to 6 , as expected
INFO: Executing [(SETITEM)] set error string to [not enough inputs to SETITEM]
INFO: Executing invalid instruction: [(SETITEM 1)]
PASS: Executing [(SETITEM 1)] set error code to 6 , as expected
INFO: Executing [(SETITEM 1)] set error string to [not enough inputs to SETITEM]
INFO: Executing invalid instruction: [(SETITEM 1 {1 2 3} )]
PASS: Executing [(SETITEM 1 {1 2 3} )] set error code to 6 , as expected
INFO: Executing [(SETITEM 1 {1 2 3} )] set error string to [not enough inputs to SETITEM]
INFO: Executing invalid instruction: [(SETITEM 1 {1 2 3} "value "toomany)]
PASS: Executing [(SETITEM 1 {1 2 3} "value "toomany)] set error code to 8 , as expected
INFO: Executing [(SETITEM 1 {1 2 3} "value "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SETITEM "one {1 2 3} "value]
PASS: Executing [SETITEM "one {1 2 3} "value] set error code to 7
INFO: Executing [SETITEM "one {1 2 3} "value] set error string to [SETITEM doesn't like one as input]
INFO: Executing invalid instruction: [SETITEM 1 [1 2 3] "value]
PASS: Executing [SETITEM 1 [1 2 3] "value] set error code to 7
INFO: Executing [SETITEM 1 [1 2 3] "value] set error string to [SETITEM doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [SETITEM 1 "string "value]
PASS: Executing [SETITEM 1 "string "value] set error code to 7
INFO: Executing [SETITEM 1 "string "value] set error string to [SETITEM doesn't like string as input]
INFO: Executing invalid instruction: [SETITEM 5 {1} "value]
PASS: Executing [SETITEM 5 {1} "value] set error code to 4
INFO: Executing [SETITEM 5 {1} "value] set error string to [SETITEM doesn't like 5 as input]
INFO: Executing invalid instruction: [SETITEM 1 :myarray :myarray]
PASS: Executing [SETITEM 1 :myarray :myarray] set error code to 7
INFO: Executing [SETITEM 1 :myarray :myarray] set error string to [SETITEM doesn't like {1 2 3} as input]
CALL: MAKE "testqueue []
CALL: QUEUE "testqueue 1
PASS: [:testqueue] returned [1] , as expected.
CALL: QUEUE "testqueue 2
PASS: [:testqueue] returned [1 2] , as expected.
PASS: [DEQUEUE "testqueue] returned 1 , as expected.
PASS: [:testqueue] returned [2] , as expected.
PASS: [DEQUEUE "testqueue] returned 2 , as expected.
PASS: [:testqueue] returned [] , as expected.
CALL: QUEUE "testqueue :testqueue
PASS: [:testqueue] returned [[]] , as expected.
PASS: [DEQUEUE "testqueue] returned [] , as expected.
PASS: [:testqueue] returned [] , as expected.
INFO: Executing invalid instruction: [(DEQUEUE)]
PASS: Executing [(DEQUEUE)] set error code to 6 , as expected
INFO: Executing [(DEQUEUE)] set error string to [not enough inputs to DEQUEUE]
INFO: Executing invalid instruction: [(DEQUEUE "samplequeue "toomany)]
PASS: Executing [(DEQUEUE "samplequeue "toomany)] set error code to 8 , as expected
INFO: Executing [(DEQUEUE "samplequeue "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(DEQUEUE {1 2 3} )]
PASS: Executing [(DEQUEUE {1 2 3} )] set error code to 7
INFO: Executing [(DEQUEUE {1 2 3} )] set error string to [thing doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [(DEQUEUE [1 2 3] )]
PASS: Executing [(DEQUEUE [1 2 3] )] set error code to 7
INFO: Executing [(DEQUEUE [1 2 3] )] set error string to [thing doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [(DEQUEUE "queuetest.doesnotexist)]
PASS: Executing [(DEQUEUE "queuetest.doesnotexist)] set error code to 11 , as expected
INFO: Executing [(DEQUEUE "queuetest.doesnotexist)] set error string to [queuetest.doesnotexist has no value]
INFO: Executing invalid instruction: [(DEQUEUE "samplequeue)]
PASS: Executing [(DEQUEUE "samplequeue)] set error code to 7
INFO: Executing [(DEQUEUE "samplequeue)] set error string to [first doesn't like [] as input]
INFO: Executing invalid instruction: [(QUEUE "samplequeue)]
PASS: Executing [(QUEUE "samplequeue)] set error code to 6 , as expected
INFO: Executing [(QUEUE "samplequeue)] set error string to [not enough inputs to QUEUE]
INFO: Executing invalid instruction: [(QUEUE "samplequeue 1 "toomany)]
PASS: Executing [(QUEUE "samplequeue 1 "toomany)] set error code to 8 , as expected
INFO: Executing [(QUEUE "samplequeue 1 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(QUEUE {1 2 3} 1)]
PASS: Executing [(QUEUE {1 2 3} 1)] set error code to 7
INFO: Executing [(QUEUE {1 2 3} 1)] set error string to [thing doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [(QUEUE [1 2 3] 1)]
PASS: Executing [(QUEUE [1 2 3] 1)] set error code to 7
INFO: Executing [(QUEUE [1 2 3] 1)] set error string to [thing doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [(QUEUE "queuetest.doesnotexist 1)]
PASS: Executing [(QUEUE "queuetest.doesnotexist 1)] set error code to 11 , as expected
INFO: Executing [(QUEUE "queuetest.doesnotexist 1)] set error string to [queuetest.doesnotexist has no value]
CALL: MAKE "teststack []
CALL: PUSH "teststack 1
PASS: [:teststack] returned [1] , as expected.
CALL: PUSH "teststack 2
PASS: [:teststack] returned [2 1] , as expected.
PASS: [POP "teststack] returned 2 , as expected.
PASS: [:teststack] returned [1] , as expected.
PASS: [POP "teststack] returned 1 , as expected.
PASS: [:teststack] returned [] , as expected.
CALL: PUSH "teststack :teststack
PASS: [:teststack] returned [[]] , as expected.
PASS: [POP "teststack] returned [] , as expected.
PASS: [:teststack] returned [] , as expected.
INFO: Executing invalid instruction: [(POP)]
PASS: Executing [(POP)] set error code to 6 , as expected
INFO: Executing [(POP)] set error string to [not enough inputs to POP]
INFO: Executing invalid instruction: [(POP "samplestack "toomany)]
PASS: Executing [(POP "samplestack "toomany)] set error code to 8 , as expected
INFO: Executing [(POP "samplestack "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(POP {1 2 3} )]
PASS: Executing [(POP {1 2 3} )] set error code to 7
INFO: Executing [(POP {1 2 3} )] set error string to [thing doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [(POP [1 2 3] )]
PASS: Executing [(POP [1 2 3] )] set error code to 7
INFO: Executing [(POP [1 2 3] )] set error string to [thing doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [(POP "stacktest.doesnotexist)]
PASS: Executing [(POP "stacktest.doesnotexist)] set error code to 11 , as expected
INFO: Executing [(POP "stacktest.doesnotexist)] set error string to [stacktest.doesnotexist has no value]
INFO: Executing invalid instruction: [(POP "samplestack)]
PASS: Executing [(POP "samplestack)] set error code to 11
INFO: Executing [(POP "samplestack)] set error string to [samplestack has no value]
INFO: Executing invalid instruction: [(PUSH "samplestack)]
PASS: Executing [(PUSH "samplestack)] set error code to 6 , as expected
INFO: Executing [(PUSH "samplestack)] set error string to [not enough inputs to PUSH]
INFO: Executing invalid instruction: [(PUSH "samplestack 1 "toomany)]
PASS: Executing [(PUSH "samplestack 1 "toomany)] set error code to 8 , as expected
INFO: Executing [(PUSH "samplestack 1 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(PUSH {1 2 3} 1)]
PASS: Executing [(PUSH {1 2 3} 1)] set error code to 7
INFO: Executing [(PUSH {1 2 3} 1)] set error string to [thing doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [(PUSH [1 2 3] 1)]
PASS: Executing [(PUSH [1 2 3] 1)] set error code to 7
INFO: Executing [(PUSH [1 2 3] 1)] set error string to [thing doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [(PUSH "stacktest.doesnotexist 1)]
PASS: Executing [(PUSH "stacktest.doesnotexist 1)] set error code to 11 , as expected
INFO: Executing [(PUSH "stacktest.doesnotexist 1)] set error string to [stacktest.doesnotexist has no value]
PASS: [(OR)] returned false , as expected.
PASS: [(OR "true)] returned true , as expected.
PASS: [(OR "false)] returned false , as expected.
PASS: [(OR "false "false)] returned false , as expected.
PASS: [(OR "true "false)] returned true , as expected.
PASS: [(OR "false "true)] returned true , as expected.
PASS: [(OR "true "true)] returned true , as expected.
PASS: [(OR "false "FALSE "false "FALSE)] returned false , as expected.
PASS: [(OR "false "FALSE "false "TRUE)] returned true , as expected.
INFO: Executing invalid instruction: [(OR 1)]
PASS: Executing [(OR 1)] set error code to 7
INFO: Executing [(OR 1)] set error string to [OR doesn't like 1 as input]
INFO: Executing invalid instruction: [(OR 0)]
PASS: Executing [(OR 0)] set error code to 7
INFO: Executing [(OR 0)] set error string to [OR doesn't like 0 as input]
INFO: Executing invalid instruction: [(OR "truex)]
PASS: Executing [(OR "truex)] set error code to 7
INFO: Executing [(OR "truex)] set error string to [OR doesn't like truex as input]
INFO: Executing invalid instruction: [(OR "falsex)]
PASS: Executing [(OR "falsex)] set error code to 7
INFO: Executing [(OR "falsex)] set error string to [OR doesn't like falsex as input]
INFO: Executing invalid instruction: [(OR "true 1)]
PASS: Executing [(OR "true 1)] set error code to 7
INFO: Executing [(OR "true 1)] set error string to [OR doesn't like 1 as input]
INFO: Executing invalid instruction: [(OR 1 "true)]
PASS: Executing [(OR 1 "true)] set error code to 7
INFO: Executing [(OR 1 "true)] set error string to [OR doesn't like 1 as input]
INFO: Executing invalid instruction: [(OR "false 0)]
PASS: Executing [(OR "false 0)] set error code to 7
INFO: Executing [(OR "false 0)] set error string to [OR doesn't like 0 as input]
INFO: Executing invalid instruction: [(OR 0 "false)]
PASS: Executing [(OR 0 "false)] set error code to 7
INFO: Executing [(OR 0 "false)] set error string to [OR doesn't like 0 as input]
PASS: [(AND)] returned true , as expected.
PASS: [(AND "true)] returned true , as expected.
PASS: [(AND "false)] returned false , as expected.
PASS: [(AND "false "false)] returned false , as expected.
PASS: [(AND "true "false)] returned false , as expected.
PASS: [(AND "false "true)] returned false , as expected.
PASS: [(AND "true "true)] returned true , as expected.
PASS: [(AND "TRUE "true "TRUE "false)] returned false , as expected.
PASS: [(AND "TRUE "true "TRUE "true)] returned true , as expected.
INFO: Executing invalid instruction: [(AND 1)]
PASS: Executing [(AND 1)] set error code to 7
INFO: Executing [(AND 1)] set error string to [AND doesn't like 1 as input]
INFO: Executing invalid instruction: [(AND 0)]
PASS: Executing [(AND 0)] set error code to 7
INFO: Executing [(AND 0)] set error string to [AND doesn't like 0 as input]
INFO: Executing invalid instruction: [(AND "truex)]
PASS: Executing [(AND "truex)] set error code to 7
INFO: Executing [(AND "truex)] set error string to [AND doesn't like truex as input]
INFO: Executing invalid instruction: [(AND "falsex)]
PASS: Executing [(AND "falsex)] set error code to 7
INFO: Executing [(AND "falsex)] set error string to [AND doesn't like falsex as input]
INFO: Executing invalid instruction: [(AND "true 1)]
PASS: Executing [(AND "true 1)] set error code to 7
INFO: Executing [(AND "true 1)] set error string to [AND doesn't like 1 as input]
INFO: Executing invalid instruction: [(AND 1 "true)]
PASS: Executing [(AND 1 "true)] set error code to 7
INFO: Executing [(AND 1 "true)] set error string to [AND doesn't like 1 as input]
INFO: Executing invalid instruction: [(AND "false 0)]
PASS: Executing [(AND "false 0)] set error code to 7
INFO: Executing [(AND "false 0)] set error string to [AND doesn't like 0 as input]
INFO: Executing invalid instruction: [(AND 0 "false)]
PASS: Executing [(AND 0 "false)] set error code to 7
INFO: Executing [(AND 0 "false)] set error string to [AND doesn't like 0 as input]
PASS: [(NOT "true)] returned false , as expected.
PASS: [(NOT "false)] returned true , as expected.
INFO: Executing invalid instruction: [(NOT)]
PASS: Executing [(NOT)] set error code to 6 , as expected
INFO: Executing [(NOT)] set error string to [not enough inputs to NOT]
INFO: Executing invalid instruction: [(NOT 0)]
PASS: Executing [(NOT 0)] set error code to 7
INFO: Executing [(NOT 0)] set error string to [NOT doesn't like 0 as input]
INFO: Executing invalid instruction: [(NOT "truex)]
PASS: Executing [(NOT "truex)] set error code to 7
INFO: Executing [(NOT "truex)] set error string to [NOT doesn't like truex as input]
INFO: Executing invalid instruction: [(NOT "true "true)]
PASS: Executing [(NOT "true "true)] set error code to 8 , as expected
INFO: Executing [(NOT "true "true)] set error string to [too much inside ()'s]
PASS: [APPLY "SUM [123]] returned 123 , as expected.
PASS: [APPLY "SUM [100 20 3]] returned 123 , as expected.
PASS: [APPLY "APPLYTEST.NONPRIMITIVE [120 3]] returned 123 , as expected.
CALL: APPLY "APPLYTEST.NOOUTPUT []
PASS: [APPLY [1] []] returned 1 , as expected.
PASS: [APPLY "APPLY [SUM [100 20 3]]] returned 123 , as expected.
INFO: Executing invalid instruction: [(APPLY "SUM)]
PASS: Executing [(APPLY "SUM)] set error code to 6 , as expected
INFO: Executing [(APPLY "SUM)] set error string to [not enough inputs to APPLY]
INFO: Executing invalid instruction: [(APPLY "SUM [1 2 3] "toomany)]
PASS: Executing [(APPLY "SUM [1 2 3] "toomany)] set error code to 8 , as expected
INFO: Executing [(APPLY "SUM [1 2 3] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [APPLY "NONEXISTENT [1 2 3]]
PASS: Executing [APPLY "NONEXISTENT [1 2 3]] set error code to 24 , as expected
INFO: Executing [APPLY "NONEXISTENT [1 2 3]] set error string to [I don't know how to NONEXISTENT]
INFO: Executing invalid instruction: [APPLY "TO []]
PASS: Executing [APPLY "TO []] set error code to 24 , as expected
INFO: Executing [APPLY "TO []] set error string to [I don't know how to TO]
INFO: Executing invalid instruction: [APPLY 1 []]
PASS: Executing [APPLY 1 []] set error code to 24 , as expected
INFO: Executing [APPLY 1 []] set error string to [I don't know how to 1]
INFO: Executing invalid instruction: [APPLY {1 2 3} [1 2 3]]
PASS: Executing [APPLY {1 2 3} [1 2 3]] set error code to 32
INFO: Executing [APPLY {1 2 3} [1 2 3]] set error string to [APPLY doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [APPLY [1 2 3] [1 2 3]]
PASS: Executing [APPLY [1 2 3] [1 2 3]] set error code to 9
INFO: Executing [APPLY [1 2 3] [1 2 3]] set error string to [You don't say what to do with 1]
INFO: Executing invalid instruction: [APPLY "SUM {1 2 3}]
PASS: Executing [APPLY "SUM {1 2 3}] set error code to 32
INFO: Executing [APPLY "SUM {1 2 3}] set error string to [APPLY doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [APPLY "APPLYTEST.NONPRIMITIVE [1]]
PASS: Executing [APPLY "APPLYTEST.NONPRIMITIVE [1]] set error code to 6 , as expected
INFO: Executing [APPLY "APPLYTEST.NONPRIMITIVE [1]] set error string to [not enough inputs to APPLYTEST.NONPRIMITIVE]
INFO: Executing invalid instruction: [APPLY "APPLYTEST.NONPRIMITIVE [1 2 3]]
PASS: Executing [APPLY "APPLYTEST.NONPRIMITIVE [1 2 3]] set error code to 8 , as expected
INFO: Executing [APPLY "APPLYTEST.NONPRIMITIVE [1 2 3]] set error string to [too much inside ()'s]
PASS: [APPLYTEST.APPLYOUTPUT] returned 3 , as expected.
CALL: MAKE "list []
CALL: REPEAT 5 [MAKE "list LPUT REPCOUNT :list]
PASS: [:list] returned [1 2 3 4 5] , as expected.
CALL: REPEAT 0 [REPORTTESTFAILED [REPEAT 0 executed the body]]
CALL: MAKE "list []
CALL: REPEAT 2 [MAKE "list LPUT "X :list REPEAT 3 [MAKE "list LPUT "Y :list]]
PASS: [:list] returned [X Y Y Y X Y Y Y] , as expected.
CALL: REPEATTEST.OUTPUTINREPEAT
PASS: [REPEATTEST.OUTPUTINREPEAT] returned 50 , as expected.
INFO: Executing invalid instruction: [(REPEAT 100)]
PASS: Executing [(REPEAT 100)] set error code to 6 , as expected
INFO: Executing [(REPEAT 100)] set error string to [not enough inputs to REPEAT]
INFO: Executing invalid instruction: [(REPEAT 100 [] "toomany)]
PASS: Executing [(REPEAT 100 [] "toomany)] set error code to 8 , as expected
INFO: Executing [(REPEAT 100 [] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [REPEAT "word []]
PASS: Executing [REPEAT "word []] set error code to 7
INFO: Executing [REPEAT "word []] set error string to [REPEAT doesn't like word as input]
INFO: Executing invalid instruction: [REPEAT [1] []]
PASS: Executing [REPEAT [1] []] set error code to 7
INFO: Executing [REPEAT [1] []] set error string to [REPEAT doesn't like [1] as input]
INFO: Executing invalid instruction: [REPEAT {1} []]
PASS: Executing [REPEAT {1} []] set error code to 7
INFO: Executing [REPEAT {1} []] set error string to [REPEAT doesn't like {1} as input]
INFO: Executing invalid instruction: [REPEAT 12.3 []]
PASS: Executing [REPEAT 12.3 []] set error code to 7
INFO: Executing [REPEAT 12.3 []] set error string to [REPEAT doesn't like 12.3 as input]
INFO: Executing invalid instruction: [REPEAT -1 []]
PASS: Executing [REPEAT -1 []] set error code to 7
INFO: Executing [REPEAT -1 []] set error string to [REPEAT doesn't like -1 as input]
INFO: Executing invalid instruction: [REPEAT 0 {}]
PASS: Executing [REPEAT 0 {}] set error code to 7
INFO: Executing [REPEAT 0 {}] set error string to [REPEAT doesn't like {} as input]
PASS: [REPCOUNT] returned -1 , as expected.
PASS: [REPCOUNT] returned -1 , as expected.
CALL: MAKE "list []
CALL: REPEAT 2 [MAKE "list LPUT REPCOUNT :list REPEAT 3 [MAKE "list LPUT REPCOUNT :list]]
PASS: [:list] returned [1 1 2 3 2 1 2 3] , as expected.
PASS: [COUNT :word] returned 1000 , as expected.
PASS: REPEAT in main loop did not change REPCOUNT in timer event
PASS: REPEAT in main loop did not change REPCOUNT in timer event
INFO: Executing invalid instruction: [(REPCOUNT "toomany)]
PASS: Executing [(REPCOUNT "toomany)] set error code to 8 , as expected
INFO: Executing [(REPCOUNT "toomany)] set error string to [too much inside ()'s]
PASS: [0 + 0] returned 0 , as expected.
PASS: [0 + 1] returned 1 , as expected.
PASS: [0 + -1] returned -1 , as expected.
PASS: [5 + 0] returned 5 , as expected.
PASS: [5 + 1] returned 6 , as expected.
PASS: [5 + -1] returned 4 , as expected.
PASS: [-5 + 0] returned -5 , as expected.
PASS: [-5 + 1] returned -4 , as expected.
PASS: [-5 + -1] returned -6 , as expected.
PASS: [SUM 0 0] returned 0 , as expected.
PASS: [SUM 0 1] returned 1 , as expected.
PASS: [SUM 0 -1] returned -1 , as expected.
PASS: [SUM 5 0] returned 5 , as expected.
PASS: [SUM 5 1] returned 6 , as expected.
PASS: [SUM 5 -1] returned 4 , as expected.
PASS: [SUM "1 "2] returned 3 , as expected.
PASS: [SUM 1e40 2e39] returned 1.2e+40 , as expected.
PASS: [(SUM)] returned 0 , as expected.
PASS: [(SUM 5)] returned 5 , as expected.
PASS: [(SUM 1 2 3 4 5)] returned 15 , as expected.
PASS: [(SUM 1 2.5 3 4.5 5)] returned 16 , as expected.
INFO: Executing invalid instruction: [[] + 2]
PASS: Executing [[] + 2] set error code to 7
INFO: Executing [[] + 2] set error string to [+ doesn't like [] as input]
INFO: Executing invalid instruction: [[1] + 2]
PASS: Executing [[1] + 2] set error code to 7
INFO: Executing [[1] + 2] set error string to [+ doesn't like [1] as input]
INFO: Executing invalid instruction: [{} + 2]
PASS: Executing [{} + 2] set error code to 7
INFO: Executing [{} + 2] set error string to [+ doesn't like {} as input]
INFO: Executing invalid instruction: [{1} + 2]
PASS: Executing [{1} + 2] set error code to 7
INFO: Executing [{1} + 2] set error string to [+ doesn't like {1} as input]
INFO: Executing invalid instruction: ["one + 2]
PASS: Executing ["one + 2] set error code to 7
INFO: Executing ["one + 2] set error string to [+ doesn't like one as input]
INFO: Executing invalid instruction: ["1a + 2]
PASS: Executing ["1a + 2] set error code to 7
INFO: Executing ["1a + 2] set error string to [+ doesn't like 1a as input]
INFO: Executing invalid instruction: [1 + []]
PASS: Executing [1 + []] set error code to 7
INFO: Executing [1 + []] set error string to [+ doesn't like [] as input]
INFO: Executing invalid instruction: [1 + [2]]
PASS: Executing [1 + [2]] set error code to 7
INFO: Executing [1 + [2]] set error string to [+ doesn't like [2] as input]
INFO: Executing invalid instruction: [1 + {}]
PASS: Executing [1 + {}] set error code to 7
INFO: Executing [1 + {}] set error string to [+ doesn't like {} as input]
INFO: Executing invalid instruction: [1 + {2}]
PASS: Executing [1 + {2}] set error code to 7
INFO: Executing [1 + {2}] set error string to [+ doesn't like {2} as input]
INFO: Executing invalid instruction: [1 + "two]
PASS: Executing [1 + "two] set error code to 7
INFO: Executing [1 + "two] set error string to [+ doesn't like two as input]
INFO: Executing invalid instruction: [1 + "2a]
PASS: Executing [1 + "2a] set error code to 7
INFO: Executing [1 + "2a] set error string to [+ doesn't like 2a as input]
INFO: Executing invalid instruction: [SUM [] 2]
PASS: Executing [SUM [] 2] set error code to 7
INFO: Executing [SUM [] 2] set error string to [SUM doesn't like [] as input]
INFO: Executing invalid instruction: [SUM [1] 2]
PASS: Executing [SUM [1] 2] set error code to 7
INFO: Executing [SUM [1] 2] set error string to [SUM doesn't like [1] as input]
INFO: Executing invalid instruction: [SUM {} 2]
PASS: Executing [SUM {} 2] set error code to 7
INFO: Executing [SUM {} 2] set error string to [SUM doesn't like {} as input]
INFO: Executing invalid instruction: [SUM {1} 2]
PASS: Executing [SUM {1} 2] set error code to 7
INFO: Executing [SUM {1} 2] set error string to [SUM doesn't like {1} as input]
INFO: Executing invalid instruction: [SUM "one 2]
PASS: Executing [SUM "one 2] set error code to 7
INFO: Executing [SUM "one 2] set error string to [SUM doesn't like one as input]
INFO: Executing invalid instruction: [SUM "1a 2]
PASS: Executing [SUM "1a 2] set error code to 7
INFO: Executing [SUM "1a 2] set error string to [SUM doesn't like 1a as input]
INFO: Executing invalid instruction: [SUM 1 []]
PASS: Executing [SUM 1 []] set error code to 7
INFO: Executing [SUM 1 []] set error string to [SUM doesn't like [] as input]
INFO: Executing invalid instruction: [SUM 1 [2]]
PASS: Executing [SUM 1 [2]] set error code to 7
INFO: Executing [SUM 1 [2]] set error string to [SUM doesn't like [2] as input]
INFO: Executing invalid instruction: [SUM 1 {}]
PASS: Executing [SUM 1 {}] set error code to 7
INFO: Executing [SUM 1 {}] set error string to [SUM doesn't like {} as input]
INFO: Executing invalid instruction: [SUM 1 {2}]
PASS: Executing [SUM 1 {2}] set error code to 7
INFO: Executing [SUM 1 {2}] set error string to [SUM doesn't like {2} as input]
INFO: Executing invalid instruction: [SUM 1 "two]
PASS: Executing [SUM 1 "two] set error code to 7
INFO: Executing [SUM 1 "two] set error string to [SUM doesn't like two as input]
INFO: Executing invalid instruction: [SUM 1 "2a]
PASS: Executing [SUM 1 "2a] set error code to 7
INFO: Executing [SUM 1 "2a] set error string to [SUM doesn't like 2a as input]
INFO: Executing invalid instruction: [(SUM 1 2 [] )]
PASS: Executing [(SUM 1 2 [] )] set error code to 7
INFO: Executing [(SUM 1 2 [] )] set error string to [SUM doesn't like [] as input]
INFO: Executing invalid instruction: [(SUM 1 2 [3] )]
PASS: Executing [(SUM 1 2 [3] )] set error code to 7
INFO: Executing [(SUM 1 2 [3] )] set error string to [SUM doesn't like [3] as input]
INFO: Executing invalid instruction: [(SUM 1 2 {} )]
PASS: Executing [(SUM 1 2 {} )] set error code to 7
INFO: Executing [(SUM 1 2 {} )] set error string to [SUM doesn't like {} as input]
INFO: Executing invalid instruction: [(SUM 1 2 {3} )]
PASS: Executing [(SUM 1 2 {3} )] set error code to 7
INFO: Executing [(SUM 1 2 {3} )] set error string to [SUM doesn't like {3} as input]
INFO: Executing invalid instruction: [(SUM 1 2 "three)]
PASS: Executing [(SUM 1 2 "three)] set error code to 7
INFO: Executing [(SUM 1 2 "three)] set error string to [SUM doesn't like three as input]
INFO: Executing invalid instruction: [(SUM 1 2 "3a)]
PASS: Executing [(SUM 1 2 "3a)] set error code to 7
INFO: Executing [(SUM 1 2 "3a)] set error string to [SUM doesn't like 3a as input]
PASS: [0 - 0] returned 0 , as expected.
PASS: [0 - 1] returned -1 , as expected.
PASS: [0 - -1] returned 1 , as expected.
PASS: [5 - 0] returned 5 , as expected.
PASS: [5 - 1] returned 4 , as expected.
PASS: [5 - -1] returned 6 , as expected.
PASS: [-5 - 0] returned -5 , as expected.
PASS: [-5 - 1] returned -6 , as expected.
PASS: [-5 - -1] returned -4 , as expected.
PASS: [DIFFERENCE 0 0] returned 0 , as expected.
PASS: [DIFFERENCE 0 1] returned -1 , as expected.
PASS: [DIFFERENCE 0 -1] returned 1 , as expected.
PASS: [DIFFERENCE 5 0] returned 5 , as expected.
PASS: [DIFFERENCE 5 1] returned 4 , as expected.
PASS: [DIFFERENCE 5 -1] returned 6 , as expected.
PASS: [DIFFERENCE "3 "2] returned 1 , as expected.
PASS: [DIFFERENCE 1.2e40 2e39] returned 1e+40 , as expected.
INFO: Executing invalid instruction: [(DIFFERENCE)]
PASS: Executing [(DIFFERENCE)] set error code to 6 , as expected
INFO: Executing [(DIFFERENCE)] set error string to [not enough inputs to DIFFERENCE]
INFO: Executing invalid instruction: [(DIFFERENCE 5)]
PASS: Executing [(DIFFERENCE 5)] set error code to 6 , as expected
INFO: Executing [(DIFFERENCE 5)] set error string to [not enough inputs to DIFFERENCE]
INFO: Executing invalid instruction: [(DIFFERENCE 5 6 7)]
PASS: Executing [(DIFFERENCE 5 6 7)] set error code to 8 , as expected
INFO: Executing [(DIFFERENCE 5 6 7)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [[] - 2]
PASS: Executing [[] - 2] set error code to 7
INFO: Executing [[] - 2] set error string to [- doesn't like [] as input]
INFO: Executing invalid instruction: [[1] - 2]
PASS: Executing [[1] - 2] set error code to 7
INFO: Executing [[1] - 2] set error string to [- doesn't like [1] as input]
INFO: Executing invalid instruction: [{} - 2]
PASS: Executing [{} - 2] set error code to 7
INFO: Executing [{} - 2] set error string to [- doesn't like {} as input]
INFO: Executing invalid instruction: [{1} - 2]
PASS: Executing [{1} - 2] set error code to 7
INFO: Executing [{1} - 2] set error string to [- doesn't like {1} as input]
INFO: Executing invalid instruction: ["one - 2]
PASS: Executing ["one - 2] set error code to 7
INFO: Executing ["one - 2] set error string to [- doesn't like one as input]
INFO: Executing invalid instruction: ["1a - 2]
PASS: Executing ["1a - 2] set error code to 7
INFO: Executing ["1a - 2] set error string to [- doesn't like 1a as input]
INFO: Executing invalid instruction: [1 - []]
PASS: Executing [1 - []] set error code to 7
INFO: Executing [1 - []] set error string to [- doesn't like [] as input]
INFO: Executing invalid instruction: [1 - [2]]
PASS: Executing [1 - [2]] set error code to 7
INFO: Executing [1 - [2]] set error string to [- doesn't like [2] as input]
INFO: Executing invalid instruction: [1 - {}]
PASS: Executing [1 - {}] set error code to 7
INFO: Executing [1 - {}] set error string to [- doesn't like {} as input]
INFO: Executing invalid instruction: [1 - {2}]
PASS: Executing [1 - {2}] set error code to 7
INFO: Executing [1 - {2}] set error string to [- doesn't like {2} as input]
INFO: Executing invalid instruction: [1 - "two]
PASS: Executing [1 - "two] set error code to 7
INFO: Executing [1 - "two] set error string to [- doesn't like two as input]
INFO: Executing invalid instruction: [1 - "2a]
PASS: Executing [1 - "2a] set error code to 7
INFO: Executing [1 - "2a] set error string to [- doesn't like 2a as input]
INFO: Executing invalid instruction: [DIFFERENCE [] 2]
PASS: Executing [DIFFERENCE [] 2] set error code to 7
INFO: Executing [DIFFERENCE [] 2] set error string to [DIFFERENCE doesn't like [] as input]
INFO: Executing invalid instruction: [DIFFERENCE [1] 2]
PASS: Executing [DIFFERENCE [1] 2] set error code to 7
INFO: Executing [DIFFERENCE [1] 2] set error string to [DIFFERENCE doesn't like [1] as input]
INFO: Executing invalid instruction: [DIFFERENCE {} 2]
PASS: Executing [DIFFERENCE {} 2] set error code to 7
INFO: Executing [DIFFERENCE {} 2] set error string to [DIFFERENCE doesn't like {} as input]
INFO: Executing invalid instruction: [DIFFERENCE {1} 2]
PASS: Executing [DIFFERENCE {1} 2] set error code to 7
INFO: Executing [DIFFERENCE {1} 2] set error string to [DIFFERENCE doesn't like {1} as input]
INFO: Executing invalid instruction: [DIFFERENCE "one 2]
PASS: Executing [DIFFERENCE "one 2] set error code to 7
INFO: Executing [DIFFERENCE "one 2] set error string to [DIFFERENCE doesn't like one as input]
INFO: Executing invalid instruction: [DIFFERENCE "1a 2]
PASS: Executing [DIFFERENCE "1a 2] set error code to 7
INFO: Executing [DIFFERENCE "1a 2] set error string to [DIFFERENCE doesn't like 1a as input]
INFO: Executing invalid instruction: [DIFFERENCE 1 []]
PASS: Executing [DIFFERENCE 1 []] set error code to 7
INFO: Executing [DIFFERENCE 1 []] set error string to [DIFFERENCE doesn't like [] as input]
INFO: Executing invalid instruction: [DIFFERENCE 1 [2]]
PASS: Executing [DIFFERENCE 1 [2]] set error code to 7
INFO: Executing [DIFFERENCE 1 [2]] set error string to [DIFFERENCE doesn't like [2] as input]
INFO: Executing invalid instruction: [DIFFERENCE 1 {}]
PASS: Executing [DIFFERENCE 1 {}] set error code to 7
INFO: Executing [DIFFERENCE 1 {}] set error string to [DIFFERENCE doesn't like {} as input]
INFO: Executing invalid instruction: [DIFFERENCE 1 {2}]
PASS: Executing [DIFFERENCE 1 {2}] set error code to 7
INFO: Executing [DIFFERENCE 1 {2}] set error string to [DIFFERENCE doesn't like {2} as input]
INFO: Executing invalid instruction: [DIFFERENCE 1 "two]
PASS: Executing [DIFFERENCE 1 "two] set error code to 7
INFO: Executing [DIFFERENCE 1 "two] set error string to [DIFFERENCE doesn't like two as input]
INFO: Executing invalid instruction: [DIFFERENCE 1 "2a]
PASS: Executing [DIFFERENCE 1 "2a] set error code to 7
INFO: Executing [DIFFERENCE 1 "2a] set error string to [DIFFERENCE doesn't like 2a as input]
PASS: [-0] returned 0 , as expected.
PASS: [MINUS 0] returned 0 , as expected.
PASS: [MINUS 0] returned 0 , as expected.
PASS: [MINUS 2] returned -2 , as expected.
PASS: [MINUS -2] returned 2 , as expected.
PASS: [MINUS -2e20] returned 2e+20 , as expected.
INFO: Executing invalid instruction: [MINUS []]
PASS: Executing [MINUS []] set error code to 7
INFO: Executing [MINUS []] set error string to [MINUS doesn't like [] as input]
INFO: Executing invalid instruction: [MINUS [1]]
PASS: Executing [MINUS [1]] set error code to 7
INFO: Executing [MINUS [1]] set error string to [MINUS doesn't like [1] as input]
INFO: Executing invalid instruction: [MINUS {}]
PASS: Executing [MINUS {}] set error code to 7
INFO: Executing [MINUS {}] set error string to [MINUS doesn't like {} as input]
INFO: Executing invalid instruction: [MINUS {1}]
PASS: Executing [MINUS {1}] set error code to 7
INFO: Executing [MINUS {1}] set error string to [MINUS doesn't like {1} as input]
INFO: Executing invalid instruction: [MINUS "one]
PASS: Executing [MINUS "one] set error code to 7
INFO: Executing [MINUS "one] set error string to [MINUS doesn't like one as input]
INFO: Executing invalid instruction: [MINUS "1a]
PASS: Executing [MINUS "1a] set error code to 7
INFO: Executing [MINUS "1a] set error string to [MINUS doesn't like 1a as input]
INFO: Executing invalid instruction: [(MINUS)]
PASS: Executing [(MINUS)] set error code to 6 , as expected
INFO: Executing [(MINUS)] set error string to [not enough inputs to MINUS]
INFO: Executing invalid instruction: [(MINUS 1 1)]
PASS: Executing [(MINUS 1 1)] set error code to 8 , as expected
INFO: Executing [(MINUS 1 1)] set error string to [too much inside ()'s]
PASS: [0 * 0] returned 0 , as expected.
PASS: [0 * 1] returned 0 , as expected.
PASS: [1 * 0] returned 0 , as expected.
PASS: [2 * 4] returned 8 , as expected.
PASS: [4 * 2] returned 8 , as expected.
PASS: [-2 * 4] returned -8 , as expected.
PASS: [2 * -4] returned -8 , as expected.
PASS: [-2 * -4] returned 8 , as expected.
PASS: ["2 * "4] returned 8 , as expected.
PASS: [1e10 * 2e20] returned 2e+30 , as expected.
PASS: [1e200 * 1e200] returned +INF , as expected.
PASS: [1e200 * -1e200] returned -INF , as expected.
PASS: [-1e200 * -1e200] returned +INF , as expected.
PASS: [1e200 * 1e-200] returned 1 , as expected.
PASS: [PRODUCT 0 0] returned 0 , as expected.
PASS: [PRODUCT 0 1] returned 0 , as expected.
PASS: [PRODUCT 1 0] returned 0 , as expected.
PASS: [PRODUCT 2 4] returned 8 , as expected.
PASS: [PRODUCT 4 2] returned 8 , as expected.
PASS: [PRODUCT -2 4] returned -8 , as expected.
PASS: [PRODUCT 2 -4] returned -8 , as expected.
PASS: [PRODUCT -2 -4] returned 8 , as expected.
PASS: [PRODUCT "2 "4] returned 8 , as expected.
PASS: [PRODUCT 1e10 2e20] returned 2e+30 , as expected.
PASS: [PRODUCT 1e200 1e200] returned +INF , as expected.
PASS: [PRODUCT 1e200 -1e200] returned -INF , as expected.
PASS: [PRODUCT -1e200 -1e200] returned +INF , as expected.
PASS: [PRODUCT 1e200 1e-200] returned 1 , as expected.
PASS: [(PRODUCT)] returned 1 , as expected.
PASS: [(PRODUCT 5)] returned 5 , as expected.
PASS: [(PRODUCT 1 2 3 4 5)] returned 120 , as expected.
PASS: [(PRODUCT 1 2 3 4 5 0.5)] returned 60 , as expected.
PASS: [(PRODUCT 1.10 1 2 3 4 5)] returned 132 , as expected.
FAIL: [(PRODUCT 1.01 1 2 3 4 5)] returned 121.2 . We expected 121.2
INFO: Executing invalid instruction: [[] * 2]
PASS: Executing [[] * 2] set error code to 7
INFO: Executing [[] * 2] set error string to [* doesn't like [] as input]
INFO: Executing invalid instruction: [[1] * 2]
PASS: Executing [[1] * 2] set error code to 7
INFO: Executing [[1] * 2] set error string to [* doesn't like [1] as input]
INFO: Executing invalid instruction: [{} * 2]
PASS: Executing [{} * 2] set error code to 7
INFO: Executing [{} * 2] set error string to [* doesn't like {} as input]
INFO: Executing invalid instruction: [{1} * 2]
PASS: Executing [{1} * 2] set error code to 7
INFO: Executing [{1} * 2] set error string to [* doesn't like {1} as input]
INFO: Executing invalid instruction: ["one * 2]
PASS: Executing ["one * 2] set error code to 7
INFO: Executing ["one * 2] set error string to [* doesn't like one as input]
INFO: Executing invalid instruction: ["1a * 2]
PASS: Executing ["1a * 2] set error code to 7
INFO: Executing ["1a * 2] set error string to [* doesn't like 1a as input]
INFO: Executing invalid instruction: [1 * []]
PASS: Executing [1 * []] set error code to 7
INFO: Executing [1 * []] set error string to [* doesn't like [] as input]
INFO: Executing invalid instruction: [1 * [2]]
PASS: Executing [1 * [2]] set error code to 7
INFO: Executing [1 * [2]] set error string to [* doesn't like [2] as input]
INFO: Executing invalid instruction: [1 * {}]
PASS: Executing [1 * {}] set error code to 7
INFO: Executing [1 * {}] set error string to [* doesn't like {} as input]
INFO: Executing invalid instruction: [1 * {2}]
PASS: Executing [1 * {2}] set error code to 7
INFO: Executing [1 * {2}] set error string to [* doesn't like {2} as input]
INFO: Executing invalid instruction: [1 * "two]
PASS: Executing [1 * "two] set error code to 7
INFO: Executing [1 * "two] set error string to [* doesn't like two as input]
INFO: Executing invalid instruction: [1 * "2a]
PASS: Executing [1 * "2a] set error code to 7
INFO: Executing [1 * "2a] set error string to [* doesn't like 2a as input]
INFO: Executing invalid instruction: [PRODUCT [] 2]
PASS: Executing [PRODUCT [] 2] set error code to 7
INFO: Executing [PRODUCT [] 2] set error string to [PRODUCT doesn't like [] as input]
INFO: Executing invalid instruction: [PRODUCT [1] 2]
PASS: Executing [PRODUCT [1] 2] set error code to 7
INFO: Executing [PRODUCT [1] 2] set error string to [PRODUCT doesn't like [1] as input]
INFO: Executing invalid instruction: [PRODUCT {} 2]
PASS: Executing [PRODUCT {} 2] set error code to 7
INFO: Executing [PRODUCT {} 2] set error string to [PRODUCT doesn't like {} as input]
INFO: Executing invalid instruction: [PRODUCT {1} 2]
PASS: Executing [PRODUCT {1} 2] set error code to 7
INFO: Executing [PRODUCT {1} 2] set error string to [PRODUCT doesn't like {1} as input]
INFO: Executing invalid instruction: [PRODUCT "one 2]
PASS: Executing [PRODUCT "one 2] set error code to 7
INFO: Executing [PRODUCT "one 2] set error string to [PRODUCT doesn't like one as input]
INFO: Executing invalid instruction: [PRODUCT "1a 2]
PASS: Executing [PRODUCT "1a 2] set error code to 7
INFO: Executing [PRODUCT "1a 2] set error string to [PRODUCT doesn't like 1a as input]
INFO: Executing invalid instruction: [PRODUCT 1 []]
PASS: Executing [PRODUCT 1 []] set error code to 7
INFO: Executing [PRODUCT 1 []] set error string to [PRODUCT doesn't like [] as input]
INFO: Executing invalid instruction: [PRODUCT 1 [2]]
PASS: Executing [PRODUCT 1 [2]] set error code to 7
INFO: Executing [PRODUCT 1 [2]] set error string to [PRODUCT doesn't like [2] as input]
INFO: Executing invalid instruction: [PRODUCT 1 {}]
PASS: Executing [PRODUCT 1 {}] set error code to 7
INFO: Executing [PRODUCT 1 {}] set error string to [PRODUCT doesn't like {} as input]
INFO: Executing invalid instruction: [PRODUCT 1 {2}]
PASS: Executing [PRODUCT 1 {2}] set error code to 7
INFO: Executing [PRODUCT 1 {2}] set error string to [PRODUCT doesn't like {2} as input]
INFO: Executing invalid instruction: [PRODUCT 1 "two]
PASS: Executing [PRODUCT 1 "two] set error code to 7
INFO: Executing [PRODUCT 1 "two] set error string to [PRODUCT doesn't like two as input]
INFO: Executing invalid instruction: [PRODUCT 1 "2a]
PASS: Executing [PRODUCT 1 "2a] set error code to 7
INFO: Executing [PRODUCT 1 "2a] set error string to [PRODUCT doesn't like 2a as input]
INFO: Executing invalid instruction: [(PRODUCT 1 2 [] )]
PASS: Executing [(PRODUCT 1 2 [] )] set error code to 7
INFO: Executing [(PRODUCT 1 2 [] )] set error string to [PRODUCT doesn't like [] as input]
INFO: Executing invalid instruction: [(PRODUCT 1 2 [3] )]
PASS: Executing [(PRODUCT 1 2 [3] )] set error code to 7
INFO: Executing [(PRODUCT 1 2 [3] )] set error string to [PRODUCT doesn't like [3] as input]
INFO: Executing invalid instruction: [(PRODUCT 1 2 {} )]
PASS: Executing [(PRODUCT 1 2 {} )] set error code to 7
INFO: Executing [(PRODUCT 1 2 {} )] set error string to [PRODUCT doesn't like {} as input]
INFO: Executing invalid instruction: [(PRODUCT 1 2 {3} )]
PASS: Executing [(PRODUCT 1 2 {3} )] set error code to 7
INFO: Executing [(PRODUCT 1 2 {3} )] set error string to [PRODUCT doesn't like {3} as input]
INFO: Executing invalid instruction: [(PRODUCT 1 2 "three)]
PASS: Executing [(PRODUCT 1 2 "three)] set error code to 7
INFO: Executing [(PRODUCT 1 2 "three)] set error string to [PRODUCT doesn't like three as input]
INFO: Executing invalid instruction: [(PRODUCT 1 2 "3a)]
PASS: Executing [(PRODUCT 1 2 "3a)] set error code to 7
INFO: Executing [(PRODUCT 1 2 "3a)] set error string to [PRODUCT doesn't like 3a as input]
PASS: [5 / 2] returned 2.5 , as expected.
PASS: [5 / -2] returned -2.5 , as expected.
PASS: [-5 / 2] returned -2.5 , as expected.
PASS: [-5 / -2] returned 2.5 , as expected.
PASS: [4 / 2] returned 2 , as expected.
PASS: [0 / 2] returned 0 , as expected.
PASS: [2.2 / 2] returned 1.1 , as expected.
FAIL: [6.6 / 2.2] returned 3 . We expected 3
PASS: [2e40 / 2e20] returned 1e+20 , as expected.
PASS: [QUOTIENT 5 2] returned 2.5 , as expected.
PASS: [QUOTIENT 5 -2] returned -2.5 , as expected.
PASS: [QUOTIENT -5 2] returned -2.5 , as expected.
PASS: [QUOTIENT -5 -2] returned 2.5 , as expected.
PASS: [QUOTIENT 4 2] returned 2 , as expected.
PASS: [QUOTIENT 0 2] returned 0 , as expected.
PASS: [QUOTIENT 2.2 2] returned 1.1 , as expected.
FAIL: [QUOTIENT 6.6 2.2] returned 3 . We expected 3
PASS: [QUOTIENT "5 "2] returned 2.5 , as expected.
PASS: [QUOTIENT 2e40 2e20] returned 1e+20 , as expected.
PASS: [(QUOTIENT 1)] returned 1 , as expected.
PASS: [(QUOTIENT 10)] returned 0.1 , as expected.
PASS: [(QUOTIENT 0.5)] returned 2 , as expected.
PASS: [(QUOTIENT 1e40)] returned 1e-40 , as expected.
INFO: Executing invalid instruction: [(QUOTIENT)]
PASS: Executing [(QUOTIENT)] set error code to 6 , as expected
INFO: Executing [(QUOTIENT)] set error string to [not enough inputs to QUOTIENT]
INFO: Executing invalid instruction: [(QUOTIENT 5 6 7)]
PASS: Executing [(QUOTIENT 5 6 7)] set error code to 8 , as expected
INFO: Executing [(QUOTIENT 5 6 7)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [[] / 2]
PASS: Executing [[] / 2] set error code to 7
INFO: Executing [[] / 2] set error string to [/ doesn't like [] as input]
INFO: Executing invalid instruction: [[1] / 2]
PASS: Executing [[1] / 2] set error code to 7
INFO: Executing [[1] / 2] set error string to [/ doesn't like [1] as input]
INFO: Executing invalid instruction: [{} / 2]
PASS: Executing [{} / 2] set error code to 7
INFO: Executing [{} / 2] set error string to [/ doesn't like {} as input]
INFO: Executing invalid instruction: [{1} / 2]
PASS: Executing [{1} / 2] set error code to 7
INFO: Executing [{1} / 2] set error string to [/ doesn't like {1} as input]
INFO: Executing invalid instruction: ["one / 2]
PASS: Executing ["one / 2] set error code to 7
INFO: Executing ["one / 2] set error string to [/ doesn't like one as input]
INFO: Executing invalid instruction: ["1a / 2]
PASS: Executing ["1a / 2] set error code to 7
INFO: Executing ["1a / 2] set error string to [/ doesn't like 1a as input]
INFO: Executing invalid instruction: [1 / 0]
PASS: Executing [1 / 0] set error code to 4
INFO: Executing [1 / 0] set error string to [/ doesn't like 0 as input]
INFO: Executing invalid instruction: [1 / []]
PASS: Executing [1 / []] set error code to 7
INFO: Executing [1 / []] set error string to [/ doesn't like [] as input]
INFO: Executing invalid instruction: [1 / [2]]
PASS: Executing [1 / [2]] set error code to 7
INFO: Executing [1 / [2]] set error string to [/ doesn't like [2] as input]
INFO: Executing invalid instruction: [1 / {}]
PASS: Executing [1 / {}] set error code to 7
INFO: Executing [1 / {}] set error string to [/ doesn't like {} as input]
INFO: Executing invalid instruction: [1 / {2}]
PASS: Executing [1 / {2}] set error code to 7
INFO: Executing [1 / {2}] set error string to [/ doesn't like {2} as input]
INFO: Executing invalid instruction: [1 / "two]
PASS: Executing [1 / "two] set error code to 7
INFO: Executing [1 / "two] set error string to [/ doesn't like two as input]
INFO: Executing invalid instruction: [1 / "2a]
PASS: Executing [1 / "2a] set error code to 7
INFO: Executing [1 / "2a] set error string to [/ doesn't like 2a as input]
INFO: Executing invalid instruction: [(QUOTIENT 0 )]
PASS: Executing [(QUOTIENT 0 )] set error code to 4
INFO: Executing [(QUOTIENT 0 )] set error string to [QUOTIENT doesn't like 0 as input]
INFO: Executing invalid instruction: [(QUOTIENT [] )]
PASS: Executing [(QUOTIENT [] )] set error code to 7
INFO: Executing [(QUOTIENT [] )] set error string to [QUOTIENT doesn't like [] as input]
INFO: Executing invalid instruction: [(QUOTIENT [1] )]
PASS: Executing [(QUOTIENT [1] )] set error code to 7
INFO: Executing [(QUOTIENT [1] )] set error string to [QUOTIENT doesn't like [1] as input]
INFO: Executing invalid instruction: [(QUOTIENT {} )]
PASS: Executing [(QUOTIENT {} )] set error code to 7
INFO: Executing [(QUOTIENT {} )] set error string to [QUOTIENT doesn't like {} as input]
INFO: Executing invalid instruction: [(QUOTIENT {1} )]
PASS: Executing [(QUOTIENT {1} )] set error code to 7
INFO: Executing [(QUOTIENT {1} )] set error string to [QUOTIENT doesn't like {1} as input]
INFO: Executing invalid instruction: [(QUOTIENT "one )]
PASS: Executing [(QUOTIENT "one )] set error code to 7
INFO: Executing [(QUOTIENT "one )] set error string to [QUOTIENT doesn't like one as input]
INFO: Executing invalid instruction: [(QUOTIENT "1a )]
PASS: Executing [(QUOTIENT "1a )] set error code to 7
INFO: Executing [(QUOTIENT "1a )] set error string to [QUOTIENT doesn't like 1a as input]
INFO: Executing invalid instruction: [QUOTIENT [] 2]
PASS: Executing [QUOTIENT [] 2] set error code to 7
INFO: Executing [QUOTIENT [] 2] set error string to [QUOTIENT doesn't like [] as input]
INFO: Executing invalid instruction: [QUOTIENT [1] 2]
PASS: Executing [QUOTIENT [1] 2] set error code to 7
INFO: Executing [QUOTIENT [1] 2] set error string to [QUOTIENT doesn't like [1] as input]
INFO: Executing invalid instruction: [QUOTIENT {} 2]
PASS: Executing [QUOTIENT {} 2] set error code to 7
INFO: Executing [QUOTIENT {} 2] set error string to [QUOTIENT doesn't like {} as input]
INFO: Executing invalid instruction: [QUOTIENT {1} 2]
PASS: Executing [QUOTIENT {1} 2] set error code to 7
INFO: Executing [QUOTIENT {1} 2] set error string to [QUOTIENT doesn't like {1} as input]
INFO: Executing invalid instruction: [QUOTIENT "one 2]
PASS: Executing [QUOTIENT "one 2] set error code to 7
INFO: Executing [QUOTIENT "one 2] set error string to [QUOTIENT doesn't like one as input]
INFO: Executing invalid instruction: [QUOTIENT "1a 2]
PASS: Executing [QUOTIENT "1a 2] set error code to 7
INFO: Executing [QUOTIENT "1a 2] set error string to [QUOTIENT doesn't like 1a as input]
INFO: Executing invalid instruction: [QUOTIENT 1 0]
PASS: Executing [QUOTIENT 1 0] set error code to 4
INFO: Executing [QUOTIENT 1 0] set error string to [QUOTIENT doesn't like 0 as input]
INFO: Executing invalid instruction: [QUOTIENT 1 []]
PASS: Executing [QUOTIENT 1 []] set error code to 7
INFO: Executing [QUOTIENT 1 []] set error string to [QUOTIENT doesn't like [] as input]
INFO: Executing invalid instruction: [QUOTIENT 1 [2]]
PASS: Executing [QUOTIENT 1 [2]] set error code to 7
INFO: Executing [QUOTIENT 1 [2]] set error string to [QUOTIENT doesn't like [2] as input]
INFO: Executing invalid instruction: [QUOTIENT 1 {}]
PASS: Executing [QUOTIENT 1 {}] set error code to 7
INFO: Executing [QUOTIENT 1 {}] set error string to [QUOTIENT doesn't like {} as input]
INFO: Executing invalid instruction: [QUOTIENT 1 {2}]
PASS: Executing [QUOTIENT 1 {2}] set error code to 7
INFO: Executing [QUOTIENT 1 {2}] set error string to [QUOTIENT doesn't like {2} as input]
INFO: Executing invalid instruction: [QUOTIENT 1 "two]
PASS: Executing [QUOTIENT 1 "two] set error code to 7
INFO: Executing [QUOTIENT 1 "two] set error string to [QUOTIENT doesn't like two as input]
INFO: Executing invalid instruction: [QUOTIENT 1 "2a]
PASS: Executing [QUOTIENT 1 "2a] set error code to 7
INFO: Executing [QUOTIENT 1 "2a] set error string to [QUOTIENT doesn't like 2a as input]
INFO: Executing invalid instruction: [QUOTIENT 0 "2a]
PASS: Executing [QUOTIENT 0 "2a] set error code to 7
INFO: Executing [QUOTIENT 0 "2a] set error string to [QUOTIENT doesn't like 2a as input]
PASS: [REMAINDER 5 6] returned 5 , as expected.
PASS: [REMAINDER 6 2] returned 0 , as expected.
PASS: [REMAINDER 0 2] returned 0 , as expected.
PASS: [REMAINDER 5 5] returned 0 , as expected.
PASS: [REMAINDER 6 4] returned 2 , as expected.
PASS: [REMAINDER -6 4] returned -2 , as expected.
PASS: [REMAINDER 6 -4] returned 2 , as expected.
PASS: [REMAINDER -6 -4] returned -2 , as expected.
PASS: [REMAINDER "5 "2] returned 1 , as expected.
INFO: Executing invalid instruction: [(REMAINDER)]
PASS: Executing [(REMAINDER)] set error code to 6 , as expected
INFO: Executing [(REMAINDER)] set error string to [not enough inputs to REMAINDER]
INFO: Executing invalid instruction: [(REMAINDER 1)]
PASS: Executing [(REMAINDER 1)] set error code to 6 , as expected
INFO: Executing [(REMAINDER 1)] set error string to [not enough inputs to REMAINDER]
INFO: Executing invalid instruction: [(REMAINDER 5 6 7)]
PASS: Executing [(REMAINDER 5 6 7)] set error code to 8 , as expected
INFO: Executing [(REMAINDER 5 6 7)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [REMAINDER [] 2]
PASS: Executing [REMAINDER [] 2] set error code to 7
INFO: Executing [REMAINDER [] 2] set error string to [REMAINDER doesn't like [] as input]
INFO: Executing invalid instruction: [REMAINDER [1] 2]
PASS: Executing [REMAINDER [1] 2] set error code to 7
INFO: Executing [REMAINDER [1] 2] set error string to [REMAINDER doesn't like [1] as input]
INFO: Executing invalid instruction: [REMAINDER {} 2]
PASS: Executing [REMAINDER {} 2] set error code to 7
INFO: Executing [REMAINDER {} 2] set error string to [REMAINDER doesn't like {} as input]
INFO: Executing invalid instruction: [REMAINDER {1} 2]
PASS: Executing [REMAINDER {1} 2] set error code to 7
INFO: Executing [REMAINDER {1} 2] set error string to [REMAINDER doesn't like {1} as input]
INFO: Executing invalid instruction: [REMAINDER "one 2]
PASS: Executing [REMAINDER "one 2] set error code to 7
INFO: Executing [REMAINDER "one 2] set error string to [REMAINDER doesn't like one as input]
INFO: Executing invalid instruction: [REMAINDER "1a 2]
PASS: Executing [REMAINDER "1a 2] set error code to 7
INFO: Executing [REMAINDER "1a 2] set error string to [REMAINDER doesn't like 1a as input]
INFO: Executing invalid instruction: [REMAINDER 1 0]
PASS: Executing [REMAINDER 1 0] set error code to 4
INFO: Executing [REMAINDER 1 0] set error string to [REMAINDER doesn't like 0 as input]
INFO: Executing invalid instruction: [REMAINDER 1 []]
PASS: Executing [REMAINDER 1 []] set error code to 7
INFO: Executing [REMAINDER 1 []] set error string to [REMAINDER doesn't like [] as input]
INFO: Executing invalid instruction: [REMAINDER 1 [2]]
PASS: Executing [REMAINDER 1 [2]] set error code to 7
INFO: Executing [REMAINDER 1 [2]] set error string to [REMAINDER doesn't like [2] as input]
INFO: Executing invalid instruction: [REMAINDER 1 {}]
PASS: Executing [REMAINDER 1 {}] set error code to 7
INFO: Executing [REMAINDER 1 {}] set error string to [REMAINDER doesn't like {} as input]
INFO: Executing invalid instruction: [REMAINDER 1 {2}]
PASS: Executing [REMAINDER 1 {2}] set error code to 7
INFO: Executing [REMAINDER 1 {2}] set error string to [REMAINDER doesn't like {2} as input]
INFO: Executing invalid instruction: [REMAINDER 1 "two]
PASS: Executing [REMAINDER 1 "two] set error code to 7
INFO: Executing [REMAINDER 1 "two] set error string to [REMAINDER doesn't like two as input]
INFO: Executing invalid instruction: [REMAINDER 1 "2a]
PASS: Executing [REMAINDER 1 "2a] set error code to 7
INFO: Executing [REMAINDER 1 "2a] set error string to [REMAINDER doesn't like 2a as input]
INFO: Executing invalid instruction: [REMAINDER 0 "2a]
PASS: Executing [REMAINDER 0 "2a] set error code to 7
INFO: Executing [REMAINDER 0 "2a] set error string to [REMAINDER doesn't like 2a as input]
PASS: [MODULO 5 6] returned 5 , as expected.
PASS: [MODULO 6 2] returned 0 , as expected.
PASS: [MODULO 0 2] returned 0 , as expected.
PASS: [MODULO 5 5] returned 0 , as expected.
PASS: [MODULO 6 4] returned 2 , as expected.
PASS: [MODULO 6 -4] returned -2 , as expected.
PASS: [MODULO -6 4] returned 2 , as expected.
PASS: [MODULO -6 -4] returned -2 , as expected.
PASS: [MODULO "5 "2] returned 1 , as expected.
INFO: Executing invalid instruction: [(MODULO)]
PASS: Executing [(MODULO)] set error code to 6 , as expected
INFO: Executing [(MODULO)] set error string to [not enough inputs to MODULO]
INFO: Executing invalid instruction: [(MODULO 1)]
PASS: Executing [(MODULO 1)] set error code to 6 , as expected
INFO: Executing [(MODULO 1)] set error string to [not enough inputs to MODULO]
INFO: Executing invalid instruction: [(MODULO 5 6 7)]
PASS: Executing [(MODULO 5 6 7)] set error code to 8 , as expected
INFO: Executing [(MODULO 5 6 7)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [MODULO [] 2]
PASS: Executing [MODULO [] 2] set error code to 7
INFO: Executing [MODULO [] 2] set error string to [MODULO doesn't like [] as input]
INFO: Executing invalid instruction: [MODULO [1] 2]
PASS: Executing [MODULO [1] 2] set error code to 7
INFO: Executing [MODULO [1] 2] set error string to [MODULO doesn't like [1] as input]
INFO: Executing invalid instruction: [MODULO {} 2]
PASS: Executing [MODULO {} 2] set error code to 7
INFO: Executing [MODULO {} 2] set error string to [MODULO doesn't like {} as input]
INFO: Executing invalid instruction: [MODULO {1} 2]
PASS: Executing [MODULO {1} 2] set error code to 7
INFO: Executing [MODULO {1} 2] set error string to [MODULO doesn't like {1} as input]
INFO: Executing invalid instruction: [MODULO "one 2]
PASS: Executing [MODULO "one 2] set error code to 7
INFO: Executing [MODULO "one 2] set error string to [MODULO doesn't like one as input]
INFO: Executing invalid instruction: [MODULO "1a 2]
PASS: Executing [MODULO "1a 2] set error code to 7
INFO: Executing [MODULO "1a 2] set error string to [MODULO doesn't like 1a as input]
INFO: Executing invalid instruction: [MODULO 1 0]
PASS: Executing [MODULO 1 0] set error code to 4
INFO: Executing [MODULO 1 0] set error string to [MODULO doesn't like 0 as input]
INFO: Executing invalid instruction: [MODULO 1 []]
PASS: Executing [MODULO 1 []] set error code to 7
INFO: Executing [MODULO 1 []] set error string to [MODULO doesn't like [] as input]
INFO: Executing invalid instruction: [MODULO 1 [2]]
PASS: Executing [MODULO 1 [2]] set error code to 7
INFO: Executing [MODULO 1 [2]] set error string to [MODULO doesn't like [2] as input]
INFO: Executing invalid instruction: [MODULO 1 {}]
PASS: Executing [MODULO 1 {}] set error code to 7
INFO: Executing [MODULO 1 {}] set error string to [MODULO doesn't like {} as input]
INFO: Executing invalid instruction: [MODULO 1 {2}]
PASS: Executing [MODULO 1 {2}] set error code to 7
INFO: Executing [MODULO 1 {2}] set error string to [MODULO doesn't like {2} as input]
INFO: Executing invalid instruction: [MODULO 1 "two]
PASS: Executing [MODULO 1 "two] set error code to 7
INFO: Executing [MODULO 1 "two] set error string to [MODULO doesn't like two as input]
INFO: Executing invalid instruction: [MODULO 1 "2a]
PASS: Executing [MODULO 1 "2a] set error code to 7
INFO: Executing [MODULO 1 "2a] set error string to [MODULO doesn't like 2a as input]
INFO: Executing invalid instruction: [MODULO 0 "2a]
PASS: Executing [MODULO 0 "2a] set error code to 7
INFO: Executing [MODULO 0 "2a] set error string to [MODULO doesn't like 2a as input]
PASS: [INT 0] returned 0 , as expected.
PASS: [INT 8] returned 8 , as expected.
PASS: [INT -8] returned -8 , as expected.
PASS: [INT 8.9] returned 8 , as expected.
PASS: [INT 8.1] returned 8 , as expected.
PASS: [INT 8.9999999] returned 8 , as expected.
PASS: [INT -8.9999999] returned -8 , as expected.
PASS: [INT 2.3e40] returned 2.3e+40 , as expected.
INFO: Executing invalid instruction: [(INT)]
PASS: Executing [(INT)] set error code to 6 , as expected
INFO: Executing [(INT)] set error string to [not enough inputs to INT]
INFO: Executing invalid instruction: [(INT 1 2)]
PASS: Executing [(INT 1 2)] set error code to 8 , as expected
INFO: Executing [(INT 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [INT []]
PASS: Executing [INT []] set error code to 7
INFO: Executing [INT []] set error string to [INT doesn't like [] as input]
INFO: Executing invalid instruction: [INT [1]]
PASS: Executing [INT [1]] set error code to 7
INFO: Executing [INT [1]] set error string to [INT doesn't like [1] as input]
INFO: Executing invalid instruction: [INT {}]
PASS: Executing [INT {}] set error code to 7
INFO: Executing [INT {}] set error string to [INT doesn't like {} as input]
INFO: Executing invalid instruction: [INT {1}]
PASS: Executing [INT {1}] set error code to 7
INFO: Executing [INT {1}] set error string to [INT doesn't like {1} as input]
INFO: Executing invalid instruction: [INT "one]
PASS: Executing [INT "one] set error code to 7
INFO: Executing [INT "one] set error string to [INT doesn't like one as input]
INFO: Executing invalid instruction: [INT "1a]
PASS: Executing [INT "1a] set error code to 7
INFO: Executing [INT "1a] set error string to [INT doesn't like 1a as input]
PASS: [ROUND 0] returned 0 , as expected.
PASS: [ROUND 8] returned 8 , as expected.
PASS: [ROUND -8] returned -8 , as expected.
PASS: [ROUND 8.1] returned 8 , as expected.
PASS: [ROUND 8.9] returned 9 , as expected.
PASS: [ROUND 8.5] returned 9 , as expected.
PASS: [ROUND 8.49] returned 8 , as expected.
PASS: [ROUND -8.9] returned -9 , as expected.
PASS: [ROUND -8.1] returned -8 , as expected.
PASS: [ROUND 2.3e40] returned 2.3e+40 , as expected.
INFO: Executing invalid instruction: [(ROUND)]
PASS: Executing [(ROUND)] set error code to 6 , as expected
INFO: Executing [(ROUND)] set error string to [not enough inputs to ROUND]
INFO: Executing invalid instruction: [(ROUND 1 2)]
PASS: Executing [(ROUND 1 2)] set error code to 8 , as expected
INFO: Executing [(ROUND 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ROUND []]
PASS: Executing [ROUND []] set error code to 7
INFO: Executing [ROUND []] set error string to [ROUND doesn't like [] as input]
INFO: Executing invalid instruction: [ROUND [1]]
PASS: Executing [ROUND [1]] set error code to 7
INFO: Executing [ROUND [1]] set error string to [ROUND doesn't like [1] as input]
INFO: Executing invalid instruction: [ROUND {}]
PASS: Executing [ROUND {}] set error code to 7
INFO: Executing [ROUND {}] set error string to [ROUND doesn't like {} as input]
INFO: Executing invalid instruction: [ROUND {1}]
PASS: Executing [ROUND {1}] set error code to 7
INFO: Executing [ROUND {1}] set error string to [ROUND doesn't like {1} as input]
INFO: Executing invalid instruction: [ROUND "one]
PASS: Executing [ROUND "one] set error code to 7
INFO: Executing [ROUND "one] set error string to [ROUND doesn't like one as input]
INFO: Executing invalid instruction: [ROUND "1a]
PASS: Executing [ROUND "1a] set error code to 7
INFO: Executing [ROUND "1a] set error string to [ROUND doesn't like 1a as input]
PASS: [ABS 0] returned 0 , as expected.
PASS: [ABS 8] returned 8 , as expected.
PASS: [ABS -8] returned 8 , as expected.
PASS: [ABS 8.1] returned 8.1 , as expected.
PASS: [ABS -8.1] returned 8.1 , as expected.
PASS: [ABS 2.3e40] returned 2.3e+40 , as expected.
INFO: Executing invalid instruction: [(ABS)]
PASS: Executing [(ABS)] set error code to 6 , as expected
INFO: Executing [(ABS)] set error string to [not enough inputs to ABS]
INFO: Executing invalid instruction: [(ABS 1 2)]
PASS: Executing [(ABS 1 2)] set error code to 8 , as expected
INFO: Executing [(ABS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ABS []]
PASS: Executing [ABS []] set error code to 7
INFO: Executing [ABS []] set error string to [> doesn't like [] as input]
INFO: Executing invalid instruction: [ABS [1]]
PASS: Executing [ABS [1]] set error code to 7
INFO: Executing [ABS [1]] set error string to [> doesn't like [1] as input]
INFO: Executing invalid instruction: [ABS {}]
PASS: Executing [ABS {}] set error code to 7
INFO: Executing [ABS {}] set error string to [> doesn't like {} as input]
INFO: Executing invalid instruction: [ABS {1}]
PASS: Executing [ABS {1}] set error code to 7
INFO: Executing [ABS {1}] set error string to [> doesn't like {1} as input]
INFO: Executing invalid instruction: [ABS "one]
PASS: Executing [ABS "one] set error code to 7
INFO: Executing [ABS "one] set error string to [> doesn't like one as input]
INFO: Executing invalid instruction: [ABS "1a]
PASS: Executing [ABS "1a] set error code to 7
INFO: Executing [ABS "1a] set error string to [> doesn't like 1a as input]
PASS: [SIGN 0] returned 0 , as expected.
PASS: [SIGN 8] returned 1 , as expected.
PASS: [SIGN -8] returned -1 , as expected.
PASS: [SIGN 0.01] returned 1 , as expected.
PASS: [SIGN -0.01] returned -1 , as expected.
PASS: [SIGN 98.6] returned 1 , as expected.
PASS: [SIGN -98.6] returned -1 , as expected.
PASS: [SIGN 2.3e40] returned 1 , as expected.
INFO: Executing invalid instruction: [(SIGN)]
PASS: Executing [(SIGN)] set error code to 6 , as expected
INFO: Executing [(SIGN)] set error string to [not enough inputs to SIGN]
INFO: Executing invalid instruction: [(SIGN 1 2)]
PASS: Executing [(SIGN 1 2)] set error code to 8 , as expected
INFO: Executing [(SIGN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SIGN []]
PASS: Executing [SIGN []] set error code to 7
INFO: Executing [SIGN []] set error string to [> doesn't like [] as input]
INFO: Executing invalid instruction: [SIGN [1]]
PASS: Executing [SIGN [1]] set error code to 7
INFO: Executing [SIGN [1]] set error string to [> doesn't like [1] as input]
INFO: Executing invalid instruction: [SIGN {}]
PASS: Executing [SIGN {}] set error code to 7
INFO: Executing [SIGN {}] set error string to [> doesn't like {} as input]
INFO: Executing invalid instruction: [SIGN {1}]
PASS: Executing [SIGN {1}] set error code to 7
INFO: Executing [SIGN {1}] set error string to [> doesn't like {1} as input]
INFO: Executing invalid instruction: [SIGN "one]
PASS: Executing [SIGN "one] set error code to 7
INFO: Executing [SIGN "one] set error string to [> doesn't like one as input]
INFO: Executing invalid instruction: [SIGN "1a]
PASS: Executing [SIGN "1a] set error code to 7
INFO: Executing [SIGN "1a] set error string to [> doesn't like 1a as input]
PASS: [SQRT 0] returned 0 , as expected.
PASS: [SQRT 4] returned 2 , as expected.
PASS: [SQRT 9] returned 3 , as expected.
PASS: [SQRT 1.44] returned 1.2 , as expected.
FAIL: [SQRT 2] returned 1.4142135623731 . We expected 1.4142135623731
PASS: [SQRT 1e40] returned 1e+20 , as expected.
INFO: Executing invalid instruction: [(SQRT)]
PASS: Executing [(SQRT)] set error code to 6 , as expected
INFO: Executing [(SQRT)] set error string to [not enough inputs to SQRT]
INFO: Executing invalid instruction: [(SQRT 1 2)]
PASS: Executing [(SQRT 1 2)] set error code to 8 , as expected
INFO: Executing [(SQRT 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SQRT -1]
PASS: Executing [SQRT -1] set error code to 4
INFO: Executing [SQRT -1] set error string to [SQRT doesn't like -1 as input]
INFO: Executing invalid instruction: [SQRT []]
PASS: Executing [SQRT []] set error code to 7
INFO: Executing [SQRT []] set error string to [SQRT doesn't like [] as input]
INFO: Executing invalid instruction: [SQRT [1]]
PASS: Executing [SQRT [1]] set error code to 7
INFO: Executing [SQRT [1]] set error string to [SQRT doesn't like [1] as input]
INFO: Executing invalid instruction: [SQRT {}]
PASS: Executing [SQRT {}] set error code to 7
INFO: Executing [SQRT {}] set error string to [SQRT doesn't like {} as input]
INFO: Executing invalid instruction: [SQRT {1}]
PASS: Executing [SQRT {1}] set error code to 7
INFO: Executing [SQRT {1}] set error string to [SQRT doesn't like {1} as input]
INFO: Executing invalid instruction: [SQRT "one]
PASS: Executing [SQRT "one] set error code to 7
INFO: Executing [SQRT "one] set error string to [SQRT doesn't like one as input]
INFO: Executing invalid instruction: [SQRT "1a]
PASS: Executing [SQRT "1a] set error code to 7
INFO: Executing [SQRT "1a] set error string to [SQRT doesn't like 1a as input]
PASS: [POWER 1 0] returned 1 , as expected.
PASS: [POWER -1 0] returned 1 , as expected.
PASS: [POWER 2 0] returned 1 , as expected.
PASS: [POWER 1.23 0] returned 1 , as expected.
PASS: [POWER 1e40 0] returned 1 , as expected.
PASS: [POWER 0 1] returned 0 , as expected.
PASS: [POWER 1 1] returned 1 , as expected.
PASS: [POWER -1 1] returned -1 , as expected.
PASS: [POWER 2 1] returned 2 , as expected.
PASS: [POWER 1.23 1] returned 1.23 , as expected.
PASS: [POWER 1e40 1] returned 1e+40 , as expected.
PASS: [POWER 0 2] returned 0 , as expected.
PASS: [POWER 1 2] returned 1 , as expected.
PASS: [POWER -1 2] returned 1 , as expected.
PASS: [POWER 2 2] returned 4 , as expected.
PASS: [POWER 1.23 2] returned 1.5129 , as expected.
PASS: [POWER 1e40 2] returned 1e+80 , as expected.
PASS: [POWER 0 5] returned 0 , as expected.
PASS: [POWER 1 5] returned 1 , as expected.
PASS: [POWER -1 5] returned -1 , as expected.
PASS: [POWER 2 5] returned 32 , as expected.
FAIL: [POWER 1.1 5] returned 1.61051 . We expected 1.61051
FAIL: [POWER -1.1 5] returned -1.61051 . We expected -1.61051
PASS: [POWER 1e2 5] returned 10000000000 , as expected.
PASS: [POWER 1e-2 5] returned 1e-10 , as expected.
PASS: [POWER 1 -1] returned 1 , as expected.
PASS: [POWER 2 -1] returned 0.5 , as expected.
PASS: [POWER 0.5 -1] returned 2 , as expected.
PASS: [POWER 1e40 -1] returned 1e-40 , as expected.
PASS: [POWER -1 -1] returned -1 , as expected.
PASS: [POWER 1 2] returned 1 , as expected.
PASS: [POWER 2 2] returned 4 , as expected.
PASS: [POWER 1.23 2] returned 1.5129 , as expected.
PASS: [POWER 1e40 -1] returned 1e-40 , as expected.
PASS: [POWER -1 -1] returned -1 , as expected.
PASS: [POWER 0 0.5] returned 0 , as expected.
PASS: [POWER 4 0.5] returned 2 , as expected.
PASS: [POWER 9 0.5] returned 3 , as expected.
PASS: [POWER 1.44 0.5] returned 1.2 , as expected.
FAIL: [POWER 2 0.5] returned 1.4142135623731 . We expected 1.4142135623731
PASS: [POWER 1e40 0.5] returned 1e+20 , as expected.
INFO: Executing invalid instruction: [POWER 1e100 5]
PASS: Executing [POWER 1e100 5] set error code to 4
INFO: Executing [POWER 1e100 5] set error string to [POWER doesn't like 5 as input]
INFO: Executing invalid instruction: [POWER -1e100 5]
PASS: Executing [POWER -1e100 5] set error code to 4
INFO: Executing [POWER -1e100 5] set error string to [POWER doesn't like 5 as input]
INFO: Executing invalid instruction: [POWER 0 0]
PASS: Executing [POWER 0 0] set error code to 4
INFO: Executing [POWER 0 0] set error string to [POWER doesn't like 0 as input]
INFO: Executing invalid instruction: [POWER 0 -1]
PASS: Executing [POWER 0 -1] set error code to 4
INFO: Executing [POWER 0 -1] set error string to [POWER doesn't like -1 as input]
INFO: Executing invalid instruction: [POWER -1 0.5]
PASS: Executing [POWER -1 0.5] set error code to 4
INFO: Executing [POWER -1 0.5] set error string to [POWER doesn't like 0.5 as input]
INFO: Executing invalid instruction: [(POWER)]
PASS: Executing [(POWER)] set error code to 6 , as expected
INFO: Executing [(POWER)] set error string to [not enough inputs to POWER]
INFO: Executing invalid instruction: [(POWER 1)]
PASS: Executing [(POWER 1)] set error code to 6 , as expected
INFO: Executing [(POWER 1)] set error string to [not enough inputs to POWER]
INFO: Executing invalid instruction: [(POWER 1 2 3)]
PASS: Executing [(POWER 1 2 3)] set error code to 8 , as expected
INFO: Executing [(POWER 1 2 3)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [POWER [] 2]
PASS: Executing [POWER [] 2] set error code to 7
INFO: Executing [POWER [] 2] set error string to [POWER doesn't like [] as input]
INFO: Executing invalid instruction: [POWER [1] 2]
PASS: Executing [POWER [1] 2] set error code to 7
INFO: Executing [POWER [1] 2] set error string to [POWER doesn't like [1] as input]
INFO: Executing invalid instruction: [POWER {} 2]
PASS: Executing [POWER {} 2] set error code to 7
INFO: Executing [POWER {} 2] set error string to [POWER doesn't like {} as input]
INFO: Executing invalid instruction: [POWER {1} 2]
PASS: Executing [POWER {1} 2] set error code to 7
INFO: Executing [POWER {1} 2] set error string to [POWER doesn't like {1} as input]
INFO: Executing invalid instruction: [POWER "one 2]
PASS: Executing [POWER "one 2] set error code to 7
INFO: Executing [POWER "one 2] set error string to [POWER doesn't like one as input]
INFO: Executing invalid instruction: [POWER "1a 2]
PASS: Executing [POWER "1a 2] set error code to 7
INFO: Executing [POWER "1a 2] set error string to [POWER doesn't like 1a as input]
INFO: Executing invalid instruction: [POWER 1 []]
PASS: Executing [POWER 1 []] set error code to 7
INFO: Executing [POWER 1 []] set error string to [POWER doesn't like [] as input]
INFO: Executing invalid instruction: [POWER 1 [2]]
PASS: Executing [POWER 1 [2]] set error code to 7
INFO: Executing [POWER 1 [2]] set error string to [POWER doesn't like [2] as input]
INFO: Executing invalid instruction: [POWER 1 {}]
PASS: Executing [POWER 1 {}] set error code to 7
INFO: Executing [POWER 1 {}] set error string to [POWER doesn't like {} as input]
INFO: Executing invalid instruction: [POWER 1 {2}]
PASS: Executing [POWER 1 {2}] set error code to 7
INFO: Executing [POWER 1 {2}] set error string to [POWER doesn't like {2} as input]
INFO: Executing invalid instruction: [POWER 1 "two]
PASS: Executing [POWER 1 "two] set error code to 7
INFO: Executing [POWER 1 "two] set error string to [POWER doesn't like two as input]
INFO: Executing invalid instruction: [POWER 1 "2a]
PASS: Executing [POWER 1 "2a] set error code to 7
INFO: Executing [POWER 1 "2a] set error string to [POWER doesn't like 2a as input]
PASS: [EXP 0] returned 1 , as expected.
FAIL: [EXP 1] returned 2.71828182845905 . We expected 2.71828182845905
PASS: [EXP 2] returned 7.38905609893065 , as expected.
FAIL: [EXP -1] returned 0.367879441171442 . We expected 0.367879441171442
INFO: Executing invalid instruction: [EXP 1e40]
PASS: Executing [EXP 1e40] set error code to 4
INFO: Executing [EXP 1e40] set error string to [EXP doesn't like 1e+40 as input]
INFO: Executing invalid instruction: [(EXP)]
PASS: Executing [(EXP)] set error code to 6 , as expected
INFO: Executing [(EXP)] set error string to [not enough inputs to EXP]
INFO: Executing invalid instruction: [(EXP 1 2)]
PASS: Executing [(EXP 1 2)] set error code to 8 , as expected
INFO: Executing [(EXP 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [EXP []]
PASS: Executing [EXP []] set error code to 7
INFO: Executing [EXP []] set error string to [EXP doesn't like [] as input]
INFO: Executing invalid instruction: [EXP [1]]
PASS: Executing [EXP [1]] set error code to 7
INFO: Executing [EXP [1]] set error string to [EXP doesn't like [1] as input]
INFO: Executing invalid instruction: [EXP {}]
PASS: Executing [EXP {}] set error code to 7
INFO: Executing [EXP {}] set error string to [EXP doesn't like {} as input]
INFO: Executing invalid instruction: [EXP {1}]
PASS: Executing [EXP {1}] set error code to 7
INFO: Executing [EXP {1}] set error string to [EXP doesn't like {1} as input]
INFO: Executing invalid instruction: [EXP "one]
PASS: Executing [EXP "one] set error code to 7
INFO: Executing [EXP "one] set error string to [EXP doesn't like one as input]
INFO: Executing invalid instruction: [EXP "1a]
PASS: Executing [EXP "1a] set error code to 7
INFO: Executing [EXP "1a] set error string to [EXP doesn't like 1a as input]
PASS: [LOG10 1] returned 0 , as expected.
PASS: [LOG10 1e1] returned 1 , as expected.
PASS: [LOG10 1e2] returned 2 , as expected.
PASS: [LOG10 1e-2] returned -2 , as expected.
PASS: [LOG10 1e100] returned 100 , as expected.
FAIL: [LOG10 50] returned 1.69897000433602 . We expected 1.69897000433602
INFO: Executing invalid instruction: [(LOG10)]
PASS: Executing [(LOG10)] set error code to 6 , as expected
INFO: Executing [(LOG10)] set error string to [not enough inputs to LOG10]
INFO: Executing invalid instruction: [(LOG10 1 2)]
PASS: Executing [(LOG10 1 2)] set error code to 8 , as expected
INFO: Executing [(LOG10 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [LOG10 0]
PASS: Executing [LOG10 0] set error code to 4
INFO: Executing [LOG10 0] set error string to [LOG10 doesn't like 0 as input]
INFO: Executing invalid instruction: [LOG10 -1]
PASS: Executing [LOG10 -1] set error code to 4
INFO: Executing [LOG10 -1] set error string to [LOG10 doesn't like -1 as input]
INFO: Executing invalid instruction: [LOG10 []]
PASS: Executing [LOG10 []] set error code to 7
INFO: Executing [LOG10 []] set error string to [LOG10 doesn't like [] as input]
INFO: Executing invalid instruction: [LOG10 [1]]
PASS: Executing [LOG10 [1]] set error code to 7
INFO: Executing [LOG10 [1]] set error string to [LOG10 doesn't like [1] as input]
INFO: Executing invalid instruction: [LOG10 {}]
PASS: Executing [LOG10 {}] set error code to 7
INFO: Executing [LOG10 {}] set error string to [LOG10 doesn't like {} as input]
INFO: Executing invalid instruction: [LOG10 {1}]
PASS: Executing [LOG10 {1}] set error code to 7
INFO: Executing [LOG10 {1}] set error string to [LOG10 doesn't like {1} as input]
INFO: Executing invalid instruction: [LOG10 "one]
PASS: Executing [LOG10 "one] set error code to 7
INFO: Executing [LOG10 "one] set error string to [LOG10 doesn't like one as input]
INFO: Executing invalid instruction: [LOG10 "1a]
PASS: Executing [LOG10 "1a] set error code to 7
INFO: Executing [LOG10 "1a] set error string to [LOG10 doesn't like 1a as input]
PASS: [LN 1] returned 0 , as expected.
FAIL: [LN 2.71828182845905] returned 1 . We expected 1
FAIL: [LN 500] returned 6.21460809842219 . We expected 6.21460809842219
INFO: Executing invalid instruction: [(LN)]
PASS: Executing [(LN)] set error code to 6 , as expected
INFO: Executing [(LN)] set error string to [not enough inputs to LN]
INFO: Executing invalid instruction: [(LN 1 2)]
PASS: Executing [(LN 1 2)] set error code to 8 , as expected
INFO: Executing [(LN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [LN 0]
PASS: Executing [LN 0] set error code to 4
INFO: Executing [LN 0] set error string to [LN doesn't like 0 as input]
INFO: Executing invalid instruction: [LN -1]
PASS: Executing [LN -1] set error code to 4
INFO: Executing [LN -1] set error string to [LN doesn't like -1 as input]
INFO: Executing invalid instruction: [LN []]
PASS: Executing [LN []] set error code to 7
INFO: Executing [LN []] set error string to [LN doesn't like [] as input]
INFO: Executing invalid instruction: [LN [1]]
PASS: Executing [LN [1]] set error code to 7
INFO: Executing [LN [1]] set error string to [LN doesn't like [1] as input]
INFO: Executing invalid instruction: [LN {}]
PASS: Executing [LN {}] set error code to 7
INFO: Executing [LN {}] set error string to [LN doesn't like {} as input]
INFO: Executing invalid instruction: [LN {1}]
PASS: Executing [LN {1}] set error code to 7
INFO: Executing [LN {1}] set error string to [LN doesn't like {1} as input]
INFO: Executing invalid instruction: [LN "one]
PASS: Executing [LN "one] set error code to 7
INFO: Executing [LN "one] set error string to [LN doesn't like one as input]
INFO: Executing invalid instruction: [LN "1a]
PASS: Executing [LN "1a] set error code to 7
INFO: Executing [LN "1a] set error string to [LN doesn't like 1a as input]
PASS: [PI] returned 3.14159265358979 , as expected.
INFO: Executing invalid instruction: [(PI 1)]
PASS: Executing [(PI 1)] set error code to 8 , as expected
INFO: Executing [(PI 1)] set error string to [too much inside ()'s]
PASS: [TAN 0] returned 0 , as expected.
PASS: [TAN 45] returned 1 , as expected.
PASS: [TAN -45] returned -1 , as expected.
FAIL: [TAN 135] returned -1 . We expected -1
FAIL: [TAN 225] returned 1 . We expected 1
PASS: [TAN 180] returned -1.22514845490862e-16 , as expected.
FAIL: [TAN 360] returned -2.45029690981724e-16 . We expected 0
FAIL: [TAN 3600] returned -2.45029690981724e-15 . We expected 0
PASS: [TAN 14.5] returned 0.25861758435589 , as expected.
INFO: Executing invalid instruction: [(TAN)]
PASS: Executing [(TAN)] set error code to 6 , as expected
INFO: Executing [(TAN)] set error string to [not enough inputs to TAN]
INFO: Executing invalid instruction: [(TAN 1 2)]
PASS: Executing [(TAN 1 2)] set error code to 8 , as expected
INFO: Executing [(TAN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [TAN 90]
FAIL: Executing [TAN 90] did not throw an error
INFO: Executing invalid instruction: [TAN -90]
FAIL: Executing [TAN -90] did not throw an error
INFO: Executing invalid instruction: [TAN 270]
FAIL: Executing [TAN 270] did not throw an error
INFO: Executing invalid instruction: [TAN 3690]
FAIL: Executing [TAN 3690] did not throw an error
INFO: Executing invalid instruction: [TAN []]
PASS: Executing [TAN []] set error code to 7
INFO: Executing [TAN []] set error string to [TAN doesn't like [] as input]
INFO: Executing invalid instruction: [TAN [1]]
PASS: Executing [TAN [1]] set error code to 7
INFO: Executing [TAN [1]] set error string to [TAN doesn't like [1] as input]
INFO: Executing invalid instruction: [TAN {}]
PASS: Executing [TAN {}] set error code to 7
INFO: Executing [TAN {}] set error string to [TAN doesn't like {} as input]
INFO: Executing invalid instruction: [TAN {1}]
PASS: Executing [TAN {1}] set error code to 7
INFO: Executing [TAN {1}] set error string to [TAN doesn't like {1} as input]
INFO: Executing invalid instruction: [TAN "one]
PASS: Executing [TAN "one] set error code to 7
INFO: Executing [TAN "one] set error string to [TAN doesn't like one as input]
INFO: Executing invalid instruction: [TAN "1a]
PASS: Executing [TAN "1a] set error code to 7
INFO: Executing [TAN "1a] set error string to [TAN doesn't like 1a as input]
PASS: [RADTAN ( 0 )] returned 0 , as expected.
PASS: [RADTAN ( 0.25 * PI)] returned 1 , as expected.
PASS: [RADTAN (-0.25 * PI)] returned -1 , as expected.
FAIL: [RADTAN ( 0.75 * PI)] returned -1 . We expected -1
FAIL: [RADTAN ( 1.25 * PI)] returned 1 . We expected 1
PASS: [RADTAN ( PI )] returned -1.22514845490862e-16 , as expected.
FAIL: [RADTAN ( 2 * PI )] returned -2.45029690981724e-16 . We expected 0
FAIL: [RADTAN ( 10 * PI )] returned -1.22514845490862e-15 . We expected 0
PASS: [RADTAN ( 14.5 )] returned -2.63406913250383 , as expected.
INFO: Executing invalid instruction: [(RADTAN)]
PASS: Executing [(RADTAN)] set error code to 6 , as expected
INFO: Executing [(RADTAN)] set error string to [not enough inputs to RADTAN]
INFO: Executing invalid instruction: [(RADTAN 1 2)]
PASS: Executing [(RADTAN 1 2)] set error code to 8 , as expected
INFO: Executing [(RADTAN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADTAN ( 0.5 * PI)]
FAIL: Executing [RADTAN ( 0.5 * PI)] did not throw an error
INFO: Executing invalid instruction: [RADTAN (-0.5 * PI)]
FAIL: Executing [RADTAN (-0.5 * PI)] did not throw an error
INFO: Executing invalid instruction: [RADTAN ( 1.5 * PI)]
FAIL: Executing [RADTAN ( 1.5 * PI)] did not throw an error
INFO: Executing invalid instruction: [RADTAN ( 100 * PI)]
FAIL: Executing [RADTAN ( 100 * PI)] did not throw an error
INFO: Executing invalid instruction: [RADTAN []]
PASS: Executing [RADTAN []] set error code to 7
INFO: Executing [RADTAN []] set error string to [RADTAN doesn't like [] as input]
INFO: Executing invalid instruction: [RADTAN [1]]
PASS: Executing [RADTAN [1]] set error code to 7
INFO: Executing [RADTAN [1]] set error string to [RADTAN doesn't like [1] as input]
INFO: Executing invalid instruction: [RADTAN {}]
PASS: Executing [RADTAN {}] set error code to 7
INFO: Executing [RADTAN {}] set error string to [RADTAN doesn't like {} as input]
INFO: Executing invalid instruction: [RADTAN {1}]
PASS: Executing [RADTAN {1}] set error code to 7
INFO: Executing [RADTAN {1}] set error string to [RADTAN doesn't like {1} as input]
INFO: Executing invalid instruction: [RADTAN "one]
PASS: Executing [RADTAN "one] set error code to 7
INFO: Executing [RADTAN "one] set error string to [RADTAN doesn't like one as input]
INFO: Executing invalid instruction: [RADTAN "1a]
PASS: Executing [RADTAN "1a] set error code to 7
INFO: Executing [RADTAN "1a] set error string to [RADTAN doesn't like 1a as input]
PASS: [ARCTAN 0] returned 0 , as expected.
PASS: [ARCTAN 1] returned 45 , as expected.
PASS: [ARCTAN -1] returned -45 , as expected.
PASS: [ARCTAN 14.5] returned 86.0548137709624 , as expected.
PASS: [(ARCTAN 1 0 )] returned 0 , as expected.
PASS: [(ARCTAN 1 1 )] returned 45 , as expected.
PASS: [(ARCTAN 1 -1 )] returned -45 , as expected.
PASS: [(ARCTAN -1 1 )] returned 135 , as expected.
PASS: [(ARCTAN -1 -1 )] returned -135 , as expected.
PASS: [(ARCTAN 1 14.5)] returned 86.0548137709624 , as expected.
PASS: [(ARCTAN 2 0)] returned 0 , as expected.
PASS: [(ARCTAN 2 2)] returned 45 , as expected.
PASS: [(ARCTAN 2 -2)] returned -45 , as expected.
PASS: [(ARCTAN 2 29)] returned 86.0548137709624 , as expected.
PASS: [(ARCTAN 0 1)] returned 90 , as expected.
PASS: [(ARCTAN 1 100)] returned 89.4270613023165 , as expected.
INFO: Executing invalid instruction: [(ARCTAN)]
PASS: Executing [(ARCTAN)] set error code to 6 , as expected
INFO: Executing [(ARCTAN)] set error string to [not enough inputs to ARCTAN]
INFO: Executing invalid instruction: [(ARCTAN 1 2 3)]
PASS: Executing [(ARCTAN 1 2 3)] set error code to 8 , as expected
INFO: Executing [(ARCTAN 1 2 3)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ARCTAN []]
PASS: Executing [ARCTAN []] set error code to 7
INFO: Executing [ARCTAN []] set error string to [ARCTAN doesn't like [] as input]
INFO: Executing invalid instruction: [ARCTAN [1]]
PASS: Executing [ARCTAN [1]] set error code to 7
INFO: Executing [ARCTAN [1]] set error string to [ARCTAN doesn't like [1] as input]
INFO: Executing invalid instruction: [ARCTAN {}]
PASS: Executing [ARCTAN {}] set error code to 7
INFO: Executing [ARCTAN {}] set error string to [ARCTAN doesn't like {} as input]
INFO: Executing invalid instruction: [ARCTAN {1}]
PASS: Executing [ARCTAN {1}] set error code to 7
INFO: Executing [ARCTAN {1}] set error string to [ARCTAN doesn't like {1} as input]
INFO: Executing invalid instruction: [ARCTAN "one]
PASS: Executing [ARCTAN "one] set error code to 7
INFO: Executing [ARCTAN "one] set error string to [ARCTAN doesn't like one as input]
INFO: Executing invalid instruction: [ARCTAN "1a]
PASS: Executing [ARCTAN "1a] set error code to 7
INFO: Executing [ARCTAN "1a] set error string to [ARCTAN doesn't like 1a as input]
INFO: Executing invalid instruction: [(ARCTAN [] 1)]
PASS: Executing [(ARCTAN [] 1)] set error code to 7
INFO: Executing [(ARCTAN [] 1)] set error string to [ARCTAN doesn't like [] as input]
INFO: Executing invalid instruction: [(ARCTAN [1] 1)]
PASS: Executing [(ARCTAN [1] 1)] set error code to 7
INFO: Executing [(ARCTAN [1] 1)] set error string to [ARCTAN doesn't like [1] as input]
INFO: Executing invalid instruction: [(ARCTAN {} 1)]
PASS: Executing [(ARCTAN {} 1)] set error code to 7
INFO: Executing [(ARCTAN {} 1)] set error string to [ARCTAN doesn't like {} as input]
INFO: Executing invalid instruction: [(ARCTAN {1} 1)]
PASS: Executing [(ARCTAN {1} 1)] set error code to 7
INFO: Executing [(ARCTAN {1} 1)] set error string to [ARCTAN doesn't like {1} as input]
INFO: Executing invalid instruction: [(ARCTAN "one 1)]
PASS: Executing [(ARCTAN "one 1)] set error code to 7
INFO: Executing [(ARCTAN "one 1)] set error string to [ARCTAN doesn't like one as input]
INFO: Executing invalid instruction: [(ARCTAN "1a 1)]
PASS: Executing [(ARCTAN "1a 1)] set error code to 7
INFO: Executing [(ARCTAN "1a 1)] set error string to [ARCTAN doesn't like 1a as input]
INFO: Executing invalid instruction: [(ARCTAN 1 [] )]
PASS: Executing [(ARCTAN 1 [] )] set error code to 7
INFO: Executing [(ARCTAN 1 [] )] set error string to [ARCTAN doesn't like [] as input]
INFO: Executing invalid instruction: [(ARCTAN 1 [1] )]
PASS: Executing [(ARCTAN 1 [1] )] set error code to 7
INFO: Executing [(ARCTAN 1 [1] )] set error string to [ARCTAN doesn't like [1] as input]
INFO: Executing invalid instruction: [(ARCTAN 1 {} )]
PASS: Executing [(ARCTAN 1 {} )] set error code to 7
INFO: Executing [(ARCTAN 1 {} )] set error string to [ARCTAN doesn't like {} as input]
INFO: Executing invalid instruction: [(ARCTAN 1 {1} )]
PASS: Executing [(ARCTAN 1 {1} )] set error code to 7
INFO: Executing [(ARCTAN 1 {1} )] set error string to [ARCTAN doesn't like {1} as input]
INFO: Executing invalid instruction: [(ARCTAN 1 "one )]
PASS: Executing [(ARCTAN 1 "one )] set error code to 7
INFO: Executing [(ARCTAN 1 "one )] set error string to [ARCTAN doesn't like one as input]
INFO: Executing invalid instruction: [(ARCTAN 1 "1a )]
PASS: Executing [(ARCTAN 1 "1a )] set error code to 7
INFO: Executing [(ARCTAN 1 "1a )] set error string to [ARCTAN doesn't like 1a as input]
PASS: [RADARCTAN 0] returned 0 , as expected.
PASS: [RADARCTAN 1] returned 0.785398163397448 , as expected.
PASS: [RADARCTAN -1] returned -0.785398163397448 , as expected.
PASS: [RADARCTAN 14.5] returned 1.50193983749385 , as expected.
PASS: [(RADARCTAN 1 0 )] returned 0 , as expected.
PASS: [(RADARCTAN 1 1 )] returned 0.785398163397448 , as expected.
PASS: [(RADARCTAN 1 -1 )] returned -0.785398163397448 , as expected.
PASS: [(RADARCTAN -1 1 )] returned 2.35619449019234 , as expected.
PASS: [(RADARCTAN -1 -1 )] returned -2.35619449019234 , as expected.
PASS: [(RADARCTAN 1 14.5 )] returned 1.50193983749385 , as expected.
PASS: [(RADARCTAN 2 0 )] returned 0 , as expected.
PASS: [(RADARCTAN 2 2 )] returned 0.785398163397448 , as expected.
PASS: [(RADARCTAN 2 -2 )] returned -0.785398163397448 , as expected.
PASS: [(RADARCTAN 2 29 )] returned 1.50193983749385 , as expected.
PASS: [(RADARCTAN 0 1 )] returned 1.5707963267949 , as expected.
PASS: [(RADARCTAN 1 100)] returned 1.56079666010823 , as expected.
INFO: Executing invalid instruction: [(RADARCTAN)]
PASS: Executing [(RADARCTAN)] set error code to 6 , as expected
INFO: Executing [(RADARCTAN)] set error string to [not enough inputs to RADARCTAN]
INFO: Executing invalid instruction: [(RADARCTAN 1 2 3)]
PASS: Executing [(RADARCTAN 1 2 3)] set error code to 8 , as expected
INFO: Executing [(RADARCTAN 1 2 3)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADARCTAN []]
PASS: Executing [RADARCTAN []] set error code to 7
INFO: Executing [RADARCTAN []] set error string to [RADARCTAN doesn't like [] as input]
INFO: Executing invalid instruction: [RADARCTAN [1]]
PASS: Executing [RADARCTAN [1]] set error code to 7
INFO: Executing [RADARCTAN [1]] set error string to [RADARCTAN doesn't like [1] as input]
INFO: Executing invalid instruction: [RADARCTAN {}]
PASS: Executing [RADARCTAN {}] set error code to 7
INFO: Executing [RADARCTAN {}] set error string to [RADARCTAN doesn't like {} as input]
INFO: Executing invalid instruction: [RADARCTAN {1}]
PASS: Executing [RADARCTAN {1}] set error code to 7
INFO: Executing [RADARCTAN {1}] set error string to [RADARCTAN doesn't like {1} as input]
INFO: Executing invalid instruction: [RADARCTAN "one]
PASS: Executing [RADARCTAN "one] set error code to 7
INFO: Executing [RADARCTAN "one] set error string to [RADARCTAN doesn't like one as input]
INFO: Executing invalid instruction: [RADARCTAN "1a]
PASS: Executing [RADARCTAN "1a] set error code to 7
INFO: Executing [RADARCTAN "1a] set error string to [RADARCTAN doesn't like 1a as input]
INFO: Executing invalid instruction: [(RADARCTAN [] 1)]
PASS: Executing [(RADARCTAN [] 1)] set error code to 7
INFO: Executing [(RADARCTAN [] 1)] set error string to [RADARCTAN doesn't like [] as input]
INFO: Executing invalid instruction: [(RADARCTAN [1] 1)]
PASS: Executing [(RADARCTAN [1] 1)] set error code to 7
INFO: Executing [(RADARCTAN [1] 1)] set error string to [RADARCTAN doesn't like [1] as input]
INFO: Executing invalid instruction: [(RADARCTAN {} 1)]
PASS: Executing [(RADARCTAN {} 1)] set error code to 7
INFO: Executing [(RADARCTAN {} 1)] set error string to [RADARCTAN doesn't like {} as input]
INFO: Executing invalid instruction: [(RADARCTAN {1} 1)]
PASS: Executing [(RADARCTAN {1} 1)] set error code to 7
INFO: Executing [(RADARCTAN {1} 1)] set error string to [RADARCTAN doesn't like {1} as input]
INFO: Executing invalid instruction: [(RADARCTAN "one 1)]
PASS: Executing [(RADARCTAN "one 1)] set error code to 7
INFO: Executing [(RADARCTAN "one 1)] set error string to [RADARCTAN doesn't like one as input]
INFO: Executing invalid instruction: [(RADARCTAN "1a 1)]
PASS: Executing [(RADARCTAN "1a 1)] set error code to 7
INFO: Executing [(RADARCTAN "1a 1)] set error string to [RADARCTAN doesn't like 1a as input]
INFO: Executing invalid instruction: [(RADARCTAN 1 [] )]
PASS: Executing [(RADARCTAN 1 [] )] set error code to 7
INFO: Executing [(RADARCTAN 1 [] )] set error string to [RADARCTAN doesn't like [] as input]
INFO: Executing invalid instruction: [(RADARCTAN 1 [1] )]
PASS: Executing [(RADARCTAN 1 [1] )] set error code to 7
INFO: Executing [(RADARCTAN 1 [1] )] set error string to [RADARCTAN doesn't like [1] as input]
INFO: Executing invalid instruction: [(RADARCTAN 1 {} )]
PASS: Executing [(RADARCTAN 1 {} )] set error code to 7
INFO: Executing [(RADARCTAN 1 {} )] set error string to [RADARCTAN doesn't like {} as input]
INFO: Executing invalid instruction: [(RADARCTAN 1 {1} )]
PASS: Executing [(RADARCTAN 1 {1} )] set error code to 7
INFO: Executing [(RADARCTAN 1 {1} )] set error string to [RADARCTAN doesn't like {1} as input]
INFO: Executing invalid instruction: [(RADARCTAN 1 "one )]
PASS: Executing [(RADARCTAN 1 "one )] set error code to 7
INFO: Executing [(RADARCTAN 1 "one )] set error string to [RADARCTAN doesn't like one as input]
INFO: Executing invalid instruction: [(RADARCTAN 1 "1a )]
PASS: Executing [(RADARCTAN 1 "1a )] set error code to 7
INFO: Executing [(RADARCTAN 1 "1a )] set error string to [RADARCTAN doesn't like 1a as input]
PASS: [SIN 0] returned 0 , as expected.
PASS: [SIN 30] returned 0.5 , as expected.
PASS: [SIN 45] returned 0.707106781186547 , as expected.
PASS: [SIN -45] returned -0.707106781186547 , as expected.
PASS: [SIN 90] returned 1 , as expected.
PASS: [SIN 180] returned 1.22514845490862e-16 , as expected.
PASS: [SIN 270] returned -1 , as expected.
FAIL: [SIN 360] returned -2.45029690981724e-16 . We expected 0
FAIL: [SIN 3600] returned -2.45029690981724e-15 . We expected 0
PASS: [SIN 3690] returned 1 , as expected.
PASS: [SIN 14.5] returned 0.250380004054441 , as expected.
INFO: Executing invalid instruction: [(SIN)]
PASS: Executing [(SIN)] set error code to 6 , as expected
INFO: Executing [(SIN)] set error string to [not enough inputs to SIN]
INFO: Executing invalid instruction: [(SIN 1 2)]
PASS: Executing [(SIN 1 2)] set error code to 8 , as expected
INFO: Executing [(SIN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SIN []]
PASS: Executing [SIN []] set error code to 7
INFO: Executing [SIN []] set error string to [SIN doesn't like [] as input]
INFO: Executing invalid instruction: [SIN [1]]
PASS: Executing [SIN [1]] set error code to 7
INFO: Executing [SIN [1]] set error string to [SIN doesn't like [1] as input]
INFO: Executing invalid instruction: [SIN {}]
PASS: Executing [SIN {}] set error code to 7
INFO: Executing [SIN {}] set error string to [SIN doesn't like {} as input]
INFO: Executing invalid instruction: [SIN {1}]
PASS: Executing [SIN {1}] set error code to 7
INFO: Executing [SIN {1}] set error string to [SIN doesn't like {1} as input]
INFO: Executing invalid instruction: [SIN "one]
PASS: Executing [SIN "one] set error code to 7
INFO: Executing [SIN "one] set error string to [SIN doesn't like one as input]
INFO: Executing invalid instruction: [SIN "1a]
PASS: Executing [SIN "1a] set error code to 7
INFO: Executing [SIN "1a] set error string to [SIN doesn't like 1a as input]
PASS: [RADSIN 0] returned 0 , as expected.
PASS: [RADSIN ( 0.25 * PI)] returned 0.707106781186547 , as expected.
PASS: [RADSIN (-0.25 * PI)] returned -0.707106781186547 , as expected.
PASS: [RADSIN (1/6 * PI)] returned 0.5 , as expected.
PASS: [RADSIN ( 0.5 * PI)] returned 1 , as expected.
PASS: [RADSIN PI] returned 1.22514845490862e-16 , as expected.
PASS: [RADSIN (1.5 * PI)] returned -1 , as expected.
FAIL: [RADSIN ( 2 * PI)] returned -2.45029690981724e-16 . We expected 0
FAIL: [RADSIN ( 10 * PI)] returned -1.22514845490862e-15 . We expected 0
PASS: [RADSIN ( 10.50 * PI)] returned 1 , as expected.
PASS: [RADSIN 14.5] returned 0.934895055524683 , as expected.
INFO: Executing invalid instruction: [(RADSIN)]
PASS: Executing [(RADSIN)] set error code to 6 , as expected
INFO: Executing [(RADSIN)] set error string to [not enough inputs to RADSIN]
INFO: Executing invalid instruction: [(RADSIN 1 2)]
PASS: Executing [(RADSIN 1 2)] set error code to 8 , as expected
INFO: Executing [(RADSIN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADSIN []]
PASS: Executing [RADSIN []] set error code to 7
INFO: Executing [RADSIN []] set error string to [RADSIN doesn't like [] as input]
INFO: Executing invalid instruction: [RADSIN [1]]
PASS: Executing [RADSIN [1]] set error code to 7
INFO: Executing [RADSIN [1]] set error string to [RADSIN doesn't like [1] as input]
INFO: Executing invalid instruction: [RADSIN {}]
PASS: Executing [RADSIN {}] set error code to 7
INFO: Executing [RADSIN {}] set error string to [RADSIN doesn't like {} as input]
INFO: Executing invalid instruction: [RADSIN {1}]
PASS: Executing [RADSIN {1}] set error code to 7
INFO: Executing [RADSIN {1}] set error string to [RADSIN doesn't like {1} as input]
INFO: Executing invalid instruction: [RADSIN "one]
PASS: Executing [RADSIN "one] set error code to 7
INFO: Executing [RADSIN "one] set error string to [RADSIN doesn't like one as input]
INFO: Executing invalid instruction: [RADSIN "1a]
PASS: Executing [RADSIN "1a] set error code to 7
INFO: Executing [RADSIN "1a] set error string to [RADSIN doesn't like 1a as input]
PASS: [ARCSIN 0] returned 0 , as expected.
FAIL: [ARCSIN ( 0.5 * SQRT 2)] returned 45 . We expected 45
FAIL: [ARCSIN (-0.5 * SQRT 2)] returned -45 . We expected -45
PASS: [ARCSIN 1] returned 90 , as expected.
PASS: [ARCSIN -1] returned -90 , as expected.
PASS: [ARCSIN 0.5] returned 30 , as expected.
PASS: [ARCSIN -0.5] returned -30 , as expected.
INFO: Executing invalid instruction: [(ARCSIN)]
PASS: Executing [(ARCSIN)] set error code to 6 , as expected
INFO: Executing [(ARCSIN)] set error string to [not enough inputs to ARCSIN]
INFO: Executing invalid instruction: [(ARCSIN 1 2)]
PASS: Executing [(ARCSIN 1 2)] set error code to 8 , as expected
INFO: Executing [(ARCSIN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ARCSIN 1.1]
PASS: Executing [ARCSIN 1.1] set error code to 4
INFO: Executing [ARCSIN 1.1] set error string to [ARCSIN doesn't like 1.1 as input]
INFO: Executing invalid instruction: [ARCSIN -1.1]
PASS: Executing [ARCSIN -1.1] set error code to 4
INFO: Executing [ARCSIN -1.1] set error string to [ARCSIN doesn't like -1.1 as input]
INFO: Executing invalid instruction: [ARCSIN []]
PASS: Executing [ARCSIN []] set error code to 7
INFO: Executing [ARCSIN []] set error string to [ARCSIN doesn't like [] as input]
INFO: Executing invalid instruction: [ARCSIN [1]]
PASS: Executing [ARCSIN [1]] set error code to 7
INFO: Executing [ARCSIN [1]] set error string to [ARCSIN doesn't like [1] as input]
INFO: Executing invalid instruction: [ARCSIN {}]
PASS: Executing [ARCSIN {}] set error code to 7
INFO: Executing [ARCSIN {}] set error string to [ARCSIN doesn't like {} as input]
INFO: Executing invalid instruction: [ARCSIN {1}]
PASS: Executing [ARCSIN {1}] set error code to 7
INFO: Executing [ARCSIN {1}] set error string to [ARCSIN doesn't like {1} as input]
INFO: Executing invalid instruction: [ARCSIN "one]
PASS: Executing [ARCSIN "one] set error code to 7
INFO: Executing [ARCSIN "one] set error string to [ARCSIN doesn't like one as input]
INFO: Executing invalid instruction: [ARCSIN "1a]
PASS: Executing [ARCSIN "1a] set error code to 7
INFO: Executing [ARCSIN "1a] set error string to [ARCSIN doesn't like 1a as input]
PASS: [RADARCSIN 0] returned 0 , as expected.
PASS: [RADARCSIN ( 0.5 * SQRT 2)] returned 0.785398163397448 , as expected.
PASS: [RADARCSIN (-0.5 * SQRT 2)] returned -0.785398163397448 , as expected.
PASS: [RADARCSIN 1] returned 1.5707963267949 , as expected.
PASS: [RADARCSIN -1] returned -1.5707963267949 , as expected.
PASS: [RADARCSIN 0.5] returned 0.523598775598299 , as expected.
PASS: [RADARCSIN -0.5] returned -0.523598775598299 , as expected.
INFO: Executing invalid instruction: [(RADARCSIN)]
PASS: Executing [(RADARCSIN)] set error code to 6 , as expected
INFO: Executing [(RADARCSIN)] set error string to [not enough inputs to RADARCSIN]
INFO: Executing invalid instruction: [(RADARCSIN 1 2)]
PASS: Executing [(RADARCSIN 1 2)] set error code to 8 , as expected
INFO: Executing [(RADARCSIN 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADARCSIN 1.1]
PASS: Executing [RADARCSIN 1.1] set error code to 4
INFO: Executing [RADARCSIN 1.1] set error string to [RADARCSIN doesn't like 1.1 as input]
INFO: Executing invalid instruction: [RADARCSIN -1.1]
PASS: Executing [RADARCSIN -1.1] set error code to 4
INFO: Executing [RADARCSIN -1.1] set error string to [RADARCSIN doesn't like -1.1 as input]
INFO: Executing invalid instruction: [RADARCSIN []]
PASS: Executing [RADARCSIN []] set error code to 7
INFO: Executing [RADARCSIN []] set error string to [RADARCSIN doesn't like [] as input]
INFO: Executing invalid instruction: [RADARCSIN [1]]
PASS: Executing [RADARCSIN [1]] set error code to 7
INFO: Executing [RADARCSIN [1]] set error string to [RADARCSIN doesn't like [1] as input]
INFO: Executing invalid instruction: [RADARCSIN {}]
PASS: Executing [RADARCSIN {}] set error code to 7
INFO: Executing [RADARCSIN {}] set error string to [RADARCSIN doesn't like {} as input]
INFO: Executing invalid instruction: [RADARCSIN {1}]
PASS: Executing [RADARCSIN {1}] set error code to 7
INFO: Executing [RADARCSIN {1}] set error string to [RADARCSIN doesn't like {1} as input]
INFO: Executing invalid instruction: [RADARCSIN "one]
PASS: Executing [RADARCSIN "one] set error code to 7
INFO: Executing [RADARCSIN "one] set error string to [RADARCSIN doesn't like one as input]
INFO: Executing invalid instruction: [RADARCSIN "1a]
PASS: Executing [RADARCSIN "1a] set error code to 7
INFO: Executing [RADARCSIN "1a] set error string to [RADARCSIN doesn't like 1a as input]
PASS: [COS 0] returned 1 , as expected.
PASS: [COS 45] returned 0.707106781186548 , as expected.
PASS: [COS -45] returned 0.707106781186548 , as expected.
PASS: [COS 225] returned -0.707106781186548 , as expected.
PASS: [COS 60] returned 0.5 , as expected.
PASS: [COS 90] returned 6.1257422745431e-17 , as expected.
PASS: [COS 180] returned -1 , as expected.
PASS: [COS 270] returned -1.83772268236293e-16 , as expected.
PASS: [COS 360] returned 1 , as expected.
PASS: [COS 3600] returned 1 , as expected.
FAIL: [COS 3690] returned 7.84062485076342e-15 . We expected 0
PASS: [COS 14.5] returned 0.968147640378108 , as expected.
INFO: Executing invalid instruction: [(COS)]
PASS: Executing [(COS)] set error code to 6 , as expected
INFO: Executing [(COS)] set error string to [not enough inputs to COS]
INFO: Executing invalid instruction: [(COS 1 2)]
PASS: Executing [(COS 1 2)] set error code to 8 , as expected
INFO: Executing [(COS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [COS []]
PASS: Executing [COS []] set error code to 7
INFO: Executing [COS []] set error string to [COS doesn't like [] as input]
INFO: Executing invalid instruction: [COS [1]]
PASS: Executing [COS [1]] set error code to 7
INFO: Executing [COS [1]] set error string to [COS doesn't like [1] as input]
INFO: Executing invalid instruction: [COS {}]
PASS: Executing [COS {}] set error code to 7
INFO: Executing [COS {}] set error string to [COS doesn't like {} as input]
INFO: Executing invalid instruction: [COS {1}]
PASS: Executing [COS {1}] set error code to 7
INFO: Executing [COS {1}] set error string to [COS doesn't like {1} as input]
INFO: Executing invalid instruction: [COS "one]
PASS: Executing [COS "one] set error code to 7
INFO: Executing [COS "one] set error string to [COS doesn't like one as input]
INFO: Executing invalid instruction: [COS "1a]
PASS: Executing [COS "1a] set error code to 7
INFO: Executing [COS "1a] set error string to [COS doesn't like 1a as input]
PASS: [RADCOS 0] returned 1 , as expected.
PASS: [RADCOS ( 0.25 * PI)] returned 0.707106781186548 , as expected.
PASS: [RADCOS (-0.25 * PI)] returned 0.707106781186548 , as expected.
PASS: [RADCOS ( 1.25 * PI)] returned -0.707106781186548 , as expected.
PASS: [RADCOS ( 1/3 * PI)] returned 0.5 , as expected.
PASS: [RADCOS ( 0.5 * PI)] returned 6.1257422745431e-17 , as expected.
PASS: [RADCOS PI] returned -1 , as expected.
PASS: [RADCOS 1.5 * PI] returned -1.83772268236293e-16 , as expected.
PASS: [RADCOS 2 * PI] returned 1 , as expected.
PASS: [RADCOS 10 * PI] returned 1 , as expected.
FAIL: [RADCOS 10.50 * PI] returned -4.89950961746199e-16 . We expected 0
PASS: [RADCOS 14.5] returned -0.354924266788705 , as expected.
INFO: Executing invalid instruction: [(RADCOS)]
PASS: Executing [(RADCOS)] set error code to 6 , as expected
INFO: Executing [(RADCOS)] set error string to [not enough inputs to RADCOS]
INFO: Executing invalid instruction: [(RADCOS 1 2)]
PASS: Executing [(RADCOS 1 2)] set error code to 8 , as expected
INFO: Executing [(RADCOS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADCOS []]
PASS: Executing [RADCOS []] set error code to 7
INFO: Executing [RADCOS []] set error string to [RADCOS doesn't like [] as input]
INFO: Executing invalid instruction: [RADCOS [1]]
PASS: Executing [RADCOS [1]] set error code to 7
INFO: Executing [RADCOS [1]] set error string to [RADCOS doesn't like [1] as input]
INFO: Executing invalid instruction: [RADCOS {}]
PASS: Executing [RADCOS {}] set error code to 7
INFO: Executing [RADCOS {}] set error string to [RADCOS doesn't like {} as input]
INFO: Executing invalid instruction: [RADCOS {1}]
PASS: Executing [RADCOS {1}] set error code to 7
INFO: Executing [RADCOS {1}] set error string to [RADCOS doesn't like {1} as input]
INFO: Executing invalid instruction: [RADCOS "one]
PASS: Executing [RADCOS "one] set error code to 7
INFO: Executing [RADCOS "one] set error string to [RADCOS doesn't like one as input]
INFO: Executing invalid instruction: [RADCOS "1a]
PASS: Executing [RADCOS "1a] set error code to 7
INFO: Executing [RADCOS "1a] set error string to [RADCOS doesn't like 1a as input]
PASS: [ARCCOS 1] returned 0 , as expected.
PASS: [ARCCOS ( 0.5 * SQRT 2)] returned 45 , as expected.
PASS: [ARCCOS (-0.5 * SQRT 2)] returned 135 , as expected.
PASS: [ARCCOS 0.5] returned 60 , as expected.
PASS: [ARCCOS 0] returned 90 , as expected.
PASS: [ARCCOS -0.5] returned 120 , as expected.
PASS: [ARCCOS -1] returned 180 , as expected.
INFO: Executing invalid instruction: [(ARCCOS)]
PASS: Executing [(ARCCOS)] set error code to 6 , as expected
INFO: Executing [(ARCCOS)] set error string to [not enough inputs to ARCCOS]
INFO: Executing invalid instruction: [(ARCCOS 1 2)]
PASS: Executing [(ARCCOS 1 2)] set error code to 8 , as expected
INFO: Executing [(ARCCOS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ARCCOS 1.1]
PASS: Executing [ARCCOS 1.1] set error code to 4
INFO: Executing [ARCCOS 1.1] set error string to [ARCCOS doesn't like 1.1 as input]
INFO: Executing invalid instruction: [ARCCOS -1.1]
PASS: Executing [ARCCOS -1.1] set error code to 4
INFO: Executing [ARCCOS -1.1] set error string to [ARCCOS doesn't like -1.1 as input]
INFO: Executing invalid instruction: [ARCCOS []]
PASS: Executing [ARCCOS []] set error code to 7
INFO: Executing [ARCCOS []] set error string to [ARCCOS doesn't like [] as input]
INFO: Executing invalid instruction: [ARCCOS [1]]
PASS: Executing [ARCCOS [1]] set error code to 7
INFO: Executing [ARCCOS [1]] set error string to [ARCCOS doesn't like [1] as input]
INFO: Executing invalid instruction: [ARCCOS {}]
PASS: Executing [ARCCOS {}] set error code to 7
INFO: Executing [ARCCOS {}] set error string to [ARCCOS doesn't like {} as input]
INFO: Executing invalid instruction: [ARCCOS {1}]
PASS: Executing [ARCCOS {1}] set error code to 7
INFO: Executing [ARCCOS {1}] set error string to [ARCCOS doesn't like {1} as input]
INFO: Executing invalid instruction: [ARCCOS "one]
PASS: Executing [ARCCOS "one] set error code to 7
INFO: Executing [ARCCOS "one] set error string to [ARCCOS doesn't like one as input]
INFO: Executing invalid instruction: [ARCCOS "1a]
PASS: Executing [ARCCOS "1a] set error code to 7
INFO: Executing [ARCCOS "1a] set error string to [ARCCOS doesn't like 1a as input]
PASS: [RADARCCOS 1] returned 0 , as expected.
PASS: [RADARCCOS ( 0.5 * SQRT 2)] returned 0.785398163397448 , as expected.
PASS: [RADARCCOS (-0.5 * SQRT 2)] returned 2.35619449019234 , as expected.
FAIL: [RADARCCOS 0.5] returned 1.0471975511966 . We expected 1.0471975511966
PASS: [RADARCCOS 0] returned 1.5707963267949 , as expected.
FAIL: [RADARCCOS -0.5] returned 2.0943951023932 . We expected 2.0943951023932
PASS: [RADARCCOS -1] returned 3.14159265358979 , as expected.
INFO: Executing invalid instruction: [(RADCOS)]
PASS: Executing [(RADCOS)] set error code to 6 , as expected
INFO: Executing [(RADCOS)] set error string to [not enough inputs to RADCOS]
INFO: Executing invalid instruction: [(RADCOS 1 2)]
PASS: Executing [(RADCOS 1 2)] set error code to 8 , as expected
INFO: Executing [(RADCOS 1 2)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [RADARCCOS 1.1]
PASS: Executing [RADARCCOS 1.1] set error code to 4
INFO: Executing [RADARCCOS 1.1] set error string to [RADARCCOS doesn't like 1.1 as input]
INFO: Executing invalid instruction: [RADARCCOS -1.1]
PASS: Executing [RADARCCOS -1.1] set error code to 4
INFO: Executing [RADARCCOS -1.1] set error string to [RADARCCOS doesn't like -1.1 as input]
INFO: Executing invalid instruction: [RADARCCOS []]
PASS: Executing [RADARCCOS []] set error code to 7
INFO: Executing [RADARCCOS []] set error string to [RADARCCOS doesn't like [] as input]
INFO: Executing invalid instruction: [RADARCCOS [1]]
PASS: Executing [RADARCCOS [1]] set error code to 7
INFO: Executing [RADARCCOS [1]] set error string to [RADARCCOS doesn't like [1] as input]
INFO: Executing invalid instruction: [RADARCCOS {}]
PASS: Executing [RADARCCOS {}] set error code to 7
INFO: Executing [RADARCCOS {}] set error string to [RADARCCOS doesn't like {} as input]
INFO: Executing invalid instruction: [RADARCCOS {1}]
PASS: Executing [RADARCCOS {1}] set error code to 7
INFO: Executing [RADARCCOS {1}] set error string to [RADARCCOS doesn't like {1} as input]
INFO: Executing invalid instruction: [RADARCCOS "one]
PASS: Executing [RADARCCOS "one] set error code to 7
INFO: Executing [RADARCCOS "one] set error string to [RADARCCOS doesn't like one as input]
INFO: Executing invalid instruction: [RADARCCOS "1a]
PASS: Executing [RADARCCOS "1a] set error code to 7
INFO: Executing [RADARCCOS "1a] set error string to [RADARCCOS doesn't like 1a as input]
PASS: [PRODUCT 1e200 2e200] returned +INF , as expected.
PASS: [ROUND 2.3e40] returned 2.3e+40 , as expected.
PASS: [PRODUCT 1e200 2e200] returned +INF , as expected.
PASS: Bug #1397560 is fixed. Multiple floating point exceptions do not crash.
PASS: [(BITAND)] returned -1 , as expected.
PASS: [(BITAND 123)] returned 123 , as expected.
PASS: [(BITAND -123)] returned -123 , as expected.
PASS: [(BITAND 5 2 )] returned 0 , as expected.
PASS: [(BITAND 5 1 )] returned 1 , as expected.
PASS: [(BITAND 0 -1 )] returned 0 , as expected.
PASS: [(BITAND 5 -1 )] returned 5 , as expected.
PASS: [(BITAND 5.0 1.0 )] returned 1 , as expected.
PASS: [(BITAND 6 2 10)] returned 2 , as expected.
INFO: Executing invalid instruction: [(BITAND "word)]
PASS: Executing [(BITAND "word)] set error code to 7
INFO: Executing [(BITAND "word)] set error string to [BITAND doesn't like word as input]
INFO: Executing invalid instruction: [(BITAND [123] )]
PASS: Executing [(BITAND [123] )] set error code to 7
INFO: Executing [(BITAND [123] )] set error string to [BITAND doesn't like [123] as input]
INFO: Executing invalid instruction: [(BITAND {123} )]
PASS: Executing [(BITAND {123} )] set error code to 7
INFO: Executing [(BITAND {123} )] set error string to [BITAND doesn't like {123} as input]
INFO: Executing invalid instruction: [(BITAND 12.30)]
PASS: Executing [(BITAND 12.30)] set error code to 7
INFO: Executing [(BITAND 12.30)] set error string to [BITAND doesn't like 12.3 as input]
INFO: Executing invalid instruction: [(BITAND 1 "word)]
PASS: Executing [(BITAND 1 "word)] set error code to 7
INFO: Executing [(BITAND 1 "word)] set error string to [BITAND doesn't like word as input]
INFO: Executing invalid instruction: [(BITAND 1 [123] )]
PASS: Executing [(BITAND 1 [123] )] set error code to 7
INFO: Executing [(BITAND 1 [123] )] set error string to [BITAND doesn't like [123] as input]
INFO: Executing invalid instruction: [(BITAND 1 {123} )]
PASS: Executing [(BITAND 1 {123} )] set error code to 7
INFO: Executing [(BITAND 1 {123} )] set error string to [BITAND doesn't like {123} as input]
INFO: Executing invalid instruction: [(BITAND 1 12.30)]
PASS: Executing [(BITAND 1 12.30)] set error code to 7
INFO: Executing [(BITAND 1 12.30)] set error string to [BITAND doesn't like 12.3 as input]
PASS: [(BITOR)] returned 0 , as expected.
PASS: [(BITOR 123 )] returned 123 , as expected.
PASS: [(BITOR -123 )] returned -123 , as expected.
PASS: [(BITOR 5 2 )] returned 7 , as expected.
PASS: [(BITOR 5 1 )] returned 5 , as expected.
PASS: [(BITOR 0 0 )] returned 0 , as expected.
PASS: [(BITOR 5 -1 )] returned -1 , as expected.
PASS: [(BITOR 5.0 2.0 )] returned 7 , as expected.
PASS: [(BITOR 6 2 10)] returned 14 , as expected.
INFO: Executing invalid instruction: [(BITOR "word)]
PASS: Executing [(BITOR "word)] set error code to 7
INFO: Executing [(BITOR "word)] set error string to [BITOR doesn't like word as input]
INFO: Executing invalid instruction: [(BITOR [123] )]
PASS: Executing [(BITOR [123] )] set error code to 7
INFO: Executing [(BITOR [123] )] set error string to [BITOR doesn't like [123] as input]
INFO: Executing invalid instruction: [(BITOR {123} )]
PASS: Executing [(BITOR {123} )] set error code to 7
INFO: Executing [(BITOR {123} )] set error string to [BITOR doesn't like {123} as input]
INFO: Executing invalid instruction: [(BITOR 12.30)]
PASS: Executing [(BITOR 12.30)] set error code to 7
INFO: Executing [(BITOR 12.30)] set error string to [BITOR doesn't like 12.3 as input]
INFO: Executing invalid instruction: [(BITOR 1 "word)]
PASS: Executing [(BITOR 1 "word)] set error code to 7
INFO: Executing [(BITOR 1 "word)] set error string to [BITOR doesn't like word as input]
INFO: Executing invalid instruction: [(BITOR 1 [123] )]
PASS: Executing [(BITOR 1 [123] )] set error code to 7
INFO: Executing [(BITOR 1 [123] )] set error string to [BITOR doesn't like [123] as input]
INFO: Executing invalid instruction: [(BITOR 1 {123} )]
PASS: Executing [(BITOR 1 {123} )] set error code to 7
INFO: Executing [(BITOR 1 {123} )] set error string to [BITOR doesn't like {123} as input]
INFO: Executing invalid instruction: [(BITOR 1 12.30)]
PASS: Executing [(BITOR 1 12.30)] set error code to 7
INFO: Executing [(BITOR 1 12.30)] set error string to [BITOR doesn't like 12.3 as input]
PASS: [(BITXOR)] returned 0 , as expected.
PASS: [(BITXOR 123 )] returned 123 , as expected.
PASS: [(BITXOR -123 )] returned -123 , as expected.
PASS: [(BITXOR 5 2 )] returned 7 , as expected.
PASS: [(BITXOR 5 1 )] returned 4 , as expected.
PASS: [(BITXOR 0 0 )] returned 0 , as expected.
PASS: [(BITXOR 5 -1 )] returned -6 , as expected.
PASS: [(BITXOR 5 5 )] returned 0 , as expected.
PASS: [(BITXOR 5.0 1.0 )] returned 4 , as expected.
PASS: [(BITXOR 6 2 10)] returned 14 , as expected.
INFO: Executing invalid instruction: [(BITXOR "word)]
PASS: Executing [(BITXOR "word)] set error code to 7
INFO: Executing [(BITXOR "word)] set error string to [BITXOR doesn't like word as input]
INFO: Executing invalid instruction: [(BITXOR [123] )]
PASS: Executing [(BITXOR [123] )] set error code to 7
INFO: Executing [(BITXOR [123] )] set error string to [BITXOR doesn't like [123] as input]
INFO: Executing invalid instruction: [(BITXOR {123} )]
PASS: Executing [(BITXOR {123} )] set error code to 7
INFO: Executing [(BITXOR {123} )] set error string to [BITXOR doesn't like {123} as input]
INFO: Executing invalid instruction: [(BITXOR 12.30)]
PASS: Executing [(BITXOR 12.30)] set error code to 7
INFO: Executing [(BITXOR 12.30)] set error string to [BITXOR doesn't like 12.3 as input]
INFO: Executing invalid instruction: [(BITXOR 1 "word)]
PASS: Executing [(BITXOR 1 "word)] set error code to 7
INFO: Executing [(BITXOR 1 "word)] set error string to [BITXOR doesn't like word as input]
INFO: Executing invalid instruction: [(BITXOR 1 [123] )]
PASS: Executing [(BITXOR 1 [123] )] set error code to 7
INFO: Executing [(BITXOR 1 [123] )] set error string to [BITXOR doesn't like [123] as input]
INFO: Executing invalid instruction: [(BITXOR 1 {123} )]
PASS: Executing [(BITXOR 1 {123} )] set error code to 7
INFO: Executing [(BITXOR 1 {123} )] set error string to [BITXOR doesn't like {123} as input]
INFO: Executing invalid instruction: [(BITXOR 1 12.30)]
PASS: Executing [(BITXOR 1 12.30)] set error code to 7
INFO: Executing [(BITXOR 1 12.30)] set error string to [BITXOR doesn't like 12.3 as input]
PASS: [BITNOT 123] returned -124 , as expected.
PASS: [BITNOT -124] returned 123 , as expected.
PASS: [BITNOT 0] returned -1 , as expected.
FAIL: [BITNOT 12.00] threw error.  code= 4 . [BITNOT doesn't like 12 as input]
INFO: Executing invalid instruction: [(BITNOT)]
PASS: Executing [(BITNOT)] set error code to 6 , as expected
INFO: Executing [(BITNOT)] set error string to [not enough inputs to BITNOT]
INFO: Executing invalid instruction: [(BITNOT 123 456)]
PASS: Executing [(BITNOT 123 456)] set error code to 8 , as expected
INFO: Executing [(BITNOT 123 456)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [BITNOT "word]
PASS: Executing [BITNOT "word] set error code to 7
INFO: Executing [BITNOT "word] set error string to [BITNOT doesn't like word as input]
INFO: Executing invalid instruction: [BITNOT [123]]
PASS: Executing [BITNOT [123]] set error code to 7
INFO: Executing [BITNOT [123]] set error string to [BITNOT doesn't like [123] as input]
INFO: Executing invalid instruction: [BITNOT {123}]
PASS: Executing [BITNOT {123}] set error code to 7
INFO: Executing [BITNOT {123}] set error string to [BITNOT doesn't like {123} as input]
INFO: Executing invalid instruction: [BITNOT 12.30]
PASS: Executing [BITNOT 12.30] set error code to 4
INFO: Executing [BITNOT 12.30] set error string to [BITNOT doesn't like 12.3 as input]
PASS: [LSHIFT 5 2] returned 20 , as expected.
PASS: [LSHIFT 20 -2] returned 5 , as expected.
PASS: [LSHIFT -20 -1] returned 2147483638 , as expected.
PASS: [LSHIFT 5 0] returned 5 , as expected.
PASS: [LSHIFT 0 5] returned 0 , as expected.
PASS: [ASHIFT 5.0 2.00] returned 20 , as expected.
INFO: Executing invalid instruction: [(LSHIFT 5)]
PASS: Executing [(LSHIFT 5)] set error code to 6 , as expected
INFO: Executing [(LSHIFT 5)] set error string to [not enough inputs to LSHIFT]
INFO: Executing invalid instruction: [(LSHIFT 5 0 "toomany)]
PASS: Executing [(LSHIFT 5 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(LSHIFT 5 0 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [LSHIFT "word 0]
PASS: Executing [LSHIFT "word 0] set error code to 7
INFO: Executing [LSHIFT "word 0] set error string to [LSHIFT doesn't like word as input]
INFO: Executing invalid instruction: [LSHIFT [123] 0]
PASS: Executing [LSHIFT [123] 0] set error code to 7
INFO: Executing [LSHIFT [123] 0] set error string to [LSHIFT doesn't like [123] as input]
INFO: Executing invalid instruction: [LSHIFT {123} 0]
PASS: Executing [LSHIFT {123} 0] set error code to 7
INFO: Executing [LSHIFT {123} 0] set error string to [LSHIFT doesn't like {123} as input]
INFO: Executing invalid instruction: [LSHIFT 12.30 0]
PASS: Executing [LSHIFT 12.30 0] set error code to 7
INFO: Executing [LSHIFT 12.30 0] set error string to [LSHIFT doesn't like 12.3 as input]
INFO: Executing invalid instruction: [LSHIFT 5 "word]
PASS: Executing [LSHIFT 5 "word] set error code to 7
INFO: Executing [LSHIFT 5 "word] set error string to [LSHIFT doesn't like word as input]
INFO: Executing invalid instruction: [LSHIFT 5 [123]]
PASS: Executing [LSHIFT 5 [123]] set error code to 7
INFO: Executing [LSHIFT 5 [123]] set error string to [LSHIFT doesn't like [123] as input]
INFO: Executing invalid instruction: [LSHIFT 5 {123}]
PASS: Executing [LSHIFT 5 {123}] set error code to 7
INFO: Executing [LSHIFT 5 {123}] set error string to [LSHIFT doesn't like {123} as input]
INFO: Executing invalid instruction: [LSHIFT 5 12.30]
PASS: Executing [LSHIFT 5 12.30] set error code to 7
INFO: Executing [LSHIFT 5 12.30] set error string to [LSHIFT doesn't like 12.3 as input]
PASS: [ASHIFT 5 2] returned 20 , as expected.
PASS: [ASHIFT 20 -2] returned 5 , as expected.
PASS: [ASHIFT -20 -1] returned -10 , as expected.
PASS: [ASHIFT 5 0] returned 5 , as expected.
PASS: [ASHIFT 0 5] returned 0 , as expected.
PASS: [ASHIFT 5.0 2.00] returned 20 , as expected.
INFO: Executing invalid instruction: [(ASHIFT 5)]
PASS: Executing [(ASHIFT 5)] set error code to 6 , as expected
INFO: Executing [(ASHIFT 5)] set error string to [not enough inputs to ASHIFT]
INFO: Executing invalid instruction: [(ASHIFT 5 0 "toomany)]
PASS: Executing [(ASHIFT 5 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(ASHIFT 5 0 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ASHIFT "word 0]
PASS: Executing [ASHIFT "word 0] set error code to 7
INFO: Executing [ASHIFT "word 0] set error string to [ASHIFT doesn't like word as input]
INFO: Executing invalid instruction: [ASHIFT [123] 0]
PASS: Executing [ASHIFT [123] 0] set error code to 7
INFO: Executing [ASHIFT [123] 0] set error string to [ASHIFT doesn't like [123] as input]
INFO: Executing invalid instruction: [ASHIFT {123} 0]
PASS: Executing [ASHIFT {123} 0] set error code to 7
INFO: Executing [ASHIFT {123} 0] set error string to [ASHIFT doesn't like {123} as input]
INFO: Executing invalid instruction: [ASHIFT 12.30 0]
PASS: Executing [ASHIFT 12.30 0] set error code to 7
INFO: Executing [ASHIFT 12.30 0] set error string to [ASHIFT doesn't like 12.3 as input]
INFO: Executing invalid instruction: [ASHIFT 5 "word]
PASS: Executing [ASHIFT 5 "word] set error code to 7
INFO: Executing [ASHIFT 5 "word] set error string to [ASHIFT doesn't like word as input]
INFO: Executing invalid instruction: [ASHIFT 5 [123]]
PASS: Executing [ASHIFT 5 [123]] set error code to 7
INFO: Executing [ASHIFT 5 [123]] set error string to [ASHIFT doesn't like [123] as input]
INFO: Executing invalid instruction: [ASHIFT 5 {123}]
PASS: Executing [ASHIFT 5 {123}] set error code to 7
INFO: Executing [ASHIFT 5 {123}] set error string to [ASHIFT doesn't like {123} as input]
INFO: Executing invalid instruction: [ASHIFT 5 12.30]
PASS: Executing [ASHIFT 5 12.30] set error code to 7
INFO: Executing [ASHIFT 5 12.30] set error string to [ASHIFT doesn't like 12.3 as input]
PASS: [TEXT "SAMPLEPROC] returned [[a b] [PRINT :a] [SHOW :b]] , as expected.
PASS: [TEXT "PROCEDURETEST.COMPLEXPROC] returned [[a b [c 1] [d SUM 1 2] [e] 2] [PRINT :a] [SHOW :b] [OUTPUT SUM :c :d]] , as expected.
INFO: Executing invalid instruction: [(TEXT)]
PASS: Executing [(TEXT)] set error code to 6 , as expected
INFO: Executing [(TEXT)] set error string to [not enough inputs to TEXT]
INFO: Executing invalid instruction: [(TEXT "nonexistent)]
PASS: Executing [(TEXT "nonexistent)] set error code to 24 , as expected
INFO: Executing [(TEXT "nonexistent)] set error string to [I don't know how to nonexistent]
INFO: Executing invalid instruction: [(TEXT [sampleproc] )]
PASS: Executing [(TEXT [sampleproc] )] set error code to 7
INFO: Executing [(TEXT [sampleproc] )] set error string to [TEXT doesn't like [sampleproc] as input]
INFO: Executing invalid instruction: [(TEXT {sampleproc} )]
PASS: Executing [(TEXT {sampleproc} )] set error code to 7
INFO: Executing [(TEXT {sampleproc} )] set error string to [TEXT doesn't like {sampleproc} as input]
INFO: Executing invalid instruction: [(TEXT "sampleproc "toomany)]
PASS: Executing [(TEXT "sampleproc "toomany)] set error code to 8 , as expected
INFO: Executing [(TEXT "sampleproc "toomany)] set error string to [too much inside ()'s]
CALL: MAKE "fulltext FULLTEXT "SAMPLEPROC
PASS: [LIST? :fulltext] returned true , as expected.
PASS: [ITEM 1 :fulltext] returned TO SAMPLEPROC  :a  :b , as expected.
PASS: [ITEM 2 :fulltext] returned   PRINT :a ; print , as expected.
PASS: [ITEM 3 :fulltext] returned   SHOW  :b ; show , as expected.
PASS: [ITEM 4 :fulltext] returned END , as expected.
PASS: [COUNT :fulltext] returned 4 , as expected.
CALL: MAKE "fulltext FULLTEXT "PROCEDURETEST.COMPLEXPROC
PASS: [LIST? :fulltext] returned true , as expected.
PASS: [ITEM 1 :fulltext] returned TO PROCEDURETEST.COMPLEXPROC :a :b [:c 1] [:d SUM 1 2] [:e] 2 , as expected.
PASS: [ITEM 2 :fulltext] returned   PRINT :a ; print , as expected.
PASS: [ITEM 3 :fulltext] returned   SHOW  :b ; show , as expected.
PASS: [ITEM 4 :fulltext] returned  , as expected.
PASS: [ITEM 5 :fulltext] returned   OUTPUT SUM :c :d ; output , as expected.
PASS: [ITEM 6 :fulltext] returned END , as expected.
PASS: [COUNT :fulltext] returned 6 , as expected.
INFO: Executing invalid instruction: [(FULLTEXT)]
PASS: Executing [(FULLTEXT)] set error code to 6 , as expected
INFO: Executing [(FULLTEXT)] set error string to [not enough inputs to FULLTEXT]
INFO: Executing invalid instruction: [(FULLTEXT "nonexistent)]
PASS: Executing [(FULLTEXT "nonexistent)] set error code to 24 , as expected
INFO: Executing [(FULLTEXT "nonexistent)] set error string to [I don't know how to nonexistent]
INFO: Executing invalid instruction: [(FULLTEXT [sampleproc] )]
PASS: Executing [(FULLTEXT [sampleproc] )] set error code to 7
INFO: Executing [(FULLTEXT [sampleproc] )] set error string to [FULLTEXT doesn't like [sampleproc] as input]
INFO: Executing invalid instruction: [(FULLTEXT {sampleproc} )]
PASS: Executing [(FULLTEXT {sampleproc} )] set error code to 7
INFO: Executing [(FULLTEXT {sampleproc} )] set error string to [FULLTEXT doesn't like {sampleproc} as input]
INFO: Executing invalid instruction: [(FULLTEXT "sampleproc "toomany)]
PASS: Executing [(FULLTEXT "sampleproc "toomany)] set error code to 8 , as expected
INFO: Executing [(FULLTEXT "sampleproc "toomany)] set error string to [too much inside ()'s]
PASS: [DEFINEDP "nonexistent] returned false , as expected.
PASS: [DEFINED? "nonexistent] returned false , as expected.
PASS: [DEFINED? "FORWARD] returned false , as expected.
PASS: [DEFINED? "SAMPLEPROC] returned true , as expected.
PASS: [DEFINED? "sampleproc] returned true , as expected.
PASS: [DEFINED? "] returned false , as expected.
INFO: Executing invalid instruction: [(DEFINED?)]
PASS: Executing [(DEFINED?)] set error code to 6 , as expected
INFO: Executing [(DEFINED?)] set error string to [not enough inputs to DEFINED?]
INFO: Executing invalid instruction: [(DEFINED? {a} )]
PASS: Executing [(DEFINED? {a} )] set error code to 7
INFO: Executing [(DEFINED? {a} )] set error string to [DEFINED? doesn't like {a} as input]
INFO: Executing invalid instruction: [(DEFINED? [] )]
PASS: Executing [(DEFINED? [] )] set error code to 7
INFO: Executing [(DEFINED? [] )] set error string to [DEFINED? doesn't like [] as input]
INFO: Executing invalid instruction: [(DEFINED? "sampleproc "toomany)]
PASS: Executing [(DEFINED? "sampleproc "toomany)] set error code to 8 , as expected
INFO: Executing [(DEFINED? "sampleproc "toomany)] set error string to [too much inside ()'s]
PASS: [PROCEDUREP "nonexistent] returned false , as expected.
PASS: [PROCEDURE? "nonexistent] returned false , as expected.
PASS: [PROCEDURE? "FORWARD] returned true , as expected.
PASS: [PROCEDURE? "SAMPLEPROC] returned true , as expected.
PASS: [PROCEDURE? "sampleproc] returned true , as expected.
PASS: [PROCEDURE? "] returned false , as expected.
INFO: Executing invalid instruction: [(PROCEDURE?)]
PASS: Executing [(PROCEDURE?)] set error code to 6 , as expected
INFO: Executing [(PROCEDURE?)] set error string to [not enough inputs to PROCEDURE?]
INFO: Executing invalid instruction: [(PROCEDURE? {a} )]
PASS: Executing [(PROCEDURE? {a} )] set error code to 7
INFO: Executing [(PROCEDURE? {a} )] set error string to [PROCEDURE? doesn't like {a} as input]
INFO: Executing invalid instruction: [(PROCEDURE? [] )]
PASS: Executing [(PROCEDURE? [] )] set error code to 7
INFO: Executing [(PROCEDURE? [] )] set error string to [PROCEDURE? doesn't like [] as input]
INFO: Executing invalid instruction: [(PROCEDURE? "sampleproc "toomany)]
PASS: Executing [(PROCEDURE? "sampleproc "toomany)] set error code to 8 , as expected
INFO: Executing [(PROCEDURE? "sampleproc "toomany)] set error string to [too much inside ()'s]
PASS: [NAMEP "nonexistent] returned false , as expected.
PASS: [NAME? "nonexistent] returned false , as expected.
PASS: [NAME? "FORWARD] returned false , as expected.
PASS: [NAME? "] returned false , as expected.
PASS: [NAME? "namepvariable] returned true , as expected.
PASS: [NAME? "NAMEPVARIABLE] returned true , as expected.
INFO: Executing invalid instruction: [(NAME?)]
PASS: Executing [(NAME?)] set error code to 6 , as expected
INFO: Executing [(NAME?)] set error string to [not enough inputs to NAME?]
INFO: Executing invalid instruction: [(NAME? {a} )]
PASS: Executing [(NAME? {a} )] set error code to 7
INFO: Executing [(NAME? {a} )] set error string to [NAME? doesn't like {a} as input]
INFO: Executing invalid instruction: [(NAME? [] )]
PASS: Executing [(NAME? [] )] set error code to 7
INFO: Executing [(NAME? [] )] set error string to [NAME? doesn't like [] as input]
INFO: Executing invalid instruction: [(NAME? "namepvariable "toomany)]
PASS: Executing [(NAME? "namepvariable "toomany)] set error code to 8 , as expected
INFO: Executing [(NAME? "namepvariable "toomany)] set error string to [too much inside ()'s]
PASS: [PRIMITIVEP "nonexistent] returned false , as expected.
PASS: [PRIMITIVE? "nonexistent] returned false , as expected.
PASS: [PRIMITIVE? "FORWARD] returned true , as expected.
PASS: [PRIMITIVE? "FD] returned true , as expected.
PASS: [PRIMITIVE? "] returned false , as expected.
PASS: [PRIMITIVE? "namepvariable] returned false , as expected.
PASS: [PRIMITIVE? "sampleproc] returned false , as expected.
INFO: Executing invalid instruction: [(PRIMITIVE?)]
PASS: Executing [(PRIMITIVE?)] set error code to 6 , as expected
INFO: Executing [(PRIMITIVE?)] set error string to [not enough inputs to PRIMITIVE?]
INFO: Executing invalid instruction: [(PRIMITIVE? {a} )]
PASS: Executing [(PRIMITIVE? {a} )] set error code to 7
INFO: Executing [(PRIMITIVE? {a} )] set error string to [PRIMITIVE? doesn't like {a} as input]
INFO: Executing invalid instruction: [(PRIMITIVE? [] )]
PASS: Executing [(PRIMITIVE? [] )] set error code to 7
INFO: Executing [(PRIMITIVE? [] )] set error string to [PRIMITIVE? doesn't like [] as input]
INFO: Executing invalid instruction: [(PRIMITIVE? "namepvariable "toomany)]
PASS: Executing [(PRIMITIVE? "namepvariable "toomany)] set error code to 8 , as expected
INFO: Executing [(PRIMITIVE? "namepvariable "toomany)] set error string to [too much inside ()'s]
PASS: [MACROP "mymacro] returned true , as expected.
PASS: [MACRO? "mymacro] returned true , as expected.
PASS: [MACRO? "FORWARD] returned false , as expected.
PASS: [MACRO? "FD] returned false , as expected.
PASS: [MACRO? "] returned false , as expected.
PASS: [MACRO? "namepvariable] returned false , as expected.
PASS: [MACRO? "sampleproc] returned false , as expected.
INFO: Executing invalid instruction: [(MACRO?)]
PASS: Executing [(MACRO?)] set error code to 6 , as expected
INFO: Executing [(MACRO?)] set error string to [not enough inputs to MACRO?]
INFO: Executing invalid instruction: [(MACRO? {a} )]
PASS: Executing [(MACRO? {a} )] set error code to 7
INFO: Executing [(MACRO? {a} )] set error string to [MACRO? doesn't like {a} as input]
INFO: Executing invalid instruction: [(MACRO? [] )]
PASS: Executing [(MACRO? [] )] set error code to 7
INFO: Executing [(MACRO? [] )] set error string to [MACRO? doesn't like [] as input]
INFO: Executing invalid instruction: [(MACRO? "mymacro "toomany)]
PASS: Executing [(MACRO? "mymacro "toomany)] set error code to 8 , as expected
INFO: Executing [(MACRO? "mymacro "toomany)] set error string to [too much inside ()'s]
PASS: [ECHO "input] returned input , as expected.
PASS: [DEFINEDP "ECHO] returned true , as expected.
PASS: [DEFINED? "ECHO] returned true , as expected.
CALL: DEFINE "DONOTHING [[]]
PASS: [DEFINED? "DONOTHING] returned true , as expected.
CALL: DONOTHING
INFO: Executing invalid instruction: [(DEFINE "BADPROCEDURE)]
PASS: Executing [(DEFINE "BADPROCEDURE)] set error code to 6 , as expected
INFO: Executing [(DEFINE "BADPROCEDURE)] set error string to [not enough inputs to DEFINE]
INFO: Executing invalid instruction: [(DEFINE "BADPROCEDURE [[a] [output :a]] "toomany)]
PASS: Executing [(DEFINE "BADPROCEDURE [[a] [output :a]] "toomany)] set error code to 8 , as expected
INFO: Executing [(DEFINE "BADPROCEDURE [[a] [output :a]] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [DEFINE [BADPROCEDURE] [[a] [output :a]]]
PASS: Executing [DEFINE [BADPROCEDURE] [[a] [output :a]]] set error code to 7
INFO: Executing [DEFINE [BADPROCEDURE] [[a] [output :a]]] set error string to [DEFINE doesn't like [BADPROCEDURE] as input]
INFO: Executing invalid instruction: [DEFINE {BADPROCEDURE} [[a] [output :a]]]
PASS: Executing [DEFINE {BADPROCEDURE} [[a] [output :a]]] set error code to 7
INFO: Executing [DEFINE {BADPROCEDURE} [[a] [output :a]]] set error string to [DEFINE doesn't like {BADPROCEDURE} as input]
INFO: Executing invalid instruction: [DEFINE "BADPROCEDURE "badtext]
PASS: Executing [DEFINE "BADPROCEDURE "badtext] set error code to 7
INFO: Executing [DEFINE "BADPROCEDURE "badtext] set error string to [DEFINE doesn't like badtext as input]
INFO: Executing invalid instruction: [DEFINE "BADPROCEDURE []]
PASS: Executing [DEFINE "BADPROCEDURE []] set error code to 7
INFO: Executing [DEFINE "BADPROCEDURE []] set error string to [DEFINE doesn't like [] as input]
INFO: Executing invalid instruction: [DEFINE "BADPROCEDURE {[a] [output :a]}]
PASS: Executing [DEFINE "BADPROCEDURE {[a] [output :a]}] set error code to 7
INFO: Executing [DEFINE "BADPROCEDURE {[a] [output :a]}] set error string to [DEFINE doesn't like {[a] [output :a]} as input]
INFO: Executing invalid instruction: [DEFINE "BADPROCEDURE ["a [output :a]]]
PASS: Executing [DEFINE "BADPROCEDURE ["a [output :a]]] set error code to 7
INFO: Executing [DEFINE "BADPROCEDURE ["a [output :a]]] set error string to [DEFINE doesn't like ["a [output :a]] as input]
INFO: Executing invalid instruction: [DEFINE "BADPROCEDURE [[a] {output :a}]]
PASS: Executing [DEFINE "BADPROCEDURE [[a] {output :a}]] set error code to 7
INFO: Executing [DEFINE "BADPROCEDURE [[a] {output :a}]] set error string to [DEFINE doesn't like [[a] {output :a}] as input]
INFO: Executing invalid instruction: [DEFINE "BADPROCEDURE [[a] output :a]]
PASS: Executing [DEFINE "BADPROCEDURE [[a] output :a]] set error code to 7
INFO: Executing [DEFINE "BADPROCEDURE [[a] output :a]] set error string to [DEFINE doesn't like [[a] output :a] as input]
INFO: Executing invalid instruction: [DEFINE "BADPROCEDURE [{a b} [FORWARD 10]]]
PASS: Executing [DEFINE "BADPROCEDURE [{a b} [FORWARD 10]]] set error code to 7
INFO: Executing [DEFINE "BADPROCEDURE [{a b} [FORWARD 10]]] set error string to [DEFINE doesn't like [{a b} [FORWARD 10]] as input]
INFO: Executing invalid instruction: [DEFINE "BADPROCEDURE [[a b] [FORWARD 10] BADINPUT [FORWARD 10]]]
PASS: Executing [DEFINE "BADPROCEDURE [[a b] [FORWARD 10] BADINPUT [FORWARD 10]]] set error code to 7
INFO: Executing [DEFINE "BADPROCEDURE [[a b] [FORWARD 10] BADINPUT [FORWARD 10]]] set error string to [DEFINE doesn't like [[a b] [FORWARD 10] BADINPUT [FORWARD 10]] as input]
PASS: [DEFINED? "BADPROCEDURE] returned false , as expected.
INFO: Executing invalid instruction: [DEFINE "BUG1520950 [[] APPLY [OUTPUT ?] [3]] BUG1520950]
PASS: Executing [DEFINE "BUG1520950 [[] APPLY [OUTPUT ?] [3]] BUG1520950] set error code to 7
INFO: Executing [DEFINE "BUG1520950 [[] APPLY [OUTPUT ?] [3]] BUG1520950] set error string to [DEFINE doesn't like [[] APPLY [OUTPUT ?] [3]] as input]
PASS: [DEFINED? "BUG1520950] returned false , as expected.
PASS: [LOCALVARTEST "unknownlocalvar 42] returned 42 , as expected.
PASS: [NAME? "unknownlocalvar] returned false , as expected.
PASS: [:10] returned ten , as expected.
PASS: [:11] returned eleven , as expected.
PASS: [:10] returned ten , as expected.
PASS: [:11] returned eleven , as expected.
INFO: Executing invalid instruction: [(LOCAL)]
PASS: Executing [(LOCAL)] set error code to 6 , as expected
INFO: Executing [(LOCAL)] set error string to [not enough inputs to LOCAL]
INFO: Executing invalid instruction: [LOCAL {a}]
FAIL: Executing [LOCAL {a}] did not throw an error
PASS: [LOCALVARTEST "mylocalvarname 42] returned 42 , as expected.
PASS: [:mylocalvarname] returned 32 , as expected.
INFO: Executing invalid instruction: [(LOCALMAKE)]
PASS: Executing [(LOCALMAKE)] set error code to 6 , as expected
INFO: Executing [(LOCALMAKE)] set error string to [not enough inputs to LOCALMAKE]
INFO: Executing invalid instruction: [(CONTENTS "toomany)]
PASS: Executing [(CONTENTS "toomany)] set error code to 8 , as expected
INFO: Executing [(CONTENTS "toomany)] set error string to [too much inside ()'s]
PASS: [PROCEDURES] returned [#test .eqtest abstest activeareatest andtest angleiscloseenough applytest applytest.applyoutput applytest.badinput applytest.bug1519088 applytest.nonprimitive applytest.nooutput applytest.smoketest arcbadinputtest arccostest arcsintest arcsmoketest arctantest arctest arraybadinputtest arrayorigintest arrayptest arraysmoketest arraytest asciitest ashifttest.badinput ashifttest.smoketest beforeptest bitandtest.badinput bitandtest.smoketest bitcopytest bitloadsizetest bitmaptest bitnottest.badinput bitnottest.smoketest bitortest.badinput bitortest.smoketest bitpastetoindextest.badinput bitpastetoindextest.smoketest bitwisetest bitxortest.badinput bitxortest.smoketest bug1349374test bug1377856test bug1383281test bug1384267test bug1388325test bug1397560test bug1429960test bug1438863test bug1448155test bug1458661test burytest burytest.badinput burytest.buriedprocedure burytest.buryall burytest.procedure burytest.propertylist burytest.variable butfirststest butfirststest.badinput butfirststest.smoketest butfirsttest butlasttest buttonptest chdirtest client.onreadytosend colorsetgettest colortest controlflowtest copydefmaybeoutputtest copydefoptest copydefoutputtest copydefstoptest copydeftest copydeftotest costest definetest definetest.badinput definetest.smoketest differencetest difficultcomments directorysmoketest directorytest dllcalltest dllfreetest dllloadtest dllsmoketest dlltest donothing doorientationtest echo edalltest editortest emptyptest equalptest erasetest erasetest.badinput erasetest.eraseall erasetest.eraseprocedure erasetest.erasepropertylist erasetest.erasevariable erasetest.ern erasetest.erpl erracttest erracttest.bug1517326 erracttest.bug1517326.continue5 erracttest.output.5 erracttest.smoketest error.30.test errortest errortest.checkerror exptest filetest filetest.allopen filetest.badinput filetest.closeall filetest.dribble filetest.erasefile filetest.openappend filetest.opendirectoryasfile filetest.openopenfile filetest.openupdate filetest.setreadpos filetest.setwritepos filetest.smoketest filltest filltimerevent firststest firststest.badinput firststest.smoketest firsttest floodcolortest fontfacenamestest fontfacenamestest.badinput fontfacenamestest.manualtest fontfacenamestest.smoketest formtest fulltexttest fulltexttest.badinput fulltexttest.smoketest helptest i.dont.know.what.to.do.with.value iftest inporttest inttest iseqtest labelbadinputtest labelcircletest labeltest largeedittest lasttest listptest listtest listtest.smoketest lntest loadtest localvartest log10test logictest logoversiontest logoversiontest.badinput logoversiontest.smoketest lshifttest.badinput lshifttest.smoketest macro.return.unbound.instead.of.list macrotest macrotest.outputnothing mathtest memberptest miditest miditest.badinput miditest.devicezero miditest.longformat miditest.playtune miditest.smoketest minustest misctest mkdirtest modulotest mousetest mousetest.badinput mousetest.simpletest my.proc.to.step myadd mymacro networktest networktest.client.echo networktest.client.receivelargepacket networktest.client.receiveunframedpacket networktest.client.shutdownrace networktest.client.smoketest networktest.hostname networktest.netshutdowncrash networktest.server.receiveunframedpacket networktest.server.shutdownrace networktest.server.twoconnections networktest.servercommand networktest.smoketest no.input.no.output nodestest nottest numberptest one.input.no.output orientationtest ortest outporttest output.373 parsetest parsetest.expression parsetest.func parsetest.number parsetest.word pasteincircle pencolortest penmodetest pentest penupdowntest perspectivetest pitest plisttest porttest powertest predicatetest procedure.shadows.myshadowedvar procedure.with.to.inside.it procedureinworkingdirectory proceduretest proceduretest.complexproc producttest queuetest queuetest.badinput queuetest.circulartest queuetest.smoketest quotedtest quotedtest.badinput quotedtest.smoketest quotienttest radarccostest radarcsintest radarctantest radcostest radsintest radtantest rawasciitest remaindertest repcounttest repcounttest.badinput repcounttest.smoketest repcounttest.timercallback repcounttest.timertest repeattest repeattest.badinput repeattest.outputinrepeat repeattest.smoketest repeattest.stopinrepeat rmdirtest roundtest runtest sampleproc screencolortest screentest scrunchtest sentencetest sentencetest.badinput sentencetest.noalias sentencetest.smoketest setitemtest setlabelfonttest setrandomorientation shellscripttest signtest sintest sorttest sorttest.after? sorttest.badinput sorttest.nonpredicate sorttest.oneinputbydefault sorttest.oneinputproc sorttest.performance sorttest.regression sorttest.sortbylegs sorttest.sortbyname sorttest.threeinputproc soundtest soundtest.badinput soundtest.frequency.a4 soundtest.frequency.b4 soundtest.frequency.c4 soundtest.frequency.c5 soundtest.frequency.d4 soundtest.frequency.d5 soundtest.frequency.e4 soundtest.frequency.f4 soundtest.frequency.g4 soundtest.sound soundtest.tone sqrttest stacktest stacktest.badinput stacktest.circulartest stacktest.smoketest steptest steptest.badinput steptest.procedure steptest.propertylist steptest.shadowvariable steptest.stepall steptest.steppedprocedure steptest.variable sumtest tantest testall testlib.repeatword texttest texttest.badinput texttest.smoketest timewait tracetest tracetest.badinput tracetest.function tracetest.procedure tracetest.propertylist tracetest.traceall tracetest.tracedfunction tracetest.tracedprocedure tracetest.variable waittest windowfileedittest windowfileedittest.bug1330752 windowfileedittest.longfilename windowsettest windowstest windowstest.button windowstest.button.badinput windowstest.checkbox windowstest.checkbox.badinput windowstest.checkbox.deletegroupbox windowstest.combobox windowstest.combobox.badinput windowstest.debugwindows windowstest.debugwindows.badinput windowstest.debugwindows.stress windowstest.dialog.badinput windowstest.dialog.badinput.fromcallback windowstest.dialog.smoketest windowstest.groupbox windowstest.groupbox.badinput windowstest.listbox windowstest.listbox.badinput windowstest.mainwindow.smoketest windowstest.radiobutton windowstest.radiobutton.badinput windowstest.radiobutton.deletegroupbox windowstest.regressiontest windowstest.scrollbar windowstest.scrollbar.badinput windowstest.setup windowstest.static windowstest.static.badinput windowstest.window.badinput windowstest.window.smoketest windowtest wordproctest wordptest wordtest yesnoboxtest yesnoboxtest.badinput yesnoboxtest.smoketest ~ignoreme ~ignoremewascalled] , as expected.
INFO: Executing invalid instruction: [(PROCEDURES "toomany)]
PASS: Executing [(PROCEDURES "toomany)] set error code to 8 , as expected
INFO: Executing [(PROCEDURES "toomany)] set error string to [too much inside ()'s]
FAIL: [NAMES] returned [[] [10 11 12 13 errortest.array expectedresult instruction mylocalvarname namepvariable startup testlog thesum ~ignoremewascalled]] . We expected [[] [10 11 12 13 erract errortest.array expectedresult instruction mylocalvarname namepvariable startup testlog thesum ~ignoremewascalled]]
INFO: Executing invalid instruction: [(NAMES "toomany)]
PASS: Executing [(NAMES "toomany)] set error code to 8 , as expected
INFO: Executing [(NAMES "toomany)] set error string to [too much inside ()'s]
PASS: [PLISTS] returned [[] [] []] , as expected.
INFO: Executing invalid instruction: [(PLISTS "toomany)]
PASS: Executing [(PLISTS "toomany)] set error code to 8 , as expected
INFO: Executing [(PLISTS "toomany)] set error string to [too much inside ()'s]
PASS: [NAMELIST "a] returned [[] [a]] , as expected.
PASS: [NAMELIST [a b]] returned [[] [a b]] , as expected.
PASS: [NAMELIST "] returned [[] []] , as expected.
PASS: [NAMELIST []] returned [[] []] , as expected.
INFO: Executing invalid instruction: [(NAMELIST)]
PASS: Executing [(NAMELIST)] set error code to 6 , as expected
INFO: Executing [(NAMELIST)] set error string to [not enough inputs to NAMELIST]
INFO: Executing invalid instruction: [NAMELIST {a b}]
PASS: Executing [NAMELIST {a b}] set error code to 21
INFO: Executing [NAMELIST {a b}] set error string to [namelist doesn't like {a b} as input]
INFO: Executing invalid instruction: [(NAMELIST "a "b)]
PASS: Executing [(NAMELIST "a "b)] set error code to 8 , as expected
INFO: Executing [(NAMELIST "a "b)] set error string to [too much inside ()'s]
CALL: PO CONTENTS
CALL: PO NAMES
CALL: PO PROCEDURES
CALL: PO BURIED
CALL: PO PLISTS
CALL: PO []
CALL: POALL
CALL: POPS
CALL: PONS
CALL: POPLS
CALL: PON "namepvariable
CALL: PON [namepvariable]
INFO: Executing invalid instruction: [(POPL)]
PASS: Executing [(POPL)] set error code to 6 , as expected
INFO: Executing [(POPL)] set error string to [not enough inputs to POPL]
INFO: Executing invalid instruction: [(POPL "numbertoword "toomany)]
PASS: Executing [(POPL "numbertoword "toomany)] set error code to 8 , as expected
INFO: Executing [(POPL "numbertoword "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(PO)]
PASS: Executing [(PO)] set error code to 6 , as expected
INFO: Executing [(PO)] set error string to [not enough inputs to PO]
INFO: Executing invalid instruction: [(PO [[] [] []] "toomany)]
PASS: Executing [(PO [[] [] []] "toomany)] set error code to 8 , as expected
INFO: Executing [(PO [[] [] []] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PO [[forward] [] []]]
PASS: Executing [PO [[forward] [] []]] set error code to 22 , as expected
INFO: Executing [PO [[forward] [] []]] set error string to [forward is a primitive]
INFO: Executing invalid instruction: [PO [[nonexistent] [] []]]
PASS: Executing [PO [[nonexistent] [] []]] set error code to 24 , as expected
INFO: Executing [PO [[nonexistent] [] []]] set error string to [I don't know how to nonexistent]
INFO: Executing invalid instruction: [PO [[] [nonexistent] []]]
PASS: Executing [PO [[] [nonexistent] []]] set error code to 11 , as expected
INFO: Executing [PO [[] [nonexistent] []]] set error string to [nonexistent has no value]
INFO: Executing invalid instruction: [PO {PROCEDURETEST}]
PASS: Executing [PO {PROCEDURETEST}] set error code to 4
INFO: Executing [PO {PROCEDURETEST}] set error string to [PO doesn't like {PROCEDURETEST} as input]
INFO: Executing invalid instruction: [PO [[PROCEDURETEST] [namepvariable] {c}]]
PASS: Executing [PO [[PROCEDURETEST] [namepvariable] {c}]] set error code to 4
INFO: Executing [PO [[PROCEDURETEST] [namepvariable] {c}]] set error string to [PO doesn't like {c} as input]
INFO: Executing invalid instruction: [PO [PROCEDURETEST SAMPLEPROC {c}]]
PASS: Executing [PO [PROCEDURETEST SAMPLEPROC {c}]] set error code to 4
INFO: Executing [PO [PROCEDURETEST SAMPLEPROC {c}]] set error string to [PO doesn't like {c} as input]
INFO: Executing invalid instruction: [PO [[PROCEDURETEST SAMPLEPROC {c}]]]
PASS: Executing [PO [[PROCEDURETEST SAMPLEPROC {c}]]] set error code to 4
INFO: Executing [PO [[PROCEDURETEST SAMPLEPROC {c}]]] set error string to [PO doesn't like {c} as input]
INFO: Executing invalid instruction: [PO [[PROCEDURETEST] [namepvariable] [c] [d]]]
PASS: Executing [PO [[PROCEDURETEST] [namepvariable] [c] [d]]] set error code to 4
INFO: Executing [PO [[PROCEDURETEST] [namepvariable] [c] [d]]] set error string to [PO doesn't like [[PROCEDURETEST] [namepvariable] [c] [d]] as input]
INFO: Executing invalid instruction: [PO [[[PROCEDURETEST]]]]
PASS: Executing [PO [[[PROCEDURETEST]]]] set error code to 4
INFO: Executing [PO [[[PROCEDURETEST]]]] set error string to [PO doesn't like [PROCEDURETEST] as input]
INFO: Executing invalid instruction: [(POALL "toomany)]
PASS: Executing [(POALL "toomany)] set error code to 8 , as expected
INFO: Executing [(POALL "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(POPS "toomany)]
PASS: Executing [(POPS "toomany)] set error code to 8 , as expected
INFO: Executing [(POPS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(POPLS "toomany)]
PASS: Executing [(POPLS "toomany)] set error code to 8 , as expected
INFO: Executing [(POPLS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(POTS "toomany)]
PASS: Executing [(POTS "toomany)] set error code to 8 , as expected
INFO: Executing [(POTS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(PON)]
PASS: Executing [(PON)] set error code to 6 , as expected
INFO: Executing [(PON)] set error string to [not enough inputs to PON]
INFO: Executing invalid instruction: [PON "sampleproc]
PASS: Executing [PON "sampleproc] set error code to 21
INFO: Executing [PON "sampleproc] set error string to [sampleproc has no value]
INFO: Executing invalid instruction: [(PON "too "many)]
PASS: Executing [(PON "too "many)] set error code to 8 , as expected
INFO: Executing [(PON "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PON {a b}]
PASS: Executing [PON {a b}] set error code to 21
INFO: Executing [PON {a b}] set error string to [namelist doesn't like {a b} as input]
INFO: Executing invalid instruction: [(POT)]
PASS: Executing [(POT)] set error code to 6 , as expected
INFO: Executing [(POT)] set error string to [not enough inputs to POT]
INFO: Executing invalid instruction: [(POT "pot "pots)]
PASS: Executing [(POT "pot "pots)] set error code to 8 , as expected
INFO: Executing [(POT "pot "pots)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [POT "forward]
PASS: Executing [POT "forward] set error code to 22
INFO: Executing [POT "forward] set error string to [forward is a primitive]
INFO: Executing invalid instruction: [POT "nonexistent]
PASS: Executing [POT "nonexistent] set error code to 24
INFO: Executing [POT "nonexistent] set error string to [I don't know how to nonexistent]
INFO: Executing invalid instruction: [POT [nonexistent]]
PASS: Executing [POT [nonexistent]] set error code to 24
INFO: Executing [POT [nonexistent]] set error string to [I don't know how to nonexistent]
INFO: Executing invalid instruction: [POT {a}]
PASS: Executing [POT {a}] set error code to 4
INFO: Executing [POT {a}] set error string to [POT doesn't like {a} as input]
PASS: "Bug #1438863 is fixed; erasing a procedure in the middle of running it does not crash
PASS: [SUMCOPY 1 2] returned 3 , as expected.
PASS: [(SUMCOPY 1 2 3)] returned 6 , as expected.
PASS: [(SUMCOPY)] returned 0 , as expected.
INFO: Executing invalid instruction: [SUMCOPY 1 "ten]
PASS: Executing [SUMCOPY 1 "ten] set error code to 7
INFO: Executing [SUMCOPY 1 "ten] set error string to [SUMCOPY doesn't like ten as input]
INFO: Executing invalid instruction: [SUMCOPY "ten 1]
PASS: Executing [SUMCOPY "ten 1] set error code to 7
INFO: Executing [SUMCOPY "ten 1] set error string to [SUMCOPY doesn't like ten as input]
PASS: [1 MYPLUS 2] returned 3 , as expected.
PASS: [1 MYPLUS 2 MYPLUS 3] returned 6 , as expected.
INFO: Executing invalid instruction: [1 MYPLUS "ten]
PASS: Executing [1 MYPLUS "ten] set error code to 7
INFO: Executing [1 MYPLUS "ten] set error string to [MYPLUS doesn't like ten as input]
INFO: Executing invalid instruction: ["ten MYPLUS 1]
PASS: Executing ["ten MYPLUS 1] set error code to 7
INFO: Executing ["ten MYPLUS 1] set error string to [MYPLUS doesn't like ten as input]
INFO: Executing invalid instruction: [(MYPLUS)]
PASS: Executing [(MYPLUS)] set error code to 6 , as expected
INFO: Executing [(MYPLUS)] set error string to [not enough inputs to MYPLUS]
PASS: [MYADDCOPY 1 2] returned 3 , as expected.
PASS: [COPYDEFTOTEST] returned 373 , as expected.
INFO: Executing invalid instruction: [(COPYDEF)]
PASS: Executing [(COPYDEF)] set error code to 6 , as expected
INFO: Executing [(COPYDEF)] set error string to [not enough inputs to COPYDEF]
INFO: Executing invalid instruction: [(COPYDEF "MYLIST)]
PASS: Executing [(COPYDEF "MYLIST)] set error code to 6 , as expected
INFO: Executing [(COPYDEF "MYLIST)] set error string to [not enough inputs to COPYDEF]
INFO: Executing invalid instruction: [(COPYDEF "MYLIST "LIST "TOOMANY)]
PASS: Executing [(COPYDEF "MYLIST "LIST "TOOMANY)] set error code to 8 , as expected
INFO: Executing [(COPYDEF "MYLIST "LIST "TOOMANY)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(COPYDEF "SUM "PRODUCT)]
PASS: Executing [(COPYDEF "SUM "PRODUCT)] set error code to 22 , as expected
INFO: Executing [(COPYDEF "SUM "PRODUCT)] set error string to [SUM is a primitive]
INFO: Executing invalid instruction: [(COPYDEF "XXXCOPY "DOESNOTEXIT)]
PASS: Executing [(COPYDEF "XXXCOPY "DOESNOTEXIT)] set error code to 13 , as expected
INFO: Executing [(COPYDEF "XXXCOPY "DOESNOTEXIT)] set error string to [I don't know how to DOESNOTEXIT]
INFO: Executing invalid instruction: [(COPYDEF [1] "SUM)]
PASS: Executing [(COPYDEF [1] "SUM)] set error code to 7
INFO: Executing [(COPYDEF [1] "SUM)] set error string to [COPYDEF doesn't like [1] as input]
INFO: Executing invalid instruction: [(COPYDEF {1} "SUM)]
PASS: Executing [(COPYDEF {1} "SUM)] set error code to 7
INFO: Executing [(COPYDEF {1} "SUM)] set error string to [COPYDEF doesn't like {1} as input]
INFO: Executing invalid instruction: [(COPYDEF 1 "SUM)]
PASS: Executing [(COPYDEF 1 "SUM)] set error code to 4
INFO: Executing [(COPYDEF 1 "SUM)] set error string to [COPYDEF doesn't like 1 as input]
INFO: Executing invalid instruction: [(COPYDEF "NEWCOPY [1] )]
PASS: Executing [(COPYDEF "NEWCOPY [1] )] set error code to 7
INFO: Executing [(COPYDEF "NEWCOPY [1] )] set error string to [COPYDEF doesn't like [1] as input]
INFO: Executing invalid instruction: [(COPYDEF "NEWCOPY {1} )]
PASS: Executing [(COPYDEF "NEWCOPY {1} )] set error code to 7
INFO: Executing [(COPYDEF "NEWCOPY {1} )] set error string to [COPYDEF doesn't like {1} as input]
INFO: Executing invalid instruction: [(COPYDEF "NEWCOPY 1 )]
PASS: Executing [(COPYDEF "NEWCOPY 1 )] set error code to 4
INFO: Executing [(COPYDEF "NEWCOPY 1 )] set error string to [COPYDEF doesn't like 1 as input]
INFO: Executing invalid instruction: [(NEWCOPY)]
PASS: Executing [(NEWCOPY)] set error code to 13 , as expected
INFO: Executing [(NEWCOPY)] set error string to [I don't know how to NEWCOPY]
INFO: Executing invalid instruction: [(COPYDEF "SUMCOPY "SUM)]
PASS: Executing [(COPYDEF "SUMCOPY "SUM)] set error code to 22 , as expected
INFO: Executing [(COPYDEF "SUMCOPY "SUM)] set error string to [SUMCOPY is a primitive]
PASS: [GPROP "nonexistent "prop1] returned [] , as expected.
PASS: [GPROP "testplist1 "nonexistent] returned [] , as expected.
PASS: [GPROP "testplist1 "property1] returned 1 , as expected.
PASS: [GPROP "testplist1 "property2] returned abc , as expected.
PASS: [GPROP "testplist1 "property3] returned [a b c] , as expected.
PASS: [GPROP "testplist1 "property4] returned {a b c} , as expected.
PASS: [GPROP "testplist1 "property5] returned [] , as expected.
PASS: [GPROP "testplist1 "property6] returned  , as expected.
PASS: [GPROP "testplist1 "] returned empty , as expected.
PASS: [GPROP "testplist1 "property1] returned one , as expected.
PASS: [PLIST "nonexistent] returned [] , as expected.
PASS: [COUNT :listcontents] returned 14 , as expected.
PASS: [:value] returned empty , as expected.
PASS: [:value] returned  , as expected.
PASS: [:value] returned [] , as expected.
PASS: [:value] returned {a b c} , as expected.
PASS: [:value] returned [a b c] , as expected.
PASS: [:value] returned abc , as expected.
PASS: [:value] returned one , as expected.
PASS: [COUNT :plistsoutput] returned 3 , as expected.
PASS: [ITEM 1 :plistsoutput] returned [] , as expected.
PASS: [ITEM 2 :plistsoutput] returned [] , as expected.
PASS: [MEMBERP "testplist1 ITEM 3 :plistsoutput] returned true , as expected.
PASS: [COUNT :plistsoutput] returned 3 , as expected.
PASS: [ITEM 1 :plistsoutput] returned [] , as expected.
PASS: [ITEM 2 :plistsoutput] returned [] , as expected.
PASS: [MEMBERP "testplist1 ITEM 3 :plistsoutput] returned false , as expected.
PASS: [GPROP "testplist1 "property1] returned [] , as expected.
PASS: [GPROP "testplist1 "property2] returned [] , as expected.
PASS: [GPROP "testplist1 "property3] returned [] , as expected.
PASS: [GPROP "testplist1 "property4] returned [] , as expected.
PASS: [GPROP "testplist1 "property5] returned [] , as expected.
PASS: [GPROP "testplist1 "property6] returned [] , as expected.
PASS: [GPROP "testplist1 "] returned [] , as expected.
PASS: [PLIST "testplist1] returned [] , as expected.
INFO: Executing invalid instruction: [(PLIST)]
PASS: Executing [(PLIST)] set error code to 6 , as expected
INFO: Executing [(PLIST)] set error string to [not enough inputs to PLIST]
INFO: Executing invalid instruction: [(PLIST "too "many)]
PASS: Executing [(PLIST "too "many)] set error code to 8 , as expected
INFO: Executing [(PLIST "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PLIST [1 2 3]]
PASS: Executing [PLIST [1 2 3]] set error code to 7
INFO: Executing [PLIST [1 2 3]] set error string to [PLIST doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [PLIST {1 2 3}]
PASS: Executing [PLIST {1 2 3}] set error code to 7
INFO: Executing [PLIST {1 2 3}] set error string to [PLIST doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [(REMPROP)]
PASS: Executing [(REMPROP)] set error code to 6 , as expected
INFO: Executing [(REMPROP)] set error string to [not enough inputs to REMPROP]
INFO: Executing invalid instruction: [(REMPROP "plist)]
PASS: Executing [(REMPROP "plist)] set error code to 6 , as expected
INFO: Executing [(REMPROP "plist)] set error string to [not enough inputs to REMPROP]
INFO: Executing invalid instruction: [(REMPROP "plist "prop "toomany)]
PASS: Executing [(REMPROP "plist "prop "toomany)] set error code to 8 , as expected
INFO: Executing [(REMPROP "plist "prop "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [REMPROP [1 2 3] "prop]
PASS: Executing [REMPROP [1 2 3] "prop] set error code to 7
INFO: Executing [REMPROP [1 2 3] "prop] set error string to [REMPROP doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [REMPROP {1 2 3} "prop]
PASS: Executing [REMPROP {1 2 3} "prop] set error code to 7
INFO: Executing [REMPROP {1 2 3} "prop] set error string to [REMPROP doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [REMPROP "plist [1 2 3]]
PASS: Executing [REMPROP "plist [1 2 3]] set error code to 7
INFO: Executing [REMPROP "plist [1 2 3]] set error string to [REMPROP doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [REMPROP "plist {1 2 3}]
PASS: Executing [REMPROP "plist {1 2 3}] set error code to 7
INFO: Executing [REMPROP "plist {1 2 3}] set error string to [REMPROP doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [(GPROP)]
PASS: Executing [(GPROP)] set error code to 6 , as expected
INFO: Executing [(GPROP)] set error string to [not enough inputs to GPROP]
INFO: Executing invalid instruction: [(GPROP "plist)]
PASS: Executing [(GPROP "plist)] set error code to 6 , as expected
INFO: Executing [(GPROP "plist)] set error string to [not enough inputs to GPROP]
INFO: Executing invalid instruction: [(GPROP "plist "prop "toomany)]
PASS: Executing [(GPROP "plist "prop "toomany)] set error code to 8 , as expected
INFO: Executing [(GPROP "plist "prop "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [GPROP [1 2 3] "prop]
PASS: Executing [GPROP [1 2 3] "prop] set error code to 7
INFO: Executing [GPROP [1 2 3] "prop] set error string to [GPROP doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [GPROP {1 2 3} "prop]
PASS: Executing [GPROP {1 2 3} "prop] set error code to 7
INFO: Executing [GPROP {1 2 3} "prop] set error string to [GPROP doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [GPROP "plist [1 2 3]]
PASS: Executing [GPROP "plist [1 2 3]] set error code to 7
INFO: Executing [GPROP "plist [1 2 3]] set error string to [GPROP doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [GPROP "plist {1 2 3}]
PASS: Executing [GPROP "plist {1 2 3}] set error code to 7
INFO: Executing [GPROP "plist {1 2 3}] set error string to [GPROP doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [(PPROP)]
PASS: Executing [(PPROP)] set error code to 6 , as expected
INFO: Executing [(PPROP)] set error string to [not enough inputs to PPROP]
INFO: Executing invalid instruction: [(PPROP "plist)]
PASS: Executing [(PPROP "plist)] set error code to 6 , as expected
INFO: Executing [(PPROP "plist)] set error string to [not enough inputs to PPROP]
INFO: Executing invalid instruction: [(PPROP "plist "prop)]
PASS: Executing [(PPROP "plist "prop)] set error code to 6 , as expected
INFO: Executing [(PPROP "plist "prop)] set error string to [not enough inputs to PPROP]
INFO: Executing invalid instruction: [(PPROP "plist "name "value "toomany)]
PASS: Executing [(PPROP "plist "name "value "toomany)] set error code to 8 , as expected
INFO: Executing [(PPROP "plist "name "value "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PPROP [1 2 3] "name "value]
PASS: Executing [PPROP [1 2 3] "name "value] set error code to 7
INFO: Executing [PPROP [1 2 3] "name "value] set error string to [PPROP doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [PPROP {1 2 3} "name "value]
PASS: Executing [PPROP {1 2 3} "name "value] set error code to 7
INFO: Executing [PPROP {1 2 3} "name "value] set error string to [PPROP doesn't like {1 2 3} as input]
INFO: Executing invalid instruction: [PPROP "plist [1 2 3] "value]
PASS: Executing [PPROP "plist [1 2 3] "value] set error code to 7
INFO: Executing [PPROP "plist [1 2 3] "value] set error string to [PPROP doesn't like [1 2 3] as input]
INFO: Executing invalid instruction: [PPROP "plist {1 2 3} "value]
PASS: Executing [PPROP "plist {1 2 3} "value] set error code to 7
INFO: Executing [PPROP "plist {1 2 3} "value] set error string to [PPROP doesn't like {1 2 3} as input]
PASS: [PLLIST "a] returned [[] [] [a]] , as expected.
PASS: [PLLIST "] returned [[] [] []] , as expected.
PASS: [PLLIST [a b]] returned [[] [] [a b]] , as expected.
PASS: [PLLIST []] returned [[] [] []] , as expected.
INFO: Executing invalid instruction: [(PLLIST)]
PASS: Executing [(PLLIST)] set error code to 6 , as expected
INFO: Executing [(PLLIST)] set error string to [not enough inputs to PLLIST]
INFO: Executing invalid instruction: [(PLLIST "too "many)]
PASS: Executing [(PLLIST "too "many)] set error code to 8 , as expected
INFO: Executing [(PLLIST "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [PLLIST {a b}]
PASS: Executing [PLLIST {a b}] set error code to 21
INFO: Executing [PLLIST {a b}] set error string to [pllist doesn't like {a b} as input]
PASS: "if "true ran the "true branch, as expected
PASS: if "false ran the "false branch, as expected
PASS: if "true ran the "true branch, as expected
PASS: IF could be used as an r-val, as expected.
INFO: Executing invalid instruction: [if 1 []]
PASS: Executing [if 1 []] set error code to 7
INFO: Executing [if 1 []] set error string to [if doesn't like 1 as input]
INFO: Executing invalid instruction: [if 0 []]
PASS: Executing [if 0 []] set error code to 7
INFO: Executing [if 0 []] set error string to [if doesn't like 0 as input]
INFO: Executing invalid instruction: [if "yes []]
PASS: Executing [if "yes []] set error code to 7
INFO: Executing [if "yes []] set error string to [if doesn't like yes as input]
INFO: Executing invalid instruction: [if "no []]
PASS: Executing [if "no []] set error code to 7
INFO: Executing [if "no []] set error string to [if doesn't like no as input]
INFO: Executing invalid instruction: [if [1] []]
PASS: Executing [if [1] []] set error code to 7
INFO: Executing [if [1] []] set error string to [if doesn't like [1] as input]
INFO: Executing invalid instruction: [if {1} []]
PASS: Executing [if {1} []] set error code to 7
INFO: Executing [if {1} []] set error string to [if doesn't like {1} as input]
INFO: Executing invalid instruction: [if "true {1}]
PASS: Executing [if "true {1}] set error code to 7
INFO: Executing [if "true {1}] set error string to [if doesn't like {1} as input]
INFO: Executing invalid instruction: [(if)]
PASS: Executing [(if)] set error code to 6 , as expected
INFO: Executing [(if)] set error string to [not enough inputs to if]
INFO: Executing invalid instruction: [(if "true)]
PASS: Executing [(if "true)] set error code to 6 , as expected
INFO: Executing [(if "true)] set error string to [not enough inputs to if]
INFO: Executing invalid instruction: [(if "false)]
PASS: Executing [(if "false)] set error code to 6 , as expected
INFO: Executing [(if "false)] set error string to [not enough inputs to if]
INFO: Executing invalid instruction: [(if "true [] [] "toomany)]
PASS: Executing [(if "true [] [] "toomany)] set error code to 8 , as expected
INFO: Executing [(if "true [] [] "toomany)] set error string to [too much inside ()'s]
PASS: [#] returned -1 , as expected.
INFO: Executing invalid instruction: [(# "toomany)]
PASS: Executing [(# "toomany)] set error code to 8 , as expected
INFO: Executing [(# "toomany)] set error string to [too much inside ()'s]
INFO: executing regression test for bug #1383281
PASS: Bug #1382181 is fixed. 'FOREACH [1] [[] []] ' did not crash.
PASS: Bug #1448155 is fixed. 'IF' used the IF->IFELSE mapping.
PASS: [ACTIVEAREA] returned [-100 -100 100 100] , as expected.
PASS: [ACTIVEAREA] returned [-500 -500 500 500] , as expected.
PASS: [ACTIVEAREA] returned [-500 -500 500 500] , as expected.
INFO: Executing invalid instruction: [(SETACTIVEAREA)]
PASS: Executing [(SETACTIVEAREA)] set error code to 6 , as expected
INFO: Executing [(SETACTIVEAREA)] set error string to [not enough inputs to SETACTIVEAREA]
INFO: Executing invalid instruction: [(SETACTIVEAREA 0 0)]
PASS: Executing [(SETACTIVEAREA 0 0)] set error code to 8 , as expected
INFO: Executing [(SETACTIVEAREA 0 0)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETACTIVEAREA 0 0 50)]
PASS: Executing [(SETACTIVEAREA 0 0 50)] set error code to 8 , as expected
INFO: Executing [(SETACTIVEAREA 0 0 50)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETACTIVEAREA 0 0 50 50)]
PASS: Executing [(SETACTIVEAREA 0 0 50 50)] set error code to 8 , as expected
INFO: Executing [(SETACTIVEAREA 0 0 50 50)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETACTIVEAREA [0] )]
PASS: Executing [(SETACTIVEAREA [0] )] set error code to 7
INFO: Executing [(SETACTIVEAREA [0] )] set error string to [SETACTIVEAREA doesn't like [0] as input]
INFO: Executing invalid instruction: [(SETACTIVEAREA [0 0] )]
PASS: Executing [(SETACTIVEAREA [0 0] )] set error code to 7
INFO: Executing [(SETACTIVEAREA [0 0] )] set error string to [SETACTIVEAREA doesn't like [0 0] as input]
INFO: Executing invalid instruction: [(SETACTIVEAREA [0 0 50] )]
PASS: Executing [(SETACTIVEAREA [0 0 50] )] set error code to 7
INFO: Executing [(SETACTIVEAREA [0 0 50] )] set error string to [SETACTIVEAREA doesn't like [0 0 50] as input]
INFO: Executing invalid instruction: [(SETACTIVEAREA [0 0 50 50 50] )]
PASS: Executing [(SETACTIVEAREA [0 0 50 50 50] )] set error code to 7
INFO: Executing [(SETACTIVEAREA [0 0 50 50 50] )] set error string to [SETACTIVEAREA doesn't like [0 0 50 50 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA 0]
PASS: Executing [SETACTIVEAREA 0] set error code to 7
INFO: Executing [SETACTIVEAREA 0] set error string to [SETACTIVEAREA doesn't like 0 as input]
INFO: Executing invalid instruction: [SETACTIVEAREA "0,0,50,50]
PASS: Executing [SETACTIVEAREA "0,0,50,50] set error code to 7
INFO: Executing [SETACTIVEAREA "0,0,50,50] set error string to [SETACTIVEAREA doesn't like 0,0,50,50 as input]
INFO: Executing invalid instruction: [SETACTIVEAREA {0 0 50 50}]
PASS: Executing [SETACTIVEAREA {0 0 50 50}] set error code to 7
INFO: Executing [SETACTIVEAREA {0 0 50 50}] set error string to [SETACTIVEAREA doesn't like {0 0 50 50} as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [zero 0 50 50]]
PASS: Executing [SETACTIVEAREA [zero 0 50 50]] set error code to 7
INFO: Executing [SETACTIVEAREA [zero 0 50 50]] set error string to [SETACTIVEAREA doesn't like [zero 0 50 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [[0] 0 50 50]]
PASS: Executing [SETACTIVEAREA [[0] 0 50 50]] set error code to 7
INFO: Executing [SETACTIVEAREA [[0] 0 50 50]] set error string to [SETACTIVEAREA doesn't like [[0] 0 50 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [{0} 0 50 50]]
PASS: Executing [SETACTIVEAREA [{0} 0 50 50]] set error code to 7
INFO: Executing [SETACTIVEAREA [{0} 0 50 50]] set error string to [SETACTIVEAREA doesn't like [{0} 0 50 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 zero 50 50]]
PASS: Executing [SETACTIVEAREA [0 zero 50 50]] set error code to 7
INFO: Executing [SETACTIVEAREA [0 zero 50 50]] set error string to [SETACTIVEAREA doesn't like [0 zero 50 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 [0] 50 50]]
PASS: Executing [SETACTIVEAREA [0 [0] 50 50]] set error code to 7
INFO: Executing [SETACTIVEAREA [0 [0] 50 50]] set error string to [SETACTIVEAREA doesn't like [0 [0] 50 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 {0} 50 50]]
PASS: Executing [SETACTIVEAREA [0 {0} 50 50]] set error code to 7
INFO: Executing [SETACTIVEAREA [0 {0} 50 50]] set error string to [SETACTIVEAREA doesn't like [0 {0} 50 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 fifty 50]]
PASS: Executing [SETACTIVEAREA [0 0 fifty 50]] set error code to 7
INFO: Executing [SETACTIVEAREA [0 0 fifty 50]] set error string to [SETACTIVEAREA doesn't like [0 0 fifty 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 [50] 50]]
PASS: Executing [SETACTIVEAREA [0 0 [50] 50]] set error code to 7
INFO: Executing [SETACTIVEAREA [0 0 [50] 50]] set error string to [SETACTIVEAREA doesn't like [0 0 [50] 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 {50} 50]]
PASS: Executing [SETACTIVEAREA [0 0 {50} 50]] set error code to 7
INFO: Executing [SETACTIVEAREA [0 0 {50} 50]] set error string to [SETACTIVEAREA doesn't like [0 0 {50} 50] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 fifty]]
PASS: Executing [SETACTIVEAREA [0 0 50 fifty]] set error code to 7
INFO: Executing [SETACTIVEAREA [0 0 50 fifty]] set error string to [SETACTIVEAREA doesn't like [0 0 50 fifty] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 [50]]]
PASS: Executing [SETACTIVEAREA [0 0 50 [50]]] set error code to 7
INFO: Executing [SETACTIVEAREA [0 0 50 [50]]] set error string to [SETACTIVEAREA doesn't like [0 0 50 [50]] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 {50}]]
PASS: Executing [SETACTIVEAREA [0 0 50 {50}]] set error code to 7
INFO: Executing [SETACTIVEAREA [0 0 50 {50}]] set error string to [SETACTIVEAREA doesn't like [0 0 50 {50}] as input]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 -50 50]]
PASS: Executing [SETACTIVEAREA [0 0 -50 50]] set error code to 16
INFO: Executing [SETACTIVEAREA [0 0 -50 50]] set error string to [Stopping...]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 -50]]
PASS: Executing [SETACTIVEAREA [0 0 50 -50]] set error code to 16
INFO: Executing [SETACTIVEAREA [0 0 50 -50]] set error string to [Stopping...]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 50 -50]]
PASS: Executing [SETACTIVEAREA [0 0 50 -50]] set error code to 16
INFO: Executing [SETACTIVEAREA [0 0 50 -50]] set error string to [Stopping...]
INFO: Executing invalid instruction: [SETACTIVEAREA [0 0 0 0]]
PASS: Executing [SETACTIVEAREA [0 0 0 0]] set error code to 16
INFO: Executing [SETACTIVEAREA [0 0 0 0]] set error string to [Stopping...]
INFO: Executing invalid instruction: [(ACTIVEAREA "toomany)]
PASS: Executing [(ACTIVEAREA "toomany)] set error code to 8 , as expected
INFO: Executing [(ACTIVEAREA "toomany)] set error string to [too much inside ()'s]
PASS: Size is [100 100] , as expected.
PASS: Size is [100 101] , as expected.
PASS: Size is [101 100] , as expected.
PASS: The bitpaste was drawn correctly
CALL: SETBITINDEX 1
CALL: BITCUT 100 100
INFO: Executing invalid instruction: [(BITPASTETOINDEX 1 0)]
PASS: Executing [(BITPASTETOINDEX 1 0)] set error code to 6 , as expected
INFO: Executing [(BITPASTETOINDEX 1 0)] set error string to [not enough inputs to BITPASTETOINDEX]
INFO: Executing invalid instruction: [(BITPASTETOINDEX 1 0 0 "toomany)]
PASS: Executing [(BITPASTETOINDEX 1 0 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(BITPASTETOINDEX 1 0 0 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1024 0 0]
PASS: Executing [BITPASTETOINDEX 1024 0 0] set error code to 16
INFO: Executing [BITPASTETOINDEX 1024 0 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [BITPASTETOINDEX -1 0 0]
PASS: Executing [BITPASTETOINDEX -1 0 0] set error code to 16
INFO: Executing [BITPASTETOINDEX -1 0 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1.5 0 0]
PASS: Executing [BITPASTETOINDEX 1.5 0 0] set error code to 16
INFO: Executing [BITPASTETOINDEX 1.5 0 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [BITPASTETOINDEX [1] 0 0]
PASS: Executing [BITPASTETOINDEX [1] 0 0] set error code to 16
INFO: Executing [BITPASTETOINDEX [1] 0 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [BITPASTETOINDEX {1} 0 0]
PASS: Executing [BITPASTETOINDEX {1} 0 0] set error code to 16
INFO: Executing [BITPASTETOINDEX {1} 0 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1 1.5 0]
PASS: Executing [BITPASTETOINDEX 1 1.5 0] set error code to 7
INFO: Executing [BITPASTETOINDEX 1 1.5 0] set error string to [BITPASTETOINDEX doesn't like 1.5 as input]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1 [0] 0]
PASS: Executing [BITPASTETOINDEX 1 [0] 0] set error code to 7
INFO: Executing [BITPASTETOINDEX 1 [0] 0] set error string to [BITPASTETOINDEX doesn't like [0] as input]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1 {0} 0]
PASS: Executing [BITPASTETOINDEX 1 {0} 0] set error code to 7
INFO: Executing [BITPASTETOINDEX 1 {0} 0] set error string to [BITPASTETOINDEX doesn't like {0} as input]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1 "one 0]
PASS: Executing [BITPASTETOINDEX 1 "one 0] set error code to 7
INFO: Executing [BITPASTETOINDEX 1 "one 0] set error string to [BITPASTETOINDEX doesn't like one as input]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1 0 1.5]
PASS: Executing [BITPASTETOINDEX 1 0 1.5] set error code to 7
INFO: Executing [BITPASTETOINDEX 1 0 1.5] set error string to [BITPASTETOINDEX doesn't like 1.5 as input]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1 0 [0]]
PASS: Executing [BITPASTETOINDEX 1 0 [0]] set error code to 7
INFO: Executing [BITPASTETOINDEX 1 0 [0]] set error string to [BITPASTETOINDEX doesn't like [0] as input]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1 0 {0}]
PASS: Executing [BITPASTETOINDEX 1 0 {0}] set error code to 7
INFO: Executing [BITPASTETOINDEX 1 0 {0}] set error string to [BITPASTETOINDEX doesn't like {0} as input]
INFO: Executing invalid instruction: [BITPASTETOINDEX 1 0 "one]
PASS: Executing [BITPASTETOINDEX 1 0 "one] set error code to 7
INFO: Executing [BITPASTETOINDEX 1 0 "one] set error string to [BITPASTETOINDEX doesn't like one as input]
CALL: SETSCREENCOLOR 3
CALL: SETPENCOLOR 4
CALL: CLEARSCREEN
CALL: REPEAT 3 [FORWARD 20 RIGHT 120]
CALL: SETBITINDEX :sprite
CALL: BITCUT 25 25
CALL: SETBITINDEX :background
CALL: SETPENCOLOR 1
CALL: REPEAT 20 [CIRCLE2 100 RIGHT 18]
CALL: BITCUT 100 100
CALL: SETBITINDEX :backbuffer
CALL: BITCUT 100 100
CALL: SETSCREENCOLOR 5
CALL: HIDETURTLE
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SETBITINDEX :background
CALL: BITPASTETOINDEX :backbuffer 0 0
CALL: SETBITINDEX :sprite
CALL: BITPASTETOINDEX :backbuffer 50 (10 - REPCOUNT) * 10
CALL: BITPASTETOINDEX :backbuffer (REPCOUNT - 2) * 10 0
CALL: SETBITINDEX :backbuffer
CALL: BITPASTE
CALL: WAIT 10
CALL: SHOWTURTLE
PASS: [FORM 123.1 10 10] returned 123.1000000000 , as expected.
INFO: Executing invalid instruction: [FORM "string 10 10]
PASS: Executing [FORM "string 10 10] set error code to 7
INFO: Executing [FORM "string 10 10] set error string to [FORM doesn't like string as input]
INFO: Executing invalid instruction: [FORM 123.1 12.3 10]
PASS: Executing [FORM 123.1 12.3 10] set error code to 7
INFO: Executing [FORM 123.1 12.3 10] set error string to [FORM doesn't like 12.3 as input]
INFO: Executing invalid instruction: [FORM 123.1 10 12.3]
PASS: Executing [FORM 123.1 10 12.3] set error code to 7
INFO: Executing [FORM 123.1 10 12.3] set error string to [FORM doesn't like 12.3 as input]
INFO: Executing invalid instruction: [(FORM)]
PASS: Executing [(FORM)] set error code to 6 , as expected
INFO: Executing [(FORM)] set error string to [not enough inputs to FORM]
INFO: Executing invalid instruction: [(FORM 123.1)]
PASS: Executing [(FORM 123.1)] set error code to 6 , as expected
INFO: Executing [(FORM 123.1)] set error string to [not enough inputs to FORM]
INFO: Executing invalid instruction: [(FORM 123.1 10)]
PASS: Executing [(FORM 123.1 10)] set error code to 6 , as expected
INFO: Executing [(FORM 123.1 10)] set error string to [not enough inputs to FORM]
INFO: Executing invalid instruction: [(FORM 123.1 10 10 10)]
PASS: Executing [(FORM 123.1 10 10 10)] set error code to 8 , as expected
INFO: Executing [(FORM 123.1 10 10 10)] set error string to [too much inside ()'s]
PASS: 'FORM 123.1 10000 10' did not crash
PASS: 'FORM 123.1 10 10000' did not crash
INFO: Executing invalid instruction: [FORM -1 -1 "%s%s]
PASS: Executing [FORM -1 -1 "%s%s] set error code to 7
INFO: Executing [FORM -1 -1 "%s%s] set error string to [FORM doesn't like -1 as input]
PASS: 'FORM -1 -1 "%s%s' did not crash
FAIL: The editor window did not popup
PASS: The editor saved the values of all 10000 variables
CALL: WINDOWFILEEDIT :longfilename (LIST "REPORTTESTPASSED [WINDOWFILEEDIT did not crash on a long filename] "ERASEFILE QUOTED :longfilename )
PASS: INPORT did not crash
INFO: Executing invalid instruction: [(INPORT)]
PASS: Executing [(INPORT)] set error code to 6 , as expected
INFO: Executing [(INPORT)] set error string to [not enough inputs to INPORT]
INFO: Executing invalid instruction: [INPORT [192]]
PASS: Executing [INPORT [192]] set error code to 7
INFO: Executing [INPORT [192]] set error string to [INPORT doesn't like [192] as input]
INFO: Executing invalid instruction: [INPORT -1]
PASS: Executing [INPORT -1] set error code to 7
INFO: Executing [INPORT -1] set error string to [INPORT doesn't like -1 as input]
INFO: Executing invalid instruction: [INPORT {}]
PASS: Executing [INPORT {}] set error code to 7
INFO: Executing [INPORT {}] set error string to [INPORT doesn't like {} as input]
INFO: Executing invalid instruction: [INPORT "hello]
PASS: Executing [INPORT "hello] set error code to 7
INFO: Executing [INPORT "hello] set error string to [INPORT doesn't like hello as input]
INFO: Executing invalid instruction: [(INPORT "198 "toomany)]
PASS: Executing [(INPORT "198 "toomany)] set error code to 8 , as expected
INFO: Executing [(INPORT "198 "toomany)] set error string to [too much inside ()'s]
PASS: INPORTB did not crash
INFO: Executing invalid instruction: [(INPORTB)]
PASS: Executing [(INPORTB)] set error code to 6 , as expected
INFO: Executing [(INPORTB)] set error string to [not enough inputs to INPORTB]
INFO: Executing invalid instruction: [INPORTB [192]]
PASS: Executing [INPORTB [192]] set error code to 7
INFO: Executing [INPORTB [192]] set error string to [INPORTB doesn't like [192] as input]
INFO: Executing invalid instruction: [INPORTB -1]
PASS: Executing [INPORTB -1] set error code to 7
INFO: Executing [INPORTB -1] set error string to [INPORTB doesn't like -1 as input]
INFO: Executing invalid instruction: [INPORTB {}]
PASS: Executing [INPORTB {}] set error code to 7
INFO: Executing [INPORTB {}] set error string to [INPORTB doesn't like {} as input]
INFO: Executing invalid instruction: [INPORTB "hello]
PASS: Executing [INPORTB "hello] set error code to 7
INFO: Executing [INPORTB "hello] set error string to [INPORTB doesn't like hello as input]
INFO: Executing invalid instruction: [(INPORTB "198 "toomany)]
PASS: Executing [(INPORTB "198 "toomany)] set error code to 8 , as expected
INFO: Executing [(INPORTB "198 "toomany)] set error string to [too much inside ()'s]
PASS: OUTPORT did not crash
INFO: Executing invalid instruction: [(OUTPORT)]
PASS: Executing [(OUTPORT)] set error code to 6 , as expected
INFO: Executing [(OUTPORT)] set error string to [not enough inputs to OUTPORT]
INFO: Executing invalid instruction: [(OUTPORT 192)]
PASS: Executing [(OUTPORT 192)] set error code to 6 , as expected
INFO: Executing [(OUTPORT 192)] set error string to [not enough inputs to OUTPORT]
INFO: Executing invalid instruction: [OUTPORT [192] 0]
PASS: Executing [OUTPORT [192] 0] set error code to 7
INFO: Executing [OUTPORT [192] 0] set error string to [OUTPORT doesn't like [192] as input]
INFO: Executing invalid instruction: [OUTPORT -1 0]
PASS: Executing [OUTPORT -1 0] set error code to 7
INFO: Executing [OUTPORT -1 0] set error string to [OUTPORT doesn't like -1 as input]
INFO: Executing invalid instruction: [OUTPORT {} 0]
PASS: Executing [OUTPORT {} 0] set error code to 7
INFO: Executing [OUTPORT {} 0] set error string to [OUTPORT doesn't like {} as input]
INFO: Executing invalid instruction: [OUTPORT "hello 0]
PASS: Executing [OUTPORT "hello 0] set error code to 7
INFO: Executing [OUTPORT "hello 0] set error string to [OUTPORT doesn't like hello as input]
INFO: Executing invalid instruction: [(OUTPORT 198 0 "toomany)]
PASS: Executing [(OUTPORT 198 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(OUTPORT 198 0 "toomany)] set error string to [too much inside ()'s]
PASS: OUTPORTB did not crash
INFO: Executing invalid instruction: [(OUTPORTB)]
PASS: Executing [(OUTPORTB)] set error code to 6 , as expected
INFO: Executing [(OUTPORTB)] set error string to [not enough inputs to OUTPORTB]
INFO: Executing invalid instruction: [(OUTPORTB 192)]
PASS: Executing [(OUTPORTB 192)] set error code to 6 , as expected
INFO: Executing [(OUTPORTB 192)] set error string to [not enough inputs to OUTPORTB]
INFO: Executing invalid instruction: [OUTPORTB [192] 0]
PASS: Executing [OUTPORTB [192] 0] set error code to 7
INFO: Executing [OUTPORTB [192] 0] set error string to [OUTPORTB doesn't like [192] as input]
INFO: Executing invalid instruction: [OUTPORTB -1 0]
PASS: Executing [OUTPORTB -1 0] set error code to 7
INFO: Executing [OUTPORTB -1 0] set error string to [OUTPORTB doesn't like -1 as input]
INFO: Executing invalid instruction: [OUTPORTB {} 0]
PASS: Executing [OUTPORTB {} 0] set error code to 7
INFO: Executing [OUTPORTB {} 0] set error string to [OUTPORTB doesn't like {} as input]
INFO: Executing invalid instruction: [OUTPORTB "hello 0]
PASS: Executing [OUTPORTB "hello 0] set error code to 7
INFO: Executing [OUTPORTB "hello 0] set error string to [OUTPORTB doesn't like hello as input]
INFO: Executing invalid instruction: [(OUTPORTB 198 0 "toomany)]
PASS: Executing [(OUTPORTB 198 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(OUTPORTB 198 0 "toomany)] set error string to [too much inside ()'s]
PASS: [MEMBER? [System] FONTFACENAMES] returned true , as expected.
INFO: Executing invalid instruction: [(FONTFACENAMES "toomany)]
PASS: Executing [(FONTFACENAMES "toomany)] set error code to 8 , as expected
INFO: Executing [(FONTFACENAMES "toomany)] set error string to [too much inside ()'s]
PASS: The font circle was drawn correctly
INFO: Executing invalid instruction: [(LABEL)]
PASS: Executing [(LABEL)] set error code to 6 , as expected
INFO: Executing [(LABEL)] set error string to [not enough inputs to LABEL]
INFO: Executing invalid instruction: [(LABEL 1 1)]
PASS: Executing [(LABEL 1 1)] set error code to 8 , as expected
INFO: Executing [(LABEL 1 1)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SETLABELFONT "Courier]
PASS: Executing [SETLABELFONT "Courier] set error code to 7
INFO: Executing [SETLABELFONT "Courier] set error string to [SETLABELFONT doesn't like Courier as input]
INFO: Executing invalid instruction: [SETLABELFONT 1.1]
PASS: Executing [SETLABELFONT 1.1] set error code to 7
INFO: Executing [SETLABELFONT 1.1] set error string to [SETLABELFONT doesn't like 1.1 as input]
INFO: Executing invalid instruction: [SETLABELFONT {0}]
PASS: Executing [SETLABELFONT {0}] set error code to 7
INFO: Executing [SETLABELFONT {0}] set error string to [SETLABELFONT doesn't like {0} as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] bad 0 0 400 0 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] Unbound 0 0 400 0 0 0 0 0 0 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] Unbound 0 0 400 0 0 0 0 0 0 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 bad 0 400 0 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 Unbound 0 400 0 0 0 0 0 0 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 Unbound 0 400 0 0 0 0 0 0 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 bad 400 0 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 Unbound 400 0 0 0 0 0 0 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 Unbound 400 0 0 0 0 0 0 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 bad 0 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 Unbound 0 0 0 0 0 0 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 0 Unbound 0 0 0 0 0 0 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 bad 0 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 Unbound 0 0 0 0 0 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 0 400 Unbound 0 0 0 0 0 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 bad 0 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 Unbound 0 0 0 0 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 Unbound 0 0 0 0 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 bad 0 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 Unbound 0 0 0 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 Unbound 0 0 0 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 bad 0 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 Unbound 0 0 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 Unbound 0 0 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 bad 0 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 Unbound 0 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 Unbound 0 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 bad 0 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 Unbound 0 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 Unbound 0 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 bad 0]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 Unbound 0]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 Unbound 0]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 0 bad]]
PASS: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 0 Unbound]] set error code to 7
INFO: Executing [SETLABELFONT [[Arial] 24 0 0 400 0 0 0 0 0 0 0 Unbound]] set error string to [SETLABELFONT doesn't like bad as input]
INFO: Executing invalid instruction: [(SETLABELFONT)]
PASS: Executing [(SETLABELFONT)] set error code to 6 , as expected
INFO: Executing [(SETLABELFONT)] set error string to [not enough inputs to SETLABELFONT]
INFO: Executing invalid instruction: [(SETLABELFONT [[Arial]] "toomany)]
PASS: Executing [(SETLABELFONT [[Arial]] "toomany)] set error code to 8 , as expected
INFO: Executing [(SETLABELFONT [[Arial]] "toomany)] set error string to [too much inside ()'s]
INFO: Testing that SETLABELFONT doesn't modify its input list on error
INFO: Now comparing the original instruction to the one that was used
FAIL: [[SETLABELFONT [[Arial] 24 0 0 400 0 0 bad 0 0 0 0 0]] = [SETLABELFONT [[Arial] 24 0 0 400 0 0 Unbound 0 0 0 0 0]]] returned false . We expected true
PASS: [PENDOWNP] returned true , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [ITEM 1 PEN] returned pendown , as expected.
PASS: [PENDOWN?] returned false , as expected.
PASS: [ITEM 1 PEN] returned penup , as expected.
INFO: Executing invalid instruction: [(PENDOWN "toomany)]
PASS: Executing [(PENDOWN "toomany)] set error code to 8 , as expected
INFO: Executing [(PENDOWN "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(PENUP "toomany)]
PASS: Executing [(PENUP "toomany)] set error code to 8 , as expected
INFO: Executing [(PENUP "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(PENDOWN? "toomany)]
PASS: Executing [(PENDOWN? "toomany)] set error code to 8 , as expected
INFO: Executing [(PENDOWN? "toomany)] set error string to [too much inside ()'s]
PASS: [PENMODE] returned paint , as expected.
PASS: [ITEM 2 PEN] returned paint , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned erase , as expected.
PASS: [ITEM 2 PEN] returned erase , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned reverse , as expected.
PASS: [ITEM 2 PEN] returned reverse , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned paint , as expected.
PASS: [ITEM 2 PEN] returned paint , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned erase , as expected.
PASS: [ITEM 2 PEN] returned erase , as expected.
PASS: [PENDOWN?] returned true , as expected.
PASS: [PENMODE] returned reverse , as expected.
PASS: [ITEM 2 PEN] returned reverse , as expected.
PASS: [PENDOWN?] returned true , as expected.
INFO: Executing invalid instruction: [(ARC)]
PASS: Executing [(ARC)] set error code to 6 , as expected
INFO: Executing [(ARC)] set error string to [not enough inputs to ARC]
INFO: Executing invalid instruction: [(ARC 10)]
PASS: Executing [(ARC 10)] set error code to 6 , as expected
INFO: Executing [(ARC 10)] set error string to [not enough inputs to ARC]
INFO: Executing invalid instruction: [(ARC 10 10 10)]
PASS: Executing [(ARC 10 10 10)] set error code to 8 , as expected
INFO: Executing [(ARC 10 10 10)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ARC [10] 10]
PASS: Executing [ARC [10] 10] set error code to 7
INFO: Executing [ARC [10] 10] set error string to [ellipsearc doesn't like [10] as input]
INFO: Executing invalid instruction: [ARC {10} 10]
PASS: Executing [ARC {10} 10] set error code to 7
INFO: Executing [ARC {10} 10] set error string to [ellipsearc doesn't like {10} as input]
INFO: Executing invalid instruction: [ARC 10 [10]]
PASS: Executing [ARC 10 [10]] set error code to 7
INFO: Executing [ARC 10 [10]] set error string to [ellipsearc doesn't like [10] as input]
INFO: Executing invalid instruction: [ARC 10 {10}]
PASS: Executing [ARC 10 {10}] set error code to 7
INFO: Executing [ARC 10 {10}] set error string to [ellipsearc doesn't like {10} as input]
INFO: executing regression test for bug #1388325
PASS: "bug #1388325 is fixed; 'ELLIPSEARC 1e20 50 50 0' did not crash.
PASS: WINDOWFILEEDIT did not crash on a long filename
PASS: The circle was drawn correctly
PASS: (FILL "true) worked as expected
INFO: Executing invalid instruction: [(FILL 10)]
PASS: Executing [(FILL 10)] set error code to 7
INFO: Executing [(FILL 10)] set error string to [FILL doesn't like 10 as input]
INFO: Executing invalid instruction: [(FILL ["true] )]
PASS: Executing [(FILL ["true] )] set error code to 7
INFO: Executing [(FILL ["true] )] set error string to [FILL doesn't like ["true] as input]
INFO: Executing invalid instruction: [(FILL "true "toomany)]
PASS: Executing [(FILL "true "toomany)] set error code to 8 , as expected
INFO: Executing [(FILL "true "toomany)] set error string to [too much inside ()'s]
PASS: [WRITER] returned smoketest.txt , as expected.
PASS: [WRITEPOS] returned 0 , as expected.
PASS: [WRITEPOS] returned 7 , as expected.
PASS: [WRITEPOS] returned 17 , as expected.
PASS: [WRITER] returned [] , as expected.
PASS: [READER] returned smoketest.txt , as expected.
PASS: [READPOS] returned 0 , as expected.
PASS: [EOFP] returned false , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READPOS] returned 7 , as expected.
PASS: [EOFP] returned false , as expected.
PASS: [READLIST] returned [Good Bye] , as expected.
PASS: [READPOS] returned 17 , as expected.
PASS: [EOFP] returned true , as expected.
PASS: [READER] returned [] , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Jello] , as expected.
CALL: OPENWRITE :filename1
CALL: OPENWRITE :filename2
PASS: [MEMBERP :filename1 ALLOPEN] returned true , as expected.
PASS: [MEMBERP :filename2 ALLOPEN] returned true , as expected.
CALL: CLOSE :filename1
CALL: CLOSE :filename2
PASS: [MEMBERP :filename1 ALLOPEN] returned false , as expected.
PASS: [MEMBERP :filename2 ALLOPEN] returned false , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Good Bye] , as expected.
INFO: Executing invalid instruction: [OPENREAD :filename]
PASS: Executing [OPENREAD :filename] set error code to 18
INFO: Executing [OPENREAD :filename] set error string to [File system error: I can't open that file]
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [And how are you today] , as expected.
PASS: [READLIST] returned [Hello] , as expected.
PASS: [READLIST] returned [Good Bye] , as expected.
PASS: [MEMBERP "mytestfile FILES] returned true , as expected.
PASS: [MEMBERP "mytestfile FILES] returned false , as expected.
PASS: [MEMBERP "mytestdir DIRECTORIES] returned true , as expected.
INFO: Executing invalid instruction: [OPENREAD "mytestfile]
PASS: Executing [OPENREAD "mytestfile] set error code to 18
INFO: Executing [OPENREAD "mytestfile] set error string to [File system error: File already open]
INFO: Executing invalid instruction: [OPENWRITE "mytestfile]
PASS: Executing [OPENWRITE "mytestfile] set error code to 18
INFO: Executing [OPENWRITE "mytestfile] set error string to [File system error: File already open]
INFO: Executing invalid instruction: [OPENAPPEND "mytestfile]
PASS: Executing [OPENAPPEND "mytestfile] set error code to 18
INFO: Executing [OPENAPPEND "mytestfile] set error string to [File system error: File already open]
INFO: Executing invalid instruction: [OPENUPDATE "mytestfile]
PASS: Executing [OPENUPDATE "mytestfile] set error code to 18
INFO: Executing [OPENUPDATE "mytestfile] set error string to [File system error: File already open]
INFO: Executing invalid instruction: [OPENREAD "mytestfile]
PASS: Executing [OPENREAD "mytestfile] set error code to 18
INFO: Executing [OPENREAD "mytestfile] set error string to [File system error: File already open]
INFO: Executing invalid instruction: [OPENWRITE "mytestfile]
PASS: Executing [OPENWRITE "mytestfile] set error code to 18
INFO: Executing [OPENWRITE "mytestfile] set error string to [File system error: File already open]
INFO: Executing invalid instruction: [OPENAPPEND "mytestfile]
PASS: Executing [OPENAPPEND "mytestfile] set error code to 18
INFO: Executing [OPENAPPEND "mytestfile] set error string to [File system error: File already open]
INFO: Executing invalid instruction: [OPENUPDATE "mytestfile]
PASS: Executing [OPENUPDATE "mytestfile] set error code to 18
INFO: Executing [OPENUPDATE "mytestfile] set error string to [File system error: File already open]
PASS: [MEMBERP "mytestfile FILES] returned false , as expected.
INFO: Executing invalid instruction: [OPENREAD "testdir]
PASS: Executing [OPENREAD "testdir] set error code to 18
INFO: Executing [OPENREAD "testdir] set error string to [File system error: I can't open that file]
INFO: Executing invalid instruction: [OPENWRITE "testdir]
PASS: Executing [OPENWRITE "testdir] set error code to 18
INFO: Executing [OPENWRITE "testdir] set error string to [File system error: I can't open that file]
INFO: Executing invalid instruction: [OPENAPPEND "testdir]
PASS: Executing [OPENAPPEND "testdir] set error code to 18
INFO: Executing [OPENAPPEND "testdir] set error string to [File system error: I can't open that file]
INFO: Executing invalid instruction: [OPENUPDATE "testdir]
PASS: Executing [OPENUPDATE "testdir] set error code to 18
INFO: Executing [OPENUPDATE "testdir] set error string to [File system error: I can't open that file]
PASS: [MEMBERP "mytestfile DIRECTORIES] returned false , as expected.
INFO: Executing invalid instruction: [(OPENREAD "testfile.txt 1)]
PASS: Executing [(OPENREAD "testfile.txt 1)] set error code to 7
INFO: Executing [(OPENREAD "testfile.txt 1)] set error string to [OPENREAD doesn't like 1 as input]
INFO: Executing invalid instruction: [(OPENWRITE "testfile.txt 1)]
PASS: Executing [(OPENWRITE "testfile.txt 1)] set error code to 7
INFO: Executing [(OPENWRITE "testfile.txt 1)] set error string to [OPENWRITE doesn't like 1 as input]
INFO: Executing invalid instruction: [(OPENAPPEND "testfile.txt 1)]
PASS: Executing [(OPENAPPEND "testfile.txt 1)] set error code to 7
INFO: Executing [(OPENAPPEND "testfile.txt 1)] set error string to [OPENAPPEND doesn't like 1 as input]
INFO: Executing invalid instruction: [(OPENUPDATE "testfile.txt 1)]
PASS: Executing [(OPENUPDATE "testfile.txt 1)] set error code to 7
INFO: Executing [(OPENUPDATE "testfile.txt 1)] set error string to [OPENUPDATE doesn't like 1 as input]
INFO: Executing invalid instruction: [(OPENREAD)]
PASS: Executing [(OPENREAD)] set error code to 6 , as expected
INFO: Executing [(OPENREAD)] set error string to [not enough inputs to OPENREAD]
INFO: Executing invalid instruction: [(OPENWRITE)]
PASS: Executing [(OPENWRITE)] set error code to 6 , as expected
INFO: Executing [(OPENWRITE)] set error string to [not enough inputs to OPENWRITE]
INFO: Executing invalid instruction: [(OPENAPPEND)]
PASS: Executing [(OPENAPPEND)] set error code to 6 , as expected
INFO: Executing [(OPENAPPEND)] set error string to [not enough inputs to OPENAPPEND]
INFO: Executing invalid instruction: [(OPENUPDATE)]
PASS: Executing [(OPENUPDATE)] set error code to 6 , as expected
INFO: Executing [(OPENUPDATE)] set error string to [not enough inputs to OPENUPDATE]
INFO: Executing invalid instruction: [(OPENREAD "testfile.txt "true "toomany)]
PASS: Executing [(OPENREAD "testfile.txt "true "toomany)] set error code to 8 , as expected
INFO: Executing [(OPENREAD "testfile.txt "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(OPENWRITE "testfile.txt "true "toomany)]
PASS: Executing [(OPENWRITE "testfile.txt "true "toomany)] set error code to 8 , as expected
INFO: Executing [(OPENWRITE "testfile.txt "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(OPENAPPEND "testfile.txt "true "toomany)]
PASS: Executing [(OPENAPPEND "testfile.txt "true "toomany)] set error code to 8 , as expected
INFO: Executing [(OPENAPPEND "testfile.txt "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(OPENUPDATE "testfile.txt "true "toomany)]
PASS: Executing [(OPENUPDATE "testfile.txt "true "toomany)] set error code to 8 , as expected
INFO: Executing [(OPENUPDATE "testfile.txt "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [OPENREAD :longfilename]
PASS: Executing [OPENREAD :longfilename] set error code to 18
INFO: Executing [OPENREAD :longfilename] set error string to [File system error: I can't open that file]
INFO: Executing invalid instruction: [OPENWRITE :longfilename]
PASS: Executing [OPENWRITE :longfilename] set error code to 18
INFO: Executing [OPENWRITE :longfilename] set error string to [File system error: I can't open that file]
INFO: Executing invalid instruction: [OPENAPPEND :longfilename]
PASS: Executing [OPENAPPEND :longfilename] set error code to 18
INFO: Executing [OPENAPPEND :longfilename] set error string to [File system error: I can't open that file]
INFO: Executing invalid instruction: [OPENUPDATE :longfilename]
PASS: Executing [OPENUPDATE :longfilename] set error code to 18
INFO: Executing [OPENUPDATE :longfilename] set error string to [File system error: I can't open that file]
INFO: Executing invalid instruction: [CLOSE :longfilename]
PASS: Executing [CLOSE :longfilename] set error code to 18
INFO: Executing [CLOSE :longfilename] set error string to [File system error: File not open]
INFO: Executing invalid instruction: [CLOSE "nonexistent.txt]
PASS: Executing [CLOSE "nonexistent.txt] set error code to 18
INFO: Executing [CLOSE "nonexistent.txt] set error string to [File system error: File not open]
INFO: Executing invalid instruction: [(CLOSE)]
PASS: Executing [(CLOSE)] set error code to 6 , as expected
INFO: Executing [(CLOSE)] set error string to [not enough inputs to CLOSE]
INFO: Executing invalid instruction: [(CLOSE "testfile.txt "many)]
PASS: Executing [(CLOSE "testfile.txt "many)] set error code to 8 , as expected
INFO: Executing [(CLOSE "testfile.txt "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ERASEFILE)]
PASS: Executing [(ERASEFILE)] set error code to 6 , as expected
INFO: Executing [(ERASEFILE)] set error string to [not enough inputs to ERASEFILE]
INFO: Executing invalid instruction: [(ERASEFILE "too "many)]
PASS: Executing [(ERASEFILE "too "many)] set error code to 8 , as expected
INFO: Executing [(ERASEFILE "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(CLOSEALL "toomany)]
PASS: Executing [(CLOSEALL "toomany)] set error code to 8 , as expected
INFO: Executing [(CLOSEALL "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ALLOPEN "toomany)]
PASS: Executing [(ALLOPEN "toomany)] set error code to 8 , as expected
INFO: Executing [(ALLOPEN "toomany)] set error string to [too much inside ()'s]
PASS: [PENCOLOR] returned 0 , as expected.
PASS: [PENCOLOR] returned 15 , as expected.
PASS: [PENCOLOR] returned 7 , as expected.
PASS: [PENCOLOR] returned 1 , as expected.
PASS: [PENCOLOR] returned [128 64 32] , as expected.
PASS: [PENCOLOR] returned [128 64 32] , as expected.
PASS: [PENCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETPENCOLOR {}]
PASS: Executing [SETPENCOLOR {}] set error code to 7
INFO: Executing [SETPENCOLOR {}] set error string to [SETPENCOLOR doesn't like {} as input]
INFO: Executing invalid instruction: [SETPENCOLOR [0]]
PASS: Executing [SETPENCOLOR [0]] set error code to 7
INFO: Executing [SETPENCOLOR [0]] set error string to [SETPENCOLOR doesn't like [0] as input]
INFO: Executing invalid instruction: [SETPENCOLOR [0 0]]
PASS: Executing [SETPENCOLOR [0 0]] set error code to 7
INFO: Executing [SETPENCOLOR [0 0]] set error string to [SETPENCOLOR doesn't like [0 0] as input]
INFO: Executing invalid instruction: [SETPENCOLOR [0 0 0 0]]
PASS: Executing [SETPENCOLOR [0 0 0 0]] set error code to 7
INFO: Executing [SETPENCOLOR [0 0 0 0]] set error string to [SETPENCOLOR doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [( SETPENCOLOR )]
PASS: Executing [( SETPENCOLOR )] set error code to 6 , as expected
INFO: Executing [( SETPENCOLOR )] set error string to [not enough inputs to SETPENCOLOR]
INFO: Executing invalid instruction: [( SETPENCOLOR 0 0 )]
PASS: Executing [( SETPENCOLOR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETPENCOLOR 0 0 )] set error string to [too much inside ()'s]
PASS: [PENCOLOUR] returned 0 , as expected.
PASS: [PENCOLOUR] returned 15 , as expected.
PASS: [PENCOLOUR] returned 7 , as expected.
PASS: [PENCOLOUR] returned 1 , as expected.
PASS: [PENCOLOUR] returned [128 64 32] , as expected.
PASS: [PENCOLOUR] returned [128 64 32] , as expected.
PASS: [PENCOLOUR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETPENCOLOUR {}]
PASS: Executing [SETPENCOLOUR {}] set error code to 7
INFO: Executing [SETPENCOLOUR {}] set error string to [SETPENCOLOUR doesn't like {} as input]
INFO: Executing invalid instruction: [SETPENCOLOUR [0]]
PASS: Executing [SETPENCOLOUR [0]] set error code to 7
INFO: Executing [SETPENCOLOUR [0]] set error string to [SETPENCOLOUR doesn't like [0] as input]
INFO: Executing invalid instruction: [SETPENCOLOUR [0 0]]
PASS: Executing [SETPENCOLOUR [0 0]] set error code to 7
INFO: Executing [SETPENCOLOUR [0 0]] set error string to [SETPENCOLOUR doesn't like [0 0] as input]
INFO: Executing invalid instruction: [SETPENCOLOUR [0 0 0 0]]
PASS: Executing [SETPENCOLOUR [0 0 0 0]] set error code to 7
INFO: Executing [SETPENCOLOUR [0 0 0 0]] set error string to [SETPENCOLOUR doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [( SETPENCOLOUR )]
PASS: Executing [( SETPENCOLOUR )] set error code to 6 , as expected
INFO: Executing [( SETPENCOLOUR )] set error string to [not enough inputs to SETPENCOLOUR]
INFO: Executing invalid instruction: [( SETPENCOLOUR 0 0 )]
PASS: Executing [( SETPENCOLOUR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETPENCOLOUR 0 0 )] set error string to [too much inside ()'s]
PASS: [PENCOLOR] returned 0 , as expected.
PASS: [PENCOLOR] returned 15 , as expected.
PASS: [PENCOLOR] returned 7 , as expected.
PASS: [PENCOLOR] returned 1 , as expected.
PASS: [PENCOLOR] returned [128 64 32] , as expected.
PASS: [PENCOLOR] returned [128 64 32] , as expected.
PASS: [PENCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETPC {}]
PASS: Executing [SETPC {}] set error code to 7
INFO: Executing [SETPC {}] set error string to [SETPC doesn't like {} as input]
INFO: Executing invalid instruction: [SETPC [0]]
PASS: Executing [SETPC [0]] set error code to 7
INFO: Executing [SETPC [0]] set error string to [SETPC doesn't like [0] as input]
INFO: Executing invalid instruction: [SETPC [0 0]]
PASS: Executing [SETPC [0 0]] set error code to 7
INFO: Executing [SETPC [0 0]] set error string to [SETPC doesn't like [0 0] as input]
INFO: Executing invalid instruction: [SETPC [0 0 0 0]]
PASS: Executing [SETPC [0 0 0 0]] set error code to 7
INFO: Executing [SETPC [0 0 0 0]] set error string to [SETPC doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [( SETPC )]
PASS: Executing [( SETPC )] set error code to 6 , as expected
INFO: Executing [( SETPC )] set error string to [not enough inputs to SETPC]
INFO: Executing invalid instruction: [( SETPC 0 0 )]
PASS: Executing [( SETPC 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETPC 0 0 )] set error string to [too much inside ()'s]
PASS: [FLOODCOLOR] returned 0 , as expected.
PASS: [FLOODCOLOR] returned 15 , as expected.
PASS: [FLOODCOLOR] returned 7 , as expected.
PASS: [FLOODCOLOR] returned 1 , as expected.
PASS: [FLOODCOLOR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETFLOODCOLOR {}]
PASS: Executing [SETFLOODCOLOR {}] set error code to 7
INFO: Executing [SETFLOODCOLOR {}] set error string to [SETFLOODCOLOR doesn't like {} as input]
INFO: Executing invalid instruction: [SETFLOODCOLOR [0]]
PASS: Executing [SETFLOODCOLOR [0]] set error code to 7
INFO: Executing [SETFLOODCOLOR [0]] set error string to [SETFLOODCOLOR doesn't like [0] as input]
INFO: Executing invalid instruction: [SETFLOODCOLOR [0 0]]
PASS: Executing [SETFLOODCOLOR [0 0]] set error code to 7
INFO: Executing [SETFLOODCOLOR [0 0]] set error string to [SETFLOODCOLOR doesn't like [0 0] as input]
INFO: Executing invalid instruction: [SETFLOODCOLOR [0 0 0 0]]
PASS: Executing [SETFLOODCOLOR [0 0 0 0]] set error code to 7
INFO: Executing [SETFLOODCOLOR [0 0 0 0]] set error string to [SETFLOODCOLOR doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [( SETFLOODCOLOR )]
PASS: Executing [( SETFLOODCOLOR )] set error code to 6 , as expected
INFO: Executing [( SETFLOODCOLOR )] set error string to [not enough inputs to SETFLOODCOLOR]
INFO: Executing invalid instruction: [( SETFLOODCOLOR 0 0 )]
PASS: Executing [( SETFLOODCOLOR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETFLOODCOLOR 0 0 )] set error string to [too much inside ()'s]
PASS: [FLOODCOLOUR] returned 0 , as expected.
PASS: [FLOODCOLOUR] returned 15 , as expected.
PASS: [FLOODCOLOUR] returned 7 , as expected.
PASS: [FLOODCOLOUR] returned 1 , as expected.
PASS: [FLOODCOLOUR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOUR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOUR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETFLOODCOLOUR {}]
PASS: Executing [SETFLOODCOLOUR {}] set error code to 7
INFO: Executing [SETFLOODCOLOUR {}] set error string to [SETFLOODCOLOUR doesn't like {} as input]
INFO: Executing invalid instruction: [SETFLOODCOLOUR [0]]
PASS: Executing [SETFLOODCOLOUR [0]] set error code to 7
INFO: Executing [SETFLOODCOLOUR [0]] set error string to [SETFLOODCOLOUR doesn't like [0] as input]
INFO: Executing invalid instruction: [SETFLOODCOLOUR [0 0]]
PASS: Executing [SETFLOODCOLOUR [0 0]] set error code to 7
INFO: Executing [SETFLOODCOLOUR [0 0]] set error string to [SETFLOODCOLOUR doesn't like [0 0] as input]
INFO: Executing invalid instruction: [SETFLOODCOLOUR [0 0 0 0]]
PASS: Executing [SETFLOODCOLOUR [0 0 0 0]] set error code to 7
INFO: Executing [SETFLOODCOLOUR [0 0 0 0]] set error string to [SETFLOODCOLOUR doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [( SETFLOODCOLOUR )]
PASS: Executing [( SETFLOODCOLOUR )] set error code to 6 , as expected
INFO: Executing [( SETFLOODCOLOUR )] set error string to [not enough inputs to SETFLOODCOLOUR]
INFO: Executing invalid instruction: [( SETFLOODCOLOUR 0 0 )]
PASS: Executing [( SETFLOODCOLOUR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETFLOODCOLOUR 0 0 )] set error string to [too much inside ()'s]
PASS: [FLOODCOLOR] returned 0 , as expected.
PASS: [FLOODCOLOR] returned 15 , as expected.
PASS: [FLOODCOLOR] returned 7 , as expected.
PASS: [FLOODCOLOR] returned 1 , as expected.
PASS: [FLOODCOLOR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOR] returned [128 64 32] , as expected.
PASS: [FLOODCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETFC {}]
PASS: Executing [SETFC {}] set error code to 7
INFO: Executing [SETFC {}] set error string to [SETFC doesn't like {} as input]
INFO: Executing invalid instruction: [SETFC [0]]
PASS: Executing [SETFC [0]] set error code to 7
INFO: Executing [SETFC [0]] set error string to [SETFC doesn't like [0] as input]
INFO: Executing invalid instruction: [SETFC [0 0]]
PASS: Executing [SETFC [0 0]] set error code to 7
INFO: Executing [SETFC [0 0]] set error string to [SETFC doesn't like [0 0] as input]
INFO: Executing invalid instruction: [SETFC [0 0 0 0]]
PASS: Executing [SETFC [0 0 0 0]] set error code to 7
INFO: Executing [SETFC [0 0 0 0]] set error string to [SETFC doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [( SETFC )]
PASS: Executing [( SETFC )] set error code to 6 , as expected
INFO: Executing [( SETFC )] set error string to [not enough inputs to SETFC]
INFO: Executing invalid instruction: [( SETFC 0 0 )]
PASS: Executing [( SETFC 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETFC 0 0 )] set error string to [too much inside ()'s]
PASS: [SCREENCOLOR] returned 0 , as expected.
PASS: [SCREENCOLOR] returned 15 , as expected.
PASS: [SCREENCOLOR] returned 7 , as expected.
PASS: [SCREENCOLOR] returned 1 , as expected.
PASS: [SCREENCOLOR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETSCREENCOLOR {}]
PASS: Executing [SETSCREENCOLOR {}] set error code to 7
INFO: Executing [SETSCREENCOLOR {}] set error string to [SETSCREENCOLOR doesn't like {} as input]
INFO: Executing invalid instruction: [SETSCREENCOLOR [0]]
PASS: Executing [SETSCREENCOLOR [0]] set error code to 7
INFO: Executing [SETSCREENCOLOR [0]] set error string to [SETSCREENCOLOR doesn't like [0] as input]
INFO: Executing invalid instruction: [SETSCREENCOLOR [0 0]]
PASS: Executing [SETSCREENCOLOR [0 0]] set error code to 7
INFO: Executing [SETSCREENCOLOR [0 0]] set error string to [SETSCREENCOLOR doesn't like [0 0] as input]
INFO: Executing invalid instruction: [SETSCREENCOLOR [0 0 0 0]]
PASS: Executing [SETSCREENCOLOR [0 0 0 0]] set error code to 7
INFO: Executing [SETSCREENCOLOR [0 0 0 0]] set error string to [SETSCREENCOLOR doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [( SETSCREENCOLOR )]
PASS: Executing [( SETSCREENCOLOR )] set error code to 6 , as expected
INFO: Executing [( SETSCREENCOLOR )] set error string to [not enough inputs to SETSCREENCOLOR]
INFO: Executing invalid instruction: [( SETSCREENCOLOR 0 0 )]
PASS: Executing [( SETSCREENCOLOR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETSCREENCOLOR 0 0 )] set error string to [too much inside ()'s]
PASS: [SCREENCOLOUR] returned 0 , as expected.
PASS: [SCREENCOLOUR] returned 15 , as expected.
PASS: [SCREENCOLOUR] returned 7 , as expected.
PASS: [SCREENCOLOUR] returned 1 , as expected.
PASS: [SCREENCOLOUR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOUR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOUR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETSCREENCOLOUR {}]
PASS: Executing [SETSCREENCOLOUR {}] set error code to 7
INFO: Executing [SETSCREENCOLOUR {}] set error string to [SETSCREENCOLOUR doesn't like {} as input]
INFO: Executing invalid instruction: [SETSCREENCOLOUR [0]]
PASS: Executing [SETSCREENCOLOUR [0]] set error code to 7
INFO: Executing [SETSCREENCOLOUR [0]] set error string to [SETSCREENCOLOUR doesn't like [0] as input]
INFO: Executing invalid instruction: [SETSCREENCOLOUR [0 0]]
PASS: Executing [SETSCREENCOLOUR [0 0]] set error code to 7
INFO: Executing [SETSCREENCOLOUR [0 0]] set error string to [SETSCREENCOLOUR doesn't like [0 0] as input]
INFO: Executing invalid instruction: [SETSCREENCOLOUR [0 0 0 0]]
PASS: Executing [SETSCREENCOLOUR [0 0 0 0]] set error code to 7
INFO: Executing [SETSCREENCOLOUR [0 0 0 0]] set error string to [SETSCREENCOLOUR doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [( SETSCREENCOLOUR )]
PASS: Executing [( SETSCREENCOLOUR )] set error code to 6 , as expected
INFO: Executing [( SETSCREENCOLOUR )] set error string to [not enough inputs to SETSCREENCOLOUR]
INFO: Executing invalid instruction: [( SETSCREENCOLOUR 0 0 )]
PASS: Executing [( SETSCREENCOLOUR 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETSCREENCOLOUR 0 0 )] set error string to [too much inside ()'s]
PASS: [SCREENCOLOR] returned 0 , as expected.
PASS: [SCREENCOLOR] returned 15 , as expected.
PASS: [SCREENCOLOR] returned 7 , as expected.
PASS: [SCREENCOLOR] returned 1 , as expected.
PASS: [SCREENCOLOR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOR] returned [128 64 32] , as expected.
PASS: [SCREENCOLOR] returned [255 255 255] , as expected.
INFO: Executing invalid instruction: [SETSC {}]
PASS: Executing [SETSC {}] set error code to 7
INFO: Executing [SETSC {}] set error string to [SETSC doesn't like {} as input]
INFO: Executing invalid instruction: [SETSC [0]]
PASS: Executing [SETSC [0]] set error code to 7
INFO: Executing [SETSC [0]] set error string to [SETSC doesn't like [0] as input]
INFO: Executing invalid instruction: [SETSC [0 0]]
PASS: Executing [SETSC [0 0]] set error code to 7
INFO: Executing [SETSC [0 0]] set error string to [SETSC doesn't like [0 0] as input]
INFO: Executing invalid instruction: [SETSC [0 0 0 0]]
PASS: Executing [SETSC [0 0 0 0]] set error code to 7
INFO: Executing [SETSC [0 0 0 0]] set error string to [SETSC doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [( SETSC )]
PASS: Executing [( SETSC )] set error code to 6 , as expected
INFO: Executing [( SETSC )] set error string to [not enough inputs to SETSC]
INFO: Executing invalid instruction: [( SETSC 0 0 )]
PASS: Executing [( SETSC 0 0 )] set error code to 8 , as expected
INFO: Executing [( SETSC 0 0 )] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SPLITSCREEN 1)]
PASS: Executing [(SPLITSCREEN 1)] set error code to 8 , as expected
INFO: Executing [(SPLITSCREEN 1)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(TEXTSCREEN 1)]
PASS: Executing [(TEXTSCREEN 1)] set error code to 8 , as expected
INFO: Executing [(TEXTSCREEN 1)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(FULLSCREEN 1)]
PASS: Executing [(FULLSCREEN 1)] set error code to 8 , as expected
INFO: Executing [(FULLSCREEN 1)] set error string to [too much inside ()'s]
INFO: [WAIT 0] took 0 ms to execute
PASS: [WAIT 0 ] waited for 0 ms. Anywhere between 0 ms and 20 is acceptable.
INFO: [WAIT 1] took 21 ms to execute
PASS: [WAIT 1 ] waited for 21 ms. Anywhere between 16.6666666666667 ms and 36.6666666666667 is acceptable.
INFO: [WAIT 6] took 100 ms to execute
PASS: [WAIT 6 ] waited for 100 ms. Anywhere between 100 ms and 120 is acceptable.
INFO: [WAIT 10] took 170 ms to execute
PASS: [WAIT 10 ] waited for 170 ms. Anywhere between 166.666666666667 ms and 186.666666666667 is acceptable.
INFO: [WAIT 60] took 1001 ms to execute
PASS: [WAIT 60 ] waited for 1001 ms. Anywhere between 1000 ms and 1020 is acceptable.
INFO: [WAIT 100] took 1673 ms to execute
PASS: [WAIT 100 ] waited for 1673 ms. Anywhere between 1666.66666666667 ms and 1686.66666666667 is acceptable.
INFO: Executing invalid instruction: [(WAIT)]
PASS: Executing [(WAIT)] set error code to 6 , as expected
INFO: Executing [(WAIT)] set error string to [not enough inputs to WAIT]
INFO: Executing invalid instruction: [(WAIT 10 10)]
PASS: Executing [(WAIT 10 10)] set error code to 8 , as expected
INFO: Executing [(WAIT 10 10)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [WAIT -1]
PASS: Executing [WAIT -1] set error code to 7
INFO: Executing [WAIT -1] set error string to [WAIT doesn't like -1 as input]
INFO: Executing invalid instruction: [WAIT "ABC]
PASS: Executing [WAIT "ABC] set error code to 7
INFO: Executing [WAIT "ABC] set error string to [WAIT doesn't like ABC as input]
INFO: Executing invalid instruction: [WAIT [1]]
PASS: Executing [WAIT [1]] set error code to 7
INFO: Executing [WAIT [1]] set error string to [WAIT doesn't like [1] as input]
INFO: Executing invalid instruction: [WAIT {1}]
PASS: Executing [WAIT {1}] set error code to 7
INFO: Executing [WAIT {1}] set error string to [WAIT doesn't like {1} as input]
PASS: [FILES] returned [] , as expected.
PASS: [DIRECTORIES] returned [.. .] , as expected.
PASS: [FILES] returned [file1.txt] , as expected.
PASS: [DIRECTORIES] returned [.. .] , as expected.
PASS: [FILES] returned [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] returned [.. .] , as expected.
PASS: [FILES] returned [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] returned [dir1 .. .] , as expected.
PASS: [FILES] returned [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] returned [dir2 dir1 .. .] , as expected.
PASS: [FILES] returned [file2.txt file1.txt] , as expected.
PASS: [DIRECTORIES] returned [dir1 .. .] , as expected.
PASS: [FILES] returned [file2.txt] , as expected.
PASS: [DIRECTORIES] returned [dir1 .. .] , as expected.
PASS: [FILES] returned [] , as expected.
PASS: [DIRECTORIES] returned [.. .] , as expected.
PASS: [MEMBERP "mytestdir DIRECTORIES] returned false , as expected.
INFO: Executing invalid instruction: [(MKDIR)]
PASS: Executing [(MKDIR)] set error code to 6 , as expected
INFO: Executing [(MKDIR)] set error string to [not enough inputs to MKDIR]
INFO: Executing invalid instruction: [(MKDIR "too "many)]
PASS: Executing [(MKDIR "too "many)] set error code to 8 , as expected
INFO: Executing [(MKDIR "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(RMDIR)]
PASS: Executing [(RMDIR)] set error code to 6 , as expected
INFO: Executing [(RMDIR)] set error string to [not enough inputs to RMDIR]
INFO: Executing invalid instruction: [(RMDIR "too "many)]
PASS: Executing [(RMDIR "too "many)] set error code to 8 , as expected
INFO: Executing [(RMDIR "too "many)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(CHDIR)]
PASS: Executing [(CHDIR)] set error code to 6 , as expected
INFO: Executing [(CHDIR)] set error string to [not enough inputs to CHDIR]
INFO: Executing invalid instruction: [(CHDIR "too "many)]
PASS: Executing [(CHDIR "too "many)] set error code to 8 , as expected
INFO: Executing [(CHDIR "too "many)] set error string to [too much inside ()'s]
PASS: [LIST? NODES] returned true , as expected.
PASS: [COUNT NODES] returned 2 , as expected.
PASS: [NUMBER? ITEM 1 NODES] returned true , as expected.
PASS: [NUMBER? ITEM 2 NODES] returned true , as expected.
INFO: Executing invalid instruction: [(NODES "too-many)]
PASS: Executing [(NODES "too-many)] set error code to 8 , as expected
INFO: Executing [(NODES "too-many)] set error string to [too much inside ()'s]
PASS: [BUTTONP] returned false , as expected.
PASS: [BUTTON?] returned false , as expected.
INFO: Executing invalid instruction: [(BUTTON? "too-many)]
PASS: Executing [(BUTTON? "too-many)] set error code to 8 , as expected
INFO: Executing [(BUTTON? "too-many)] set error string to [too much inside ()'s]
INFO: executing regression test for bug #1384267
PASS: "bug #1384267 is fixed; turning by a large number in perspective mode did not crash.
INFO: Executing invalid instruction: [(PERSPECTIVE "toomany)]
PASS: Executing [(PERSPECTIVE "toomany)] set error code to 8 , as expected
INFO: Executing [(PERSPECTIVE "toomany)] set error string to [too much inside ()'s]
INFO: Calling SETORIENTATION [0 0 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 360 , as expected.
PASS: [PITCH] returned 3.00858953062496e-15 , as expected.
PASS: [HEADING] returned 360 , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 3.00858953062496e-15 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
INFO: Calling SETORIENTATION [1 2 3]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 0.999999999999992 , as expected.
PASS: [PITCH] returned 2 , as expected.
PASS: [HEADING] returned 2.99999999999999 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0.999999999999992 1] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2 2] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2.99999999999999 3] returned true , as expected.
INFO: Calling SETORIENTATION [105 0 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 105 , as expected.
PASS: [PITCH] returned 360 , as expected.
PASS: [HEADING] returned 360 , as expected.
PASS: [ANGLEISCLOSEENOUGH 105 105] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
INFO: Calling SETORIENTATION [0 105 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 180 , as expected.
PASS: [PITCH] returned 75 , as expected.
PASS: [HEADING] returned 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 75 75] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
INFO: Calling SETORIENTATION [0 0 105]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 0 , as expected.
PASS: [PITCH] returned 360 , as expected.
PASS: [HEADING] returned 105 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 105 105] returned true , as expected.
INFO: Calling SETORIENTATION [0 -90 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 300.898698809005 , as expected.
PASS: [PITCH] returned 270 , as expected.
PASS: [HEADING] returned 7.79298017167185e-15 , as expected.
PASS: [ANGLEISCLOSEENOUGH 0 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 270 270] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 7.79298017167185e-15 0] returned true , as expected.
INFO: Calling SETORIENTATION [0 -105 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 180 , as expected.
PASS: [PITCH] returned 285 , as expected.
PASS: [HEADING] returned 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 285 285] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
INFO: Calling SETORIENTATION [0 465 0]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 180 , as expected.
PASS: [PITCH] returned 75 , as expected.
PASS: [HEADING] returned 180 , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 75 75] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 180 180] returned true , as expected.
INFO: Calling SETORIENTATION [360 360 360]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 1.63317910981156e-15 , as expected.
PASS: [PITCH] returned 2.89465340347775e-15 , as expected.
PASS: [HEADING] returned 360 , as expected.
PASS: [ANGLEISCLOSEENOUGH 1.63317910981156e-15 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2.89465340347775e-15 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
INFO: Calling SETORIENTATION [-360 -360 -360]
PASS: [LIST? ORIENTATION] returned true , as expected.
PASS: [COUNT ORIENTATION] returned 3 , as expected.
PASS: [ROLL] returned 360 , as expected.
PASS: [PITCH] returned 360 , as expected.
PASS: [HEADING] returned 6.34190050419077e-15 , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 360 0] returned true , as expected.
PASS: [ANGLEISCLOSEENOUGH 2.27996525126551e-14 0] returned true , as expected.
INFO: Executing invalid instruction: [(SETORIENTATION)]
PASS: Executing [(SETORIENTATION)] set error code to 6 , as expected
INFO: Executing [(SETORIENTATION)] set error string to [not enough inputs to SETORIENTATION]
INFO: Executing invalid instruction: [(SETORIENTATION 0)]
PASS: Executing [(SETORIENTATION 0)] set error code to 21
INFO: Executing [(SETORIENTATION 0)] set error string to [setorientation doesn't like 0 as input]
INFO: Executing invalid instruction: [(SETORIENTATION 0 0)]
PASS: Executing [(SETORIENTATION 0 0)] set error code to 8 , as expected
INFO: Executing [(SETORIENTATION 0 0)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETORIENTATION 0 0 0)]
PASS: Executing [(SETORIENTATION 0 0 0)] set error code to 8 , as expected
INFO: Executing [(SETORIENTATION 0 0 0)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SETORIENTATION [0] )]
PASS: Executing [(SETORIENTATION [0] )] set error code to 21
INFO: Executing [(SETORIENTATION [0] )] set error string to [setorientation doesn't like [0] as input]
INFO: Executing invalid instruction: [(SETORIENTATION [0 0] )]
PASS: Executing [(SETORIENTATION [0 0] )] set error code to 21
INFO: Executing [(SETORIENTATION [0 0] )] set error string to [setorientation doesn't like [0 0] as input]
INFO: Executing invalid instruction: [(SETORIENTATION [a b c] )]
PASS: Executing [(SETORIENTATION [a b c] )] set error code to 7
INFO: Executing [(SETORIENTATION [a b c] )] set error string to [setroll doesn't like a as input]
INFO: Executing invalid instruction: [(SETORIENTATION [0 0 0 0] )]
PASS: Executing [(SETORIENTATION [0 0 0 0] )] set error code to 21
INFO: Executing [(SETORIENTATION [0 0 0 0] )] set error string to [setorientation doesn't like [0 0 0 0] as input]
INFO: Executing invalid instruction: [(SETORIENTATION {0 0 0} )]
PASS: Executing [(SETORIENTATION {0 0 0} )] set error code to 21
INFO: Executing [(SETORIENTATION {0 0 0} )] set error string to [setorientation doesn't like {0 0 0} as input]
INFO: Executing invalid instruction: [(SETORIENTATION [0 0 0] "toomany)]
PASS: Executing [(SETORIENTATION [0 0 0] "toomany)] set error code to 8 , as expected
INFO: Executing [(SETORIENTATION [0 0 0] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ORIENTATION "toomany)]
PASS: Executing [(ORIENTATION "toomany)] set error code to 8 , as expected
INFO: Executing [(ORIENTATION "toomany)] set error string to [too much inside ()'s]
PASS: [SCRUNCH] returned [1 1] , as expected.
PASS: [SCRUNCH] returned [2 0.1] , as expected.
INFO: Executing invalid instruction: [(SETSCRUNCH)]
PASS: Executing [(SETSCRUNCH)] set error code to 6 , as expected
INFO: Executing [(SETSCRUNCH)] set error string to [not enough inputs to SETSCRUNCH]
INFO: Executing invalid instruction: [(SETSCRUNCH [1 1] )]
PASS: Executing [(SETSCRUNCH [1 1] )] set error code to 6 , as expected
INFO: Executing [(SETSCRUNCH [1 1] )] set error string to [not enough inputs to SETSCRUNCH]
INFO: Executing invalid instruction: [(SETSCRUNCH 1)]
PASS: Executing [(SETSCRUNCH 1)] set error code to 6 , as expected
INFO: Executing [(SETSCRUNCH 1)] set error string to [not enough inputs to SETSCRUNCH]
INFO: Executing invalid instruction: [(SETSCRUNCH "a 1)]
PASS: Executing [(SETSCRUNCH "a 1)] set error code to 7
INFO: Executing [(SETSCRUNCH "a 1)] set error string to [SETSCRUNCH doesn't like a as input]
INFO: Executing invalid instruction: [(SETSCRUNCH [1] 1)]
PASS: Executing [(SETSCRUNCH [1] 1)] set error code to 7
INFO: Executing [(SETSCRUNCH [1] 1)] set error string to [SETSCRUNCH doesn't like [1] as input]
INFO: Executing invalid instruction: [(SETSCRUNCH {1} 1)]
PASS: Executing [(SETSCRUNCH {1} 1)] set error code to 7
INFO: Executing [(SETSCRUNCH {1} 1)] set error string to [SETSCRUNCH doesn't like {1} as input]
INFO: Executing invalid instruction: [(SETSCRUNCH 1 "a )]
PASS: Executing [(SETSCRUNCH 1 "a )] set error code to 7
INFO: Executing [(SETSCRUNCH 1 "a )] set error string to [SETSCRUNCH doesn't like a as input]
INFO: Executing invalid instruction: [(SETSCRUNCH 1 [1] )]
PASS: Executing [(SETSCRUNCH 1 [1] )] set error code to 7
INFO: Executing [(SETSCRUNCH 1 [1] )] set error string to [SETSCRUNCH doesn't like [1] as input]
INFO: Executing invalid instruction: [(SETSCRUNCH 1 {1} )]
PASS: Executing [(SETSCRUNCH 1 {1} )] set error code to 7
INFO: Executing [(SETSCRUNCH 1 {1} )] set error string to [SETSCRUNCH doesn't like {1} as input]
INFO: Executing invalid instruction: [(SETSCRUNCH 1 1 1)]
PASS: Executing [(SETSCRUNCH 1 1 1)] set error code to 8 , as expected
INFO: Executing [(SETSCRUNCH 1 1 1)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SCRUNCH "toomany)]
PASS: Executing [(SCRUNCH "toomany)] set error code to 8 , as expected
INFO: Executing [(SCRUNCH "toomany)] set error string to [too much inside ()'s]
PASS: [SCRUNCH] returned [0 0] , as expected.
PASS: [SCRUNCH] returned [1e+50 -1e+50] , as expected.
PASS: "HELP [wor]" opened the index to WORD
PASS: "HELP TO" opened the documentation for TO
PASS: "(HELP)" opened the manual to the table of contents
INFO: Executing invalid instruction: [(HELP "TOO "MANY)]
PASS: Executing [(HELP "TOO "MANY)] set error code to 8 , as expected
INFO: Executing [(HELP "TOO "MANY)] set error string to [too much inside ()'s]
PASS: ICON "Commander minimized the commander when it was docked
INFO: Executing invalid instruction: [(WINDOWSET)]
PASS: Executing [(WINDOWSET)] set error code to 6 , as expected
INFO: Executing [(WINDOWSET)] set error string to [not enough inputs to WINDOWSET]
INFO: Executing invalid instruction: [(WINDOWSET "FMSLogo)]
PASS: Executing [(WINDOWSET "FMSLogo)] set error code to 6 , as expected
INFO: Executing [(WINDOWSET "FMSLogo)] set error string to [not enough inputs to WINDOWSET]
INFO: Executing invalid instruction: [(WINDOWSET "FMSLogo 0 "toomany)]
PASS: Executing [(WINDOWSET "FMSLogo 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(WINDOWSET "FMSLogo 0 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [WINDOWSET "FMSLogo [1]]
PASS: Executing [WINDOWSET "FMSLogo [1]] set error code to 7
INFO: Executing [WINDOWSET "FMSLogo [1]] set error string to [WINDOWSET doesn't like [1] as input]
INFO: Executing invalid instruction: [WINDOWSET "FMSLogo {1}]
PASS: Executing [WINDOWSET "FMSLogo {1}] set error code to 7
INFO: Executing [WINDOWSET "FMSLogo {1}] set error string to [WINDOWSET doesn't like {1} as input]
INFO: Executing invalid instruction: [WINDOWSET "FMSLogo "one]
PASS: Executing [WINDOWSET "FMSLogo "one] set error code to 7
INFO: Executing [WINDOWSET "FMSLogo "one] set error string to [WINDOWSET doesn't like one as input]
INFO: Executing invalid instruction: [WINDOWSET "FMSLogo -1]
PASS: Executing [WINDOWSET "FMSLogo -1] set error code to 7
INFO: Executing [WINDOWSET "FMSLogo -1] set error string to [WINDOWSET doesn't like -1 as input]
INFO: Executing invalid instruction: [(DLLLOAD)]
PASS: Executing [(DLLLOAD)] set error code to 6 , as expected
INFO: Executing [(DLLLOAD)] set error string to [not enough inputs to DLLLOAD]
INFO: Executing invalid instruction: [(DLLLOAD "kernel32 "user32)]
PASS: Executing [(DLLLOAD "kernel32 "user32)] set error code to 8 , as expected
INFO: Executing [(DLLLOAD "kernel32 "user32)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [DLLLOAD {0}]
PASS: Executing [DLLLOAD {0}] set error code to 16
INFO: Executing [DLLLOAD {0}] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLLOAD [0]]
PASS: Executing [DLLLOAD [0]] set error code to 16
INFO: Executing [DLLLOAD [0]] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLLOAD 12345]
PASS: Executing [DLLLOAD 12345] set error code to 16
INFO: Executing [DLLLOAD 12345] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLLOAD "nonexistent.dll]
PASS: Executing [DLLLOAD "nonexistent.dll] set error code to 16
INFO: Executing [DLLLOAD "nonexistent.dll] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLLOAD "c:\]
PASS: Executing [DLLLOAD "c:\] set error code to 16
INFO: Executing [DLLLOAD "c:\] set error string to [Stopping...]
INFO: Executing invalid instructiondll]
PASS: Executingdll] set error code to 13
INFO: Executingdll] set error string to [I don't know how todll]
INFO: Executing invalid instruction: [DLLLOAD "user32.dll]
PASS: Executing [DLLLOAD "user32.dll] set error code to 16
INFO: Executing [DLLLOAD "user32.dll] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLLOAD {0}]
PASS: Executing [DLLLOAD {0}] set error code to 16
INFO: Executing [DLLLOAD {0}] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLCALL [L FindWindowA S FMSLogo L 0]]
PASS: Executing [DLLCALL [L FindWindowA S FMSLogo L 0]] set error code to 16
INFO: Executing [DLLCALL [L FindWindowA S FMSLogo L 0]] set error string to [Stopping...]
INFO: Executing invalid instruction: [(DLLCALL)]
PASS: Executing [(DLLCALL)] set error code to 6 , as expected
INFO: Executing [(DLLCALL)] set error string to [not enough inputs to DLLCALL]
INFO: Executing invalid instruction: [(DLLCALL [L GetTickCount] "toomany)]
PASS: Executing [(DLLCALL [L GetTickCount] "toomany)] set error code to 8 , as expected
INFO: Executing [(DLLCALL [L GetTickCount] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [DLLCALL {0}]
PASS: Executing [DLLCALL {0}] set error code to 16
INFO: Executing [DLLCALL {0}] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLCALL [0]]
PASS: Executing [DLLCALL [0]] set error code to 16
INFO: Executing [DLLCALL [0]] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLCALL [L]]
PASS: Executing [DLLCALL [L]] set error code to 16
INFO: Executing [DLLCALL [L]] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLCALL [L FunctionDoesNotExist]]
PASS: Executing [DLLCALL [L FunctionDoesNotExist]] set error code to 16
INFO: Executing [DLLCALL [L FunctionDoesNotExist]] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLCALL [E GetTickCount]]
PASS: Executing [DLLCALL [E GetTickCount]] set error code to 16
INFO: Executing [DLLCALL [E GetTickCount]] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLCALL [E GetTickCount]]
PASS: Executing [DLLCALL [E GetTickCount]] set error code to 16
INFO: Executing [DLLCALL [E GetTickCount]] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLCALL [L GetTickCount L]]
PASS: Executing [DLLCALL [L GetTickCount L]] set error code to 16
INFO: Executing [DLLCALL [L GetTickCount L]] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLCALL [L GetTickCount E Unknown]]
PASS: Executing [DLLCALL [L GetTickCount E Unknown]] set error code to 16
INFO: Executing [DLLCALL [L GetTickCount E Unknown]] set error string to [Stopping...]
INFO: Executing invalid instruction: [DLLFREE]
PASS: Executing [DLLFREE] set error code to 16
INFO: Executing [DLLFREE] set error string to [Stopping...]
INFO: Executing invalid instruction: [(DLLFREE 0)]
PASS: Executing [(DLLFREE 0)] set error code to 8 , as expected
INFO: Executing [(DLLFREE 0)] set error string to [too much inside ()'s]
PASS: [SORT []] returned [] , as expected.
PASS: [SORT [1]] returned [1] , as expected.
PASS: [SORT [1 2 3]] returned [1 2 3] , as expected.
PASS: [SORT [3 2 1]] returned [1 2 3] , as expected.
PASS: [(SORT [c b a] "beforep)] returned [a b c] , as expected.
PASS: [(SORT ["c "b "a] "beforep)] returned ["a "b "c] , as expected.
PASS: [(SORT [efg abc hij] "beforep)] returned [abc efg hij] , as expected.
PASS: [SORT [1 2 3 1 2 3 1 2 3]] returned [1 1 1 2 2 2 3 3 3] , as expected.
PASS: [(SORT [1 2 3 1 2 3 1 2 3] "greaterp)] returned [3 3 3 2 2 2 1 1 1] , as expected.
PASS: [(SORT [3 2 1] "SORTTEST.ONEINPUTBYDEFAULT)] returned [1 2 3] , as expected.
PASS: [(SORT :database "SORTTEST.SORTBYNAME)] returned [{"cat 4 2} {"human 2 2} {"spider 8 8}] , as expected.
PASS: [(SORT :database "SORTTEST.SORTBYLEGS)] returned [{"human 2 2} {"cat 4 2} {"spider 8 8}] , as expected.
PASS: [SORT "hello] returned ehllo , as expected.
PASS: [SORT "FMSLogo] returned FgLMooS , as expected.
PASS: [SORT "FgLMooS] returned FgLMooS , as expected.
PASS: [SORT "Z] returned Z , as expected.
PASS: [SORT "] returned  , as expected.
PASS: [(SORT "hello "SORTTEST.AFTER?)] returned ollhe , as expected.
CALL: make "sortedarray SORT {3 2 1 1 2 3 3 2 1}
PASS: [ARRAY? :sortedarray] returned true , as expected.
PASS: [COUNT :sortedarray] returned 9 , as expected.
PASS: [ITEM 1 :sortedarray] returned 1 , as expected.
PASS: [ITEM 2 :sortedarray] returned 1 , as expected.
PASS: [ITEM 3 :sortedarray] returned 1 , as expected.
PASS: [ITEM 4 :sortedarray] returned 2 , as expected.
PASS: [ITEM 5 :sortedarray] returned 2 , as expected.
PASS: [ITEM 6 :sortedarray] returned 2 , as expected.
PASS: [ITEM 7 :sortedarray] returned 3 , as expected.
PASS: [ITEM 8 :sortedarray] returned 3 , as expected.
PASS: [ITEM 9 :sortedarray] returned 3 , as expected.
PASS: [SORT ISEQ 100 1] returned [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100] , as expected.
INFO: Executing invalid instruction: [(SORT)]
PASS: Executing [(SORT)] set error code to 6 , as expected
INFO: Executing [(SORT)] set error string to [not enough inputs to SORT]
INFO: Executing invalid instruction: [(SORT [[1] [2]] )]
PASS: Executing [(SORT [[1] [2]] )] set error code to 7
INFO: Executing [(SORT [[1] [2]] )] set error string to [less? doesn't like [1] as input]
INFO: Executing invalid instruction: [(SORT {[1] [2]} )]
PASS: Executing [(SORT {[1] [2]} )] set error code to 7
INFO: Executing [(SORT {[1] [2]} )] set error string to [less? doesn't like [1] as input]
INFO: Executing invalid instruction: [(SORT [3 2 1] "FMSLogo)]
PASS: Executing [(SORT [3 2 1] "FMSLogo)] set error code to 24
INFO: Executing [(SORT [3 2 1] "FMSLogo)] set error string to [I don't know how to FMSLogo]
INFO: Executing invalid instruction: [(SORT [3 2 1] [1] )]
PASS: Executing [(SORT [3 2 1] [1] )] set error code to 7
INFO: Executing [(SORT [3 2 1] [1] )] set error string to [if doesn't like 1 as input]
INFO: Executing invalid instruction: [(SORT [3 2 1] {1} )]
PASS: Executing [(SORT [3 2 1] {1} )] set error code to 32
INFO: Executing [(SORT [3 2 1] {1} )] set error string to [APPLY doesn't like {1} as input]
INFO: Executing invalid instruction: [(SORT [3 2 1] "SORTTEST.ONEINPUTPROC)]
PASS: Executing [(SORT [3 2 1] "SORTTEST.ONEINPUTPROC)] set error code to 8 , as expected
INFO: Executing [(SORT [3 2 1] "SORTTEST.ONEINPUTPROC)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(SORT [3 2 1] "SORTTEST.THREEINPUTPROC)]
PASS: Executing [(SORT [3 2 1] "SORTTEST.THREEINPUTPROC)] set error code to 6 , as expected
INFO: Executing [(SORT [3 2 1] "SORTTEST.THREEINPUTPROC)] set error string to [not enough inputs to SORTTEST.THREEINPUTPROC]
INFO: Executing invalid instruction: [(SORT [3 2 1] "SORTTEST.NONPREDICATE)]
PASS: Executing [(SORT [3 2 1] "SORTTEST.NONPREDICATE)] set error code to 7
INFO: Executing [(SORT [3 2 1] "SORTTEST.NONPREDICATE)] set error string to [if doesn't like 1 as input]
INFO: Executing invalid instruction: [(SORT [3 2 1] "lessp "toomany)]
PASS: Executing [(SORT [3 2 1] "lessp "toomany)] set error code to 8 , as expected
INFO: Executing [(SORT [3 2 1] "lessp "toomany)] set error string to [too much inside ()'s]
PASS: [ISEQ 1 5] returned [1 2 3 4 5] , as expected.
PASS: [ISEQ 5 1] returned [5 4 3 2 1] , as expected.
PASS: [ISEQ 1 1] returned [1] , as expected.
PASS: [ISEQ -5 5] returned [-5 -4 -3 -2 -1 0 1 2 3 4 5] , as expected.
PASS: [ISEQ -5 -1] returned [-5 -4 -3 -2 -1] , as expected.
PASS: [ISEQ 0 0] returned [0] , as expected.
PASS: [ISEQ 0.0 5.0] returned [0 1 2 3 4 5] , as expected.
INFO: Executing invalid instruction: [(ISEQ 5)]
PASS: Executing [(ISEQ 5)] set error code to 6 , as expected
INFO: Executing [(ISEQ 5)] set error string to [not enough inputs to ISEQ]
INFO: Executing invalid instruction: [(ISEQ 1 5 "toomany)]
PASS: Executing [(ISEQ 1 5 "toomany)] set error code to 8 , as expected
INFO: Executing [(ISEQ 1 5 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ISEQ 0.5 10]
PASS: Executing [ISEQ 0.5 10] set error code to 21
INFO: Executing [ISEQ 0.5 10] set error string to [iseq doesn't like 0.5 as input]
INFO: Executing invalid instruction: [ISEQ "zero 10]
PASS: Executing [ISEQ "zero 10] set error code to 21
INFO: Executing [ISEQ "zero 10] set error string to [iseq doesn't like zero as input]
INFO: Executing invalid instruction: [ISEQ [0] 10]
PASS: Executing [ISEQ [0] 10] set error code to 21
INFO: Executing [ISEQ [0] 10] set error string to [iseq doesn't like [0] as input]
INFO: Executing invalid instruction: [ISEQ {0} 10]
PASS: Executing [ISEQ {0} 10] set error code to 21
INFO: Executing [ISEQ {0} 10] set error string to [iseq doesn't like {0} as input]
INFO: Executing invalid instruction: [ISEQ 0 10.1]
PASS: Executing [ISEQ 0 10.1] set error code to 21
INFO: Executing [ISEQ 0 10.1] set error string to [iseq doesn't like 10.1 as input]
INFO: Executing invalid instruction: [ISEQ 0 "ten]
PASS: Executing [ISEQ 0 "ten] set error code to 21
INFO: Executing [ISEQ 0 "ten] set error string to [iseq doesn't like ten as input]
INFO: Executing invalid instruction: [ISEQ 0 [10]]
PASS: Executing [ISEQ 0 [10]] set error code to 21
INFO: Executing [ISEQ 0 [10]] set error string to [iseq doesn't like [10] as input]
INFO: Executing invalid instruction: [ISEQ 0 {10}]
PASS: Executing [ISEQ 0 {10}] set error code to 21
INFO: Executing [ISEQ 0 {10}] set error string to [iseq doesn't like {10} as input]
PASS: [MEMBERP "TRACETEST.TRACEDPROCEDURE (ITEM 1 TRACED)] returned false , as expected.
CALL: TRACE "TRACETEST.TRACEDPROCEDURE
PASS: [MEMBERP "TRACETEST.TRACEDPROCEDURE (ITEM 1 TRACED)] returned true , as expected.
CALL: TRACETEST.TRACEDPROCEDURE
CALL: UNTRACE "TRACETEST.TRACEDPROCEDURE
PASS: [MEMBERP "TRACETEST.TRACEDPROCEDURE (ITEM 1 TRACED)] returned false , as expected.
CALL: TRACETEST.TRACEDPROCEDURE
PASS: [MEMBERP "TRACETEST.TRACEDFUNCTION (ITEM 1 TRACED)] returned false , as expected.
CALL: TRACE "TRACETEST.TRACEDFUNCTION
PASS: [MEMBERP "TRACETEST.TRACEDFUNCTION (ITEM 1 TRACED)] returned true , as expected.
PASS: [TRACETEST.TRACEDFUNCTION 123] returned 123 , as expected.
PASS: [TRACETEST.TRACEDFUNCTION "outputthis] returned outputthis , as expected.
PASS: [TRACETEST.TRACEDFUNCTION [1 2 3]] returned [1 2 3] , as expected.
CALL: TRACETEST.TRACEDFUNCTION {1 2 3}
CALL: UNTRACE "TRACETEST.TRACEDFUNCTION
PASS: [MEMBERP "TRACETEST.TRACEDFUNCTION (ITEM 1 TRACED)] returned false , as expected.
PASS: [TRACETEST.TRACEDFUNCTION 123] returned 123 , as expected.
PASS: [MEMBERP "TRACETEST.TRACEDVARIABLE (ITEM 2 TRACED)] returned false , as expected.
CALL: TRACE NAMELIST "TRACETEST.TRACEDVARIABLE
PASS: [MEMBERP "TRACETEST.TRACEDVARIABLE (ITEM 2 TRACED)] returned true , as expected.
CALL: MAKE "TRACETEST.TRACEDVARIABLE 123
CALL: MAKE "TRACETEST.TRACEDVARIABLE "123
CALL: MAKE "TRACETEST.TRACEDVARIABLE "value
CALL: MAKE "TRACETEST.TRACEDVARIABLE [1 2 3]
CALL: MAKE "TRACETEST.TRACEDVARIABLE {1 2 3}
CALL: UNTRACE NAMELIST "TRACETEST.TRACEDVARIABLE
PASS: [MEMBERP "TRACETEST.TRACEDVARIABLE (ITEM 2 TRACED)] returned false , as expected.
CALL: MAKE "TRACETEST.TRACEDVARIABLE 321
CALL: PPROP "TRACETEST.TRACEDPLIST "SOMEPROPERTY 0
PASS: [MEMBERP "TRACETEST.TRACEDPLIST (ITEM 3 TRACED)] returned false , as expected.
CALL: TRACE PLLIST "TRACETEST.TRACEDPLIST
PASS: [MEMBERP "TRACETEST.TRACEDPLIST (ITEM 3 TRACED)] returned true , as expected.
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY1 123
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY2 "123
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY3 "value
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY4 [1 2 3]
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY5 {1 2 3}
CALL: UNTRACE PLLIST "TRACETEST.TRACEDPLIST
PASS: [MEMBERP "TRACETEST.TRACEDPLIST (ITEM 3 TRACED)] returned false , as expected.
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY6 123
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY7 "123
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY8 "value
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY9 [1 2 3]
CALL: PPROP "TRACETEST.TRACEDPLIST "PROPERTY0 {1 2 3}
CALL: MAKE "TRACETEST.TRACEDPLIST 4321
INFO: Calling TRACE CONTENTS
FAIL: [TRACED] returned [[#test .eqtest abstest activeareatest andtest angleiscloseenough applytest applytest.applyoutput applytest.badinput applytest.bug1519088 applytest.nonprimitive applytest.nooutput applytest.smoketest arcbadinputtest arccostest arcsintest arcsmoketest arctantest arctest arraybadinputtest arrayorigintest arrayptest arraysmoketest arraytest asciitest ashifttest.badinput ashifttest.smoketest beforeptest bitandtest.badinput bitandtest.smoketest bitcopytest bitloadsizetest bitmaptest bitnottest.badinput bitnottest.smoketest bitortest.badinput bitortest.smoketest bitpastetoindextest.badinput bitpastetoindextest.smoketest bitwisetest bitxortest.badinput bitxortest.smoketest bug1349374test bug1377856test bug1383281test bug1384267test bug1388325test bug1397560test bug1429960test bug1448155test bug1458661test burytest burytest.badinput burytest.buriedprocedure burytest.buryall burytest.procedure burytest.propertylist burytest.variable butfirststest butfirststest.badinput butfirststest.smoketest butfirsttest butlasttest buttonptest chdirtest client.onreadytosend colorsetgettest colortest controlflowtest copydefmaybeoutputtest copydefoptest copydefoutputtest copydefstoptest copydeftest copydeftotest costest definetest definetest.badinput definetest.smoketest differencetest difficultcomments directorysmoketest directorytest dllcalltest dllfreetest dllloadtest dllsmoketest dlltest donothing doorientationtest echo edalltest editortest emptyptest equalptest erasetest erasetest.badinput erasetest.eraseall erasetest.eraseprocedure erasetest.erasepropertylist erasetest.erasevariable erasetest.ern erasetest.erpl erracttest erracttest.bug1517326 erracttest.bug1517326.continue5 erracttest.output.5 erracttest.smoketest error.30.test errortest errortest.checkerror exptest filetest filetest.allopen filetest.badinput filetest.closeall filetest.dribble filetest.erasefile filetest.openappend filetest.opendirectoryasfile filetest.openopenfile filetest.openupdate filetest.setreadpos filetest.setwritepos filetest.smoketest filltest filltimerevent firststest firststest.badinput firststest.smoketest firsttest floodcolortest fontfacenamestest fontfacenamestest.badinput fontfacenamestest.manualtest fontfacenamestest.smoketest formtest fulltexttest fulltexttest.badinput fulltexttest.smoketest helptest i.dont.know.what.to.do.with.value iftest inporttest inttest iseqtest labelbadinputtest labelcircletest labeltest largeedittest lasttest listptest listtest listtest.smoketest lntest loadtest localvartest log10test logictest logoversiontest logoversiontest.badinput logoversiontest.smoketest lshifttest.badinput lshifttest.smoketest macro.return.unbound.instead.of.list macrotest macrotest.outputnothing mathtest memberptest miditest miditest.badinput miditest.devicezero miditest.longformat miditest.playtune miditest.smoketest minustest misctest mkdirtest modulotest mousetest mousetest.badinput mousetest.simpletest my.proc.to.step myadd mymacro networktest networktest.client.echo networktest.client.receivelargepacket networktest.client.receiveunframedpacket networktest.client.shutdownrace networktest.client.smoketest networktest.hostname networktest.netshutdowncrash networktest.server.receiveunframedpacket networktest.server.shutdownrace networktest.server.twoconnections networktest.servercommand networktest.smoketest no.input.no.output nodestest nottest numberptest one.input.no.output orientationtest ortest outporttest output.373 parsetest parsetest.expression parsetest.func parsetest.number parsetest.word pasteincircle pencolortest penmodetest pentest penupdowntest perspectivetest pitest plisttest porttest powertest predicatetest procedure.shadows.myshadowedvar procedure.with.to.inside.it procedureinworkingdirectory proceduretest proceduretest.complexproc producttest queuetest queuetest.badinput queuetest.circulartest queuetest.smoketest quotedtest quotedtest.badinput quotedtest.smoketest quotienttest radarccostest radarcsintest radarctantest radcostest radsintest radtantest rawasciitest remaindertest repcounttest repcounttest.badinput repcounttest.smoketest repcounttest.timercallback repcounttest.timertest repeattest repeattest.badinput repeattest.outputinrepeat repeattest.smoketest repeattest.stopinrepeat rmdirtest roundtest runtest sampleproc screencolortest screentest scrunchtest sentencetest sentencetest.badinput sentencetest.noalias sentencetest.smoketest setitemtest setlabelfonttest setrandomorientation shellscripttest signtest sintest sorttest sorttest.after? sorttest.badinput sorttest.nonpredicate sorttest.oneinputbydefault sorttest.oneinputproc sorttest.performance sorttest.regression sorttest.sortbylegs sorttest.sortbyname sorttest.threeinputproc soundtest soundtest.badinput soundtest.frequency.a4 soundtest.frequency.b4 soundtest.frequency.c4 soundtest.frequency.c5 soundtest.frequency.d4 soundtest.frequency.d5 soundtest.frequency.e4 soundtest.frequency.f4 soundtest.frequency.g4 soundtest.sound soundtest.tone sqrttest stacktest stacktest.badinput stacktest.circulartest stacktest.smoketest steptest steptest.badinput steptest.procedure steptest.propertylist steptest.shadowvariable steptest.stepall steptest.steppedprocedure steptest.variable sumtest tantest testall testlib.repeatword texttest texttest.badinput texttest.smoketest timewait tracetest tracetest.badinput tracetest.function tracetest.procedure tracetest.propertylist tracetest.traceall tracetest.tracedfunction tracetest.tracedprocedure tracetest.variable waittest windowfileedittest windowfileedittest.bug1330752 windowfileedittest.longfilename windowsettest windowstest windowstest.button windowstest.button.badinput windowstest.checkbox windowstest.checkbox.badinput windowstest.checkbox.deletegroupbox windowstest.combobox windowstest.combobox.badinput windowstest.debugwindows windowstest.debugwindows.badinput windowstest.debugwindows.stress windowstest.dialog.badinput windowstest.dialog.badinput.fromcallback windowstest.dialog.smoketest windowstest.groupbox windowstest.groupbox.badinput windowstest.listbox windowstest.listbox.badinput windowstest.mainwindow.smoketest windowstest.radiobutton windowstest.radiobutton.badinput windowstest.radiobutton.deletegroupbox windowstest.regressiontest windowstest.scrollbar windowstest.scrollbar.badinput windowstest.setup windowstest.static windowstest.static.badinput windowstest.window.badinput windowstest.window.smoketest windowtest wordproctest wordptest wordtest yesnoboxtest yesnoboxtest.badinput yesnoboxtest.smoketest ~ignoreme ~ignoremewascalled] [errortest.array isok startup string testlog thesum tracetest.tracedplist ~ignoremewascalled] [tracetest.tracedplist]] . We expected [[#test .eqtest abstest activeareatest andtest angleiscloseenough applytest applytest.applyoutput applytest.badinput applytest.bug1519088 applytest.nonprimitive applytest.nooutput applytest.smoketest arcbadinputtest arccostest arcsintest arcsmoketest arctantest arctest arraybadinputtest arrayorigintest arrayptest arraysmoketest arraytest asciitest ashifttest.badinput ashifttest.smoketest beforeptest bitandtest.badinput bitandtest.smoketest bitcopytest bitloadsizetest bitmaptest bitnottest.badinput bitnottest.smoketest bitortest.badinput bitortest.smoketest bitpastetoindextest.badinput bitpastetoindextest.smoketest bitwisetest bitxortest.badinput bitxortest.smoketest bug1349374test bug1377856test bug1383281test bug1384267test bug1388325test bug1397560test bug1429960test bug1448155test bug1458661test burytest burytest.badinput burytest.buriedprocedure burytest.buryall burytest.procedure burytest.propertylist burytest.variable butfirststest butfirststest.badinput butfirststest.smoketest butfirsttest butlasttest buttonptest chdirtest client.onreadytosend colorsetgettest colortest controlflowtest copydefmaybeoutputtest copydefoptest copydefoutputtest copydefstoptest copydeftest copydeftotest costest definetest definetest.badinput definetest.smoketest differencetest difficultcomments directorysmoketest directorytest dllcalltest dllfreetest dllloadtest dllsmoketest dlltest donothing doorientationtest echo edalltest editortest emptyptest equalptest erasetest erasetest.badinput erasetest.eraseall erasetest.eraseprocedure erasetest.erasepropertylist erasetest.erasevariable erasetest.ern erasetest.erpl erracttest erracttest.bug1517326 erracttest.bug1517326.continue5 erracttest.output.5 erracttest.smoketest error.30.test errortest errortest.checkerror exptest filetest filetest.allopen filetest.badinput filetest.closeall filetest.dribble filetest.erasefile filetest.openappend filetest.opendirectoryasfile filetest.openopenfile filetest.openupdate filetest.setreadpos filetest.setwritepos filetest.smoketest filltest filltimerevent firststest firststest.badinput firststest.smoketest firsttest floodcolortest fontfacenamestest fontfacenamestest.badinput fontfacenamestest.manualtest fontfacenamestest.smoketest formtest fulltexttest fulltexttest.badinput fulltexttest.smoketest helptest i.dont.know.what.to.do.with.value iftest inporttest inttest iseqtest labelbadinputtest labelcircletest labeltest largeedittest lasttest listptest listtest listtest.smoketest lntest loadtest localvartest log10test logictest logoversiontest logoversiontest.badinput logoversiontest.smoketest lshifttest.badinput lshifttest.smoketest macro.return.unbound.instead.of.list macrotest macrotest.outputnothing mathtest memberptest miditest miditest.badinput miditest.devicezero miditest.longformat miditest.playtune miditest.smoketest minustest misctest mkdirtest modulotest mousetest mousetest.badinput mousetest.simpletest my.proc.to.step myadd mymacro networktest networktest.client.echo networktest.client.receivelargepacket networktest.client.receiveunframedpacket networktest.client.shutdownrace networktest.client.smoketest networktest.hostname networktest.netshutdowncrash networktest.server.receiveunframedpacket networktest.server.shutdownrace networktest.server.twoconnections networktest.servercommand networktest.smoketest no.input.no.output nodestest nottest numberptest one.input.no.output orientationtest ortest outporttest output.373 parsetest parsetest.expression parsetest.func parsetest.number parsetest.word pasteincircle pencolortest penmodetest pentest penupdowntest perspectivetest pitest plisttest porttest powertest predicatetest procedure.shadows.myshadowedvar procedure.with.to.inside.it procedureinworkingdirectory proceduretest proceduretest.complexproc producttest queuetest queuetest.badinput queuetest.circulartest queuetest.smoketest quotedtest quotedtest.badinput quotedtest.smoketest quotienttest radarccostest radarcsintest radarctantest radcostest radsintest radtantest rawasciitest remaindertest repcounttest repcounttest.badinput repcounttest.smoketest repcounttest.timercallback repcounttest.timertest repeattest repeattest.badinput repeattest.outputinrepeat repeattest.smoketest repeattest.stopinrepeat rmdirtest roundtest runtest sampleproc screencolortest screentest scrunchtest sentencetest sentencetest.badinput sentencetest.noalias sentencetest.smoketest setitemtest setlabelfonttest setrandomorientation shellscripttest signtest sintest sorttest sorttest.after? sorttest.badinput sorttest.nonpredicate sorttest.oneinputbydefault sorttest.oneinputproc sorttest.performance sorttest.regression sorttest.sortbylegs sorttest.sortbyname sorttest.threeinputproc soundtest soundtest.badinput soundtest.frequency.a4 soundtest.frequency.b4 soundtest.frequency.c4 soundtest.frequency.c5 soundtest.frequency.d4 soundtest.frequency.d5 soundtest.frequency.e4 soundtest.frequency.f4 soundtest.frequency.g4 soundtest.sound soundtest.tone sqrttest stacktest stacktest.badinput stacktest.circulartest stacktest.smoketest steptest steptest.badinput steptest.procedure steptest.propertylist steptest.shadowvariable steptest.stepall steptest.steppedprocedure steptest.variable sumtest tantest testall testlib.repeatword texttest texttest.badinput texttest.smoketest timewait tracetest tracetest.badinput tracetest.function tracetest.procedure tracetest.propertylist tracetest.traceall tracetest.tracedfunction tracetest.tracedprocedure tracetest.variable waittest windowfileedittest windowfileedittest.bug1330752 windowfileedittest.longfilename windowsettest windowstest windowstest.button windowstest.button.badinput windowstest.checkbox windowstest.checkbox.badinput windowstest.checkbox.deletegroupbox windowstest.combobox windowstest.combobox.badinput windowstest.debugwindows windowstest.debugwindows.badinput windowstest.debugwindows.stress windowstest.dialog.badinput windowstest.dialog.badinput.fromcallback windowstest.dialog.smoketest windowstest.groupbox windowstest.groupbox.badinput windowstest.listbox windowstest.listbox.badinput windowstest.mainwindow.smoketest windowstest.radiobutton windowstest.radiobutton.badinput windowstest.radiobutton.deletegroupbox windowstest.regressiontest windowstest.scrollbar windowstest.scrollbar.badinput windowstest.setup windowstest.static windowstest.static.badinput windowstest.window.badinput windowstest.window.smoketest windowtest wordproctest wordptest wordtest yesnoboxtest yesnoboxtest.badinput yesnoboxtest.smoketest ~ignoreme ~ignoremewascalled] [erract errortest.array isok startup string testlog thesum tracetest.tracedplist ~ignoremewascalled] [tracetest.tracedplist]]
CALL: UNTRACE CONTENTS
PASS: [TRACED] returned [[] [] []] , as expected.
INFO: Executing invalid instruction: [(TRACED "toomany)]
PASS: Executing [(TRACED "toomany)] set error code to 8 , as expected
INFO: Executing [(TRACED "toomany)] set error string to [too much inside ()'s]
CALL: (TRACE [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Executing invalid instruction: [(TRACE)]
PASS: Executing [(TRACE)] set error code to 6 , as expected
INFO: Executing [(TRACE)] set error string to [not enough inputs to TRACE]
INFO: Executing invalid instruction: [(TRACE "name "toomany)]
PASS: Executing [(TRACE "name "toomany)] set error code to 8 , as expected
INFO: Executing [(TRACE "name "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(TRACE {name} )]
PASS: Executing [(TRACE {name} )] set error code to 4
INFO: Executing [(TRACE {name} )] set error string to [TRACE doesn't like {name} as input]
INFO: Executing invalid instruction: [(TRACE [[a] [b] {c}] )]
PASS: Executing [(TRACE [[a] [b] {c}] )] set error code to 4
INFO: Executing [(TRACE [[a] [b] {c}] )] set error string to [TRACE doesn't like {c} as input]
INFO: Executing invalid instruction: [(TRACE [a b {c}] )]
PASS: Executing [(TRACE [a b {c}] )] set error code to 4
INFO: Executing [(TRACE [a b {c}] )] set error string to [TRACE doesn't like {c} as input]
INFO: Executing invalid instruction: [(TRACE [[a b {c}]] )]
PASS: Executing [(TRACE [[a b {c}]] )] set error code to 4
INFO: Executing [(TRACE [[a b {c}]] )] set error string to [TRACE doesn't like {c} as input]
INFO: Executing invalid instruction: [(TRACE [[a] [b] [c] [d]] )]
PASS: Executing [(TRACE [[a] [b] [c] [d]] )] set error code to 4
INFO: Executing [(TRACE [[a] [b] [c] [d]] )] set error string to [TRACE doesn't like [[a] [b] [c] [d]] as input]
INFO: Executing invalid instruction: [(TRACE [[[a]]] )]
PASS: Executing [(TRACE [[[a]]] )] set error code to 4
INFO: Executing [(TRACE [[[a]]] )] set error string to [TRACE doesn't like [a] as input]
CALL: (UNTRACE [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Executing invalid instruction: [(UNTRACE)]
PASS: Executing [(UNTRACE)] set error code to 6 , as expected
INFO: Executing [(UNTRACE)] set error string to [not enough inputs to UNTRACE]
INFO: Executing invalid instruction: [(UNTRACE "name "toomany)]
PASS: Executing [(UNTRACE "name "toomany)] set error code to 8 , as expected
INFO: Executing [(UNTRACE "name "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(UNTRACE {name} )]
PASS: Executing [(UNTRACE {name} )] set error code to 4
INFO: Executing [(UNTRACE {name} )] set error string to [UNTRACE doesn't like {name} as input]
INFO: Executing invalid instruction: [(UNTRACE [[a] [b] {c}] )]
PASS: Executing [(UNTRACE [[a] [b] {c}] )] set error code to 4
INFO: Executing [(UNTRACE [[a] [b] {c}] )] set error string to [UNTRACE doesn't like {c} as input]
INFO: Executing invalid instruction: [(UNTRACE [a b {c}] )]
PASS: Executing [(UNTRACE [a b {c}] )] set error code to 4
INFO: Executing [(UNTRACE [a b {c}] )] set error string to [UNTRACE doesn't like {c} as input]
INFO: Executing invalid instruction: [(UNTRACE [[a b {c}]] )]
PASS: Executing [(UNTRACE [[a b {c}]] )] set error code to 4
INFO: Executing [(UNTRACE [[a b {c}]] )] set error string to [UNTRACE doesn't like {c} as input]
INFO: Executing invalid instruction: [(UNTRACE [[a] [b] [c] [d]] )]
PASS: Executing [(UNTRACE [[a] [b] [c] [d]] )] set error code to 4
INFO: Executing [(UNTRACE [[a] [b] [c] [d]] )] set error string to [UNTRACE doesn't like [[a] [b] [c] [d]] as input]
INFO: Executing invalid instruction: [(UNTRACE [[[a]]] )]
PASS: Executing [(UNTRACE [[[a]]] )] set error code to 4
INFO: Executing [(UNTRACE [[[a]]] )] set error string to [UNTRACE doesn't like [a] as input]
PASS: [MEMBERP "STEPTEST.STEPPEDPROCEDURE (ITEM 1 STEPPED)] returned false , as expected.
CALL: STEP "STEPTEST.STEPPEDPROCEDURE
PASS: [MEMBERP "STEPTEST.STEPPEDPROCEDURE (ITEM 1 STEPPED)] returned true , as expected.
CALL: STEPTEST.STEPPEDPROCEDURE
CALL: UNSTEP "STEPTEST.STEPPEDPROCEDURE
PASS: [MEMBERP "STEPTEST.STEPPEDPROCEDURE (ITEM 1 STEPPED)] returned false , as expected.
CALL: STEPTEST.STEPPEDPROCEDURE
PASS: [MEMBERP "STEPTEST.STEPPEDVARIABLE (ITEM 2 STEPPED)] returned false , as expected.
CALL: STEP NAMELIST "STEPTEST.STEPPEDVARIABLE
PASS: [MEMBERP "STEPTEST.STEPPEDVARIABLE (ITEM 2 STEPPED)] returned true , as expected.
CALL: STEPTEST.SHADOWVARIABLE
CALL: UNSTEP NAMELIST "STEPTEST.STEPPEDVARIABLE
PASS: [MEMBERP "STEPTEST.STEPPEDVARIABLE (ITEM 2 STEPPED)] returned false , as expected.
CALL: STEPTEST.SHADOWVARIABLE
CALL: PPROP "STEPTEST.STEPPEDPLIST "SOMEPROPERTY 0
PASS: [MEMBERP "STEPTEST.STEPPEDPLIST (ITEM 3 STEPPED)] returned false , as expected.
CALL: STEP PLLIST "STEPTEST.STEPPEDPLIST
PASS: [MEMBERP "STEPTEST.STEPPEDPLIST (ITEM 3 STEPPED)] returned true , as expected.
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY1 123
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY2 "123
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY3 "value
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY4 [1 2 3]
CALL: PPROP "STEPTEST.STEPPEDPLIST "PROPERTY5 {1 2 3}
CALL: UNSTEP PLLIST "STEPTEST.STEPPEDPLIST
PASS: [MEMBERP "STEPTEST.STEPPEDPLIST (ITEM 3 STEPPED)] returned false , as expected.
INFO: Calling STEP CONTENTS
INFO: Called UNSTEP CONTENTS
PASS: [STEPPED] returned [[] [] []] , as expected.
INFO: Executing invalid instruction: [(STEPPED "toomany)]
PASS: Executing [(STEPPED "toomany)] set error code to 8 , as expected
INFO: Executing [(STEPPED "toomany)] set error string to [too much inside ()'s]
CALL: (STEP [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Executing invalid instruction: [(STEP)]
PASS: Executing [(STEP)] set error code to 6 , as expected
INFO: Executing [(STEP)] set error string to [not enough inputs to STEP]
INFO: Executing invalid instruction: [(STEP "name "toomany)]
PASS: Executing [(STEP "name "toomany)] set error code to 8 , as expected
INFO: Executing [(STEP "name "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(STEP {name} )]
PASS: Executing [(STEP {name} )] set error code to 4
INFO: Executing [(STEP {name} )] set error string to [STEP doesn't like {name} as input]
INFO: Executing invalid instruction: [(STEP [[a] [b] {c}] )]
PASS: Executing [(STEP [[a] [b] {c}] )] set error code to 4
INFO: Executing [(STEP [[a] [b] {c}] )] set error string to [STEP doesn't like {c} as input]
INFO: Executing invalid instruction: [(STEP [a b {c}] )]
PASS: Executing [(STEP [a b {c}] )] set error code to 4
INFO: Executing [(STEP [a b {c}] )] set error string to [STEP doesn't like {c} as input]
INFO: Executing invalid instruction: [(STEP [[a b {c}]] )]
PASS: Executing [(STEP [[a b {c}]] )] set error code to 4
INFO: Executing [(STEP [[a b {c}]] )] set error string to [STEP doesn't like {c} as input]
INFO: Executing invalid instruction: [(STEP [[a] [b] [c] [d]] )]
PASS: Executing [(STEP [[a] [b] [c] [d]] )] set error code to 4
INFO: Executing [(STEP [[a] [b] [c] [d]] )] set error string to [STEP doesn't like [[a] [b] [c] [d]] as input]
INFO: Executing invalid instruction: [(STEP [[[a]]] )]
PASS: Executing [(STEP [[[a]]] )] set error code to 4
INFO: Executing [(STEP [[[a]]] )] set error string to [STEP doesn't like [a] as input]
CALL: (UNSTEP [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Executing invalid instruction: [(UNSTEP)]
PASS: Executing [(UNSTEP)] set error code to 6 , as expected
INFO: Executing [(UNSTEP)] set error string to [not enough inputs to UNSTEP]
INFO: Executing invalid instruction: [(UNSTEP "name "toomany)]
PASS: Executing [(UNSTEP "name "toomany)] set error code to 8 , as expected
INFO: Executing [(UNSTEP "name "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(UNSTEP {name} )]
PASS: Executing [(UNSTEP {name} )] set error code to 4
INFO: Executing [(UNSTEP {name} )] set error string to [UNSTEP doesn't like {name} as input]
INFO: Executing invalid instruction: [(UNSTEP [[] [] {}] )]
PASS: Executing [(UNSTEP [[] [] {}] )] set error code to 4
INFO: Executing [(UNSTEP [[] [] {}] )] set error string to [UNSTEP doesn't like {} as input]
INFO: Executing invalid instruction: [(UNSTEP [word word {array}] )]
PASS: Executing [(UNSTEP [word word {array}] )] set error code to 4
INFO: Executing [(UNSTEP [word word {array}] )] set error string to [UNSTEP doesn't like {array} as input]
INFO: Executing invalid instruction: [(UNSTEP [[] [] [] []] )]
PASS: Executing [(UNSTEP [[] [] [] []] )] set error code to 4
INFO: Executing [(UNSTEP [[] [] [] []] )] set error string to [UNSTEP doesn't like [[] [] [] []] as input]
INFO: Executing invalid instruction: [(UNSTEP [[a] [b] {c}] )]
PASS: Executing [(UNSTEP [[a] [b] {c}] )] set error code to 4
INFO: Executing [(UNSTEP [[a] [b] {c}] )] set error string to [UNSTEP doesn't like {c} as input]
INFO: Executing invalid instruction: [(UNSTEP [a b {c}] )]
PASS: Executing [(UNSTEP [a b {c}] )] set error code to 4
INFO: Executing [(UNSTEP [a b {c}] )] set error string to [UNSTEP doesn't like {c} as input]
INFO: Executing invalid instruction: [(UNSTEP [[a b {c}]] )]
PASS: Executing [(UNSTEP [[a b {c}]] )] set error code to 4
INFO: Executing [(UNSTEP [[a b {c}]] )] set error string to [UNSTEP doesn't like {c} as input]
INFO: Executing invalid instruction: [(UNSTEP [[a] [b] [c] [d]] )]
PASS: Executing [(UNSTEP [[a] [b] [c] [d]] )] set error code to 4
INFO: Executing [(UNSTEP [[a] [b] [c] [d]] )] set error string to [UNSTEP doesn't like [[a] [b] [c] [d]] as input]
INFO: Executing invalid instruction: [(UNSTEP [[[a]]] )]
PASS: Executing [(UNSTEP [[[a]]] )] set error code to 4
INFO: Executing [(UNSTEP [[[a]]] )] set error string to [UNSTEP doesn't like [a] as input]
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE (ITEM 1 BURIED)] returned false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE PROCEDURES] returned true , as expected.
CALL: BURY "BURYTEST.BURIEDPROCEDURE
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE (ITEM 1 BURIED)] returned true , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE PROCEDURES] returned false , as expected.
CALL: BURYTEST.BURIEDPROCEDURE
CALL: UNBURY "BURYTEST.BURIEDPROCEDURE
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE (ITEM 1 BURIED)] returned false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPROCEDURE PROCEDURES] returned true , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 BURIED)] returned false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 NAMES)] returned true , as expected.
CALL: BURY NAMELIST "BURYTEST.BURIEDVARIABLE
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 BURIED)] returned true , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 NAMES)] returned false , as expected.
PASS: [:BURYTEST.BURIEDVARIABLE = 123] returned true , as expected.
CALL: UNBURY NAMELIST "BURYTEST.BURIEDVARIABLE
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 BURIED)] returned false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDVARIABLE (ITEM 2 NAMES)] returned true , as expected.
CALL: PPROP "BURYTEST.BURIEDPLIST "SOMEPROPERTY 123
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 BURIED)] returned false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 PLISTS)] returned true , as expected.
CALL: BURY PLLIST "BURYTEST.BURIEDPLIST
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 BURIED)] returned true , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 PLISTS)] returned false , as expected.
PASS: [GPROP "BURYTEST.BURIEDPLIST "SOMEPROPERTY] returned 123 , as expected.
CALL: UNBURY PLLIST "BURYTEST.BURIEDPLIST
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 BURIED)] returned false , as expected.
PASS: [MEMBERP "BURYTEST.BURIEDPLIST (ITEM 3 PLISTS)] returned true , as expected.
INFO: Executing invalid instruction: [(BURIED "toomany)]
PASS: Executing [(BURIED "toomany)] set error code to 8 , as expected
INFO: Executing [(BURIED "toomany)] set error string to [too much inside ()'s]
CALL: (BURY [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Executing invalid instruction: [(BURY)]
PASS: Executing [(BURY)] set error code to 6 , as expected
INFO: Executing [(BURY)] set error string to [not enough inputs to BURY]
INFO: Executing invalid instruction: [(BURY "name "toomany)]
PASS: Executing [(BURY "name "toomany)] set error code to 8 , as expected
INFO: Executing [(BURY "name "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(BURY {name} )]
PASS: Executing [(BURY {name} )] set error code to 4
INFO: Executing [(BURY {name} )] set error string to [BURY doesn't like {name} as input]
INFO: Executing invalid instruction: [(BURY [[a] [b] {c}] )]
PASS: Executing [(BURY [[a] [b] {c}] )] set error code to 4
INFO: Executing [(BURY [[a] [b] {c}] )] set error string to [BURY doesn't like {c} as input]
INFO: Executing invalid instruction: [(BURY [a b {c}] )]
PASS: Executing [(BURY [a b {c}] )] set error code to 4
INFO: Executing [(BURY [a b {c}] )] set error string to [BURY doesn't like {c} as input]
INFO: Executing invalid instruction: [(BURY [[a b {c}]] )]
PASS: Executing [(BURY [[a b {c}]] )] set error code to 4
INFO: Executing [(BURY [[a b {c}]] )] set error string to [BURY doesn't like {c} as input]
INFO: Executing invalid instruction: [(BURY [[a] [b] [c] [d]] )]
PASS: Executing [(BURY [[a] [b] [c] [d]] )] set error code to 4
INFO: Executing [(BURY [[a] [b] [c] [d]] )] set error string to [BURY doesn't like [[a] [b] [c] [d]] as input]
INFO: Executing invalid instruction: [(BURY [[[a]]] )]
PASS: Executing [(BURY [[[a]]] )] set error code to 4
INFO: Executing [(BURY [[[a]]] )] set error string to [BURY doesn't like [a] as input]
CALL: (UNBURY [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Executing invalid instruction: [(UNBURY)]
PASS: Executing [(UNBURY)] set error code to 6 , as expected
INFO: Executing [(UNBURY)] set error string to [not enough inputs to UNBURY]
INFO: Executing invalid instruction: [(UNBURY "name "toomany)]
PASS: Executing [(UNBURY "name "toomany)] set error code to 8 , as expected
INFO: Executing [(UNBURY "name "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(UNBURY {name} )]
PASS: Executing [(UNBURY {name} )] set error code to 4
INFO: Executing [(UNBURY {name} )] set error string to [UNBURY doesn't like {name} as input]
INFO: Executing invalid instruction: [(UNBURY [[a] [b] {c}] )]
PASS: Executing [(UNBURY [[a] [b] {c}] )] set error code to 4
INFO: Executing [(UNBURY [[a] [b] {c}] )] set error string to [UNBURY doesn't like {c} as input]
INFO: Executing invalid instruction: [(UNBURY [a b {c}] )]
PASS: Executing [(UNBURY [a b {c}] )] set error code to 4
INFO: Executing [(UNBURY [a b {c}] )] set error string to [UNBURY doesn't like {c} as input]
INFO: Executing invalid instruction: [(UNBURY [[a b {c}]] )]
PASS: Executing [(UNBURY [[a b {c}]] )] set error code to 4
INFO: Executing [(UNBURY [[a b {c}]] )] set error string to [UNBURY doesn't like {c} as input]
INFO: Executing invalid instruction: [(UNBURY [[a] [b] [c] [d]] )]
PASS: Executing [(UNBURY [[a] [b] [c] [d]] )] set error code to 4
INFO: Executing [(UNBURY [[a] [b] [c] [d]] )] set error string to [UNBURY doesn't like [[a] [b] [c] [d]] as input]
INFO: Executing invalid instruction: [(UNBURY [[[a]]] )]
PASS: Executing [(UNBURY [[[a]]] )] set error code to 4
INFO: Executing [(UNBURY [[[a]]] )] set error string to [UNBURY doesn't like [a] as input]
INFO: Executing invalid instruction: [(BURYALL "toomany)]
PASS: Executing [(BURYALL "toomany)] set error code to 8 , as expected
INFO: Executing [(BURYALL "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(UNBURYALL "toomany)]
PASS: Executing [(UNBURYALL "toomany)] set error code to 8 , as expected
INFO: Executing [(UNBURYALL "toomany)] set error string to [too much inside ()'s]
CALL: BURYALL
FAIL: [BURIED] returned [[# #test .eqtest ?rest ` abs abstest activeareatest andtest angleiscloseenough applytest applytest.applyoutput applytest.badinput applytest.bug1519088 applytest.nonprimitive applytest.nooutput applytest.smoketest arc arc2 arcbadinputtest arccostest arcsintest arcsmoketest arctantest arctest arraybadinputtest arrayorigintest arrayptest arraysmoketest arraytest arraytolist asciitest ashifttest.badinput ashifttest.smoketest beforeptest bitandtest.badinput bitandtest.smoketest bitcopytest bitloadsizetest bitmaptest bitnottest.badinput bitnottest.smoketest bitortest.badinput bitortest.smoketest bitpastetoindextest.badinput bitpastetoindextest.smoketest bitwisetest bitxortest.badinput bitxortest.smoketest bug1349374test bug1377856test bug1383281test bug1384267test bug1388325test bug1397560test bug1429960test bug1448155test bug1458661test buryall burytest burytest.badinput burytest.buriedprocedure burytest.buryall burytest.procedure burytest.propertylist burytest.variable butfirststest butfirststest.badinput butfirststest.smoketest butfirsttest butlasttest buttonptest cascade cascade.eval cascade.setup cascade1 chdirtest circle circle2 client.onreadytosend colorsetgettest colortest combine controlflowtest copydefmaybeoutputtest copydefoptest copydefoutputtest copydefstoptest copydeftest copydeftotest costest definetest definetest.badinput definetest.smoketest dequeue differencetest difficultcomments dir directorysmoketest directorytest dllcalltest dllfreetest dllloadtest dllsmoketest dlltest donothing doorientationtest echo edall edalltest editortest ellipsa2 ellipsearc2 emptyptest equalptest erasetest erasetest.badinput erasetest.eraseall erasetest.eraseprocedure erasetest.erasepropertylist erasetest.erasevariable erasetest.ern erasetest.erpl erracttest erracttest.bug1517326 erracttest.bug1517326.continue5 erracttest.output.5 erracttest.smoketest error.30.test errortest errortest.checkerror exptest filetest filetest.allopen filetest.badinput filetest.closeall filetest.dribble filetest.erasefile filetest.openappend filetest.opendirectoryasfile filetest.openopenfile filetest.openupdate filetest.setreadpos filetest.setwritepos filetest.smoketest filltest filltimerevent firststest firststest.badinput firststest.smoketest firsttest floodcolortest fontfacenamestest fontfacenamestest.badinput fontfacenamestest.manualtest fontfacenamestest.smoketest for for.done foreach foreach.done foreach1 forloop formtest forstep fulltexttest fulltexttest.badinput fulltexttest.smoketest helptest i.dont.know.what.to.do.with.value icon iftest ignore inporttest inttest iseq iseq.integer? iseq1 iseqtest labelbadinputtest labelcircletest labeltest largeedittest lasttest listptest listtest listtest.smoketest listtoarray listtoarray1 lntest loadtest localmake localvartest log10test logictest logoversiontest logoversiontest.badinput logoversiontest.smoketest lshifttest.badinput lshifttest.smoketest macro.return.unbound.instead.of.list macrotest macrotest.outputnothing map map1 mathtest memberptest miditest miditest.badinput miditest.devicezero miditest.longformat miditest.playtune miditest.smoketest minustest misctest mkdirtest modulotest mousetest mousetest.badinput mousetest.simpletest my.proc.to.step myadd myaddcopy mymacro namelist networktest networktest.client.echo networktest.client.receivelargepacket networktest.client.receiveunframedpacket networktest.client.shutdownrace networktest.client.smoketest networktest.hostname networktest.netshutdowncrash networktest.server.receiveunframedpacket networktest.server.shutdownrace networktest.server.twoconnections networktest.servercommand networktest.smoketest no.input.no.output nodestest nottest numberptest one.input.no.output orientation orientationtest ortest outporttest output.373 parsetest parsetest.expression parsetest.func parsetest.number parsetest.word pasteincircle pen pencolortest penmodetest pentest penupdowntest perspectivetest pi pitest plisttest pllist poall pon pons pop popl popls pops porttest pots powertest predicatetest procedure.shadows.myshadowedvar procedure.with.to.inside.it procedureinworkingdirectory proceduretest proceduretest.complexproc producttest push queue queuetest queuetest.badinput queuetest.circulartest queuetest.smoketest quoted quotedtest quotedtest.badinput quotedtest.smoketest quotienttest radarccostest radarcsintest radarctantest radcostest radsintest radtantest rawasciitest remaindertest repcounttest repcounttest.badinput repcounttest.smoketest repcounttest.timercallback repcounttest.timertest repeattest repeattest.badinput repeattest.outputinrepeat repeattest.smoketest repeattest.stopinrepeat reporttest reporttestfailed reporttestinfo reporttestinitialize reporttestpassed reporttestuninitialize rmdirtest roundtest runbadinputtest runexpecterrortest runfilesystemerrortest runhasnovaluetest runidontknowhowtotest runisaprimitivetest runnonrecoverableidontknowhowtotest runnotenoughinputstest runtest runtoomanyinputstest sampleproc screencolortest screentest scrunchtest sentencetest sentencetest.badinput sentencetest.noalias sentencetest.smoketest setitemtest setlabelfonttest setorientation setrandomorientation settextfont shellscripttest sign signtest simplereporttest sintest sort sort.listtoword sort.merge sort.mergepairwise sort.mergesort sort.wordtolist sorttest sorttest.after? sorttest.badinput sorttest.nonpredicate sorttest.oneinputbydefault sorttest.oneinputproc sorttest.performance sorttest.regression sorttest.sortbylegs sorttest.sortbyname sorttest.threeinputproc soundtest soundtest.badinput soundtest.frequency.a4 soundtest.frequency.b4 soundtest.frequency.c4 soundtest.frequency.c5 soundtest.frequency.d4 soundtest.frequency.d5 soundtest.frequency.e4 soundtest.frequency.f4 soundtest.frequency.g4 soundtest.sound soundtest.tone sqrttest stacktest stacktest.badinput stacktest.circulartest stacktest.smoketest steptest steptest.badinput steptest.procedure steptest.propertylist steptest.shadowvariable steptest.stepall steptest.steppedprocedure steptest.variable sumtest tantest testall testlib.repeatword texttest texttest.badinput texttest.smoketest timecommand timewait traceinstruction tracetest tracetest.badinput tracetest.function tracetest.procedure tracetest.propertylist tracetest.traceall tracetest.tracedfunction tracetest.tracedprocedure tracetest.variable unburyall unicon waittest windowfileedittest windowfileedittest.bug1330752 windowfileedittest.longfilename windowsettest windowstest windowstest.button windowstest.button.badinput windowstest.checkbox windowstest.checkbox.badinput windowstest.checkbox.deletegroupbox windowstest.combobox windowstest.combobox.badinput windowstest.debugwindows windowstest.debugwindows.badinput windowstest.debugwindows.stress windowstest.dialog.badinput windowstest.dialog.badinput.fromcallback windowstest.dialog.smoketest windowstest.groupbox windowstest.groupbox.badinput windowstest.listbox windowstest.listbox.badinput windowstest.mainwindow.smoketest windowstest.radiobutton windowstest.radiobutton.badinput windowstest.radiobutton.deletegroupbox windowstest.regressiontest windowstest.scrollbar windowstest.scrollbar.badinput windowstest.setup windowstest.static windowstest.static.badinput windowstest.window.badinput windowstest.window.smoketest windowtest wordproctest wordptest wordtest xcor ycor yesnoboxtest yesnoboxtest.badinput yesnoboxtest.smoketest ~ignoreme ~ignoremewascalled] [caseignoredp errortest.array instruction isok realcontents savedburied startup string testlog thesum tracetest.tracedplist ~ignoremewascalled] [burytest.buriedplist steptest.steppedplist tracetest.tracedplist]] . We expected [[# #test .eqtest ?rest ` abs abstest activeareatest andtest angleiscloseenough applytest applytest.applyoutput applytest.badinput applytest.bug1519088 applytest.nonprimitive applytest.nooutput applytest.smoketest arc arc2 arcbadinputtest arccostest arcsintest arcsmoketest arctantest arctest arraybadinputtest arrayorigintest arrayptest arraysmoketest arraytest arraytolist asciitest ashifttest.badinput ashifttest.smoketest beforeptest bitandtest.badinput bitandtest.smoketest bitcopytest bitloadsizetest bitmaptest bitnottest.badinput bitnottest.smoketest bitortest.badinput bitortest.smoketest bitpastetoindextest.badinput bitpastetoindextest.smoketest bitwisetest bitxortest.badinput bitxortest.smoketest bug1349374test bug1377856test bug1383281test bug1384267test bug1388325test bug1397560test bug1429960test bug1448155test bug1458661test buryall burytest burytest.badinput burytest.buriedprocedure burytest.buryall burytest.procedure burytest.propertylist burytest.variable butfirststest butfirststest.badinput butfirststest.smoketest butfirsttest butlasttest buttonptest cascade cascade.eval cascade.setup cascade1 chdirtest circle circle2 client.onreadytosend colorsetgettest colortest combine controlflowtest copydefmaybeoutputtest copydefoptest copydefoutputtest copydefstoptest copydeftest copydeftotest costest definetest definetest.badinput definetest.smoketest dequeue differencetest difficultcomments dir directorysmoketest directorytest dllcalltest dllfreetest dllloadtest dllsmoketest dlltest donothing doorientationtest echo edall edalltest editortest ellipsa2 ellipsearc2 emptyptest equalptest erasetest erasetest.badinput erasetest.eraseall erasetest.eraseprocedure erasetest.erasepropertylist erasetest.erasevariable erasetest.ern erasetest.erpl erracttest erracttest.bug1517326 erracttest.bug1517326.continue5 erracttest.output.5 erracttest.smoketest error.30.test errortest errortest.checkerror exptest filetest filetest.allopen filetest.badinput filetest.closeall filetest.dribble filetest.erasefile filetest.openappend filetest.opendirectoryasfile filetest.openopenfile filetest.openupdate filetest.setreadpos filetest.setwritepos filetest.smoketest filltest filltimerevent firststest firststest.badinput firststest.smoketest firsttest floodcolortest fontfacenamestest fontfacenamestest.badinput fontfacenamestest.manualtest fontfacenamestest.smoketest for for.done foreach foreach.done foreach1 forloop formtest forstep fulltexttest fulltexttest.badinput fulltexttest.smoketest helptest i.dont.know.what.to.do.with.value icon iftest ignore inporttest inttest iseq iseq.integer? iseq1 iseqtest labelbadinputtest labelcircletest labeltest largeedittest lasttest listptest listtest listtest.smoketest listtoarray listtoarray1 lntest loadtest localmake localvartest log10test logictest logoversiontest logoversiontest.badinput logoversiontest.smoketest lshifttest.badinput lshifttest.smoketest macro.return.unbound.instead.of.list macrotest macrotest.outputnothing map map1 mathtest memberptest miditest miditest.badinput miditest.devicezero miditest.longformat miditest.playtune miditest.smoketest minustest misctest mkdirtest modulotest mousetest mousetest.badinput mousetest.simpletest my.proc.to.step myadd myaddcopy mymacro namelist networktest networktest.client.echo networktest.client.receivelargepacket networktest.client.receiveunframedpacket networktest.client.shutdownrace networktest.client.smoketest networktest.hostname networktest.netshutdowncrash networktest.server.receiveunframedpacket networktest.server.shutdownrace networktest.server.twoconnections networktest.servercommand networktest.smoketest no.input.no.output nodestest nottest numberptest one.input.no.output orientation orientationtest ortest outporttest output.373 parsetest parsetest.expression parsetest.func parsetest.number parsetest.word pasteincircle pen pencolortest penmodetest pentest penupdowntest perspectivetest pi pitest plisttest pllist poall pon pons pop popl popls pops porttest pots powertest predicatetest procedure.shadows.myshadowedvar procedure.with.to.inside.it procedureinworkingdirectory proceduretest proceduretest.complexproc producttest push queue queuetest queuetest.badinput queuetest.circulartest queuetest.smoketest quoted quotedtest quotedtest.badinput quotedtest.smoketest quotienttest radarccostest radarcsintest radarctantest radcostest radsintest radtantest rawasciitest remaindertest repcounttest repcounttest.badinput repcounttest.smoketest repcounttest.timercallback repcounttest.timertest repeattest repeattest.badinput repeattest.outputinrepeat repeattest.smoketest repeattest.stopinrepeat reporttest reporttestfailed reporttestinfo reporttestinitialize reporttestpassed reporttestuninitialize rmdirtest roundtest runbadinputtest runexpecterrortest runfilesystemerrortest runhasnovaluetest runidontknowhowtotest runisaprimitivetest runnonrecoverableidontknowhowtotest runnotenoughinputstest runtest runtoomanyinputstest sampleproc screencolortest screentest scrunchtest sentencetest sentencetest.badinput sentencetest.noalias sentencetest.smoketest setitemtest setlabelfonttest setorientation setrandomorientation settextfont shellscripttest sign signtest simplereporttest sintest sort sort.listtoword sort.merge sort.mergepairwise sort.mergesort sort.wordtolist sorttest sorttest.after? sorttest.badinput sorttest.nonpredicate sorttest.oneinputbydefault sorttest.oneinputproc sorttest.performance sorttest.regression sorttest.sortbylegs sorttest.sortbyname sorttest.threeinputproc soundtest soundtest.badinput soundtest.frequency.a4 soundtest.frequency.b4 soundtest.frequency.c4 soundtest.frequency.c5 soundtest.frequency.d4 soundtest.frequency.d5 soundtest.frequency.e4 soundtest.frequency.f4 soundtest.frequency.g4 soundtest.sound soundtest.tone sqrttest stacktest stacktest.badinput stacktest.circulartest stacktest.smoketest steptest steptest.badinput steptest.procedure steptest.propertylist steptest.shadowvariable steptest.stepall steptest.steppedprocedure steptest.variable sumtest tantest testall testlib.repeatword texttest texttest.badinput texttest.smoketest timecommand timewait traceinstruction tracetest tracetest.badinput tracetest.function tracetest.procedure tracetest.propertylist tracetest.traceall tracetest.tracedfunction tracetest.tracedprocedure tracetest.variable unburyall unicon waittest windowfileedittest windowfileedittest.bug1330752 windowfileedittest.longfilename windowsettest windowstest windowstest.button windowstest.button.badinput windowstest.checkbox windowstest.checkbox.badinput windowstest.checkbox.deletegroupbox windowstest.combobox windowstest.combobox.badinput windowstest.debugwindows windowstest.debugwindows.badinput windowstest.debugwindows.stress windowstest.dialog.badinput windowstest.dialog.badinput.fromcallback windowstest.dialog.smoketest windowstest.groupbox windowstest.groupbox.badinput windowstest.listbox windowstest.listbox.badinput windowstest.mainwindow.smoketest windowstest.radiobutton windowstest.radiobutton.badinput windowstest.radiobutton.deletegroupbox windowstest.regressiontest windowstest.scrollbar windowstest.scrollbar.badinput windowstest.setup windowstest.static windowstest.static.badinput windowstest.window.badinput windowstest.window.smoketest windowtest wordproctest wordptest wordtest xcor ycor yesnoboxtest yesnoboxtest.badinput yesnoboxtest.smoketest ~ignoreme ~ignoremewascalled] [caseignoredp erract errortest.array instruction isok realcontents savedburied startup string testlog thesum tracetest.tracedplist ~ignoremewascalled] [burytest.buriedplist steptest.steppedplist tracetest.tracedplist]]
PASS: CONTENTS did not return [[] [] []]
INFO: Called UNBURYALL
PASS: [BURIED] returned [[] [] []] , as expected.
CALL: ERASETEST.ERASEDPROCEDURE
PASS: [PROCEDURE? "ERASETEST.ERASEDPROCEDURE] returned true , as expected.
PASS: [MEMBER? "ERASETEST.ERASEDPROCEDURE (ITEM 1 CONTENTS)] returned true , as expected.
CALL: ERASE "ERASETEST.ERASEDPROCEDURE
INFO: Executing invalid instruction: [ERASETEST.ERASEDPROCEDUE]
PASS: Executing [ERASETEST.ERASEDPROCEDUE] set error code to 13 , as expected
INFO: Executing [ERASETEST.ERASEDPROCEDUE] set error string to [I don't know how to ERASETEST.ERASEDPROCEDUE]
PASS: [PROCEDURE? "ERASETEST.ERASEDPROCEDURE] returned false , as expected.
PASS: [MEMBER? "ERASETEST.ERASEDPROCEDURE (ITEM 1 CONTENTS)] returned false , as expected.
PASS: [MEMBERP "ERASETEST.VARIABLE (ITEM 2 NAMES)] returned true , as expected.
CALL: ERASE NAMELIST "ERASETEST.BURIEDVARIABLE
PASS: [MEMBERP "ERASETEST.BURIEDVARIABLE (ITEM 2 NAMES)] returned false , as expected.
INFO: Executing invalid instruction: [:ERASETEST.BURIEDVARIABLE = 123]
PASS: Executing [:ERASETEST.BURIEDVARIABLE = 123] set error code to 11 , as expected
INFO: Executing [:ERASETEST.BURIEDVARIABLE = 123] set error string to [ERASETEST.BURIEDVARIABLE has no value]
CALL: PPROP "ERASETEST.ERASEDPLIST "SOMEPROPERTY 123
PASS: [GPROP "ERASETEST.ERASEDPLIST "SOMEPROPERTY] returned 123 , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST (ITEM 3 PLISTS)] returned true , as expected.
CALL: ERASE PLLIST "ERASETEST.ERASEDPLIST
PASS: [GPROP "ERASETEST.ERASEDPLIST "SOMEPROPERTY] returned [] , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST (ITEM 3 PLISTS)] returned false , as expected.
PASS: [MEMBERP "ERASETEST.VARIABLE1 (ITEM 2 NAMES)] returned true , as expected.
PASS: [MEMBERP "ERASETEST.VARIABLE2 (ITEM 2 NAMES)] returned true , as expected.
CALL: ERN [ERASETEST.VARIABLE1 ERASETEST.VARIABLE2]
PASS: [MEMBERP "ERASETEST.VARIABLE1 (ITEM 2 NAMES)] returned false , as expected.
PASS: [MEMBERP "ERASETEST.VARIABLE2 (ITEM 2 NAMES)] returned false , as expected.
INFO: Executing invalid instruction: [:ERASETEST.VARIABLE1 = 123]
PASS: Executing [:ERASETEST.VARIABLE1 = 123] set error code to 11 , as expected
INFO: Executing [:ERASETEST.VARIABLE1 = 123] set error string to [ERASETEST.VARIABLE1 has no value]
INFO: Executing invalid instruction: [:ERASETEST.VARIABLE2 = 321]
PASS: Executing [:ERASETEST.VARIABLE2 = 321] set error code to 11 , as expected
INFO: Executing [:ERASETEST.VARIABLE2 = 321] set error string to [ERASETEST.VARIABLE2 has no value]
CALL: PPROP "ERASETEST.ERASEDPLIST1 "SOMEPROPERTY 123
CALL: PPROP "ERASETEST.ERASEDPLIST2 "SOMEPROPERTY 321
PASS: [GPROP "ERASETEST.ERASEDPLIST1 "SOMEPROPERTY] returned 123 , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST1 (ITEM 3 PLISTS)] returned true , as expected.
PASS: [GPROP "ERASETEST.ERASEDPLIST2 "SOMEPROPERTY] returned 321 , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST2 (ITEM 3 PLISTS)] returned true , as expected.
CALL: ERPL [ERASETEST.ERASEDPLIST1 ERASETEST.ERASEDPLIST2]
PASS: [GPROP "ERASETEST.ERASEDPLIST1 "SOMEPROPERTY] returned [] , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST1 (ITEM 3 PLISTS)] returned false , as expected.
PASS: [GPROP "ERASETEST.ERASEDPLIST2 "SOMEPROPERTY] returned [] , as expected.
PASS: [MEMBERP "ERASETEST.ERASEDPLIST2 (ITEM 3 PLISTS)] returned false , as expected.
CALL: (ERASE [[nonexistent] [nonexistent] [nonexistent]] )
INFO: Executing invalid instruction: [(ERASE)]
PASS: Executing [(ERASE)] set error code to 6 , as expected
INFO: Executing [(ERASE)] set error string to [not enough inputs to ERASE]
INFO: Executing invalid instruction: [(ERASE "name "toomany)]
PASS: Executing [(ERASE "name "toomany)] set error code to 8 , as expected
INFO: Executing [(ERASE "name "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ERASE {name} )]
PASS: Executing [(ERASE {name} )] set error code to 4
INFO: Executing [(ERASE {name} )] set error string to [ERASE doesn't like {name} as input]
INFO: Executing invalid instruction: [(ERASE [[a] [b] {c}] )]
PASS: Executing [(ERASE [[a] [b] {c}] )] set error code to 4
INFO: Executing [(ERASE [[a] [b] {c}] )] set error string to [ERASE doesn't like {c} as input]
INFO: Executing invalid instruction: [(ERASE [a b {c}] )]
PASS: Executing [(ERASE [a b {c}] )] set error code to 4
INFO: Executing [(ERASE [a b {c}] )] set error string to [ERASE doesn't like {c} as input]
INFO: Executing invalid instruction: [(ERASE [[a b {c}]] )]
PASS: Executing [(ERASE [[a b {c}]] )] set error code to 4
INFO: Executing [(ERASE [[a b {c}]] )] set error string to [ERASE doesn't like {c} as input]
INFO: Executing invalid instruction: [(ERASE [[a] [b] [c] [d]] )]
PASS: Executing [(ERASE [[a] [b] [c] [d]] )] set error code to 4
INFO: Executing [(ERASE [[a] [b] [c] [d]] )] set error string to [ERASE doesn't like [[a] [b] [c] [d]] as input]
INFO: Executing invalid instruction: [(ERASE [[[a]]] )]
PASS: Executing [(ERASE [[[a]]] )] set error code to 4
INFO: Executing [(ERASE [[[a]]] )] set error string to [ERASE doesn't like [a] as input]
INFO: Executing invalid instruction: [ERASE "FORWARD]
PASS: Executing [ERASE "FORWARD] set error code to 22 , as expected
INFO: Executing [ERASE "FORWARD] set error string to [FORWARD is a primitive]
INFO: Executing invalid instruction: [(ERALL 10)]
PASS: Executing [(ERALL 10)] set error code to 7
INFO: Executing [(ERALL 10)] set error string to [if doesn't like 10 as input]
INFO: Executing invalid instruction: [(ERALL [] )]
PASS: Executing [(ERALL [] )] set error code to 7
INFO: Executing [(ERALL [] )] set error string to [if doesn't like [] as input]
INFO: Executing invalid instruction: [(ERALL {a} )]
PASS: Executing [(ERALL {a} )] set error code to 7
INFO: Executing [(ERALL {a} )] set error string to [if doesn't like {a} as input]
INFO: Executing invalid instruction: [(ERALL "no)]
PASS: Executing [(ERALL "no)] set error code to 7
INFO: Executing [(ERALL "no)] set error string to [if doesn't like no as input]
INFO: Executing invalid instruction: [(ERALL "false "toomany)]
PASS: Executing [(ERALL "false "toomany)] set error code to 8 , as expected
INFO: Executing [(ERALL "false "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ERPS "toomany)]
PASS: Executing [(ERPS "toomany)] set error code to 8 , as expected
INFO: Executing [(ERPS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ERNS "toomany)]
PASS: Executing [(ERNS "toomany)] set error code to 8 , as expected
INFO: Executing [(ERNS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ERPLS "toomany)]
PASS: Executing [(ERPLS "toomany)] set error code to 8 , as expected
INFO: Executing [(ERPLS "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ERN)]
PASS: Executing [(ERN)] set error code to 6 , as expected
INFO: Executing [(ERN)] set error string to [not enough inputs to ERN]
INFO: Executing invalid instruction: [(ERN "a "toomany)]
PASS: Executing [(ERN "a "toomany)] set error code to 8 , as expected
INFO: Executing [(ERN "a "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ERN {a} )]
PASS: Executing [(ERN {a} )] set error code to 21
INFO: Executing [(ERN {a} )] set error string to [namelist doesn't like {a} as input]
INFO: Executing invalid instruction: [(ERPL)]
PASS: Executing [(ERPL)] set error code to 6 , as expected
INFO: Executing [(ERPL)] set error string to [not enough inputs to ERPL]
INFO: Executing invalid instruction: [(ERPL "a "toomany)]
PASS: Executing [(ERPL "a "toomany)] set error code to 8 , as expected
INFO: Executing [(ERPL "a "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(ERPL {a} )]
PASS: Executing [(ERPL {a} )] set error code to 21
INFO: Executing [(ERPL {a} )] set error string to [pllist doesn't like {a} as input]
PASS: [PROCEDURE? "ERASETEST.ERASEALL] returned true , as expected.
CALL: MAKE "version LOGOVERSION
PASS: [LIST? :version] returned true , as expected.
PASS: [COUNT :version] returned 3 , as expected.
PASS: [ITEM 1 :version] returned FMSLogo , as expected.
PASS: [ITEM 2 :version] returned 6.9.0+ , as expected.
PASS: [ITEM 3 :version] returned Windows , as expected.
INFO: Executing invalid instruction: [(LOGOVERSION "toomany)]
PASS: Executing [(LOGOVERSION "toomany)] set error code to 8 , as expected
INFO: Executing [(LOGOVERSION "toomany)] set error string to [too much inside ()'s]
PASS: [QUOTED "Hello] returned "Hello , as expected.
PASS: [QUOTED "] returned " , as expected.
PASS: [QUOTED 123] returned "123 , as expected.
PASS: [QUOTED [1 2 3]] returned [1 2 3] , as expected.
PASS: [QUOTED :quotedtest.array] returned {1 2 3} , as expected.
INFO: Executing invalid instruction: [(QUOTED)]
PASS: Executing [(QUOTED)] set error code to 6 , as expected
INFO: Executing [(QUOTED)] set error string to [not enough inputs to QUOTED]
INFO: Executing invalid instruction: [(QUOTED "Hello "toomany)]
PASS: Executing [(QUOTED "Hello "toomany)] set error code to 8 , as expected
INFO: Executing [(QUOTED "Hello "toomany)] set error string to [too much inside ()'s]
PASS: [YESNOBOX [YESNOBOX Test] [Press "Yes"]] returned true , as expected.
PASS: [YESNOBOX [YESNOBOX Test] [Press "No"]] returned false , as expected.
INFO: Executing invalid instruction: [YESNOBOX [YESNOBOX Test] [Press "Cancel"]]
PASS: Executing [YESNOBOX [YESNOBOX Test] [Press "Cancel"]] set error code to 16
INFO: Executing [YESNOBOX [YESNOBOX Test] [Press "Cancel"]] set error string to [Stopping...]
INFO: Executing invalid instruction: [IGNORE (YESNOBOX [Title] )]
PASS: Executing [IGNORE (YESNOBOX [Title] )] set error code to 6 , as expected
INFO: Executing [IGNORE (YESNOBOX [Title] )] set error string to [not enough inputs to YESNOBOX]
INFO: Executing invalid instruction: [IGNORE (YESNOBOX [Title] [Question] "toomany)]
PASS: Executing [IGNORE (YESNOBOX [Title] [Question] "toomany)] set error code to 8 , as expected
INFO: Executing [IGNORE (YESNOBOX [Title] [Question] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(windowcreate "main "name [caption] 0 0 120 400)]
PASS: Executing [(windowcreate "main "name [caption] 0 0 120 400)] set error code to 6 , as expected
INFO: Executing [(windowcreate "main "name [caption] 0 0 120 400)] set error string to [not enough inputs to windowcreate]
INFO: Executing invalid instruction: [(windowcreate "main "name [caption] 0 0 120 400 [] "toomany)]
PASS: Executing [(windowcreate "main "name [caption] 0 0 120 400 [] "toomany)] set error code to 8 , as expected
INFO: Executing [(windowcreate "main "name [caption] 0 0 120 400 [] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [windowcreate "main "name10 [caption] [0] 0 120 400 []]
PASS: Executing [windowcreate "main "name10 [caption] [0] 0 120 400 []] set error code to 7
INFO: Executing [windowcreate "main "name10 [caption] [0] 0 120 400 []] set error string to [windowcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [windowcreate "main "name20 [caption] {0} 0 120 400 []]
PASS: Executing [windowcreate "main "name20 [caption] {0} 0 120 400 []] set error code to 7
INFO: Executing [windowcreate "main "name20 [caption] {0} 0 120 400 []] set error string to [windowcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [windowcreate "main "name25 [caption] 10.5 0 120 400 []]
PASS: Executing [windowcreate "main "name25 [caption] 10.5 0 120 400 []] set error code to 7
INFO: Executing [windowcreate "main "name25 [caption] 10.5 0 120 400 []] set error string to [windowcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [windowcreate "main "name30 [caption] 0 [0] 120 400 []]
PASS: Executing [windowcreate "main "name30 [caption] 0 [0] 120 400 []] set error code to 7
INFO: Executing [windowcreate "main "name30 [caption] 0 [0] 120 400 []] set error string to [windowcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [windowcreate "main "name40 [caption] 0 {0} 120 400 []]
PASS: Executing [windowcreate "main "name40 [caption] 0 {0} 120 400 []] set error code to 7
INFO: Executing [windowcreate "main "name40 [caption] 0 {0} 120 400 []] set error string to [windowcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [windowcreate "main "name45 [caption] 0 10.5 120 400 []]
PASS: Executing [windowcreate "main "name45 [caption] 0 10.5 120 400 []] set error code to 7
INFO: Executing [windowcreate "main "name45 [caption] 0 10.5 120 400 []] set error string to [windowcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [windowcreate "main "name50 [caption] 0 0 [120] 400 []]
PASS: Executing [windowcreate "main "name50 [caption] 0 0 [120] 400 []] set error code to 7
INFO: Executing [windowcreate "main "name50 [caption] 0 0 [120] 400 []] set error string to [windowcreate doesn't like [120] as input]
INFO: Executing invalid instruction: [windowcreate "main "name60 [caption] 0 0 {120} 400 []]
PASS: Executing [windowcreate "main "name60 [caption] 0 0 {120} 400 []] set error code to 7
INFO: Executing [windowcreate "main "name60 [caption] 0 0 {120} 400 []] set error string to [windowcreate doesn't like {120} as input]
INFO: Executing invalid instruction: [windowcreate "main "name70 [caption] 0 0 -120 400 []]
PASS: Executing [windowcreate "main "name70 [caption] 0 0 -120 400 []] set error code to 7
INFO: Executing [windowcreate "main "name70 [caption] 0 0 -120 400 []] set error string to [windowcreate doesn't like -120 as input]
INFO: Executing invalid instruction: [windowcreate "main "name75 [caption] 0 0 10.5 400 []]
PASS: Executing [windowcreate "main "name75 [caption] 0 0 10.5 400 []] set error code to 7
INFO: Executing [windowcreate "main "name75 [caption] 0 0 10.5 400 []] set error string to [windowcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [windowcreate "main "name80 [caption] 0 0 120 [400] []]
PASS: Executing [windowcreate "main "name80 [caption] 0 0 120 [400] []] set error code to 7
INFO: Executing [windowcreate "main "name80 [caption] 0 0 120 [400] []] set error string to [windowcreate doesn't like [400] as input]
INFO: Executing invalid instruction: [windowcreate "main "name90 [caption] 0 0 120 {400} []]
PASS: Executing [windowcreate "main "name90 [caption] 0 0 120 {400} []] set error code to 7
INFO: Executing [windowcreate "main "name90 [caption] 0 0 120 {400} []] set error string to [windowcreate doesn't like {400} as input]
INFO: Executing invalid instruction: [windowcreate "main "name00 [caption] 0 0 120 -400 []]
PASS: Executing [windowcreate "main "name00 [caption] 0 0 120 -400 []] set error code to 7
INFO: Executing [windowcreate "main "name00 [caption] 0 0 120 -400 []] set error string to [windowcreate doesn't like -400 as input]
INFO: Executing invalid instruction: [windowcreate "main "name05 [caption] 0 0 120 10.5 []]
PASS: Executing [windowcreate "main "name05 [caption] 0 0 120 10.5 []] set error code to 7
INFO: Executing [windowcreate "main "name05 [caption] 0 0 120 10.5 []] set error string to [windowcreate doesn't like 10.5 as input]
CALL: windowcreate "main "goodwindow [caption] 0 0 100 100 []
INFO: Executing invalid instruction: [windowcreate "main "goodwindow [newcaption] 0 0 100 100 []]
PASS: Executing [windowcreate "main "goodwindow [newcaption] 0 0 100 100 []] set error code to 16
INFO: Executing [windowcreate "main "goodwindow [newcaption] 0 0 100 100 []] set error string to [Stopping...]
INFO: Executing invalid instruction: [(windowenable "goodwindow)]
PASS: Executing [(windowenable "goodwindow)] set error code to 6 , as expected
INFO: Executing [(windowenable "goodwindow)] set error string to [not enough inputs to windowenable]
INFO: Executing invalid instruction: [(windowenable "goodwindow "true "toomany)]
PASS: Executing [(windowenable "goodwindow "true "toomany)] set error code to 8 , as expected
INFO: Executing [(windowenable "goodwindow "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [windowenable "nonexistent "true]
PASS: Executing [windowenable "nonexistent "true] set error code to 16
INFO: Executing [windowenable "nonexistent "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [windowenable "goodwindow 1]
PASS: Executing [windowenable "goodwindow 1] set error code to 7
INFO: Executing [windowenable "goodwindow 1] set error string to [windowenable doesn't like 1 as input]
INFO: Executing invalid instruction: [windowenable "goodwindow [true]]
PASS: Executing [windowenable "goodwindow [true]] set error code to 7
INFO: Executing [windowenable "goodwindow [true]] set error string to [windowenable doesn't like [true] as input]
INFO: Executing invalid instruction: [windowenable "goodwindow {true}]
PASS: Executing [windowenable "goodwindow {true}] set error code to 7
INFO: Executing [windowenable "goodwindow {true}] set error string to [windowenable doesn't like {true} as input]
INFO: Executing invalid instruction: [(windowdelete)]
PASS: Executing [(windowdelete)] set error code to 6 , as expected
INFO: Executing [(windowdelete)] set error string to [not enough inputs to windowdelete]
INFO: Executing invalid instruction: [(windowdelete "goodwindow "toomany)]
PASS: Executing [(windowdelete "goodwindow "toomany)] set error code to 8 , as expected
INFO: Executing [(windowdelete "goodwindow "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(dialogcreate "main "name [caption] 0 0 120 400)]
PASS: Executing [(dialogcreate "main "name [caption] 0 0 120 400)] set error code to 6 , as expected
INFO: Executing [(dialogcreate "main "name [caption] 0 0 120 400)] set error string to [not enough inputs to dialogcreate]
INFO: Executing invalid instruction: [(dialogcreate "main "name [caption] 0 0 120 400 [] "toomany)]
PASS: Executing [(dialogcreate "main "name [caption] 0 0 120 400 [] "toomany)] set error code to 8 , as expected
INFO: Executing [(dialogcreate "main "name [caption] 0 0 120 400 [] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [dialogcreate "main "name10 [caption] [0] 0 120 400 []]
PASS: Executing [dialogcreate "main "name10 [caption] [0] 0 120 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name10 [caption] [0] 0 120 400 []] set error string to [dialogcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [dialogcreate "main "name20 [caption] {0} 0 120 400 []]
PASS: Executing [dialogcreate "main "name20 [caption] {0} 0 120 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name20 [caption] {0} 0 120 400 []] set error string to [dialogcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [dialogcreate "main "name25 [caption] 10.5 0 120 400 []]
PASS: Executing [dialogcreate "main "name25 [caption] 10.5 0 120 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name25 [caption] 10.5 0 120 400 []] set error string to [dialogcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [dialogcreate "main "name30 [caption] 0 [0] 120 400 []]
PASS: Executing [dialogcreate "main "name30 [caption] 0 [0] 120 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name30 [caption] 0 [0] 120 400 []] set error string to [dialogcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [dialogcreate "main "name40 [caption] 0 {0} 120 400 []]
PASS: Executing [dialogcreate "main "name40 [caption] 0 {0} 120 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name40 [caption] 0 {0} 120 400 []] set error string to [dialogcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [dialogcreate "main "name45 [caption] 0 10.5 120 400 []]
PASS: Executing [dialogcreate "main "name45 [caption] 0 10.5 120 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name45 [caption] 0 10.5 120 400 []] set error string to [dialogcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [dialogcreate "main "name50 [caption] 0 0 [120] 400 []]
PASS: Executing [dialogcreate "main "name50 [caption] 0 0 [120] 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name50 [caption] 0 0 [120] 400 []] set error string to [dialogcreate doesn't like [120] as input]
INFO: Executing invalid instruction: [dialogcreate "main "name60 [caption] 0 0 {120} 400 []]
PASS: Executing [dialogcreate "main "name60 [caption] 0 0 {120} 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name60 [caption] 0 0 {120} 400 []] set error string to [dialogcreate doesn't like {120} as input]
INFO: Executing invalid instruction: [dialogcreate "main "name70 [caption] 0 0 -120 400 []]
PASS: Executing [dialogcreate "main "name70 [caption] 0 0 -120 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name70 [caption] 0 0 -120 400 []] set error string to [dialogcreate doesn't like -120 as input]
INFO: Executing invalid instruction: [dialogcreate "main "name75 [caption] 0 0 10.5 400 []]
PASS: Executing [dialogcreate "main "name75 [caption] 0 0 10.5 400 []] set error code to 7
INFO: Executing [dialogcreate "main "name75 [caption] 0 0 10.5 400 []] set error string to [dialogcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [dialogcreate "main "name80 [caption] 0 0 120 [400] []]
PASS: Executing [dialogcreate "main "name80 [caption] 0 0 120 [400] []] set error code to 7
INFO: Executing [dialogcreate "main "name80 [caption] 0 0 120 [400] []] set error string to [dialogcreate doesn't like [400] as input]
INFO: Executing invalid instruction: [dialogcreate "main "name90 [caption] 0 0 120 {400} []]
PASS: Executing [dialogcreate "main "name90 [caption] 0 0 120 {400} []] set error code to 7
INFO: Executing [dialogcreate "main "name90 [caption] 0 0 120 {400} []] set error string to [dialogcreate doesn't like {400} as input]
INFO: Executing invalid instruction: [dialogcreate "main "name00 [caption] 0 0 120 -400 []]
PASS: Executing [dialogcreate "main "name00 [caption] 0 0 120 -400 []] set error code to 7
INFO: Executing [dialogcreate "main "name00 [caption] 0 0 120 -400 []] set error string to [dialogcreate doesn't like -400 as input]
INFO: Executing invalid instruction: [dialogcreate "main "name05 [caption] 0 0 120 400.5 []]
PASS: Executing [dialogcreate "main "name05 [caption] 0 0 120 400.5 []] set error code to 7
INFO: Executing [dialogcreate "main "name05 [caption] 0 0 120 400.5 []] set error string to [dialogcreate doesn't like 400.5 as input]
CALL: dialogcreate "main "gooddialog [caption] 0 0 100 100 [WINDOWSTEST.DIALOG.BADINPUT.FROMCALLBACK]
CALL: listboxcreate "main "notadialog 0 100 100 100
INFO: Executing invalid instruction: [dialogcreate "main "gooddialog [newcaption] 0 0 100 100 []]
PASS: Executing [dialogcreate "main "gooddialog [newcaption] 0 0 100 100 []] set error code to 16
INFO: Executing [dialogcreate "main "gooddialog [newcaption] 0 0 100 100 []] set error string to [Stopping...]
INFO: Executing invalid instruction: [(dialogenable "gooddialog)]
PASS: Executing [(dialogenable "gooddialog)] set error code to 6 , as expected
INFO: Executing [(dialogenable "gooddialog)] set error string to [not enough inputs to dialogenable]
INFO: Executing invalid instruction: [(dialogenable "gooddialog "true "toomany)]
PASS: Executing [(dialogenable "gooddialog "true "toomany)] set error code to 8 , as expected
INFO: Executing [(dialogenable "gooddialog "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [dialogenable "nonexistent "true]
PASS: Executing [dialogenable "nonexistent "true] set error code to 16
INFO: Executing [dialogenable "nonexistent "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [dialogenable "notadialog "true]
PASS: Executing [dialogenable "notadialog "true] set error code to 16
INFO: Executing [dialogenable "notadialog "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [dialogenable "gooddialog 1]
PASS: Executing [dialogenable "gooddialog 1] set error code to 7
INFO: Executing [dialogenable "gooddialog 1] set error string to [dialogenable doesn't like 1 as input]
INFO: Executing invalid instruction: [dialogenable "gooddialog [true]]
PASS: Executing [dialogenable "gooddialog [true]] set error code to 7
INFO: Executing [dialogenable "gooddialog [true]] set error string to [dialogenable doesn't like [true] as input]
INFO: Executing invalid instruction: [dialogenable "gooddialog {true}]
PASS: Executing [dialogenable "gooddialog {true}] set error code to 7
INFO: Executing [dialogenable "gooddialog {true}] set error string to [dialogenable doesn't like {true} as input]
INFO: Executing invalid instruction: [(dialogdelete)]
PASS: Executing [(dialogdelete)] set error code to 6 , as expected
INFO: Executing [(dialogdelete)] set error string to [not enough inputs to dialogdelete]
INFO: Executing invalid instruction: [(dialogdelete "gooddialog "toomany)]
PASS: Executing [(dialogdelete "gooddialog "toomany)] set error code to 8 , as expected
INFO: Executing [(dialogdelete "gooddialog "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [dialogdelete "nonexistent]
PASS: Executing [dialogdelete "nonexistent] set error code to 16
INFO: Executing [dialogdelete "nonexistent] set error string to [Stopping...]
INFO: Executing invalid instruction: [dialogdelete "notadialog]
PASS: Executing [dialogdelete "notadialog] set error code to 16
INFO: Executing [dialogdelete "notadialog] set error string to [Stopping...]
CALL: dialogdelete "gooddialog
CALL: listboxdelete "notadialog
CALL: WINDOWCREATE "main "windowstest.static "mytitle 0 0 100 100 []
CALL: STATICCREATE "windowstest.static "static [Initial Value] 0 0 100 20
CALL: STATICCREATE "static "static2 [Initial Value] 0 0 100 20
CALL: STATICUPDATE "static [New Value]
CALL: STATICDELETE "static
CALL: STATICDELETE "static2
CALL: WINDOWDELETE "windowtest.static
INFO: Executing invalid instruction: [(staticcreate "main "name [caption] 0 0 120)]
PASS: Executing [(staticcreate "main "name [caption] 0 0 120)] set error code to 6 , as expected
INFO: Executing [(staticcreate "main "name [caption] 0 0 120)] set error string to [not enough inputs to staticcreate]
INFO: Executing invalid instruction: [(staticcreate "main "name [caption] 0 0 120 400 "toomany)]
PASS: Executing [(staticcreate "main "name [caption] 0 0 120 400 "toomany)] set error code to 8 , as expected
INFO: Executing [(staticcreate "main "name [caption] 0 0 120 400 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [staticcreate "main "name10 [caption] [0] 0 120 400]
PASS: Executing [staticcreate "main "name10 [caption] [0] 0 120 400] set error code to 7
INFO: Executing [staticcreate "main "name10 [caption] [0] 0 120 400] set error string to [staticcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [staticcreate "main "name20 [caption] {0} 0 120 400]
PASS: Executing [staticcreate "main "name20 [caption] {0} 0 120 400] set error code to 7
INFO: Executing [staticcreate "main "name20 [caption] {0} 0 120 400] set error string to [staticcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [staticcreate "main "name25 [caption] 10.5 0 120 400]
PASS: Executing [staticcreate "main "name25 [caption] 10.5 0 120 400] set error code to 7
INFO: Executing [staticcreate "main "name25 [caption] 10.5 0 120 400] set error string to [staticcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [staticcreate "main "name30 [caption] 0 [0] 120 400]
PASS: Executing [staticcreate "main "name30 [caption] 0 [0] 120 400] set error code to 7
INFO: Executing [staticcreate "main "name30 [caption] 0 [0] 120 400] set error string to [staticcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [staticcreate "main "name40 [caption] 0 {0} 120 400]
PASS: Executing [staticcreate "main "name40 [caption] 0 {0} 120 400] set error code to 7
INFO: Executing [staticcreate "main "name40 [caption] 0 {0} 120 400] set error string to [staticcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [staticcreate "main "name45 [caption] 0 10.5 120 400]
PASS: Executing [staticcreate "main "name45 [caption] 0 10.5 120 400] set error code to 7
INFO: Executing [staticcreate "main "name45 [caption] 0 10.5 120 400] set error string to [staticcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [staticcreate "main "name50 [caption] 0 0 [120] 400]
PASS: Executing [staticcreate "main "name50 [caption] 0 0 [120] 400] set error code to 7
INFO: Executing [staticcreate "main "name50 [caption] 0 0 [120] 400] set error string to [staticcreate doesn't like [120] as input]
INFO: Executing invalid instruction: [staticcreate "main "name60 [caption] 0 0 {120} 400]
PASS: Executing [staticcreate "main "name60 [caption] 0 0 {120} 400] set error code to 7
INFO: Executing [staticcreate "main "name60 [caption] 0 0 {120} 400] set error string to [staticcreate doesn't like {120} as input]
INFO: Executing invalid instruction: [staticcreate "main "name70 [caption] 0 0 -120 400]
PASS: Executing [staticcreate "main "name70 [caption] 0 0 -120 400] set error code to 7
INFO: Executing [staticcreate "main "name70 [caption] 0 0 -120 400] set error string to [staticcreate doesn't like -120 as input]
INFO: Executing invalid instruction: [staticcreate "main "name75 [caption] 0 0 10.5 400]
PASS: Executing [staticcreate "main "name75 [caption] 0 0 10.5 400] set error code to 7
INFO: Executing [staticcreate "main "name75 [caption] 0 0 10.5 400] set error string to [staticcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [staticcreate "main "name80 [caption] 0 0 120 [400]]
PASS: Executing [staticcreate "main "name80 [caption] 0 0 120 [400]] set error code to 7
INFO: Executing [staticcreate "main "name80 [caption] 0 0 120 [400]] set error string to [staticcreate doesn't like [400] as input]
INFO: Executing invalid instruction: [staticcreate "main "name90 [caption] 0 0 120 {400}]
PASS: Executing [staticcreate "main "name90 [caption] 0 0 120 {400}] set error code to 7
INFO: Executing [staticcreate "main "name90 [caption] 0 0 120 {400}] set error string to [staticcreate doesn't like {400} as input]
INFO: Executing invalid instruction: [staticcreate "main "name00 [caption] 0 0 120 -400]
PASS: Executing [staticcreate "main "name00 [caption] 0 0 120 -400] set error code to 7
INFO: Executing [staticcreate "main "name00 [caption] 0 0 120 -400] set error string to [staticcreate doesn't like -400 as input]
INFO: Executing invalid instruction: [staticcreate "main "name05 [caption] 0 0 120 10.5]
PASS: Executing [staticcreate "main "name05 [caption] 0 0 120 10.5] set error code to 7
INFO: Executing [staticcreate "main "name05 [caption] 0 0 120 10.5] set error string to [staticcreate doesn't like 10.5 as input]
CALL: staticcreate "main "goodstatic [newcaption] 0 0 100 100
INFO: Executing invalid instruction: [staticcreate "main "goodstatic [newcaption] 0 0 100 100]
PASS: Executing [staticcreate "main "goodstatic [newcaption] 0 0 100 100] set error code to 16
INFO: Executing [staticcreate "main "goodstatic [newcaption] 0 0 100 100] set error string to [Stopping...]
CALL: listboxcreate "main "notastatic 0 100 100 100
INFO: Executing invalid instruction: [(staticupdate "goodstatic)]
PASS: Executing [(staticupdate "goodstatic)] set error code to 6 , as expected
INFO: Executing [(staticupdate "goodstatic)] set error string to [not enough inputs to staticupdate]
INFO: Executing invalid instruction: [(staticupdate "goodstatic "newtext "toomany)]
PASS: Executing [(staticupdate "goodstatic "newtext "toomany)] set error code to 8 , as expected
INFO: Executing [(staticupdate "goodstatic "newtext "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [staticupdate "nonexistent "newtext]
PASS: Executing [staticupdate "nonexistent "newtext] set error code to 16
INFO: Executing [staticupdate "nonexistent "newtext] set error string to [Stopping...]
INFO: Executing invalid instruction: [staticupdate "notastatic "newtext]
PASS: Executing [staticupdate "notastatic "newtext] set error code to 16
INFO: Executing [staticupdate "notastatic "newtext] set error string to [Stopping...]
INFO: Executing invalid instruction: [(staticdelete)]
PASS: Executing [(staticdelete)] set error code to 6 , as expected
INFO: Executing [(staticdelete)] set error string to [not enough inputs to staticdelete]
INFO: Executing invalid instruction: [(staticdelete "goodstatic "toomany)]
PASS: Executing [(staticdelete "goodstatic "toomany)] set error code to 8 , as expected
INFO: Executing [(staticdelete "goodstatic "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [staticdelete "nonexistent]
PASS: Executing [staticdelete "nonexistent] set error code to 16
INFO: Executing [staticdelete "nonexistent] set error string to [Stopping...]
INFO: Executing invalid instruction: [staticdelete "notastatic]
PASS: Executing [staticdelete "notastatic] set error code to 16
INFO: Executing [staticdelete "notastatic] set error string to [Stopping...]
CALL: staticdelete "goodstatic
CALL: listboxdelete "notastatic
CALL: WINDOWCREATE "main "windowstest.listbox "mytitle 0 0 100 100 []
CALL: LISTBOXCREATE "windowstest.listbox "testlist 5 5 90 90
PASS: [LISTBOXGETSELECT "testlist] returned [] , as expected.
CALL: LISTBOXADDSTRING "testlist "firststring
PASS: [LISTBOXGETSELECT "testlist] returned [firststring] , as expected.
CALL: LISTBOXDELETESTRING "testlist 0
CALL: LISTBOXDELETESTRING "testlist 100
CALL: LISTBOXADDSTRING "testlist [secondstring]
PASS: [LISTBOXGETSELECT "testlist] returned [secondstring] , as expected.
CALL: LISTBOXENABLE "testlist "false
CALL: LISTBOXENABLE "testlist "true
INFO: Executing invalid instruction: [(listboxcreate "main "name 0 0 120)]
PASS: Executing [(listboxcreate "main "name 0 0 120)] set error code to 6 , as expected
INFO: Executing [(listboxcreate "main "name 0 0 120)] set error string to [not enough inputs to listboxcreate]
INFO: Executing invalid instruction: [(listboxcreate "main "name 0 0 120 400 "toomany)]
PASS: Executing [(listboxcreate "main "name 0 0 120 400 "toomany)] set error code to 8 , as expected
INFO: Executing [(listboxcreate "main "name 0 0 120 400 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [listboxcreate "main "name10 [0] 0 120 400]
PASS: Executing [listboxcreate "main "name10 [0] 0 120 400] set error code to 7
INFO: Executing [listboxcreate "main "name10 [0] 0 120 400] set error string to [listboxcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [listboxcreate "main "name20 {0} 0 120 400]
PASS: Executing [listboxcreate "main "name20 {0} 0 120 400] set error code to 7
INFO: Executing [listboxcreate "main "name20 {0} 0 120 400] set error string to [listboxcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [listboxcreate "main "name25 10.5 0 120 400]
PASS: Executing [listboxcreate "main "name25 10.5 0 120 400] set error code to 7
INFO: Executing [listboxcreate "main "name25 10.5 0 120 400] set error string to [listboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [listboxcreate "main "name30 0 [0] 120 400]
PASS: Executing [listboxcreate "main "name30 0 [0] 120 400] set error code to 7
INFO: Executing [listboxcreate "main "name30 0 [0] 120 400] set error string to [listboxcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [listboxcreate "main "name40 0 {0} 120 400]
PASS: Executing [listboxcreate "main "name40 0 {0} 120 400] set error code to 7
INFO: Executing [listboxcreate "main "name40 0 {0} 120 400] set error string to [listboxcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [listboxcreate "main "name45 0 10.5 120 400]
PASS: Executing [listboxcreate "main "name45 0 10.5 120 400] set error code to 7
INFO: Executing [listboxcreate "main "name45 0 10.5 120 400] set error string to [listboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [listboxcreate "main "name50 0 0 [120] 400]
PASS: Executing [listboxcreate "main "name50 0 0 [120] 400] set error code to 7
INFO: Executing [listboxcreate "main "name50 0 0 [120] 400] set error string to [listboxcreate doesn't like [120] as input]
INFO: Executing invalid instruction: [listboxcreate "main "name60 0 0 {120} 400]
PASS: Executing [listboxcreate "main "name60 0 0 {120} 400] set error code to 7
INFO: Executing [listboxcreate "main "name60 0 0 {120} 400] set error string to [listboxcreate doesn't like {120} as input]
INFO: Executing invalid instruction: [listboxcreate "main "name70 0 0 -120 400]
PASS: Executing [listboxcreate "main "name70 0 0 -120 400] set error code to 7
INFO: Executing [listboxcreate "main "name70 0 0 -120 400] set error string to [listboxcreate doesn't like -120 as input]
INFO: Executing invalid instruction: [listboxcreate "main "name75 0 0 10.5 400]
PASS: Executing [listboxcreate "main "name75 0 0 10.5 400] set error code to 7
INFO: Executing [listboxcreate "main "name75 0 0 10.5 400] set error string to [listboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [listboxcreate "main "name80 0 0 120 [400]]
PASS: Executing [listboxcreate "main "name80 0 0 120 [400]] set error code to 7
INFO: Executing [listboxcreate "main "name80 0 0 120 [400]] set error string to [listboxcreate doesn't like [400] as input]
INFO: Executing invalid instruction: [listboxcreate "main "name90 0 0 120 {400}]
PASS: Executing [listboxcreate "main "name90 0 0 120 {400}] set error code to 7
INFO: Executing [listboxcreate "main "name90 0 0 120 {400}] set error string to [listboxcreate doesn't like {400} as input]
INFO: Executing invalid instruction: [listboxcreate "main "name00 0 0 120 -400]
PASS: Executing [listboxcreate "main "name00 0 0 120 -400] set error code to 7
INFO: Executing [listboxcreate "main "name00 0 0 120 -400] set error string to [listboxcreate doesn't like -400 as input]
INFO: Executing invalid instruction: [listboxcreate "main "name05 0 0 120 10.5]
PASS: Executing [listboxcreate "main "name05 0 0 120 10.5] set error code to 7
INFO: Executing [listboxcreate "main "name05 0 0 120 10.5] set error string to [listboxcreate doesn't like 10.5 as input]
CALL: listboxcreate "main "goodlistbox 0 0 100 100
INFO: Executing invalid instruction: [listboxcreate "main "goodlistbox 0 0 100 100]
PASS: Executing [listboxcreate "main "goodlistbox 0 0 100 100] set error code to 16
INFO: Executing [listboxcreate "main "goodlistbox 0 0 100 100] set error string to [Stopping...]
CALL: staticcreate "main "notalistbox [text] 0 100 100 100
INFO: Executing invalid instruction: [(listboxenable "goodlistbox)]
PASS: Executing [(listboxenable "goodlistbox)] set error code to 6 , as expected
INFO: Executing [(listboxenable "goodlistbox)] set error string to [not enough inputs to listboxenable]
INFO: Executing invalid instruction: [(listboxenable "goodlistbox "true "toomany)]
PASS: Executing [(listboxenable "goodlistbox "true "toomany)] set error code to 8 , as expected
INFO: Executing [(listboxenable "goodlistbox "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [listboxenable "doesnotexist "true]
PASS: Executing [listboxenable "doesnotexist "true] set error code to 16
INFO: Executing [listboxenable "doesnotexist "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [listboxenable "notalistbox "true]
PASS: Executing [listboxenable "notalistbox "true] set error code to 16
INFO: Executing [listboxenable "notalistbox "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [listboxenable "goodlistbox 1]
PASS: Executing [listboxenable "goodlistbox 1] set error code to 7
INFO: Executing [listboxenable "goodlistbox 1] set error string to [listboxenable doesn't like 1 as input]
INFO: Executing invalid instruction: [listboxenable "goodlistbox [true]]
PASS: Executing [listboxenable "goodlistbox [true]] set error code to 7
INFO: Executing [listboxenable "goodlistbox [true]] set error string to [listboxenable doesn't like [true] as input]
INFO: Executing invalid instruction: [listboxenable "goodlistbox {true}]
PASS: Executing [listboxenable "goodlistbox {true}] set error code to 7
INFO: Executing [listboxenable "goodlistbox {true}] set error string to [listboxenable doesn't like {true} as input]
INFO: Executing invalid instruction: [(listboxaddstring)]
PASS: Executing [(listboxaddstring)] set error code to 6 , as expected
INFO: Executing [(listboxaddstring)] set error string to [not enough inputs to listboxaddstring]
INFO: Executing invalid instruction: [(listboxaddstring "goodlistbox "item "toomany)]
PASS: Executing [(listboxaddstring "goodlistbox "item "toomany)] set error code to 8 , as expected
INFO: Executing [(listboxaddstring "goodlistbox "item "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [listboxaddstring "nonexistent "item]
PASS: Executing [listboxaddstring "nonexistent "item] set error code to 16
INFO: Executing [listboxaddstring "nonexistent "item] set error string to [Stopping...]
INFO: Executing invalid instruction: [listboxaddstring "notalistbox "item]
PASS: Executing [listboxaddstring "notalistbox "item] set error code to 16
INFO: Executing [listboxaddstring "notalistbox "item] set error string to [Stopping...]
INFO: Executing invalid instruction: [(listboxdeletestring "goodlistbox)]
PASS: Executing [(listboxdeletestring "goodlistbox)] set error code to 6 , as expected
INFO: Executing [(listboxdeletestring "goodlistbox)] set error string to [not enough inputs to listboxdeletestring]
INFO: Executing invalid instruction: [(listboxdeletestring "goodlistbox 0 "toomany)]
PASS: Executing [(listboxdeletestring "goodlistbox 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(listboxdeletestring "goodlistbox 0 "toomany)] set error string to [too much inside ()'s]
CALL: listboxaddstring "goodlistbox [selection]
INFO: Executing invalid instruction: [listboxdeletestring "doesnotexist 0]
PASS: Executing [listboxdeletestring "doesnotexist 0] set error code to 16
INFO: Executing [listboxdeletestring "doesnotexist 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [listboxdeletestring "notalistbox 0]
PASS: Executing [listboxdeletestring "notalistbox 0] set error code to 16
INFO: Executing [listboxdeletestring "notalistbox 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [listboxdeletestring "goodlistbox -1]
PASS: Executing [listboxdeletestring "goodlistbox -1] set error code to 7
INFO: Executing [listboxdeletestring "goodlistbox -1] set error string to [listboxdeletestring doesn't like -1 as input]
INFO: Executing invalid instruction: [listboxdeletestring "goodlistbox 10.5]
PASS: Executing [listboxdeletestring "goodlistbox 10.5] set error code to 7
INFO: Executing [listboxdeletestring "goodlistbox 10.5] set error string to [listboxdeletestring doesn't like 10.5 as input]
INFO: Executing invalid instruction: [listboxdeletestring "goodlistbox [0]]
PASS: Executing [listboxdeletestring "goodlistbox [0]] set error code to 7
INFO: Executing [listboxdeletestring "goodlistbox [0]] set error string to [listboxdeletestring doesn't like [0] as input]
INFO: Executing invalid instruction: [listboxdeletestring "goodlistbox {0}]
PASS: Executing [listboxdeletestring "goodlistbox {0}] set error code to 7
INFO: Executing [listboxdeletestring "goodlistbox {0}] set error string to [listboxdeletestring doesn't like {0} as input]
INFO: Executing invalid instruction: [listboxdeletestring "goodlistbox "zero]
PASS: Executing [listboxdeletestring "goodlistbox "zero] set error code to 7
INFO: Executing [listboxdeletestring "goodlistbox "zero] set error string to [listboxdeletestring doesn't like zero as input]
PASS: [listboxgetselect "goodlistbox] returned [selection] , as expected.
INFO: Executing invalid instruction: [(listboxgetselect)]
PASS: Executing [(listboxgetselect)] set error code to 6 , as expected
INFO: Executing [(listboxgetselect)] set error string to [not enough inputs to listboxgetselect]
INFO: Executing invalid instruction: [(listboxgetselect "goodlistbox "toomany)]
PASS: Executing [(listboxgetselect "goodlistbox "toomany)] set error code to 8 , as expected
INFO: Executing [(listboxgetselect "goodlistbox "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ignore listboxgetselect "doesnotexist]
PASS: Executing [ignore listboxgetselect "doesnotexist] set error code to 16
INFO: Executing [ignore listboxgetselect "doesnotexist] set error string to [Stopping...]
INFO: Executing invalid instruction: [ignore listboxgetselect "notalistbox]
PASS: Executing [ignore listboxgetselect "notalistbox] set error code to 16
INFO: Executing [ignore listboxgetselect "notalistbox] set error string to [Stopping...]
INFO: Executing invalid instruction: [(listboxdelete)]
PASS: Executing [(listboxdelete)] set error code to 6 , as expected
INFO: Executing [(listboxdelete)] set error string to [not enough inputs to listboxdelete]
INFO: Executing invalid instruction: [(listboxdelete "goodlistbox "toomany)]
PASS: Executing [(listboxdelete "goodlistbox "toomany)] set error code to 8 , as expected
INFO: Executing [(listboxdelete "goodlistbox "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [listboxdelete "notalistbox]
PASS: Executing [listboxdelete "notalistbox] set error code to 16
INFO: Executing [listboxdelete "notalistbox] set error string to [Stopping...]
INFO: Executing invalid instruction: [listboxdelete "doesnotexist]
PASS: Executing [listboxdelete "doesnotexist] set error code to 16
INFO: Executing [listboxdelete "doesnotexist] set error string to [Stopping...]
CALL: listboxdelete "goodlistbox
CALL: staticdelete "notalistbox
CALL: WINDOWCREATE "main "windowstest.combobox "mytitle 0 0 100 100 []
CALL: COMBOBOXCREATE "windowstest.combobox "combobox 5 5 90 90
PASS: [COMBOBOXGETTEXT "combobox] returned [] , as expected.
CALL: COMBOBOXADDSTRING "combobox "firststring
PASS: [COMBOBOXGETTEXT "combobox] returned [firststring] , as expected.
CALL: COMBOBOXDELETESTRING "combobox 0
PASS: [COMBOBOXGETTEXT "combobox] returned [] , as expected.
CALL: COMBOBOXDELETESTRING "combobox 100
CALL: COMBOBOXADDSTRING "combobox [secondstring]
PASS: [COMBOBOXGETTEXT "combobox] returned [secondstring] , as expected.
CALL: COMBOBOXSETTEXT "combobox "text
PASS: [COMBOBOXGETTEXT "combobox] returned [text] , as expected.
CALL: COMBOBOXENABLE "combobox "false
CALL: COMBOBOXENABLE "combobox "true
CALL: COMBOBOXDELETE "combobox
CALL: WINDOWDELETE "windowstest.combocombobox
INFO: Executing invalid instruction: [(comboboxcreate "main "name 0 0 120)]
PASS: Executing [(comboboxcreate "main "name 0 0 120)] set error code to 6 , as expected
INFO: Executing [(comboboxcreate "main "name 0 0 120)] set error string to [not enough inputs to comboboxcreate]
INFO: Executing invalid instruction: [(comboboxcreate "main "name 0 0 120 400 "toomany)]
PASS: Executing [(comboboxcreate "main "name 0 0 120 400 "toomany)] set error code to 8 , as expected
INFO: Executing [(comboboxcreate "main "name 0 0 120 400 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [comboboxcreate "main "name10 [0] 0 120 400]
PASS: Executing [comboboxcreate "main "name10 [0] 0 120 400] set error code to 7
INFO: Executing [comboboxcreate "main "name10 [0] 0 120 400] set error string to [comboboxcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name20 {0} 0 120 400]
PASS: Executing [comboboxcreate "main "name20 {0} 0 120 400] set error code to 7
INFO: Executing [comboboxcreate "main "name20 {0} 0 120 400] set error string to [comboboxcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name25 10.5 0 120 400]
PASS: Executing [comboboxcreate "main "name25 10.5 0 120 400] set error code to 7
INFO: Executing [comboboxcreate "main "name25 10.5 0 120 400] set error string to [comboboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name30 0 [0] 120 400]
PASS: Executing [comboboxcreate "main "name30 0 [0] 120 400] set error code to 7
INFO: Executing [comboboxcreate "main "name30 0 [0] 120 400] set error string to [comboboxcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name40 0 {0} 120 400]
PASS: Executing [comboboxcreate "main "name40 0 {0} 120 400] set error code to 7
INFO: Executing [comboboxcreate "main "name40 0 {0} 120 400] set error string to [comboboxcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name45 0 10.5 120 400]
PASS: Executing [comboboxcreate "main "name45 0 10.5 120 400] set error code to 7
INFO: Executing [comboboxcreate "main "name45 0 10.5 120 400] set error string to [comboboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name50 0 0 [120] 400]
PASS: Executing [comboboxcreate "main "name50 0 0 [120] 400] set error code to 7
INFO: Executing [comboboxcreate "main "name50 0 0 [120] 400] set error string to [comboboxcreate doesn't like [120] as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name60 0 0 {120} 400]
PASS: Executing [comboboxcreate "main "name60 0 0 {120} 400] set error code to 7
INFO: Executing [comboboxcreate "main "name60 0 0 {120} 400] set error string to [comboboxcreate doesn't like {120} as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name70 0 0 -120 400]
PASS: Executing [comboboxcreate "main "name70 0 0 -120 400] set error code to 7
INFO: Executing [comboboxcreate "main "name70 0 0 -120 400] set error string to [comboboxcreate doesn't like -120 as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name75 0 0 10.5 400]
PASS: Executing [comboboxcreate "main "name75 0 0 10.5 400] set error code to 7
INFO: Executing [comboboxcreate "main "name75 0 0 10.5 400] set error string to [comboboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name80 0 0 120 [400]]
PASS: Executing [comboboxcreate "main "name80 0 0 120 [400]] set error code to 7
INFO: Executing [comboboxcreate "main "name80 0 0 120 [400]] set error string to [comboboxcreate doesn't like [400] as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name90 0 0 120 {400}]
PASS: Executing [comboboxcreate "main "name90 0 0 120 {400}] set error code to 7
INFO: Executing [comboboxcreate "main "name90 0 0 120 {400}] set error string to [comboboxcreate doesn't like {400} as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name00 0 0 120 -400]
PASS: Executing [comboboxcreate "main "name00 0 0 120 -400] set error code to 7
INFO: Executing [comboboxcreate "main "name00 0 0 120 -400] set error string to [comboboxcreate doesn't like -400 as input]
INFO: Executing invalid instruction: [comboboxcreate "main "name05 0 0 120 10.5]
PASS: Executing [comboboxcreate "main "name05 0 0 120 10.5] set error code to 7
INFO: Executing [comboboxcreate "main "name05 0 0 120 10.5] set error string to [comboboxcreate doesn't like 10.5 as input]
CALL: comboboxcreate "main "goodcombobox 0 0 100 100
INFO: Executing invalid instruction: [comboboxcreate "main "goodcombobox 0 0 100 100]
PASS: Executing [comboboxcreate "main "goodcombobox 0 0 100 100] set error code to 16
INFO: Executing [comboboxcreate "main "goodcombobox 0 0 100 100] set error string to [Stopping...]
CALL: staticcreate "main "notacombobox [text] 0 100 100 100
INFO: Executing invalid instruction: [(comboboxenable "goodcombobox)]
PASS: Executing [(comboboxenable "goodcombobox)] set error code to 6 , as expected
INFO: Executing [(comboboxenable "goodcombobox)] set error string to [not enough inputs to comboboxenable]
INFO: Executing invalid instruction: [(comboboxenable "goodcombobox "true "toomany)]
PASS: Executing [(comboboxenable "goodcombobox "true "toomany)] set error code to 8 , as expected
INFO: Executing [(comboboxenable "goodcombobox "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [comboboxenable "doesnotexist "true]
PASS: Executing [comboboxenable "doesnotexist "true] set error code to 16
INFO: Executing [comboboxenable "doesnotexist "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [comboboxenable "notacombobox "true]
PASS: Executing [comboboxenable "notacombobox "true] set error code to 16
INFO: Executing [comboboxenable "notacombobox "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [comboboxenable "goodcombobox 1]
PASS: Executing [comboboxenable "goodcombobox 1] set error code to 7
INFO: Executing [comboboxenable "goodcombobox 1] set error string to [comboboxenable doesn't like 1 as input]
INFO: Executing invalid instruction: [comboboxenable "goodcombobox [true]]
PASS: Executing [comboboxenable "goodcombobox [true]] set error code to 7
INFO: Executing [comboboxenable "goodcombobox [true]] set error string to [comboboxenable doesn't like [true] as input]
INFO: Executing invalid instruction: [comboboxenable "goodcombobox {true}]
PASS: Executing [comboboxenable "goodcombobox {true}] set error code to 7
INFO: Executing [comboboxenable "goodcombobox {true}] set error string to [comboboxenable doesn't like {true} as input]
INFO: Executing invalid instruction: [(comboboxaddstring)]
PASS: Executing [(comboboxaddstring)] set error code to 6 , as expected
INFO: Executing [(comboboxaddstring)] set error string to [not enough inputs to comboboxaddstring]
INFO: Executing invalid instruction: [(comboboxaddstring "goodcombobox "item "toomany)]
PASS: Executing [(comboboxaddstring "goodcombobox "item "toomany)] set error code to 8 , as expected
INFO: Executing [(comboboxaddstring "goodcombobox "item "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [comboboxaddstring "nonexistent "item]
PASS: Executing [comboboxaddstring "nonexistent "item] set error code to 16
INFO: Executing [comboboxaddstring "nonexistent "item] set error string to [Stopping...]
INFO: Executing invalid instruction: [comboboxaddstring "notacombobox "item]
PASS: Executing [comboboxaddstring "notacombobox "item] set error code to 16
INFO: Executing [comboboxaddstring "notacombobox "item] set error string to [Stopping...]
INFO: Executing invalid instruction: [(comboboxdeletestring "goodcombobox)]
PASS: Executing [(comboboxdeletestring "goodcombobox)] set error code to 6 , as expected
INFO: Executing [(comboboxdeletestring "goodcombobox)] set error string to [not enough inputs to comboboxdeletestring]
INFO: Executing invalid instruction: [(comboboxdeletestring "goodcombobox 0 "toomany)]
PASS: Executing [(comboboxdeletestring "goodcombobox 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(comboboxdeletestring "goodcombobox 0 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [comboboxdeletestring "doesnotexist 0]
PASS: Executing [comboboxdeletestring "doesnotexist 0] set error code to 16
INFO: Executing [comboboxdeletestring "doesnotexist 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [comboboxdeletestring "notacombobox 0]
PASS: Executing [comboboxdeletestring "notacombobox 0] set error code to 16
INFO: Executing [comboboxdeletestring "notacombobox 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [comboboxdeletestring "goodcombobox -1]
PASS: Executing [comboboxdeletestring "goodcombobox -1] set error code to 7
INFO: Executing [comboboxdeletestring "goodcombobox -1] set error string to [comboboxdeletestring doesn't like -1 as input]
INFO: Executing invalid instruction: [comboboxdeletestring "goodcombobox 10.5]
PASS: Executing [comboboxdeletestring "goodcombobox 10.5] set error code to 7
INFO: Executing [comboboxdeletestring "goodcombobox 10.5] set error string to [comboboxdeletestring doesn't like 10.5 as input]
INFO: Executing invalid instruction: [comboboxdeletestring "goodcombobox [0]]
PASS: Executing [comboboxdeletestring "goodcombobox [0]] set error code to 7
INFO: Executing [comboboxdeletestring "goodcombobox [0]] set error string to [comboboxdeletestring doesn't like [0] as input]
INFO: Executing invalid instruction: [comboboxdeletestring "goodcombobox {0}]
PASS: Executing [comboboxdeletestring "goodcombobox {0}] set error code to 7
INFO: Executing [comboboxdeletestring "goodcombobox {0}] set error string to [comboboxdeletestring doesn't like {0} as input]
INFO: Executing invalid instruction: [comboboxdeletestring "goodcombobox "zero]
PASS: Executing [comboboxdeletestring "goodcombobox "zero] set error code to 7
INFO: Executing [comboboxdeletestring "goodcombobox "zero] set error string to [comboboxdeletestring doesn't like zero as input]
INFO: Executing invalid instruction: [(comboboxgettext)]
PASS: Executing [(comboboxgettext)] set error code to 6 , as expected
INFO: Executing [(comboboxgettext)] set error string to [not enough inputs to comboboxgettext]
INFO: Executing invalid instruction: [(comboboxgettext "goodcombobox "toomany)]
PASS: Executing [(comboboxgettext "goodcombobox "toomany)] set error code to 8 , as expected
INFO: Executing [(comboboxgettext "goodcombobox "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ignore comboboxgettext "doesnotexist]
PASS: Executing [ignore comboboxgettext "doesnotexist] set error code to 16
INFO: Executing [ignore comboboxgettext "doesnotexist] set error string to [Stopping...]
INFO: Executing invalid instruction: [ignore comboboxgettext "notacombobox]
PASS: Executing [ignore comboboxgettext "notacombobox] set error code to 16
INFO: Executing [ignore comboboxgettext "notacombobox] set error string to [Stopping...]
INFO: Executing invalid instruction: [(comboboxsettext "goodcombobox)]
PASS: Executing [(comboboxsettext "goodcombobox)] set error code to 6 , as expected
INFO: Executing [(comboboxsettext "goodcombobox)] set error string to [not enough inputs to comboboxsettext]
INFO: Executing invalid instruction: [(comboboxsettext "goodcombobox "text "toomany)]
PASS: Executing [(comboboxsettext "goodcombobox "text "toomany)] set error code to 8 , as expected
INFO: Executing [(comboboxsettext "goodcombobox "text "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [comboboxsettext "doesnotexist "text]
PASS: Executing [comboboxsettext "doesnotexist "text] set error code to 16
INFO: Executing [comboboxsettext "doesnotexist "text] set error string to [Stopping...]
INFO: Executing invalid instruction: [comboboxsettext "notacombobox "text]
PASS: Executing [comboboxsettext "notacombobox "text] set error code to 16
INFO: Executing [comboboxsettext "notacombobox "text] set error string to [Stopping...]
INFO: Executing invalid instruction: [(comboboxdelete)]
PASS: Executing [(comboboxdelete)] set error code to 6 , as expected
INFO: Executing [(comboboxdelete)] set error string to [not enough inputs to comboboxdelete]
INFO: Executing invalid instruction: [(comboboxdelete "goodcombobox "toomany)]
PASS: Executing [(comboboxdelete "goodcombobox "toomany)] set error code to 8 , as expected
INFO: Executing [(comboboxdelete "goodcombobox "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [comboboxdelete "notacombobox]
PASS: Executing [comboboxdelete "notacombobox] set error code to 16
INFO: Executing [comboboxdelete "notacombobox] set error string to [Stopping...]
INFO: Executing invalid instruction: [comboboxdelete "doesnotexist]
PASS: Executing [comboboxdelete "doesnotexist] set error code to 16
INFO: Executing [comboboxdelete "doesnotexist] set error string to [Stopping...]
CALL: comboboxdelete "goodcombobox
CALL: staticdelete "notacombobox
INFO: Executing invalid instruction: [(groupboxcreate "main "name 0 0 120)]
PASS: Executing [(groupboxcreate "main "name 0 0 120)] set error code to 6 , as expected
INFO: Executing [(groupboxcreate "main "name 0 0 120)] set error string to [not enough inputs to groupboxcreate]
INFO: Executing invalid instruction: [(groupboxcreate "main "name 0 0 120 400 "toomany)]
PASS: Executing [(groupboxcreate "main "name 0 0 120 400 "toomany)] set error code to 8 , as expected
INFO: Executing [(groupboxcreate "main "name 0 0 120 400 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [groupboxcreate "main "name10 [0] 0 120 400]
PASS: Executing [groupboxcreate "main "name10 [0] 0 120 400] set error code to 7
INFO: Executing [groupboxcreate "main "name10 [0] 0 120 400] set error string to [groupboxcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name20 {0} 0 120 400]
PASS: Executing [groupboxcreate "main "name20 {0} 0 120 400] set error code to 7
INFO: Executing [groupboxcreate "main "name20 {0} 0 120 400] set error string to [groupboxcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name25 10.5 0 120 400]
PASS: Executing [groupboxcreate "main "name25 10.5 0 120 400] set error code to 7
INFO: Executing [groupboxcreate "main "name25 10.5 0 120 400] set error string to [groupboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name30 0 [0] 120 400]
PASS: Executing [groupboxcreate "main "name30 0 [0] 120 400] set error code to 7
INFO: Executing [groupboxcreate "main "name30 0 [0] 120 400] set error string to [groupboxcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name40 0 {0} 120 400]
PASS: Executing [groupboxcreate "main "name40 0 {0} 120 400] set error code to 7
INFO: Executing [groupboxcreate "main "name40 0 {0} 120 400] set error string to [groupboxcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name45 0 10.5 120 400]
PASS: Executing [groupboxcreate "main "name45 0 10.5 120 400] set error code to 7
INFO: Executing [groupboxcreate "main "name45 0 10.5 120 400] set error string to [groupboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name50 0 0 [120] 400]
PASS: Executing [groupboxcreate "main "name50 0 0 [120] 400] set error code to 7
INFO: Executing [groupboxcreate "main "name50 0 0 [120] 400] set error string to [groupboxcreate doesn't like [120] as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name60 0 0 {120} 400]
PASS: Executing [groupboxcreate "main "name60 0 0 {120} 400] set error code to 7
INFO: Executing [groupboxcreate "main "name60 0 0 {120} 400] set error string to [groupboxcreate doesn't like {120} as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name70 0 0 -120 400]
PASS: Executing [groupboxcreate "main "name70 0 0 -120 400] set error code to 7
INFO: Executing [groupboxcreate "main "name70 0 0 -120 400] set error string to [groupboxcreate doesn't like -120 as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name75 0 0 10.5 400]
PASS: Executing [groupboxcreate "main "name75 0 0 10.5 400] set error code to 7
INFO: Executing [groupboxcreate "main "name75 0 0 10.5 400] set error string to [groupboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name80 0 0 120 [400]]
PASS: Executing [groupboxcreate "main "name80 0 0 120 [400]] set error code to 7
INFO: Executing [groupboxcreate "main "name80 0 0 120 [400]] set error string to [groupboxcreate doesn't like [400] as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name90 0 0 120 {400}]
PASS: Executing [groupboxcreate "main "name90 0 0 120 {400}] set error code to 7
INFO: Executing [groupboxcreate "main "name90 0 0 120 {400}] set error string to [groupboxcreate doesn't like {400} as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name00 0 0 120 -400]
PASS: Executing [groupboxcreate "main "name00 0 0 120 -400] set error code to 7
INFO: Executing [groupboxcreate "main "name00 0 0 120 -400] set error string to [groupboxcreate doesn't like -400 as input]
INFO: Executing invalid instruction: [groupboxcreate "main "name05 0 0 120 10.5]
PASS: Executing [groupboxcreate "main "name05 0 0 120 10.5] set error code to 7
INFO: Executing [groupboxcreate "main "name05 0 0 120 10.5] set error string to [groupboxcreate doesn't like 10.5 as input]
CALL: groupboxcreate "main "goodgroupbox 0 0 100 100
INFO: Executing invalid instruction: [groupboxcreate "main "goodgroupbox 0 0 100 100]
PASS: Executing [groupboxcreate "main "goodgroupbox 0 0 100 100] set error code to 16
INFO: Executing [groupboxcreate "main "goodgroupbox 0 0 100 100] set error string to [Stopping...]
CALL: listboxcreate "main "notagroupbox 0 100 100 100
INFO: Executing invalid instruction: [(groupboxdelete)]
PASS: Executing [(groupboxdelete)] set error code to 6 , as expected
INFO: Executing [(groupboxdelete)] set error string to [not enough inputs to groupboxdelete]
INFO: Executing invalid instruction: [(groupboxdelete "groupbox "toomany)]
PASS: Executing [(groupboxdelete "groupbox "toomany)] set error code to 8 , as expected
INFO: Executing [(groupboxdelete "groupbox "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [groupboxdelete "notagroupbox]
PASS: Executing [groupboxdelete "notagroupbox] set error code to 16
INFO: Executing [groupboxdelete "notagroupbox] set error string to [Stopping...]
INFO: Executing invalid instruction: [groupboxdelete "doesnotexist]
PASS: Executing [groupboxdelete "doesnotexist] set error code to 16
INFO: Executing [groupboxdelete "doesnotexist] set error string to [Stopping...]
CALL: listboxdelete "notagroupbox
CALL: groupboxdelete "goodgroupbox
PASS: [RADIOBUTTONGET "radio1] returned true , as expected.
PASS: [RADIOBUTTONGET "radio2] returned false , as expected.
CALL: RADIOBUTTONSET "radio1 "false
PASS: [RADIOBUTTONGET "radio1] returned false , as expected.
CALL: RADIOBUTTONSET "radio2 "true
PASS: [RADIOBUTTONGET "radio2] returned true , as expected.
CALL: RADIOBUTTONENABLE "radio1 "false
CALL: RADIOBUTTONENABLE "radio1 "true
CALL: RADIOBUTTONDELETE "radio1
CALL: RADIOBUTTONDELETE "radio2
CALL: GROUPBOXCREATE "main "groupbox 10 5 80 60
INFO: Executing invalid instruction: [(radiobuttoncreate "main "groupbox "name "label 0 0 10)]
PASS: Executing [(radiobuttoncreate "main "groupbox "name "label 0 0 10)] set error code to 6 , as expected
INFO: Executing [(radiobuttoncreate "main "groupbox "name "label 0 0 10)] set error string to [not enough inputs to radiobuttoncreate]
INFO: Executing invalid instruction: [(radiobuttoncreate "main "groupbox "name "label 0 0 10 80 "toomany)]
PASS: Executing [(radiobuttoncreate "main "groupbox "name "label 0 0 10 80 "toomany)] set error code to 8 , as expected
INFO: Executing [(radiobuttoncreate "main "groupbox "name "label 0 0 10 80 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [radiobuttoncreate "main "notfound "name01 "label [10] 10 80 20]
PASS: Executing [radiobuttoncreate "main "notfound "name01 "label [10] 10 80 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "notfound "name01 "label [10] 10 80 20] set error string to [radiobuttoncreate doesn't like [10] as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name10 "label [10] 10 80 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name10 "label [10] 10 80 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name10 "label [10] 10 80 20] set error string to [radiobuttoncreate doesn't like [10] as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name20 "label {10} 10 80 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name20 "label {10} 10 80 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name20 "label {10} 10 80 20] set error string to [radiobuttoncreate doesn't like {10} as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name25 "label 10.5 10 80 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name25 "label 10.5 10 80 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name25 "label 10.5 10 80 20] set error string to [radiobuttoncreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name30 "label 10 [10] 80 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name30 "label 10 [10] 80 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name30 "label 10 [10] 80 20] set error string to [radiobuttoncreate doesn't like [10] as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name40 "label 10 {10} 80 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name40 "label 10 {10} 80 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name40 "label 10 {10} 80 20] set error string to [radiobuttoncreate doesn't like {10} as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name45 "label 10 10.5 80 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name45 "label 10 10.5 80 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name45 "label 10 10.5 80 20] set error string to [radiobuttoncreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name50 "label 10 10 [80] 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name50 "label 10 10 [80] 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name50 "label 10 10 [80] 20] set error string to [radiobuttoncreate doesn't like [80] as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name60 "label 10 10 {80} 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name60 "label 10 10 {80} 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name60 "label 10 10 {80} 20] set error string to [radiobuttoncreate doesn't like {80} as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name70 "label 10 10 -80 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name70 "label 10 10 -80 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name70 "label 10 10 -80 20] set error string to [radiobuttoncreate doesn't like -80 as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name75 "label 10 10 8.5 20]
PASS: Executing [radiobuttoncreate "main "groupbox "name75 "label 10 10 8.5 20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name75 "label 10 10 8.5 20] set error string to [radiobuttoncreate doesn't like 8.5 as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name80 "label 10 10 80 [20]]
PASS: Executing [radiobuttoncreate "main "groupbox "name80 "label 10 10 80 [20]] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name80 "label 10 10 80 [20]] set error string to [radiobuttoncreate doesn't like [20] as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name90 "label 10 10 80 {20}]
PASS: Executing [radiobuttoncreate "main "groupbox "name90 "label 10 10 80 {20}] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name90 "label 10 10 80 {20}] set error string to [radiobuttoncreate doesn't like {20} as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name00 "label 10 10 80 -20]
PASS: Executing [radiobuttoncreate "main "groupbox "name00 "label 10 10 80 -20] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name00 "label 10 10 80 -20] set error string to [radiobuttoncreate doesn't like -20 as input]
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "name05 "label 10 10 80 20.5]
PASS: Executing [radiobuttoncreate "main "groupbox "name05 "label 10 10 80 20.5] set error code to 7
INFO: Executing [radiobuttoncreate "main "groupbox "name05 "label 10 10 80 20.5] set error string to [radiobuttoncreate doesn't like 20.5 as input]
CALL: radiobuttoncreate "main "groupbox "goodradiobutton "label 10 10 80 20
INFO: Executing invalid instruction: [radiobuttoncreate "main "groupbox "goodradiobutton "label 10 10 80 20]
PASS: Executing [radiobuttoncreate "main "groupbox "goodradiobutton "label 10 10 80 20] set error code to 16
INFO: Executing [radiobuttoncreate "main "groupbox "goodradiobutton "label 10 10 80 20] set error string to [Stopping...]
CALL: staticcreate "main "notaradiobutton [text] 0 100 100 100
INFO: Executing invalid instruction: [(radiobuttonenable "goodradiobutton)]
PASS: Executing [(radiobuttonenable "goodradiobutton)] set error code to 6 , as expected
INFO: Executing [(radiobuttonenable "goodradiobutton)] set error string to [not enough inputs to radiobuttonenable]
INFO: Executing invalid instruction: [(radiobuttonenable "goodradiobutton "true "toomany)]
PASS: Executing [(radiobuttonenable "goodradiobutton "true "toomany)] set error code to 8 , as expected
INFO: Executing [(radiobuttonenable "goodradiobutton "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [radiobuttonenable "doesnotexist "true]
PASS: Executing [radiobuttonenable "doesnotexist "true] set error code to 16
INFO: Executing [radiobuttonenable "doesnotexist "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [radiobuttonenable "notaradiobutton "true]
PASS: Executing [radiobuttonenable "notaradiobutton "true] set error code to 16
INFO: Executing [radiobuttonenable "notaradiobutton "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [radiobuttonenable "goodradiobutton 1]
PASS: Executing [radiobuttonenable "goodradiobutton 1] set error code to 7
INFO: Executing [radiobuttonenable "goodradiobutton 1] set error string to [radiobuttonenable doesn't like 1 as input]
INFO: Executing invalid instruction: [radiobuttonenable "goodradiobutton [true]]
PASS: Executing [radiobuttonenable "goodradiobutton [true]] set error code to 7
INFO: Executing [radiobuttonenable "goodradiobutton [true]] set error string to [radiobuttonenable doesn't like [true] as input]
INFO: Executing invalid instruction: [radiobuttonenable "goodradiobutton {true}]
PASS: Executing [radiobuttonenable "goodradiobutton {true}] set error code to 7
INFO: Executing [radiobuttonenable "goodradiobutton {true}] set error string to [radiobuttonenable doesn't like {true} as input]
INFO: Executing invalid instruction: [(radiobuttonget)]
PASS: Executing [(radiobuttonget)] set error code to 6 , as expected
INFO: Executing [(radiobuttonget)] set error string to [not enough inputs to radiobuttonget]
INFO: Executing invalid instruction: [(radiobuttonget "goodradiobutton "toomany)]
PASS: Executing [(radiobuttonget "goodradiobutton "toomany)] set error code to 8 , as expected
INFO: Executing [(radiobuttonget "goodradiobutton "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [radiobuttonget "doesnotexist "item]
PASS: Executing [radiobuttonget "doesnotexist "item] set error code to 16
INFO: Executing [radiobuttonget "doesnotexist "item] set error string to [Stopping...]
INFO: Executing invalid instruction: [radiobuttonget "notaradiobutton "item]
PASS: Executing [radiobuttonget "notaradiobutton "item] set error code to 16
INFO: Executing [radiobuttonget "notaradiobutton "item] set error string to [Stopping...]
CALL: radiobuttonset "goodradiobutton "false
INFO: Executing invalid instruction: [(radiobuttonset "goodradiobutton)]
PASS: Executing [(radiobuttonset "goodradiobutton)] set error code to 6 , as expected
INFO: Executing [(radiobuttonset "goodradiobutton)] set error string to [not enough inputs to radiobuttonset]
INFO: Executing invalid instruction: [(radiobuttonset "goodradiobutton "true "toomany)]
PASS: Executing [(radiobuttonset "goodradiobutton "true "toomany)] set error code to 8 , as expected
INFO: Executing [(radiobuttonset "goodradiobutton "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [radiobuttonset "doesnotexist "true]
PASS: Executing [radiobuttonset "doesnotexist "true] set error code to 16
INFO: Executing [radiobuttonset "doesnotexist "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [radiobuttonset "notaradiobutton "true]
PASS: Executing [radiobuttonset "notaradiobutton "true] set error code to 16
INFO: Executing [radiobuttonset "notaradiobutton "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [radiobuttonset "goodradiobutton 1]
PASS: Executing [radiobuttonset "goodradiobutton 1] set error code to 7
INFO: Executing [radiobuttonset "goodradiobutton 1] set error string to [radiobuttonset doesn't like 1 as input]
INFO: Executing invalid instruction: [radiobuttonset "goodradiobutton [true]]
PASS: Executing [radiobuttonset "goodradiobutton [true]] set error code to 7
INFO: Executing [radiobuttonset "goodradiobutton [true]] set error string to [radiobuttonset doesn't like [true] as input]
INFO: Executing invalid instruction: [radiobuttonset "goodradiobutton {true}]
PASS: Executing [radiobuttonset "goodradiobutton {true}] set error code to 7
INFO: Executing [radiobuttonset "goodradiobutton {true}] set error string to [radiobuttonset doesn't like {true} as input]
PASS: [radiobuttonget "goodradiobutton] returned false , as expected.
INFO: Executing invalid instruction: [(radiobuttondelete)]
PASS: Executing [(radiobuttondelete)] set error code to 6 , as expected
INFO: Executing [(radiobuttondelete)] set error string to [not enough inputs to radiobuttondelete]
INFO: Executing invalid instruction: [(radiobuttondelete "goodradiobutton "toomany)]
PASS: Executing [(radiobuttondelete "goodradiobutton "toomany)] set error code to 8 , as expected
INFO: Executing [(radiobuttondelete "goodradiobutton "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [radiobuttondelete "notaradiobutton]
PASS: Executing [radiobuttondelete "notaradiobutton] set error code to 16
INFO: Executing [radiobuttondelete "notaradiobutton] set error string to [Stopping...]
INFO: Executing invalid instruction: [radiobuttondelete "doesnotexist]
PASS: Executing [radiobuttondelete "doesnotexist] set error code to 16
INFO: Executing [radiobuttondelete "doesnotexist] set error string to [Stopping...]
CALL: radiobuttondelete "goodradiobutton
CALL: groupboxdelete "groupbox
CALL: staticdelete "notaradiobutton
CALL: WINDOWCREATE "main "windowstest.radiobutton "mytitle 0 0 100 100 []
CALL: GROUPBOXCREATE "windowstest.radiobutton "groupbox 10 5 80 60
CALL: RADIOBUTTONCREATE "windowstest.radiobutton "groupbox "radio [Radio] 20 15 60 20
CALL: GROUPBOXDELETE "groupbox
CALL: RADIOBUTTONSET "radio "false
PASS: [RADIOBUTTONGET "radio] returned false , as expected.
CALL: RADIOBUTTONENABLE "radio "false
CALL: RADIOBUTTONENABLE "radio "true
CALL: RADIOBUTTONDELETE "radio
CALL: WINDOWDELETE "windowstest.radiobutton
CALL: CHECKBOXSET "checkbox1 "true
CALL: CHECKBOXSET "checkbox2 "false
PASS: [CHECKBOXGET "checkbox1] returned true , as expected.
PASS: [CHECKBOXGET "checkbox2] returned false , as expected.
CALL: CHECKBOXSET "checkbox1 "false
PASS: [CHECKBOXGET "checkbox1] returned false , as expected.
PASS: [CHECKBOXGET "checkbox2] returned false , as expected.
CALL: CHECKBOXENABLE "checkbox1 "false
CALL: CHECKBOXENABLE "checkbox1 "true
CALL: CHECKBOXDELETE "checkbox1
CALL: CHECKBOXDELETE "checkbox2
CALL: GROUPBOXCREATE "main "groupbox 10 5 80 60
INFO: Executing invalid instruction: [(checkboxcreate "main "groupbox "name "label 0 0 10)]
PASS: Executing [(checkboxcreate "main "groupbox "name "label 0 0 10)] set error code to 6 , as expected
INFO: Executing [(checkboxcreate "main "groupbox "name "label 0 0 10)] set error string to [not enough inputs to checkboxcreate]
INFO: Executing invalid instruction: [(checkboxcreate "main "groupbox "name "label 0 0 10 80 "toomany)]
PASS: Executing [(checkboxcreate "main "groupbox "name "label 0 0 10 80 "toomany)] set error code to 8 , as expected
INFO: Executing [(checkboxcreate "main "groupbox "name "label 0 0 10 80 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [checkboxcreate "main "notfound "name01 "label [10] 10 80 20]
PASS: Executing [checkboxcreate "main "notfound "name01 "label [10] 10 80 20] set error code to 7
INFO: Executing [checkboxcreate "main "notfound "name01 "label [10] 10 80 20] set error string to [checkboxcreate doesn't like [10] as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name10 "label [10] 10 80 20]
PASS: Executing [checkboxcreate "main "groupbox "name10 "label [10] 10 80 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name10 "label [10] 10 80 20] set error string to [checkboxcreate doesn't like [10] as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name20 "label {10} 10 80 20]
PASS: Executing [checkboxcreate "main "groupbox "name20 "label {10} 10 80 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name20 "label {10} 10 80 20] set error string to [checkboxcreate doesn't like {10} as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name25 "label 10.5 10 80 20]
PASS: Executing [checkboxcreate "main "groupbox "name25 "label 10.5 10 80 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name25 "label 10.5 10 80 20] set error string to [checkboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name30 "label 10 [10] 80 20]
PASS: Executing [checkboxcreate "main "groupbox "name30 "label 10 [10] 80 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name30 "label 10 [10] 80 20] set error string to [checkboxcreate doesn't like [10] as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name40 "label 10 {10} 80 20]
PASS: Executing [checkboxcreate "main "groupbox "name40 "label 10 {10} 80 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name40 "label 10 {10} 80 20] set error string to [checkboxcreate doesn't like {10} as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name45 "label 10 10.5 80 20]
PASS: Executing [checkboxcreate "main "groupbox "name45 "label 10 10.5 80 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name45 "label 10 10.5 80 20] set error string to [checkboxcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name50 "label 10 10 [80] 20]
PASS: Executing [checkboxcreate "main "groupbox "name50 "label 10 10 [80] 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name50 "label 10 10 [80] 20] set error string to [checkboxcreate doesn't like [80] as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name60 "label 10 10 {80} 20]
PASS: Executing [checkboxcreate "main "groupbox "name60 "label 10 10 {80} 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name60 "label 10 10 {80} 20] set error string to [checkboxcreate doesn't like {80} as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name70 "label 10 10 -80 20]
PASS: Executing [checkboxcreate "main "groupbox "name70 "label 10 10 -80 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name70 "label 10 10 -80 20] set error string to [checkboxcreate doesn't like -80 as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name75 "label 10 10 8.5 20]
PASS: Executing [checkboxcreate "main "groupbox "name75 "label 10 10 8.5 20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name75 "label 10 10 8.5 20] set error string to [checkboxcreate doesn't like 8.5 as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name80 "label 10 10 80 [20]]
PASS: Executing [checkboxcreate "main "groupbox "name80 "label 10 10 80 [20]] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name80 "label 10 10 80 [20]] set error string to [checkboxcreate doesn't like [20] as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name90 "label 10 10 80 {20}]
PASS: Executing [checkboxcreate "main "groupbox "name90 "label 10 10 80 {20}] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name90 "label 10 10 80 {20}] set error string to [checkboxcreate doesn't like {20} as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name00 "label 10 10 80 -20]
PASS: Executing [checkboxcreate "main "groupbox "name00 "label 10 10 80 -20] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name00 "label 10 10 80 -20] set error string to [checkboxcreate doesn't like -20 as input]
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "name05 "label 10 10 80 20.5]
PASS: Executing [checkboxcreate "main "groupbox "name05 "label 10 10 80 20.5] set error code to 7
INFO: Executing [checkboxcreate "main "groupbox "name05 "label 10 10 80 20.5] set error string to [checkboxcreate doesn't like 20.5 as input]
CALL: checkboxcreate "main "groupbox "goodcheckbox "label 10 10 80 20
INFO: Executing invalid instruction: [checkboxcreate "main "groupbox "goodcheckbox "label 10 10 80 20]
PASS: Executing [checkboxcreate "main "groupbox "goodcheckbox "label 10 10 80 20] set error code to 16
INFO: Executing [checkboxcreate "main "groupbox "goodcheckbox "label 10 10 80 20] set error string to [Stopping...]
CALL: staticcreate "main "notacheckbox [text] 0 100 100 100
INFO: Executing invalid instruction: [(checkboxenable "goodcheckbox)]
PASS: Executing [(checkboxenable "goodcheckbox)] set error code to 6 , as expected
INFO: Executing [(checkboxenable "goodcheckbox)] set error string to [not enough inputs to checkboxenable]
INFO: Executing invalid instruction: [(checkboxenable "goodcheckbox "true "toomany)]
PASS: Executing [(checkboxenable "goodcheckbox "true "toomany)] set error code to 8 , as expected
INFO: Executing [(checkboxenable "goodcheckbox "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [checkboxenable "doesnotexist "true]
PASS: Executing [checkboxenable "doesnotexist "true] set error code to 16
INFO: Executing [checkboxenable "doesnotexist "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [checkboxenable "notacheckbox "true]
PASS: Executing [checkboxenable "notacheckbox "true] set error code to 16
INFO: Executing [checkboxenable "notacheckbox "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [checkboxenable "goodcheckbox 1]
PASS: Executing [checkboxenable "goodcheckbox 1] set error code to 7
INFO: Executing [checkboxenable "goodcheckbox 1] set error string to [checkboxenable doesn't like 1 as input]
INFO: Executing invalid instruction: [checkboxenable "goodcheckbox [true]]
PASS: Executing [checkboxenable "goodcheckbox [true]] set error code to 7
INFO: Executing [checkboxenable "goodcheckbox [true]] set error string to [checkboxenable doesn't like [true] as input]
INFO: Executing invalid instruction: [checkboxenable "goodcheckbox {true}]
PASS: Executing [checkboxenable "goodcheckbox {true}] set error code to 7
INFO: Executing [checkboxenable "goodcheckbox {true}] set error string to [checkboxenable doesn't like {true} as input]
INFO: Executing invalid instruction: [(checkboxget)]
PASS: Executing [(checkboxget)] set error code to 6 , as expected
INFO: Executing [(checkboxget)] set error string to [not enough inputs to checkboxget]
INFO: Executing invalid instruction: [(checkboxget "goodcheckbox "toomany)]
PASS: Executing [(checkboxget "goodcheckbox "toomany)] set error code to 8 , as expected
INFO: Executing [(checkboxget "goodcheckbox "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [checkboxget "doesnotexist "item]
PASS: Executing [checkboxget "doesnotexist "item] set error code to 16
INFO: Executing [checkboxget "doesnotexist "item] set error string to [Stopping...]
INFO: Executing invalid instruction: [checkboxget "notacheckbox "item]
PASS: Executing [checkboxget "notacheckbox "item] set error code to 16
INFO: Executing [checkboxget "notacheckbox "item] set error string to [Stopping...]
INFO: Executing invalid instruction: [(checkboxset "goodcheckbox)]
PASS: Executing [(checkboxset "goodcheckbox)] set error code to 6 , as expected
INFO: Executing [(checkboxset "goodcheckbox)] set error string to [not enough inputs to checkboxset]
INFO: Executing invalid instruction: [(checkboxset "goodcheckbox "true "toomany)]
PASS: Executing [(checkboxset "goodcheckbox "true "toomany)] set error code to 8 , as expected
INFO: Executing [(checkboxset "goodcheckbox "true "toomany)] set error string to [too much inside ()'s]
CALL: checkboxset "goodcheckbox "false
INFO: Executing invalid instruction: [checkboxset "doesnotexist "true]
PASS: Executing [checkboxset "doesnotexist "true] set error code to 16
INFO: Executing [checkboxset "doesnotexist "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [checkboxset "notacheckbox "true]
PASS: Executing [checkboxset "notacheckbox "true] set error code to 16
INFO: Executing [checkboxset "notacheckbox "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [checkboxset "goodcheckbox 1]
PASS: Executing [checkboxset "goodcheckbox 1] set error code to 7
INFO: Executing [checkboxset "goodcheckbox 1] set error string to [checkboxset doesn't like 1 as input]
INFO: Executing invalid instruction: [checkboxset "goodcheckbox [true]]
PASS: Executing [checkboxset "goodcheckbox [true]] set error code to 7
INFO: Executing [checkboxset "goodcheckbox [true]] set error string to [checkboxset doesn't like [true] as input]
INFO: Executing invalid instruction: [checkboxset "goodcheckbox {true}]
PASS: Executing [checkboxset "goodcheckbox {true}] set error code to 7
INFO: Executing [checkboxset "goodcheckbox {true}] set error string to [checkboxset doesn't like {true} as input]
PASS: [checkboxget "goodcheckbox] returned false , as expected.
INFO: Executing invalid instruction: [(checkboxdelete)]
PASS: Executing [(checkboxdelete)] set error code to 6 , as expected
INFO: Executing [(checkboxdelete)] set error string to [not enough inputs to checkboxdelete]
INFO: Executing invalid instruction: [(checkboxdelete "goodcheckbox "toomany)]
PASS: Executing [(checkboxdelete "goodcheckbox "toomany)] set error code to 8 , as expected
INFO: Executing [(checkboxdelete "goodcheckbox "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [checkboxdelete "notacheckbox]
PASS: Executing [checkboxdelete "notacheckbox] set error code to 16
INFO: Executing [checkboxdelete "notacheckbox] set error string to [Stopping...]
INFO: Executing invalid instruction: [checkboxdelete "doesnotexist]
PASS: Executing [checkboxdelete "doesnotexist] set error code to 16
INFO: Executing [checkboxdelete "doesnotexist] set error string to [Stopping...]
CALL: checkboxdelete "goodcheckbox
CALL: groupboxdelete "groupbox
CALL: staticdelete "notacheckbox
CALL: WINDOWCREATE "main "windowstest.checkbox "mytitle 0 0 100 100 []
CALL: GROUPBOXCREATE "windowstest.checkbox "groupbox 10 5 80 60
CALL: CHECKBOXCREATE "windowstest.checkbox "groupbox "checkbox [Checkbox] 20 15 60 20
CALL: GROUPBOXDELETE "groupbox
CALL: CHECKBOXSET "checkbox "false
PASS: [CHECKBOXGET "checkbox] returned false , as expected.
CALL: CHECKBOXENABLE "checkbox "false
CALL: CHECKBOXENABLE "checkbox "true
CALL: CHECKBOXDELETE "checkbox
CALL: WINDOWDELETE "windowstest.checkbox
CALL: WINDOWCREATE "main "windowstest.scrollbar "mytitle 0 0 100 100 []
CALL: SCROLLBARCREATE "windowstest.scrollbar "horizontal 0 90 100 20 []
CALL: SCROLLBARCREATE "windowstest.scrollbar "vertical 90 0 20 100 []
PASS: [SCROLLBARGET "horizontal] returned 0 , as expected.
CALL: SCROLLBARSET "horizontal 0 100 27
PASS: [SCROLLBARGET "horizontal] returned 27 , as expected.
CALL: SCROLLBARSET "horizontal 0 100 91
PASS: [SCROLLBARGET "horizontal] returned 91 , as expected.
CALL: SCROLLBARSET "horizontal -10 10 -10
PASS: [SCROLLBARGET "horizontal] returned -10 , as expected.
CALL: SCROLLBARSET "horizontal -20 -10 -15
PASS: [SCROLLBARGET "horizontal] returned -15 , as expected.
CALL: SCROLLBARSET "vertical 50 60 55
PASS: [SCROLLBARGET "vertical] returned 55 , as expected.
PASS: [SCROLLBARGET "horizontal] returned -15 , as expected.
CALL: SCROLLBARENABLE "horizontal "false
CALL: SCROLLBARENABLE "horizontal "false
CALL: SCROLLBARENABLE "horizontal "true
CALL: SCROLLBARDELETE "horizontal
CALL: SCROLLBARDELETE "vertical
CALL: WINDOWDELETE "windowstest.scrollbar
INFO: Executing invalid instruction: [(scrollbarcreate "main "name 0 0 100 10)]
PASS: Executing [(scrollbarcreate "main "name 0 0 100 10)] set error code to 6 , as expected
INFO: Executing [(scrollbarcreate "main "name 0 0 100 10)] set error string to [not enough inputs to scrollbarcreate]
INFO: Executing invalid instruction: [(scrollbarcreate "main "name 0 0 100 10 [] "toomany)]
PASS: Executing [(scrollbarcreate "main "name 0 0 100 10 [] "toomany)] set error code to 8 , as expected
INFO: Executing [(scrollbarcreate "main "name 0 0 100 10 [] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [scrollbarcreate "main "name10 [0] 0 120 10 []]
PASS: Executing [scrollbarcreate "main "name10 [0] 0 120 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name10 [0] 0 120 10 []] set error string to [scrollbarcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name20 {0} 0 120 10 []]
PASS: Executing [scrollbarcreate "main "name20 {0} 0 120 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name20 {0} 0 120 10 []] set error string to [scrollbarcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name25 10.5 0 120 10 []]
PASS: Executing [scrollbarcreate "main "name25 10.5 0 120 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name25 10.5 0 120 10 []] set error string to [scrollbarcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name30 0 [0] 120 10 []]
PASS: Executing [scrollbarcreate "main "name30 0 [0] 120 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name30 0 [0] 120 10 []] set error string to [scrollbarcreate doesn't like [0] as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name40 0 {0} 120 10 []]
PASS: Executing [scrollbarcreate "main "name40 0 {0} 120 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name40 0 {0} 120 10 []] set error string to [scrollbarcreate doesn't like {0} as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name45 0 10.5 120 10 []]
PASS: Executing [scrollbarcreate "main "name45 0 10.5 120 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name45 0 10.5 120 10 []] set error string to [scrollbarcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name50 0 0 [120] 10 []]
PASS: Executing [scrollbarcreate "main "name50 0 0 [120] 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name50 0 0 [120] 10 []] set error string to [scrollbarcreate doesn't like [120] as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name60 0 0 {120} 10 []]
PASS: Executing [scrollbarcreate "main "name60 0 0 {120} 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name60 0 0 {120} 10 []] set error string to [scrollbarcreate doesn't like {120} as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name70 0 0 -120 10 []]
PASS: Executing [scrollbarcreate "main "name70 0 0 -120 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name70 0 0 -120 10 []] set error string to [scrollbarcreate doesn't like -120 as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name75 0 0 10.5 10 []]
PASS: Executing [scrollbarcreate "main "name75 0 0 10.5 10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name75 0 0 10.5 10 []] set error string to [scrollbarcreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name80 0 0 120 [10] []]
PASS: Executing [scrollbarcreate "main "name80 0 0 120 [10] []] set error code to 7
INFO: Executing [scrollbarcreate "main "name80 0 0 120 [10] []] set error string to [scrollbarcreate doesn't like [10] as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name90 0 0 120 {10} []]
PASS: Executing [scrollbarcreate "main "name90 0 0 120 {10} []] set error code to 7
INFO: Executing [scrollbarcreate "main "name90 0 0 120 {10} []] set error string to [scrollbarcreate doesn't like {10} as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name00 0 0 120 -10 []]
PASS: Executing [scrollbarcreate "main "name00 0 0 120 -10 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name00 0 0 120 -10 []] set error string to [scrollbarcreate doesn't like -10 as input]
INFO: Executing invalid instruction: [scrollbarcreate "main "name05 0 0 120 10.5 []]
PASS: Executing [scrollbarcreate "main "name05 0 0 120 10.5 []] set error code to 7
INFO: Executing [scrollbarcreate "main "name05 0 0 120 10.5 []] set error string to [scrollbarcreate doesn't like 10.5 as input]
CALL: scrollbarcreate "main "goodscrollbar 0 0 100 10 []
INFO: Executing invalid instruction: [scrollbarcreate "main "goodscrollbar 0 0 100 10 []]
PASS: Executing [scrollbarcreate "main "goodscrollbar 0 0 100 10 []] set error code to 16
INFO: Executing [scrollbarcreate "main "goodscrollbar 0 0 100 10 []] set error string to [Stopping...]
CALL: staticcreate "main "notascrollbar [text] 0 100 100 100
INFO: Executing invalid instruction: [(scrollbarenable "goodscrollbar)]
PASS: Executing [(scrollbarenable "goodscrollbar)] set error code to 6 , as expected
INFO: Executing [(scrollbarenable "goodscrollbar)] set error string to [not enough inputs to scrollbarenable]
INFO: Executing invalid instruction: [(scrollbarenable "goodscrollbar "true "toomany)]
PASS: Executing [(scrollbarenable "goodscrollbar "true "toomany)] set error code to 8 , as expected
INFO: Executing [(scrollbarenable "goodscrollbar "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [scrollbarenable "doesnotexist "true]
PASS: Executing [scrollbarenable "doesnotexist "true] set error code to 16
INFO: Executing [scrollbarenable "doesnotexist "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [scrollbarenable "notascrollbar "true]
PASS: Executing [scrollbarenable "notascrollbar "true] set error code to 16
INFO: Executing [scrollbarenable "notascrollbar "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [scrollbarenable "goodscrollbar 1]
PASS: Executing [scrollbarenable "goodscrollbar 1] set error code to 7
INFO: Executing [scrollbarenable "goodscrollbar 1] set error string to [scrollbarenable doesn't like 1 as input]
INFO: Executing invalid instruction: [scrollbarenable "goodscrollbar [true]]
PASS: Executing [scrollbarenable "goodscrollbar [true]] set error code to 7
INFO: Executing [scrollbarenable "goodscrollbar [true]] set error string to [scrollbarenable doesn't like [true] as input]
INFO: Executing invalid instruction: [scrollbarenable "goodscrollbar {true}]
PASS: Executing [scrollbarenable "goodscrollbar {true}] set error code to 7
INFO: Executing [scrollbarenable "goodscrollbar {true}] set error string to [scrollbarenable doesn't like {true} as input]
INFO: Executing invalid instruction: [(scrollbarget)]
PASS: Executing [(scrollbarget)] set error code to 6 , as expected
INFO: Executing [(scrollbarget)] set error string to [not enough inputs to scrollbarget]
INFO: Executing invalid instruction: [(scrollbarget "goodscrollbar "toomany)]
PASS: Executing [(scrollbarget "goodscrollbar "toomany)] set error code to 8 , as expected
INFO: Executing [(scrollbarget "goodscrollbar "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [ignore scrollbarget "nonexistent]
PASS: Executing [ignore scrollbarget "nonexistent] set error code to 16
INFO: Executing [ignore scrollbarget "nonexistent] set error string to [Stopping...]
INFO: Executing invalid instruction: [ignore scrollbarget "notascrollbar]
PASS: Executing [ignore scrollbarget "notascrollbar] set error code to 16
INFO: Executing [ignore scrollbarget "notascrollbar] set error string to [Stopping...]
INFO: Executing invalid instruction: [(scrollbarset "goodscrollbar 0 100)]
PASS: Executing [(scrollbarset "goodscrollbar 0 100)] set error code to 6 , as expected
INFO: Executing [(scrollbarset "goodscrollbar 0 100)] set error string to [not enough inputs to scrollbarset]
INFO: Executing invalid instruction: [(scrollbarset "goodscrollbar 0 100 50 "toomany)]
PASS: Executing [(scrollbarset "goodscrollbar 0 100 50 "toomany)] set error code to 8 , as expected
INFO: Executing [(scrollbarset "goodscrollbar 0 100 50 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [scrollbarset "doesnotexist 0 100 50]
PASS: Executing [scrollbarset "doesnotexist 0 100 50] set error code to 16
INFO: Executing [scrollbarset "doesnotexist 0 100 50] set error string to [Stopping...]
INFO: Executing invalid instruction: [scrollbarset "notascrollbar 0 100 50]
PASS: Executing [scrollbarset "notascrollbar 0 100 50] set error code to 16
INFO: Executing [scrollbarset "notascrollbar 0 100 50] set error string to [Stopping...]
CALL: scrollbarset "goodscrollbar 110 111 110
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar [0] 10 5]
PASS: Executing [scrollbarset "goodscrollbar [0] 10 5] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar [0] 10 5] set error string to [scrollbarset doesn't like [0] as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar {0} 10 5]
PASS: Executing [scrollbarset "goodscrollbar {0} 10 5] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar {0} 10 5] set error string to [scrollbarset doesn't like {0} as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar 0.5 10 5]
PASS: Executing [scrollbarset "goodscrollbar 0.5 10 5] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar 0.5 10 5] set error string to [scrollbarset doesn't like 0.5 as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar "zero 10 5]
PASS: Executing [scrollbarset "goodscrollbar "zero 10 5] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar "zero 10 5] set error string to [scrollbarset doesn't like zero as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar 0 [10] 5]
PASS: Executing [scrollbarset "goodscrollbar 0 [10] 5] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar 0 [10] 5] set error string to [scrollbarset doesn't like [10] as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar 0 {10} 5]
PASS: Executing [scrollbarset "goodscrollbar 0 {10} 5] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar 0 {10} 5] set error string to [scrollbarset doesn't like {10} as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar 0 10.5 5]
PASS: Executing [scrollbarset "goodscrollbar 0 10.5 5] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar 0 10.5 5] set error string to [scrollbarset doesn't like 10.5 as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar 0 "ten [5]]
PASS: Executing [scrollbarset "goodscrollbar 0 "ten [5]] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar 0 "ten [5]] set error string to [scrollbarset doesn't like ten as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar 0 10 {5}]
PASS: Executing [scrollbarset "goodscrollbar 0 10 {5}] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar 0 10 {5}] set error string to [scrollbarset doesn't like {5} as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar 0 10 5.5]
PASS: Executing [scrollbarset "goodscrollbar 0 10 5.5] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar 0 10 5.5] set error string to [scrollbarset doesn't like 5.5 as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar 0 10 "five]
PASS: Executing [scrollbarset "goodscrollbar 0 10 "five] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar 0 10 "five] set error string to [scrollbarset doesn't like five as input]
INFO: Executing invalid instruction: [scrollbarset "goodscrollbar 10 0 5]
PASS: Executing [scrollbarset "goodscrollbar 10 0 5] set error code to 7
INFO: Executing [scrollbarset "goodscrollbar 10 0 5] set error string to [scrollbarset doesn't like 0 as input]
PASS: [scrollbarget "goodscrollbar] returned 110 , as expected.
INFO: Executing invalid instruction: [(scrollbardelete)]
PASS: Executing [(scrollbardelete)] set error code to 6 , as expected
INFO: Executing [(scrollbardelete)] set error string to [not enough inputs to scrollbardelete]
INFO: Executing invalid instruction: [(scrollbardelete "goodscrollbar "toomany)]
PASS: Executing [(scrollbardelete "goodscrollbar "toomany)] set error code to 8 , as expected
INFO: Executing [(scrollbardelete "goodscrollbar "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [scrollbardelete "notascrollbar]
PASS: Executing [scrollbardelete "notascrollbar] set error code to 16
INFO: Executing [scrollbardelete "notascrollbar] set error string to [Stopping...]
INFO: Executing invalid instruction: [scrollbardelete "doesnotexist]
PASS: Executing [scrollbardelete "doesnotexist] set error code to 16
INFO: Executing [scrollbardelete "doesnotexist] set error string to [Stopping...]
CALL: staticdelete "notascrollbar
CALL: scrollbardelete "goodscrollbar
CALL: WINDOWCREATE "main "windowstest.button "mytitle 0 0 100 100 []
CALL: BUTTONCREATE "windowstest.button "button [initial text] 10 40 20 80 []
CALL: BUTTONUPDATE "button [new text]
CALL: BUTTONENABLE "button "false
CALL: BUTTONENABLE "button "false
CALL: BUTTONENABLE "button "true
CALL: BUTTONDELETE "button
CALL: WINDOWDELETE "windowstest.button
INFO: Executing invalid instruction: [(buttoncreate "main "name "label 0 0 100 10)]
PASS: Executing [(buttoncreate "main "name "label 0 0 100 10)] set error code to 6 , as expected
INFO: Executing [(buttoncreate "main "name "label 0 0 100 10)] set error string to [not enough inputs to buttoncreate]
INFO: Executing invalid instruction: [(buttoncreate "main "name "label 0 0 100 10 [] "toomany)]
PASS: Executing [(buttoncreate "main "name "label 0 0 100 10 [] "toomany)] set error code to 8 , as expected
INFO: Executing [(buttoncreate "main "name "label 0 0 100 10 [] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [buttoncreate "main "name10 "label [0] 0 120 10 []]
PASS: Executing [buttoncreate "main "name10 "label [0] 0 120 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name10 "label [0] 0 120 10 []] set error string to [buttoncreate doesn't like [0] as input]
INFO: Executing invalid instruction: [buttoncreate "main "name20 "label {0} 0 120 10 []]
PASS: Executing [buttoncreate "main "name20 "label {0} 0 120 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name20 "label {0} 0 120 10 []] set error string to [buttoncreate doesn't like {0} as input]
INFO: Executing invalid instruction: [buttoncreate "main "name25 "label 10.5 0 120 10 []]
PASS: Executing [buttoncreate "main "name25 "label 10.5 0 120 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name25 "label 10.5 0 120 10 []] set error string to [buttoncreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [buttoncreate "main "name30 "label 0 [0] 120 10 []]
PASS: Executing [buttoncreate "main "name30 "label 0 [0] 120 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name30 "label 0 [0] 120 10 []] set error string to [buttoncreate doesn't like [0] as input]
INFO: Executing invalid instruction: [buttoncreate "main "name40 "label 0 {0} 120 10 []]
PASS: Executing [buttoncreate "main "name40 "label 0 {0} 120 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name40 "label 0 {0} 120 10 []] set error string to [buttoncreate doesn't like {0} as input]
INFO: Executing invalid instruction: [buttoncreate "main "name45 "label 0 10.5 120 10 []]
PASS: Executing [buttoncreate "main "name45 "label 0 10.5 120 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name45 "label 0 10.5 120 10 []] set error string to [buttoncreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [buttoncreate "main "name50 "label 0 0 [120] 10 []]
PASS: Executing [buttoncreate "main "name50 "label 0 0 [120] 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name50 "label 0 0 [120] 10 []] set error string to [buttoncreate doesn't like [120] as input]
INFO: Executing invalid instruction: [buttoncreate "main "name60 "label 0 0 {120} 10 []]
PASS: Executing [buttoncreate "main "name60 "label 0 0 {120} 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name60 "label 0 0 {120} 10 []] set error string to [buttoncreate doesn't like {120} as input]
INFO: Executing invalid instruction: [buttoncreate "main "name70 "label 0 0 -120 10 []]
PASS: Executing [buttoncreate "main "name70 "label 0 0 -120 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name70 "label 0 0 -120 10 []] set error string to [buttoncreate doesn't like -120 as input]
INFO: Executing invalid instruction: [buttoncreate "main "name75 "label 0 0 10.5 10 []]
PASS: Executing [buttoncreate "main "name75 "label 0 0 10.5 10 []] set error code to 7
INFO: Executing [buttoncreate "main "name75 "label 0 0 10.5 10 []] set error string to [buttoncreate doesn't like 10.5 as input]
INFO: Executing invalid instruction: [buttoncreate "main "name80 "label 0 0 120 [10] []]
PASS: Executing [buttoncreate "main "name80 "label 0 0 120 [10] []] set error code to 7
INFO: Executing [buttoncreate "main "name80 "label 0 0 120 [10] []] set error string to [buttoncreate doesn't like [10] as input]
INFO: Executing invalid instruction: [buttoncreate "main "name90 "label 0 0 120 {10} []]
PASS: Executing [buttoncreate "main "name90 "label 0 0 120 {10} []] set error code to 7
INFO: Executing [buttoncreate "main "name90 "label 0 0 120 {10} []] set error string to [buttoncreate doesn't like {10} as input]
INFO: Executing invalid instruction: [buttoncreate "main "name00 "label 0 0 120 -10 []]
PASS: Executing [buttoncreate "main "name00 "label 0 0 120 -10 []] set error code to 7
INFO: Executing [buttoncreate "main "name00 "label 0 0 120 -10 []] set error string to [buttoncreate doesn't like -10 as input]
INFO: Executing invalid instruction: [buttoncreate "main "name05 "label 0 0 120 10.5 []]
PASS: Executing [buttoncreate "main "name05 "label 0 0 120 10.5 []] set error code to 7
INFO: Executing [buttoncreate "main "name05 "label 0 0 120 10.5 []] set error string to [buttoncreate doesn't like 10.5 as input]
CALL: buttoncreate "main "goodbutton "label 0 0 100 10 []
INFO: Executing invalid instruction: [buttoncreate "main "goodbutton "label 0 0 100 10 []]
PASS: Executing [buttoncreate "main "goodbutton "label 0 0 100 10 []] set error code to 16
INFO: Executing [buttoncreate "main "goodbutton "label 0 0 100 10 []] set error string to [Stopping...]
CALL: staticcreate "main "notabutton [text] 0 100 100 100
INFO: Executing invalid instruction: [(buttonenable "goodbutton)]
PASS: Executing [(buttonenable "goodbutton)] set error code to 6 , as expected
INFO: Executing [(buttonenable "goodbutton)] set error string to [not enough inputs to buttonenable]
INFO: Executing invalid instruction: [(buttonenable "goodbutton "true "toomany)]
PASS: Executing [(buttonenable "goodbutton "true "toomany)] set error code to 8 , as expected
INFO: Executing [(buttonenable "goodbutton "true "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [buttonenable "doesnotexist "true]
PASS: Executing [buttonenable "doesnotexist "true] set error code to 16
INFO: Executing [buttonenable "doesnotexist "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [buttonenable "notabutton "true]
PASS: Executing [buttonenable "notabutton "true] set error code to 16
INFO: Executing [buttonenable "notabutton "true] set error string to [Stopping...]
INFO: Executing invalid instruction: [buttonenable "goodbutton 1]
PASS: Executing [buttonenable "goodbutton 1] set error code to 7
INFO: Executing [buttonenable "goodbutton 1] set error string to [buttonenable doesn't like 1 as input]
INFO: Executing invalid instruction: [buttonenable "goodbutton [true]]
PASS: Executing [buttonenable "goodbutton [true]] set error code to 7
INFO: Executing [buttonenable "goodbutton [true]] set error string to [buttonenable doesn't like [true] as input]
INFO: Executing invalid instruction: [buttonenable "goodbutton {true}]
PASS: Executing [buttonenable "goodbutton {true}] set error code to 7
INFO: Executing [buttonenable "goodbutton {true}] set error string to [buttonenable doesn't like {true} as input]
INFO: Executing invalid instruction: [(buttonupdate "goodbutton)]
PASS: Executing [(buttonupdate "goodbutton)] set error code to 6 , as expected
INFO: Executing [(buttonupdate "goodbutton)] set error string to [not enough inputs to buttonupdate]
INFO: Executing invalid instruction: [(buttonupdate "goodbutton "newlabel "toomany)]
PASS: Executing [(buttonupdate "goodbutton "newlabel "toomany)] set error code to 8 , as expected
INFO: Executing [(buttonupdate "goodbutton "newlabel "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [buttonupdate "nonexistent "newlabel]
PASS: Executing [buttonupdate "nonexistent "newlabel] set error code to 16
INFO: Executing [buttonupdate "nonexistent "newlabel] set error string to [Stopping...]
INFO: Executing invalid instruction: [buttonupdate "notabutton "newlabel]
PASS: Executing [buttonupdate "notabutton "newlabel] set error code to 16
INFO: Executing [buttonupdate "notabutton "newlabel] set error string to [Stopping...]
INFO: Executing invalid instruction: [(buttondelete)]
PASS: Executing [(buttondelete)] set error code to 6 , as expected
INFO: Executing [(buttondelete)] set error string to [not enough inputs to buttondelete]
INFO: Executing invalid instruction: [(buttondelete "goodbutton "toomany)]
PASS: Executing [(buttondelete "goodbutton "toomany)] set error code to 8 , as expected
INFO: Executing [(buttondelete "goodbutton "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [buttondelete "notabutton]
PASS: Executing [buttondelete "notabutton] set error code to 16
INFO: Executing [buttondelete "notabutton] set error string to [Stopping...]
INFO: Executing invalid instruction: [buttondelete "doesnotexist]
PASS: Executing [buttondelete "doesnotexist] set error code to 16
INFO: Executing [buttondelete "doesnotexist] set error string to [Stopping...]
CALL: staticdelete "notabutton
CALL: buttondelete "goodbutton
CALL: windowdelete "all
CALL: debugwindows
CALL: windowcreate "root "testwindow [window smoke test] 0 0 120 400 []
CALL: windowstest.setup "testwindow
CALL: debugwindows
CALL: windowdelete "testwindow
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: windowcreate "root :parentname "caption 0 0 100 200 []
CALL: staticcreate :parentname (word "s :parentname) "text 10 10 80 20
CALL: groupboxcreate :parentname (word "g :parentname) 10 30 80 40
CALL: radiobuttoncreate :parentname (word "g :parentname) (word "r :parentname) [Radio] 20 40 60 20
CALL: debugwindows
CALL: (debugwindows word 15 :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWDELETE (word repcount :longname)
CALL: WINDOWCREATE "root "window "caption 0 0 120 400 []
INFO: Executing invalid instruction: [(DEBUGWINDOWS "window "toomany)]
PASS: Executing [(DEBUGWINDOWS "window "toomany)] set error code to 8 , as expected
INFO: Executing [(DEBUGWINDOWS "window "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(DEBUGWINDOWS "doesnotexist)]
PASS: Executing [(DEBUGWINDOWS "doesnotexist)] set error code to 16
INFO: Executing [(DEBUGWINDOWS "doesnotexist)] set error string to [Stopping...]
CALL: WINDOWDELETE "window
PASS: The regression test for an inconsistent dialogthing list did not crash.
CALL: MOUSEOFF
CALL: MOUSEON [] [] [] [] []
CALL: MOUSEON " " " " "
CALL: MOUSEOFF
INFO: Executing invalid instruction: [(MOUSEON [] [] [] [] )]
PASS: Executing [(MOUSEON [] [] [] [] )] set error code to 6 , as expected
INFO: Executing [(MOUSEON [] [] [] [] )] set error string to [not enough inputs to MOUSEON]
INFO: Executing invalid instruction: [(MOUSEON [] [] [] [] [] "toomany)]
PASS: Executing [(MOUSEON [] [] [] [] [] "toomany)] set error code to 8 , as expected
INFO: Executing [(MOUSEON [] [] [] [] [] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(MOUSEOFF "toomany)]
PASS: Executing [(MOUSEOFF "toomany)] set error code to 8 , as expected
INFO: Executing [(MOUSEOFF "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(MOUSEPOS "toomany)]
PASS: Executing [(MOUSEPOS "toomany)] set error code to 8 , as expected
INFO: Executing [(MOUSEPOS "toomany)] set error string to [too much inside ()'s]
CALL: IGNORE MIDIOPEN
INFO: Executing invalid instruction: [IGNORE MIDIOPEN]
PASS: Executing [IGNORE MIDIOPEN] set error code to 16
INFO: Executing [IGNORE MIDIOPEN] set error string to [Stopping...]
CALL: MIDICLOSE
INFO: Executing invalid instruction: [IGNORE (MIDIOPEN "badinput)]
PASS: Executing [IGNORE (MIDIOPEN "badinput)] set error code to 7
INFO: Executing [IGNORE (MIDIOPEN "badinput)] set error string to [MIDIOPEN doesn't like badinput as input]
CALL: IGNORE MIDIOPEN
FAIL: [IGNORE MIDIOPEN] threw error.  code= 16 . [Stopping...]
CALL: MIDICLOSE
INFO: Executing invalid instruction: [IGNORE (MIDIOPEN [1 2 3] )]
PASS: Executing [IGNORE (MIDIOPEN [1 2 3] )] set error code to 7
INFO: Executing [IGNORE (MIDIOPEN [1 2 3] )] set error string to [MIDIOPEN doesn't like [1 2 3] as input]
CALL: IGNORE MIDIOPEN
FAIL: [IGNORE MIDIOPEN] threw error.  code= 16 . [Stopping...]
CALL: MIDICLOSE
INFO: Executing invalid instruction: [IGNORE (MIDIOPEN {1 2 3} )]
PASS: Executing [IGNORE (MIDIOPEN {1 2 3} )] set error code to 7
INFO: Executing [IGNORE (MIDIOPEN {1 2 3} )] set error string to [MIDIOPEN doesn't like {1 2 3} as input]
CALL: IGNORE MIDIOPEN
FAIL: [IGNORE MIDIOPEN] threw error.  code= 16 . [Stopping...]
CALL: MIDICLOSE
INFO: Executing invalid instruction: [IGNORE (MIDIOPEN 500)]
PASS: Executing [IGNORE (MIDIOPEN 500)] set error code to 16
INFO: Executing [IGNORE (MIDIOPEN 500)] set error string to [Stopping...]
CALL: IGNORE MIDIOPEN
CALL: MIDICLOSE
INFO: Executing invalid instruction: [(MIDIOPEN 0 "toomany)]
PASS: Executing [(MIDIOPEN 0 "toomany)] set error code to 8 , as expected
INFO: Executing [(MIDIOPEN 0 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [(MIDICLOSE "toomany)]
PASS: Executing [(MIDICLOSE "toomany)] set error code to 8 , as expected
INFO: Executing [(MIDICLOSE "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [MIDICLOSE]
PASS: Executing [MIDICLOSE] set error code to 16
INFO: Executing [MIDICLOSE] set error string to [Stopping...]
CALL: IGNORE MIDIOPEN
INFO: Executing invalid instruction: [(MIDIMESSAGE)]
PASS: Executing [(MIDIMESSAGE)] set error code to 6 , as expected
INFO: Executing [(MIDIMESSAGE)] set error string to [not enough inputs to MIDIMESSAGE]
INFO: Executing invalid instruction: [(MIDIMESSAGE [176 123 0] "toomany)]
PASS: Executing [(MIDIMESSAGE [176 123 0] "toomany)] set error code to 8 , as expected
INFO: Executing [(MIDIMESSAGE [176 123 0] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [MIDIMESSAGE "176 123 0]
PASS: Executing [MIDIMESSAGE "176 123 0] set error code to 16
INFO: Executing [MIDIMESSAGE "176 123 0] set error string to [Stopping...]
INFO: Executing invalid instruction: [MIDIMESSAGE {176 123 0}]
PASS: Executing [MIDIMESSAGE {176 123 0}] set error code to 16
INFO: Executing [MIDIMESSAGE {176 123 0}] set error string to [Stopping...]
INFO: Executing invalid instruction: [MIDIMESSAGE [176 123]]
FAIL: Executing [MIDIMESSAGE [176 123]] did not throw an error
INFO: Executing invalid instruction: [MIDIMESSAGE [176 123 0 0]]
FAIL: Executing [MIDIMESSAGE [176 123 0 0]] did not throw an error
INFO: Executing invalid instruction: [MIDIMESSAGE [176 onetwothree 0]]
PASS: Executing [MIDIMESSAGE [176 Unbound 0]] set error code to 7
INFO: Executing [MIDIMESSAGE [176 Unbound 0]] set error string to [MIDIMESSAGE doesn't like onetwothree as input]
INFO: Executing invalid instruction: [MIDIMESSAGE [176 [123] 0]]
PASS: Executing [MIDIMESSAGE [176 Unbound 0]] set error code to 7
INFO: Executing [MIDIMESSAGE [176 Unbound 0]] set error string to [MIDIMESSAGE doesn't like [123] as input]
INFO: Executing invalid instruction: [MIDIMESSAGE [176 {123} 0]]
PASS: Executing [MIDIMESSAGE [176 Unbound 0]] set error code to 7
INFO: Executing [MIDIMESSAGE [176 Unbound 0]] set error string to [MIDIMESSAGE doesn't like {123} as input]
CALL: MIDICLOSE
INFO: Executing invalid instruction: [(SOUND)]
PASS: Executing [(SOUND)] set error code to 6 , as expected
INFO: Executing [(SOUND)] set error string to [not enough inputs to SOUND]
INFO: Executing invalid instruction: [(SOUND [100 100] "toomany)]
PASS: Executing [(SOUND [100 100] "toomany)] set error code to 8 , as expected
INFO: Executing [(SOUND [100 100] "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [SOUND "string]
PASS: Executing [SOUND "string] set error code to 16
INFO: Executing [SOUND "string] set error string to [Stopping...]
INFO: Executing invalid instruction: [SOUND {100 100}]
PASS: Executing [SOUND {100 100}] set error code to 16
INFO: Executing [SOUND {100 100}] set error string to [Stopping...]
INFO: Executing invalid instruction: [SOUND [100]]
PASS: Executing [SOUND [100]] set error code to 16
INFO: Executing [SOUND [100]] set error string to [Stopping...]
INFO: Executing invalid instruction: [SOUND [100 100 100]]
PASS: Executing [SOUND [100 100 100]] set error code to 16
INFO: Executing [SOUND [100 100 100]] set error string to [Stopping...]
INFO: Executing invalid instruction: [SOUND []]
PASS: Executing [SOUND []] set error code to 16
INFO: Executing [SOUND []] set error string to [Stopping...]
INFO: Executing invalid instruction: [SOUND [100 string]]
PASS: Executing [SOUND [100 Unbound]] set error code to 7
INFO: Executing [SOUND [100 Unbound]] set error string to [SOUND doesn't like string as input]
INFO: Executing invalid instruction: [SOUND [100 [100]]]
PASS: Executing [SOUND [100 Unbound]] set error code to 7
INFO: Executing [SOUND [100 Unbound]] set error string to [SOUND doesn't like [100] as input]
INFO: Executing invalid instruction: [SOUND [100.5 100.0]]
PASS: Executing [SOUND [Unbound 100]] set error code to 7
INFO: Executing [SOUND [Unbound 100]] set error string to [SOUND doesn't like 100.5 as input]
INFO: Executing invalid instruction: [SOUND [100.0 100.5]]
PASS: Executing [SOUND [100 Unbound]] set error code to 7
INFO: Executing [SOUND [100 Unbound]] set error string to [SOUND doesn't like 100.5 as input]
INFO: Executing invalid instruction: [(TONE 100)]
PASS: Executing [(TONE 100)] set error code to 6 , as expected
INFO: Executing [(TONE 100)] set error string to [not enough inputs to TONE]
INFO: Executing invalid instruction: [(TONE 100 100 "toomany)]
PASS: Executing [(TONE 100 100 "toomany)] set error code to 8 , as expected
INFO: Executing [(TONE 100 100 "toomany)] set error string to [too much inside ()'s]
INFO: Executing invalid instruction: [TONE [100] 100]
PASS: Executing [TONE [100] 100] set error code to 7
INFO: Executing [TONE [100] 100] set error string to [TONE doesn't like [100] as input]
INFO: Executing invalid instruction: [TONE {100} 100]
PASS: Executing [TONE {100} 100] set error code to 7
INFO: Executing [TONE {100} 100] set error string to [TONE doesn't like {100} as input]
INFO: Executing invalid instruction: [TONE "ten 100]
PASS: Executing [TONE "ten 100] set error code to 7
INFO: Executing [TONE "ten 100] set error string to [TONE doesn't like ten as input]
INFO: Executing invalid instruction: [TONE 100 [100]]
PASS: Executing [TONE 100 [100]] set error code to 7
INFO: Executing [TONE 100 [100]] set error string to [TONE doesn't like [100] as input]
INFO: Executing invalid instruction: [TONE 100 {100}]
PASS: Executing [TONE 100 {100}] set error code to 7
INFO: Executing [TONE 100 {100}] set error string to [TONE doesn't like {100} as input]
INFO: Executing invalid instruction: [TONE 100 "ten]
PASS: Executing [TONE 100 "ten] set error code to 7
INFO: Executing [TONE 100 "ten] set error string to [TONE doesn't like ten as input]
CALL: (NETSTARTUP 1)
CALL: IGNORE NETCONNECTON "localhost 9999 [] []
CALL: NETSHUTDOWN
CALL: NETSHUTDOWN
CALL: NETSTARTUP
PASS: [NETACCEPTON :localport [MAKE "onsendreadycounter :onsendreadycounter + 1] [QUEUE "server.data NETACCEPTRECEIVEVALUE]] returned true , as expected.
CALL: WAIT 60 * 2
PASS: [SHELL [perl.exe sendtologo.pl DAVID-LAPTOP 1234]] returned true , as expected.
CALL: WAIT 60 * 2
CALL: NETACCEPTOFF
CALL: NETSHUTDOWN
FAIL: [:onsendreadycounter] returned 4 . We expected 3
PASS: [:server.data] returned [[hello]] , as expected.
PASS: [NETACCEPTON :localport [] [QUEUE "server.data NETACCEPTRECEIVEVALUE]] returned true , as expected.
PASS: [SHELL [perl.exe sendtologo.pl DAVID-LAPTOP 2222]] returned true , as expected.
PASS: [SHELL [perl.exe sendtologo.pl DAVID-LAPTOP 2222]] returned true , as expected.
FAIL: [:server.data] returned [[hello]] . We expected [[Hello] [Hello]]
CALL: NETSTARTUP
PASS: [NETACCEPTON 1234 [] []] returned true , as expected.
CALL: NETSHUTDOWN
PASS: [SHELL [perl.exe networkserver.pl simple 5556]] returned true , as expected.
CALL: WAIT 60
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME :remoteport [] [QUEUE "client.data NETCONNECTRECEIVEVALUE]] returned true , as expected.
CALL: WAIT 60*2
CALL: NETCONNECTOFF
CALL: NETSHUTDOWN
PASS: [:client.data] returned [[hello]] , as expected.
PASS: [SHELL [perl.exe networkserver.pl echo 5557]] returned true , as expected.
CALL: WAIT 60
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME :remoteport [MAKE "onsendreadycounter :onsendreadycounter + 1] [QUEUE "client.data NETCONNECTRECEIVEVALUE]] returned true , as expected.
CALL: WAIT 60*2
PASS: [NETCONNECTSENDVALUE "yodle] returned true , as expected.
PASS: [NETCONNECTSENDVALUE "XXXXX] returned false , as expected.
CALL: WAIT 60*2
CALL: NETCONNECTOFF
CALL: NETSHUTDOWN
PASS: [:onsendreadycounter] returned 4 , as expected.
PASS: [:client.data] returned [[yodle]] , as expected.
PASS: [SHELL [perl.exe networkserver.pl nonul 5555]] returned true , as expected.
CALL: WAIT 60
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME :remoteport [] [QUEUE "client.data NETCONNECTRECEIVEVALUE]] returned true , as expected.
CALL: WAIT 60*2
CALL: NETCONNECTOFF
CALL: NETSHUTDOWN
PASS: [:client.data] returned [[Hello]] , as expected.
PASS: [SHELL [perl.exe networkserver.pl largepacket 5556]] returned true , as expected.
CALL: WAIT 60
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME :remoteport [MAKE "onsendreadycounter :onsendreadycounter + 1] [QUEUE "client.data ITEM 1 NETCONNECTRECEIVEVALUE]] returned true , as expected.
CALL: WAIT 60*2
CALL: NETCONNECTOFF
CALL: NETSHUTDOWN
FAIL: [:onsendreadycounter] returned 4 . We expected 3
PASS: [APPLY "WORD :client.data] returned  , as expected.
CALL: NETSTARTUP
PASS: [NETCONNECTON NETWORKTEST.HOSTNAME 4444 [] []] returned true , as expected.
CALL: NETSHUTDOWN
