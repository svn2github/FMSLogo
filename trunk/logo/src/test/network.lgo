LOAD "testlib.lgo

TO NETWORKTEST.HOSTNAME
   OUTPUT "|DAVID-LAPTOP| 
END

TO SERVER.START :port
  SHOW NETACCEPTON :port [print [ready to send]] [print (list "|Received:| NETCONNECTRECEIVEVALUE)]
END

TO SERVER.STOP
  NETACCEPTOFF
END


TO CLIENT.ONREADYTOSEND
  LOCALMAKE "payload [This is my payload]

  make "NetConnectOnCall :NetConnectOnCall + 1
  (print "Client.OnReadySend "call "# :NetConnectOnCall)

  if :NetConnectOnCall > 2 [
     (print "Sending: :payload)
     LOCALMAKE "isok NETCONNECTSENDVALUE :payload 
     (print "Send "Status: :isok)
  ]

  WAIT 100
END

TO NETWORKTEST.SMOKETEST

  NETSTARTUP

  SERVER.START 5960

  ; connect to port 5960 on localhost
  make "NetConnectOnCall 0

  (print "Connecting)
  localmake "isok NETCONNECTON NETWORKTEST.HOSTNAME 5960 "CLIENT.ONREADYTOSEND []
  (print "Connect "Status: :isok)

  WAIT 600 ; 10 seconds

  ; close the client socket
  NETCONNECTOFF

  SERVER.STOP

  NETSHUTDOWN
END

TO NETWORKTEST.NETSHUTDOWNCRASH
  (NETSTARTUP 1) ; must be synchronous
  IGNORE  NETCONNECTON "localhost 9999 [] []
  NETSHUTDOWN
  NETSHUTDOWN ; crashes (bug #1367352)
END


TO NETWORKTEST.SERVER.RECEIVEUNFRAMEDPACKET

   LOCAL [localport server.data shellcommand]

   MAKE "localport   1234
   MAKE "server.data []

   ; start the server
   NETSTARTUP
   SIMPLEREPORTTEST [ NETACCEPTON :localport [] [QUEUE "server.data NETACCEPTRECEIVEVALUE ]] "true

   WAIT 60*2

   ; spawn a client to send some data such that the data not end in NUL.
   ; This is a regression test for bug #1367386, which sent FMSLogo into a tight loop
   MAKE "shellcommand (SENTENCE [perl.exe sendtologo.pl] NETWORKTEST.HOSTNAME :localport)
   SIMPLEREPORTTEST [ SHELL :shellcommand ] "true
 
   ; wait two seconds for the network connection
   WAIT 60*2

   ; shutdown the server
   NETACCEPTOFF
   NETSHUTDOWN

   ; verify that we received the expected data
   SIMPLEREPORTTEST [:server.data] [[hello]]

END

TO NETWORKTEST.SERVER.TWOCONNECTIONS

   LOCALMAKE "localport 2222

   ; start the server
   NETSTARTUP
   IGNORE NETACCEPTON :localport [] []

   ; spawn a client to open a connection to the server
   IGNORE SHELL (SENTENCE [perl.exe sendtologo.pl] NETWORKTEST.HOSTNAME :localport)

   ; spawn a client to open a second connection to the server
   IGNORE SHELL (SENTENCE [perl.exe sendtologo.pl] NETWORKTEST.HOSTNAME :localport)
 
   ; wait two seconds for the network connection
   WAIT 60*2

   NETACCEPTOFF

   NETSHUTDOWN

END

TO NETWORKTEST.CLIENT.RECEIVEUNFRAMEDPACKET

   LOCAL [localport client.data shellcommand]

   MAKE "remoteport  5555
   MAKE "client.data []

   ; spawn a server
   MAKE "shellcommand (SENTENCE [perl.exe networkserver.pl] :remoteport)
   SIMPLEREPORTTEST [ SHELL :shellcommand ] "true

   ; connect the client to the server
   NETSTARTUP
   IGNORE NETCONNECTON NETWORKTEST.HOSTNAME :remoteport [] [QUEUE "client.data NETCONNECTRECEIVEVALUE]

   ; wait two seconds for the network connection
   WAIT 60*2

   NETCONNECTOFF
   NETSHUTDOWN

   SIMPLEREPORTTEST [:client.data] [[Hello]]
END

TO NETWORKTEST.SHUTDOWNRACE

   ; start the network system
   NETSTARTUP

   ; start a server.  This scheduled an asynchronous callback.
   IGNORE NETACCEPTON 1234 [] []

   ; immediately shutdown (before the server's sendready gets called)
   ; this forces a race condition where the WSAAsyncGetHostByName message
   ; comes in after the network subsystem has been shut down.
   ; This is a regression test for bug #1522350, which is a crash.
   NETSHUTDOWN

END

TO NETWORKTEST

  NETWORKTEST.SMOKETEST
  NETWORKTEST.NETSHUTDOWNCRASH
  ; NETWORKTEST.SHUTDOWNRACE

  NETWORKTEST.SERVER.RECEIVEUNFRAMEDPACKET
  NETWORKTEST.SERVER.TWOCONNECTIONS

  NETWORKTEST.CLIENT.RECEIVEUNFRAMEDPACKET

END
