LOAD "testlib.lgo

TO .EQTEST
  LOCALMAKE "x 1000
  LOCALMAKE "y 1000

  SIMPLEREPORTTEST [.EQ 1000 1000] "false
  SIMPLEREPORTTEST [.EQ :x   :y  ] "false
  SIMPLEREPORTTEST [.EQ :x   :x  ] "true

  ; test singleton objects that are globally unique
  SIMPLEREPORTTEST [.EQ "||    "||    ] "true
  SIMPLEREPORTTEST [.EQ "false "false ] "true
  SIMPLEREPORTTEST [.EQ "true  "true  ] "true
  SIMPLEREPORTTEST [.EQ []     []     ] "true

  RUNNOTENOUGHINPUTSTEST [(.EQ)]
  RUNNOTENOUGHINPUTSTEST [(.EQ 1)]
  RUNTOOMANYINPUTSTEST   [(.EQ 1 1 "toomany)]
END

TO EQUALPTEST.SMOKETEST

  LOCAL "CASEIGNOREDP

  MAKE "CASEIGNOREDP "TRUE

  LOCAL "myarray
  SIMPLEREPORTTEST [EQUALP 1    1                      ] "true
  SIMPLEREPORTTEST [EQUALP 0    0                      ] "true
  SIMPLEREPORTTEST [EQUALP 3.14 3.14                   ] "true
  SIMPLEREPORTTEST [EQUALP "hi  "hi                    ] "true
  SIMPLEREPORTTEST [EQUAL? ["a 1 "ab]    ["a 1 "ab]    ] "true
  SIMPLEREPORTTEST [EQUAL? [[1 2 3] [1]] [[1 2 3] [1]] ] "true
  SIMPLEREPORTTEST [EQUAL? 0 0                         ] "true
  SIMPLEREPORTTEST [EQUALP "||  "||                    ] "true
  SIMPLEREPORTTEST [EQUALP "true  "TRUE                ] "true
  SIMPLEREPORTTEST [EQUALP "false "FALSE               ] "true
  SIMPLEREPORTTEST [EQUALP "HELLO "hello               ] "true
  SIMPLEREPORTTEST [EQUALP "hello "HELLO               ] "true
  SIMPLEREPORTTEST [EQUALP "HELLO "HELLO               ] "true
  SIMPLEREPORTTEST [EQUALP "hello "hello               ] "true

  MAKE "myarray {1 2 3}
  SIMPLEREPORTTEST [EQUAL? :myarray :myarray           ] "true

  MAKE "myarray {}
  SIMPLEREPORTTEST [EQUAL? :myarray :myarray           ] "true

  ; arrays are never equal to other arrays
  SIMPLEREPORTTEST [EQUAL? {} {}                       ] "false
  SIMPLEREPORTTEST [EQUAL? {1 2 3} {1 2 3}             ] "false

  SIMPLEREPORTTEST [EQUALP 1       1.1                 ] "false
  SIMPLEREPORTTEST [EQUALP 0       1                   ] "false
  SIMPLEREPORTTEST [EQUALP "hi     "hil                ] "false
  SIMPLEREPORTTEST [EQUALP "hil    "hi                 ] "false
  SIMPLEREPORTTEST [EQUALP "true   "false              ] "false
  SIMPLEREPORTTEST [EQUALP []      "false              ] "false
  SIMPLEREPORTTEST [EQUALP "false  []                  ] "false
  SIMPLEREPORTTEST [EQUALP [1 2]   [1 2 3]             ] "false
  SIMPLEREPORTTEST [EQUALP [1 2 3] [1 2]               ] "false
  SIMPLEREPORTTEST [EQUALP {1}     [1]                 ] "false
  SIMPLEREPORTTEST [EQUALP [1]     {1}                 ] "false


  ; now test case-sensitive searching
  TRACEINSTRUCTION [MAKE "CASEIGNOREDP "false]

  ; true and false don't obey the rules of caseignoredp
  SIMPLEREPORTTEST [EQUALP "true  "true                ] "true
  SIMPLEREPORTTEST [EQUALP "false "false               ] "true
  SIMPLEREPORTTEST [EQUALP "true  "TRUE                ] "true
  SIMPLEREPORTTEST [EQUALP "false "FALSE               ] "true

  SIMPLEREPORTTEST [EQUALP "HELLO "hello               ] "false
  SIMPLEREPORTTEST [EQUALP "hello "HELLO               ] "false
  SIMPLEREPORTTEST [EQUALP "HELLO "HELLO               ] "true
  SIMPLEREPORTTEST [EQUALP "hello "hello               ] "true

END

TO EQUALPTEST.DEEPLYNESTEDLIST

  LOCALMAKE "nestedlist1 []
  REPEAT 50000 [ MAKE "nestedlist1 FPUT :nestedlist1 [] ]

  LOCALMAKE "nestedlist2 []
  REPEAT 50000 [ MAKE "nestedlist2 FPUT :nestedlist2 [] ]

  SIMPLEREPORTTEST [EQUALP :nestedlist1 :nestedlist2] "true
  
END

TO EQUALPTEST.BADINPUT
  RUNNOTENOUGHINPUTSTEST [(EQUAL?)]
  RUNNOTENOUGHINPUTSTEST [(EQUAL? 1)]
  RUNTOOMANYINPUTSTEST   [(EQUAL? 1 1 "toomany)]
END

TO EQUALPTEST.INTERNATIONAL

  ; Test uppercase/lowercase string comparisons for character 
  ; from Latin-1 set that are not in ASCII

  ; NOTE: We can't put the characters in here directly or else this
  ;       won't look like a text file to CVS, so we use their numeric value
  local [pairs lowercase capital]

  make "pairs [
    [253 221]
    [241 209]
    [225 193]
    [226 194]
    [227 195]
    [228 196]
    [231 199]
    [232 200]
    [233 201]
    [234 202]
    [235 203]
    [236 204]
    [237 205]
    [238 206]
    [239 207]
    [240 208]
    [241 209]
    [243 211]
    [244 212]
    [245 213]
    [246 214]
    [248 216]
    [249 217]
  ]

  foreach :pairs [
     make "lowercase CHAR (ITEM 1 ?)
     make "capital   CHAR (ITEM 2 ?)

     make "word1 (WORD "" :lowercase :capital)
     make "word2 (WORD "" :capital   :lowercase)

     SIMPLEREPORTTEST (LIST "EQUALP :word1 :word2) "true
  ]

END

TO EQUALPTEST
  EQUALPTEST.SMOKETEST
  ;EQUALPTEST.DEEPLYNESTEDLIST
  EQUALPTEST.INTERNATIONAL
  EQUALPTEST.BADINPUT
END

TO EMPTYPTEST
  SIMPLEREPORTTEST [EMPTYP [] ]  "true
  SIMPLEREPORTTEST [EMPTY? [] ]  "true
  SIMPLEREPORTTEST [EMPTY? [1]]  "false
  SIMPLEREPORTTEST [EMPTY? [0]]  "false
  SIMPLEREPORTTEST [EMPTY? 0]    "false
  SIMPLEREPORTTEST [EMPTY? "||]  "true
  SIMPLEREPORTTEST [EMPTY? "| |] "false

  SIMPLEREPORTTEST [EMPTY? {}]   "false

  RUNNOTENOUGHINPUTSTEST [(EMPTY?)]
  RUNTOOMANYINPUTSTEST   [(EMPTY? [] "toomany)]
END

TO NUMBERPTEST
  SIMPLEREPORTTEST [NUMBERP 1     ] "true
  SIMPLEREPORTTEST [NUMBER? 1     ] "true
  SIMPLEREPORTTEST [NUMBER? 0     ] "true
  SIMPLEREPORTTEST [NUMBER? -1    ] "true
  SIMPLEREPORTTEST [NUMBER? 3.14  ] "true
  SIMPLEREPORTTEST [NUMBER? "1    ] "true
  SIMPLEREPORTTEST [NUMBER? "-1   ] "true
  SIMPLEREPORTTEST [NUMBER? "3.14 ] "true

  SIMPLEREPORTTEST [NUMBER? {}]   "false
  SIMPLEREPORTTEST [NUMBER? {2}]  "false
  SIMPLEREPORTTEST [NUMBER? []]   "false
  SIMPLEREPORTTEST [NUMBER? [1]]  "false
  SIMPLEREPORTTEST [NUMBER? "one] "false
  SIMPLEREPORTTEST [NUMBER? "1A]  "false
  SIMPLEREPORTTEST [NUMBER? "||]  "false

  RUNNOTENOUGHINPUTSTEST [(NUMBER?)]
  RUNTOOMANYINPUTSTEST   [(NUMBER? 1 "toomany)]
END

TO LISTPTEST
  SIMPLEREPORTTEST [LISTP [1 2 3] ] "true
  SIMPLEREPORTTEST [LIST? [1 2 3] ] "true
  SIMPLEREPORTTEST [LIST? []      ] "true

  SIMPLEREPORTTEST [LIST? "list   ] "false
  SIMPLEREPORTTEST [LIST? "|[1]|  ] "false
  SIMPLEREPORTTEST [LIST? 1       ] "false
  SIMPLEREPORTTEST [LIST? 3.14    ] "false
  SIMPLEREPORTTEST [LIST? {1}     ] "false
  SIMPLEREPORTTEST [LIST? {}      ] "false
  SIMPLEREPORTTEST [LIST? "||     ] "false

  RUNNOTENOUGHINPUTSTEST [(LIST?)]
  RUNTOOMANYINPUTSTEST   [(LIST? [] "toomany)]
END

TO WORDPTEST
  SIMPLEREPORTTEST [WORDP "hello ] "true
  SIMPLEREPORTTEST [WORD? "hello ] "true
  SIMPLEREPORTTEST [WORD? 123    ] "true
  SIMPLEREPORTTEST [WORD? 3.14   ] "true
  SIMPLEREPORTTEST [WORD? "||    ] "true
  SIMPLEREPORTTEST [WORD? "|[1]| ] "true

  SIMPLEREPORTTEST [WORD? []       ] "false
  SIMPLEREPORTTEST [WORD? ["hello] ] "false
  SIMPLEREPORTTEST [WORD? {}       ] "false
  SIMPLEREPORTTEST [WORD? {"hello} ] "false

  RUNNOTENOUGHINPUTSTEST [(WORD?)]
  RUNTOOMANYINPUTSTEST   [(WORD? [] "toomany)]
END

TO ARRAYPTEST
  SIMPLEREPORTTEST [ARRAYP {1 2 3} ] "true
  SIMPLEREPORTTEST [ARRAY? {1 2 3} ] "true
  SIMPLEREPORTTEST [ARRAY? {}      ] "true

  SIMPLEREPORTTEST [ARRAY? "word   ] "false
  SIMPLEREPORTTEST [ARRAY? "|{}|   ] "false
  SIMPLEREPORTTEST [ARRAY? 1       ] "false
  SIMPLEREPORTTEST [ARRAY? 3.14    ] "false
  SIMPLEREPORTTEST [ARRAY? [1]     ] "false
  SIMPLEREPORTTEST [ARRAY? []      ] "false
  SIMPLEREPORTTEST [ARRAY? "||     ] "false

  RUNNOTENOUGHINPUTSTEST [(ARRAY?)]
  RUNTOOMANYINPUTSTEST   [(ARRAY? {1} "toomany)]
END

TO MEMBERPTEST
  SIMPLEREPORTTEST [MEMBERP 2 [1 2 3] ] "true
  SIMPLEREPORTTEST [MEMBER? 2 [1 2 3] ] "true

  SIMPLEREPORTTEST [MEMBER? 1   [1]           ] "true
  SIMPLEREPORTTEST [MEMBER? 1   [1 1 1]       ] "true
  SIMPLEREPORTTEST [MEMBER? 0   [1 2 3]       ] "false
  SIMPLEREPORTTEST [MEMBER? [2] [[1] [2] [3]] ] "true
  SIMPLEREPORTTEST [MEMBER? 2   [[1] [2] [3]] ] "false
  SIMPLEREPORTTEST [MEMBER? [2] [1 2 3]       ] "false
  SIMPLEREPORTTEST [MEMBER? 1   []            ] "false

  SIMPLEREPORTTEST [MEMBER? 1   {1}        ] "true
  SIMPLEREPORTTEST [MEMBER? 1   {1 1 1}    ] "true
  SIMPLEREPORTTEST [MEMBER? 12  {11 12 13} ] "true
  SIMPLEREPORTTEST [MEMBER? 12  {}         ] "false

  SIMPLEREPORTTEST [MEMBER? 1   123  ] "true
  SIMPLEREPORTTEST [MEMBER? 4   123  ] "false
  SIMPLEREPORTTEST [MEMBER? 23  123  ] "false
  SIMPLEREPORTTEST [MEMBER? 1   "||  ] "false
  SIMPLEREPORTTEST [MEMBER? [1] "123 ] "false

  SIMPLEREPORTTEST [MEMBER? "|| "hello     ] "false
  SIMPLEREPORTTEST [MEMBER? "|| (LIST "||) ] "true

  LOCALMAKE "arrayofemptystring ARRAY 1
  SETITEM 1 :arrayofemptystring "||
  SIMPLEREPORTTEST [MEMBER? "|| :arrayofemptystring ] "true

  RUNNOTENOUGHINPUTSTEST [(MEMBER?)]
  RUNNOTENOUGHINPUTSTEST [(MEMBER? 1)]
  RUNTOOMANYINPUTSTEST   [(MEMBER? 2 [1 2 3] "toomany)]
END

TO BEFOREPTEST 

  MAKE "CASEIGNOREDP "TRUE

  SIMPLEREPORTTEST [BEFOREP "ABC "ABD ] "true
  SIMPLEREPORTTEST [BEFORE? "ABC "ABD ] "true
  SIMPLEREPORTTEST [BEFORE? "ABD "ABC ] "false
  SIMPLEREPORTTEST [BEFORE? "ABC "ABC ] "false

  SIMPLEREPORTTEST [BEFORE? "ABC  "ABCD ] "true
  SIMPLEREPORTTEST [BEFORE? "ABCD "ABC  ] "false

  SIMPLEREPORTTEST [BEFORE? "||  "A]    "true
  SIMPLEREPORTTEST [BEFORE? "Z   "||]   "false
 
  RUNNOTENOUGHINPUTSTEST [(BEFORE?)]
  RUNNOTENOUGHINPUTSTEST [(BEFORE? "ABC)]
  RUNBADINPUTTEST        [(BEFORE? "ABC [])]
  RUNBADINPUTTEST        [(BEFORE? []   "ABC)]
  RUNTOOMANYINPUTSTEST   [(BEFORE? "ABC "ABC "toomany)]
END

TO PREDICATETEST

  .EQTEST
  EQUALPTEST

  EMPTYPTEST
  NUMBERPTEST
  LISTPTEST
  WORDPTEST  
  ARRAYPTEST
  MEMBERPTEST
  BEFOREPTEST
END
